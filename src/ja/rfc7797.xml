<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-jose-jws-signing-input-options-09" indexInclude="true" number="7797" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-jose-jws-signing-input-options-09" rel="prev"/>
<link href="https://dx.doi.org/10.17487/rfc7797" rel="alternate"/>
  <front>
    <title>JSON Web Signature (JWS) Unencoded Payload Option</title>
    <seriesInfo name="RFC" value="7797" stream="IETF"/>
    <date year="2016" month="February"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">JSON Web Signature (JWS) represents the payload of a JWS as a
base64url-encoded value and uses this value in the JWS Signature
computation.  While this enables arbitrary payloads to be integrity
protected, some have described use cases in which the base64url
encoding is unnecessary and/or an impediment to adoption, especially
when the payload is large and/or detached.  This specification
defines a means of accommodating these use cases by defining an
option to change the JWS Signing Input computation to not base64url-
encode the payload.  This option is intended to broaden the set of
use cases for which the use of JWS is a good fit.</t>
      <t indent="0" pn="section-abstract-2">This specification updates RFC 7519 by stating that JSON Web Tokens
(JWTs) MUST NOT use the unencoded payload option defined by this
specification.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1.1">This is an Internet Standards Track document.</t>
        <t indent="0" pn="section-boilerplate.1.2">This document is a product of the Internet Engineering Task Force
(IETF).  It represents the consensus of the IETF community.  It has
received public review and has been approved for publication by the
Internet Engineering Steering Group (IESG).  Further information on
Internet Standards is available in Section 2 of RFC 5741.</t>
        <t indent="0" pn="section-boilerplate.1.3">Information about the current status of this document, any errata,
and how to provide feedback on it may be obtained at
http://www.rfc-editor.org/info/rfc7797.</t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">Copyright (c) 2016 IETF Trust and the persons identified as the
document authors.  All rights reserved.</t>
        <t indent="0" pn="section-boilerplate.2-2">This document is subject to BCP 78 and the IETF Trust's Legal
Provisions Relating to IETF Documents
(http://trustee.ietf.org/license-info) in effect on the date of
publication of this document.  Please review these documents
carefully, as they describe your rights and restrictions with respect
to this document.  Code Components extracted from this document must
include Simplified BSD License text as described in Section 4.e of
the Trust Legal Provisions and are provided without warranty as
described in the Simplified BSD License.</t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
            <li pn="section-toc.1-1.1.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">Notational Conventions</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-&quot;b64&quot;-header-parameter">The &quot;b64&quot; Header Parameter</xref></t>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples">Examples</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
            <li pn="section-toc.1-1.4.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-with-header-parameters-{&quot;alg&quot;:&quot;hs256&quot;}">Example with Header Parameters {&quot;alg&quot;:&quot;HS256&quot;}</xref></t>
            </li>
            <li pn="section-toc.1-1.4.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-with-header-parameters">Example with Header Parameters {&quot;alg&quot;:&quot;HS256&quot;,&quot;b64&quot;:false,&quot;crit&quot;:[&quot;b64&quot;]}</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unencoded-payload-content-restrictions">Unencoded Payload Content Restrictions</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
            <li pn="section-toc.1-1.5.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unencoded-detached-payload">Unencoded Detached Payload</xref></t>
            </li>
            <li pn="section-toc.1-1.5.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unencoded-jws-compact-serialization-payload">Unencoded JWS Compact Serialization Payload</xref></t>
            </li>
            <li pn="section-toc.1-1.5.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unencoded-jws-json-serialization-payload">Unencoded JWS JSON Serialization Payload</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-using-&quot;crit&quot;-with-&quot;b64&quot;">Using &quot;crit&quot; with &quot;b64&quot;</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-intended-use-by-applications">Intended Use by Applications</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
            <li pn="section-toc.1-1.9.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-web-signature-and-encryption-header-parameter-registration">JSON Web Signature and Encryption Header Parameter Registration</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.1.2">
              <li pn="section-toc.1-1.9.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1.1"><xref derivedContent="9.1.1" format="counter" sectionFormat="of" target="section-9.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registry-contents">Registry Contents</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
            <li pn="section-toc.1-1.10.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
            </li>
            <li pn="section-toc.1-1.10.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.a">
            <t indent="0" pn="section-toc.1-1.a.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
      </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">The &quot;JSON Web Signature (JWS)&quot; <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> specification defines the JWS
Signing Input as the input to the digital signature or Message
Authentication Code (MAC) computation, with the value
ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS
Payload)).  While this works well in practice for many use cases,
including those accommodating arbitrary payload values, other use
cases have been described in which base64url-encoding the payload is
unnecessary and/or an impediment to adoption, particularly when the
payload is large and/or detached.</t>
      <t indent="0" pn="section-1-2">This specification introduces a new JWS Header Parameter value that
generalizes the JWS Signing Input computation in a manner that makes
base64url-encoding the payload selectable and optional.  The primary
set of use cases where this enhancement may be helpful are those in
which the payload may be very large and where means are already in
place to enable the payload to be communicated between the parties
without modifications.  Appendix F of <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> describes how to
represent JWSs with detached content, which would typically be used
for these use cases.</t>
      <t indent="0" pn="section-1-3">The advantages of not having to base64url-encode a large payload are
that allocation of the additional storage to hold the base64url-
encoded form is avoided and the base64url-encoding computation never
has to be performed.  In summary, this option can help avoid
unnecessary copying and transformations of the potentially large
payload, resulting in sometimes significant space and time
improvements for deployments.</t>
      <section anchor="notational-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-notational-conventions">Notational Conventions</name>
        <t indent="0" pn="section-1.1-1">The key words &quot;<bcp14>MUST</bcp14>&quot;, &quot;<bcp14>MUST NOT</bcp14>&quot;, &quot;<bcp14>REQUIRED</bcp14>&quot;, &quot;<bcp14>SHALL</bcp14>&quot;, &quot;<bcp14>SHALL NOT</bcp14>&quot;,
&quot;<bcp14>SHOULD</bcp14>&quot;, &quot;<bcp14>SHOULD NOT</bcp14>&quot;, &quot;<bcp14>RECOMMENDED</bcp14>&quot;, &quot;<bcp14>NOT RECOMMENDED</bcp14>&quot;, &quot;<bcp14>MAY</bcp14>&quot;, and
&quot;<bcp14>OPTIONAL</bcp14>&quot; in this document are to be interpreted as described in
&quot;Key words for use in RFCs to Indicate Requirement Levels&quot; <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>.
The interpretation should only be applied when the terms appear in
all capital letters.</t>
        <t indent="0" pn="section-1.1-2">BASE64URL(OCTETS) denotes the base64url encoding of OCTETS, per
Section 2 of <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/>.</t>
        <t indent="0" pn="section-1.1-3">UTF8(STRING) denotes the octets of the UTF-8 <xref target="RFC3629" format="default" sectionFormat="of" derivedContent="RFC3629"/> representation
of STRING, where STRING is a sequence of zero or more Unicode
<xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/> characters.</t>
        <t indent="0" pn="section-1.1-4">ASCII(STRING) denotes the octets of the ASCII <xref target="RFC20" format="default" sectionFormat="of" derivedContent="RFC20"/> representation
of STRING, where STRING is a sequence of zero or more ASCII
characters.</t>
        <t indent="0" pn="section-1.1-5">The concatenation of two values A and B is denoted as A || B.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t indent="0" pn="section-2-1">This specification uses the same terminology as the &quot;JSON Web
Signature&quot; <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> and &quot;JSON Web Algorithms&quot; <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> specifications.</t>
    </section>
    <section anchor="the-&quot;b64&quot;-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-the-&quot;b64&quot;-header-parameter">The &quot;b64&quot; Header Parameter</name>
      <t indent="0" pn="section-3-1">This Header Parameter modifies the JWS Payload representation and the
JWS Signing Input computation in the following way:</t>
      <t indent="0" pn="section-3-2">b64
   The &quot;b64&quot; (base64url-encode payload) Header Parameter determines
   whether the payload is represented in the JWS and the JWS Signing
   Input as ASCII(BASE64URL(JWS Payload)) or as the JWS Payload value
   itself with no encoding performed.  When the &quot;b64&quot; value is
   &quot;false&quot;, the payload is represented simply as the JWS Payload
   value; otherwise, it is represented as ASCII(BASE64URL(JWS
   Payload)).  The &quot;b64&quot; value is a JSON boolean, with a default
   value of &quot;true&quot;.  When used, this Header Parameter <bcp14>MUST</bcp14> be
   integrity protected; therefore, it <bcp14>MUST</bcp14> occur only within the JWS
   Protected Header.  Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.  If
   the JWS has multiple signatures and/or MACs, the &quot;b64&quot; Header
   Parameter value <bcp14>MUST</bcp14> be the same for all of them.  Note that
   unless the payload is detached, many payload values would cause
   errors parsing the resulting JWSs, as described in Section 5.</t>
      <t indent="0" pn="section-3-3">The following table shows the JWS Signing Input computation,
depending upon the value of this parameter:</t>
      <t indent="0" pn="section-3-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> &quot;b64&quot;</td>
<td align="left">JWS Signing Input Formula                                 </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> true </td>
<td align="left">ASCII(BASE64URL(UTF8(JWS Protected Header)) BASE64URL(JWS Payload))                                   </td>
<td align="left"></td>
<td align="left">'.'</td>
</tr>
<tr>
<td align="left"> false </td>
<td align="left">ASCII(BASE64URL(UTF8(JWS Protected Header)) JWS Payload                                               </td>
<td align="left"></td>
<td align="left">'.')</td>
</tr>
</tbody>
</table>
</t>
    </section>
    <section anchor="examples" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-examples">Examples</name>
      <t indent="0" pn="section-4-1">This section gives examples of JWSs showing the difference that using
the &quot;b64&quot; Header Parameter makes.  The examples all use the JWS
Payload value [36, 46, 48, 50].  This octet sequence represents the
ASCII characters &quot;$.02&quot;; its base64url-encoded representation is
&quot;JC4wMg&quot;.</t>
      <t indent="0" pn="section-4-2">The following table shows a set of Header Parameter values without
using a false &quot;b64&quot; Header Parameter value and a set using it, with
the resulting JWS Signing Input values represented as ASCII
characters:</t>
      <t indent="0" pn="section-4-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> JWS Protected Header</td>
<td align="left">JWS Signing Input Value             </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> {&quot;alg&quot;:&quot;HS256&quot;}</td>
<td align="left">eyJhbGciOiJIUzI1NiJ9.JC4wMg         </td>
</tr>
<tr>
<td align="left"> {&quot;alg&quot;:&quot;HS256&quot;,&quot;b64&quot;:false,</td>
<td align="left">eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2U </td>
</tr>
<tr>
<td align="left"> &quot;crit&quot;:[&quot;b64&quot;]}</td>
<td align="left">sImNyaXQiOlsiYjY0Il19.$.02          </td>
</tr>
</tbody>
</table>
</t>
      <t indent="0" pn="section-4-4">These examples use the Hash-based Message Authentication Code (HMAC)
key from Appendix A.1 of <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/>, which is represented below as a JSON
Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/> (with line breaks within values for display purposes
only):</t>
      <t indent="0" pn="section-4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "kty":"oct",
   "k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75
        aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  }
]]></artwork>
</t>
      <t indent="0" pn="section-4-6">The rest of this section shows complete representations for the two
JWSs above.</t>
      <section anchor="example-with-header-parameters-{&quot;alg&quot;:&quot;hs256&quot;}" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-example-with-header-parameters-{&quot;alg&quot;:&quot;hs256&quot;}">Example with Header Parameters {&quot;alg&quot;:&quot;HS256&quot;}</name>
        <t indent="0" pn="section-4.1-1">The complete JWS representation for this example using the JWS
Compact Serialization and a non-detached payload (with line breaks
for display purposes only) is:</t>
        <t indent="0" pn="section-4.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJIUzI1NiJ9
  .
  JC4wMg
  .
  5mvfOroL-g7HyqJoozehmsaqmvTYGEq5jTI1gVvoEoQ
]]></artwork>
</t>
        <t indent="0" pn="section-4.1-3">Note that this JWS uses only features defined by <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> and does not
use the new &quot;b64&quot; Header Parameter.  It is the &quot;control&quot; so that
differences when it is used can be easily seen.</t>
        <t indent="0" pn="section-4.1-4">The equivalent representation for this example using the flattened
JWS JSON Serialization is:</t>
        <t indent="0" pn="section-4.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "protected":
    "eyJhbGciOiJIUzI1NiJ9",
   "payload":
    "JC4wMg",
   "signature":
    "5mvfOroL-g7HyqJoozehmsaqmvTYGEq5jTI1gVvoEoQ"
  }
]]></artwork>
</t>
      </section>
      <section anchor="example-with-header-parameters" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-example-with-header-parameters">Example with Header Parameters {&quot;alg&quot;:&quot;HS256&quot;,&quot;b64&quot;:false,&quot;crit&quot;:[&quot;b64&quot;]}</name>
        <t indent="0" pn="section-4.2-2">The complete JWS representation for this example using the JWS
Compact Serialization and a detached payload (with line breaks for
display purposes only) is:</t>
        <t indent="0" pn="section-4.2-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19
  .
  .
  A5dxf2s96_n5FLueVuW1Z_vh161FwXZC4YLPff6dmDY
]]></artwork>
</t>
        <t indent="0" pn="section-4.2-4">Note that the payload &quot;$.02&quot; cannot be represented in this JWS in its
unencoded form because it contains a period ('.') character, which
would cause parsing problems.  This JWS is therefore shown with a
detached payload.</t>
        <t indent="0" pn="section-4.2-5">The complete JWS representation for this example using the flattened
JWS JSON Serialization and a non-detached payload is:</t>
        <t indent="0" pn="section-4.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "protected":
    "eyJhbGciOiJIUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19",
   "payload":
    "$.02",
   "signature":
    "A5dxf2s96_n5FLueVuW1Z_vh161FwXZC4YLPff6dmDY"
  }
]]></artwork>
</t>
        <t indent="0" pn="section-4.2-7">If using a detached payload with the JWS JSON Serialization, the
&quot;payload&quot; element would be omitted.</t>
      </section>
    </section>
    <section anchor="unencoded-payload-content-restrictions" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-unencoded-payload-content-restrictions">Unencoded Payload Content Restrictions</name>
      <t indent="0" pn="section-5-1">When the &quot;b64&quot; value is &quot;false&quot;, different restrictions on the
payload contents apply, depending upon the circumstances, as
described in this section.  The restrictions prevent the use of
payload values that would cause errors parsing the resulting JWSs.</t>
      <t indent="0" pn="section-5-2">Note that because the character sets that can be used for unencoded
non-detached payloads differ between the two serializations, some
JWSs using a &quot;b64&quot; value of &quot;false&quot; cannot be syntactically converted
between the JWS JSON Serialization and the JWS Compact Serialization.
See Section 8 for security considerations on using unencoded
payloads.</t>
      <section anchor="unencoded-detached-payload" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-unencoded-detached-payload">Unencoded Detached Payload</name>
        <t indent="0" pn="section-5.1-1">Appendix F of <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> describes how to represent JWSs with detached
content.  A detached payload can contain any octet sequence
representable by the application.  The payload value will not cause
problems parsing the JWS, since it is not represented as part of the
JWS.  If an application uses a content encoding when representing the
payload, then it <bcp14>MUST</bcp14> specify whether the signature or MAC is
performed over the content-encoded representation or over the
unencoded content.</t>
      </section>
      <section anchor="unencoded-jws-compact-serialization-payload" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-unencoded-jws-compact-serialization-payload">Unencoded JWS Compact Serialization Payload</name>
        <t indent="0" pn="section-5.2-1">When using the JWS Compact Serialization, unencoded non-detached
payloads using period ('.') characters would cause parsing errors;
such payloads <bcp14>MUST NOT</bcp14> be used with the JWS Compact Serialization.
Similarly, if a JWS using the JWS Compact Serialization and a
non-detached payload is to be transmitted in a context that requires
URL-safe characters, then the application <bcp14>MUST</bcp14> ensure that the
payload contains only the URL-safe characters 'a'-'z', 'A'-'Z',
'0'-'9', dash ('-'), underscore ('_'), and tilde ('~').  The payload
value is the ASCII representation of the characters in the payload
string.  The ASCII space character and all printable ASCII characters
other than period ('.') (those characters in the ranges %x20-2D and
%x2F-7E) <bcp14>MAY</bcp14> be included in a non-detached payload using the JWS
Compact Serialization, provided that the application can transmit the
resulting JWS without modification.</t>
        <t indent="0" pn="section-5.2-2">No meaning or special semantics are attached to any characters in the
payload.  For instance, the percent ('%') character represents itself
and is not used by JWS objects for percent-encoding <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/>.
Applications, of course, are free to utilize content-encoding rules
of their choosing, provided that the encoded representations utilize
only allowed payload characters.</t>
      </section>
      <section anchor="unencoded-jws-json-serialization-payload" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-unencoded-jws-json-serialization-payload">Unencoded JWS JSON Serialization Payload</name>
        <t indent="0" pn="section-5.3-1">When using the JWS JSON Serialization, unencoded non-detached
payloads must consist of the octets of the UTF-8 encoding of a
sequence of Unicode code points that are representable in a JSON
string.  The payload value is determined after performing any JSON
string escape processing, per Section 8.3 of RFC 7159 <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>, and
then UTF-8-encoding the resulting Unicode code points.  This means,
for instance, that these payloads represented as JSON strings are
equivalent (&quot;$.02&quot;, &quot;\u0024.02&quot;).  Unassigned Unicode code point
values <bcp14>MUST NOT</bcp14> be used to represent the payload.</t>
      </section>
    </section>
    <section anchor="using-&quot;crit&quot;-with-&quot;b64&quot;" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-using-&quot;crit&quot;-with-&quot;b64&quot;">Using &quot;crit&quot; with &quot;b64&quot;</name>
      <t indent="0" pn="section-6-1">The &quot;crit&quot; Header Parameter <bcp14>MUST</bcp14> be included with &quot;b64&quot; in its set of
values when using the &quot;b64&quot; Header Parameter to cause implementations
not implementing &quot;b64&quot; to reject the JWS (instead of it being
misinterpreted).</t>
    </section>
    <section anchor="intended-use-by-applications" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-intended-use-by-applications">Intended Use by Applications</name>
      <t indent="0" pn="section-7-1">Application profiles should specify whether &quot;b64&quot; with a &quot;false&quot;
value is to be used by the application in each application context or
not, with it then being consistently applied in each application
context.  For instance, an application that uses detached payloads
might specify that &quot;b64&quot; with a &quot;false&quot; value always be used.  It is
<bcp14>NOT RECOMMENDED</bcp14> that this parameter value be dynamically varied with
different payloads in the same application context.</t>
      <t indent="0" pn="section-7-2">While it is legal to use &quot;b64&quot; with a &quot;true&quot; value, it is <bcp14>RECOMMENDED</bcp14>
that &quot;b64&quot; simply be omitted in this case, since it would be
selecting the behavior already specified in <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/>.</t>
      <t indent="0" pn="section-7-3">For interoperability reasons, JSON Web Tokens <xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/> <bcp14>MUST NOT</bcp14> use
&quot;b64&quot; with a &quot;false&quot; value.</t>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-8-1"><xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/> base64url-encodes the JWS Payload to restrict the set of
characters used to represent it so that the representation does not
contain characters used for delimiters in JWS representations.  Those
delimiters are the period ('.') character for the JWS Compact
Serialization and the double-quote ('&quot;') character for the JWS JSON
Serialization.  When the &quot;b64&quot; (base64url-encode payload) value is
&quot;false&quot;, these properties are lost.  It then becomes the
responsibility of the application to ensure that payloads only
contain characters that will not cause parsing problems for the
serialization used, as described in Section 5.  The application also
incurs the responsibility to ensure that the payload will not be
modified during transmission.</t>
      <t indent="0" pn="section-8-2">Note that if a JWS were to be created with a &quot;b64&quot; value of &quot;false&quot;
without including the &quot;crit&quot; Header Parameter with &quot;b64&quot; in its set
of values and it were to be received by an implementation not
supporting the &quot;b64&quot; Header Parameter, then the signature or MAC
would still verify but the recipient would believe that the intended
JWS Payload value is the base64url decoding of the payload value
received, rather than the payload value received itself.  For
example, if the payload value received were &quot;NDA1&quot;, an implementation
not supporting this extension would interpret the intended payload as
being the base64url decoding of this value, which is &quot;405&quot;.
Requiring the use of the &quot;crit&quot; Header Parameter with &quot;b64&quot; in the
set of values prevents this misinterpretation.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section anchor="json-web-signature-and-encryption-header-parameter-registration" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-json-web-signature-and-encryption-header-parameter-registration">JSON Web Signature and Encryption Header Parameter Registration</name>
        <t indent="0" pn="section-9.1-1">This specification registers the &quot;b64&quot; Header Parameter defined in
Section 3 in the IANA &quot;JSON Web Signature and Encryption Header
Parameters&quot; registry <xref target="IANA.JOSE" format="default" sectionFormat="of" derivedContent="IANA.JOSE"/> established by <xref target="JWS" format="default" sectionFormat="of" derivedContent="JWS"/>.</t>
        <section anchor="registry-contents" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.1">
          <name slugifiedName="name-registry-contents">Registry Contents</name>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.1-1">
            <li pn="section-9.1.1-1.1"> Header Parameter Name: &quot;b64&quot;</li>
            <li pn="section-9.1.1-1.2"> Header Parameter Description: Base64url-Encode Payload</li>
            <li pn="section-9.1.1-1.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.1-1.4"> Change Controller: IESG</li>
            <li pn="section-9.1.1-1.5"> Specification Document(s): Section 3 of RFC 7797</li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references pn="section-10">
      <name slugifiedName="name-references">References</name>
      <references pn="section-10.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="IANA.JOSE" target="http://www.iana.org/assignments/jose" quoteTitle="true" derivedAnchor="IANA.JOSE">
          <front>
            <title>JSON Object Signing and Encryption (JOSE)</title>
          </front>
        </reference>
        <reference anchor="JWA" target="http://www.rfc-editor.org/info/rfc7518" quoteTitle="true" derivedAnchor="JWA">
          <front>
            <title>JSON Web Algorithms (JWA)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7518</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7518</seriesInfo>
        </reference>
        <reference anchor="JWS" target="http://www.rfc-editor.org/info/rfc7515" quoteTitle="true" derivedAnchor="JWS">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7515</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7515</seriesInfo>
        </reference>
        <reference anchor="JWT" target="http://www.rfc-editor.org/info/rfc7519" quoteTitle="true" derivedAnchor="JWT">
          <front>
            <title>JSON Web Token (JWT)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7519</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7519</seriesInfo>
        </reference>
        <reference anchor="RFC20" target="http://www.rfc-editor.org/info/rfc20" quoteTitle="true" derivedAnchor="RFC20">
          <front>
            <title>ASCII format for Network Interchange</title>
            <date year="1969" month="October"/>
          </front>
          <seriesInfo name="STD">80</seriesInfo>
          <seriesInfo name="RFC">20</seriesInfo>
        </reference>
        <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <date year="1997" month="March"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">2119</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2119</seriesInfo>
        </reference>
        <reference anchor="RFC3629" target="http://www.rfc-editor.org/info/rfc3629" quoteTitle="true" derivedAnchor="RFC3629">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <date year="2003" month="November"/>
          </front>
          <seriesInfo name="STD">63</seriesInfo>
          <seriesInfo name="RFC">3629</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3629</seriesInfo>
        </reference>
        <reference anchor="RFC7159" target="http://www.rfc-editor.org/info/rfc7159" quoteTitle="true" derivedAnchor="RFC7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <date year="2014" month="March"/>
          </front>
          <seriesInfo name="RFC">7159</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7159</seriesInfo>
        </reference>
        <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/" quoteTitle="true" derivedAnchor="UNICODE">
          <front>
            <title>The Unicode Standard</title>
          </front>
        </reference>
      </references>
      <references pn="section-10.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517" quoteTitle="true" derivedAnchor="JWK">
          <front>
            <title>JSON Web Key (JWK)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7517</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7517</seriesInfo>
        </reference>
        <reference anchor="RFC3986" target="http://www.rfc-editor.org/info/rfc3986" quoteTitle="true" derivedAnchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <date year="2005" month="January"/>
          </front>
          <seriesInfo name="STD">66</seriesInfo>
          <seriesInfo name="RFC">3986</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3986</seriesInfo>
        </reference>
      </references>
    </references>
    <section anchor="acknowledgements" numbered="false" removeInRFC="false" toc="exclude" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
        <t indent="0" pn="section-appendix.a-1">Anders Rundgren, Richard Barnes, Phillip Hallam-Baker, Jim Schaad,
Matt Miller, Martin Thomson, and others have all made the case for
being able to use a representation of the payload that is not
base64url encoded in contexts in which it safe to do so.</t>
        <t indent="0" pn="section-appendix.a-2">Thanks to Sergey Beryozkin, Stephen Farrell, Benjamin Kaduk, James
Manger, Kathleen Moriarty, Axel Nennker, Anders Rundgren, Nat
Sakimura, Jim Schaad, Robert Sparks, and Matias Woloski for their
reviews of the specification, and thanks to Vladimir Dzhuvinov for
verifying the examples.</t>
      </section>
  </back>
</rfc>
