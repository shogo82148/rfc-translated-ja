<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-cbor-cddl-08" indexInclude="true" number="8610" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-cbor-cddl-08" rel="prev"/>
<link href="https://dx.doi.org/10.17487/rfc8610" rel="alternate"/>
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <seriesInfo name="RFC" value="8610" stream="IETF"/>
    <date year="2019" month="June"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document proposes a notational convention to express Concise
Binary Object Representation (CBOR) data structures (RFC 7049).  Its
main goal is to provide an easy and unambiguous way to express
structures for protocol messages and data formats that use CBOR or
JSON.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1.1">This is an Internet Standards Track document.</t>
        <t indent="0" pn="section-boilerplate.1.2">This document is a product of the Internet Engineering Task Force
(IETF).  It represents the consensus of the IETF community.  It has
received public review and has been approved for publication by the
Internet Engineering Steering Group (IESG).  Further information on
Internet Standards is available in Section 2 of RFC 7841.</t>
        <t indent="0" pn="section-boilerplate.1.3">Information about the current status of this document, any errata,
and how to provide feedback on it may be obtained at
https://www.rfc-editor.org/info/rfc8610.</t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">Copyright (c) 2019 IETF Trust and the persons identified as the
document authors.  All rights reserved.</t>
        <t indent="0" pn="section-boilerplate.2-2">This document is subject to BCP 78 and the IETF Trust's Legal
Provisions Relating to IETF Documents
(https://trustee.ietf.org/license-info) in effect on the date of
publication of this document.  Please review these documents
carefully, as they describe your rights and restrictions with respect
to this document.  Code Components extracted from this document must
include Simplified BSD License text as described in Section 4.e of
the Trust Legal Provisions and are provided without warranty as
described in the Simplified BSD License.</t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
            <li pn="section-toc.1-1.1.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requirements-notation">Requirements Notation</xref></t>
            </li>
            <li pn="section-toc.1-1.1.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-style-of-data-structure-specification">The Style of Data Structure Specification</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
            <li pn="section-toc.1-1.2.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-groups-and-composition-in-cddl">Groups and Composition in CDDL</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.1.2">
              <li pn="section-toc.1-1.2.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1.1.1"><xref derivedContent="2.1.1" format="counter" sectionFormat="of" target="section-2.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-usage">Usage</xref></t>
              </li>
              <li pn="section-toc.1-1.2.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1.2.1"><xref derivedContent="2.1.2" format="counter" sectionFormat="of" target="section-2.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-syntax">Syntax</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.2.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-types">Types</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.2.1" format="counter" sectionFormat="of" target="section-2.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-values">Values</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2.2" format="counter" sectionFormat="of" target="section-2.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-choices">Choices</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2.2.2">
                <li pn="section-toc.1-1.2.2.2.1">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.2.1.1"><xref derivedContent="2.2.2.1" format="counter" sectionFormat="of" target="section-2.2.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ranges">Ranges</xref></t>
                </li>
                <li pn="section-toc.1-1.2.2.2.2">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.2.2.1"><xref derivedContent="2.2.2.2" format="counter" sectionFormat="of" target="section-2.2.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-turning-a-group-into-a-choice">Turning a Group into a Choice</xref></t>
                </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.2.3" format="counter" sectionFormat="of" target="section-2.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-representation-types">Representation Types</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.4.1"><xref derivedContent="2.2.4" format="counter" sectionFormat="of" target="section-2.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-root-type">Root Type</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-syntax">Syntax</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
            <li pn="section-toc.1-1.3.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-general-conventions">General Conventions</xref></t>
            </li>
            <li pn="section-toc.1-1.3.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-occurrence">Occurrence</xref></t>
            </li>
            <li pn="section-toc.1-1.3.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-predefined-names-for-types">Predefined Names for Types</xref></t>
            </li>
            <li pn="section-toc.1-1.3.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.4.1"><xref derivedContent="3.4" format="counter" sectionFormat="of" target="section-3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-arrays">Arrays</xref></t>
            </li>
            <li pn="section-toc.1-1.3.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.5.1"><xref derivedContent="3.5" format="counter" sectionFormat="of" target="section-3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-maps">Maps</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.5.2">
              <li pn="section-toc.1-1.3.5.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.5.1.1"><xref derivedContent="3.5.1" format="counter" sectionFormat="of" target="section-3.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-structs">Structs</xref></t>
              </li>
              <li pn="section-toc.1-1.3.5.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.5.2.1"><xref derivedContent="3.5.2" format="counter" sectionFormat="of" target="section-3.5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tables">Tables</xref></t>
              </li>
              <li pn="section-toc.1-1.3.5.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.5.3.1"><xref derivedContent="3.5.3" format="counter" sectionFormat="of" target="section-3.5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-non-deterministic-order">Non-deterministic Order</xref></t>
              </li>
              <li pn="section-toc.1-1.3.5.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.5.4.1"><xref derivedContent="3.5.4" format="counter" sectionFormat="of" target="section-3.5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cuts-in-maps">Cuts in Maps</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.3.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.6.1"><xref derivedContent="3.6" format="counter" sectionFormat="of" target="section-3.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tags">Tags</xref></t>
            </li>
            <li pn="section-toc.1-1.3.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.7.1"><xref derivedContent="3.7" format="counter" sectionFormat="of" target="section-3.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unwrapping">Unwrapping</xref></t>
            </li>
            <li pn="section-toc.1-1.3.8">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.1"><xref derivedContent="3.8" format="counter" sectionFormat="of" target="section-3.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-controls">Controls</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.8.2">
              <li pn="section-toc.1-1.3.8.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.1.1"><xref derivedContent="3.8.1" format="counter" sectionFormat="of" target="section-3.8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operator-.size">Control Operator .size</xref></t>
              </li>
              <li pn="section-toc.1-1.3.8.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.2.1"><xref derivedContent="3.8.2" format="counter" sectionFormat="of" target="section-3.8.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operator-.bits">Control Operator .bits</xref></t>
              </li>
              <li pn="section-toc.1-1.3.8.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.3.1"><xref derivedContent="3.8.3" format="counter" sectionFormat="of" target="section-3.8.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operator-.regexp">Control Operator .regexp</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.8.3.2">
                <li pn="section-toc.1-1.3.8.3.1">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.3.1.1"><xref derivedContent="3.8.3.1" format="counter" sectionFormat="of" target="section-3.8.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-usage-considerations">Usage Considerations</xref></t>
                </li>
                <li pn="section-toc.1-1.3.8.3.2">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.3.2.1"><xref derivedContent="3.8.3.2" format="counter" sectionFormat="of" target="section-3.8.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-discussion">Discussion</xref></t>
                </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.3.8.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.4.1"><xref derivedContent="3.8.4" format="counter" sectionFormat="of" target="section-3.8.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operators-.cbor-and-.cborseq">Control Operators .cbor and .cborseq</xref></t>
              </li>
              <li pn="section-toc.1-1.3.8.5">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.5.1"><xref derivedContent="3.8.5" format="counter" sectionFormat="of" target="section-3.8.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operators-.within-and-.and">Control Operators .within and .and</xref></t>
              </li>
              <li pn="section-toc.1-1.3.8.6">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.8.6.1"><xref derivedContent="3.8.6" format="counter" sectionFormat="of" target="section-3.8.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-control-operators-.lt,-.le,-.gt,-.ge,-.eq,-.ne,-and-.default">Control Operators .lt, .le, .gt, .ge, .eq, .ne, and .default</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.3.9">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.9.1"><xref derivedContent="3.9" format="counter" sectionFormat="of" target="section-3.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-socket/plug">Socket/Plug</xref></t>
            </li>
            <li pn="section-toc.1-1.3.10">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.10.1"><xref derivedContent="3.10" format="counter" sectionFormat="of" target="section-3.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-generics">Generics</xref></t>
            </li>
            <li pn="section-toc.1-1.3.11">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.11.1"><xref derivedContent="3.11" format="counter" sectionFormat="of" target="section-3.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-operator-precedence">Operator Precedence</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-making-use-of-cddl">Making Use of CDDL</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
            <li pn="section-toc.1-1.4.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-as-a-guide-for-a-human-user">As a Guide for a Human User</xref></t>
            </li>
            <li pn="section-toc.1-1.4.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-for-automated-checking-of-cbor-data-structures">For Automated Checking of CBOR Data Structures</xref></t>
            </li>
            <li pn="section-toc.1-1.4.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-for-data-analysis-tools">For Data Analysis Tools</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
            <li pn="section-toc.1-1.6.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cddl-control-operators-registry">CDDL Control Operators Registry</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
            <li pn="section-toc.1-1.7.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
            </li>
            <li pn="section-toc.1-1.7.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.A">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1"><xref derivedContent="A" format="counter" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-parsing-expression-grammars-(pegs)">Parsing Expression Grammars (PEGs)</xref></t>
          </li>
          <li pn="section-toc.1-1.B">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.B.1"><xref derivedContent="B" format="counter" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-abnf-grammar">ABNF Grammar</xref></t>
          </li>
          <li pn="section-toc.1-1.C">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1"><xref derivedContent="C" format="counter" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-matching-rules">Matching Rules</xref></t>
          </li>
          <li pn="section-toc.1-1.D">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.D.1"><xref derivedContent="D" format="counter" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-standard-prelude">Standard Prelude</xref></t>
          </li>
          <li pn="section-toc.1-1.E">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.E.1"><xref derivedContent="E" format="counter" sectionFormat="of" target="section-appendix.e"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-use-with-json">Use with JSON</xref></t>
          </li>
          <li pn="section-toc.1-1.F">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.F.1"><xref derivedContent="F" format="counter" sectionFormat="of" target="section-appendix.f"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-a-cddl-tool">A CDDL Tool</xref></t>
          </li>
          <li pn="section-toc.1-1.G">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.1"><xref derivedContent="G" format="counter" sectionFormat="of" target="section-appendix.g"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-extended-diagnostic-notation">Extended Diagnostic Notation</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.G.2">
            <li pn="section-toc.1-1.G.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.1.1"><xref derivedContent="G.1" format="counter" sectionFormat="of" target="section-g.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-whitespace-in-byte-string-notation">Whitespace in Byte String Notation</xref></t>
            </li>
            <li pn="section-toc.1-1.G.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.2.1"><xref derivedContent="G.2" format="counter" sectionFormat="of" target="section-g.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-text-in-byte-string-notation">Text in Byte String Notation</xref></t>
            </li>
            <li pn="section-toc.1-1.G.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.3.1"><xref derivedContent="G.3" format="counter" sectionFormat="of" target="section-g.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-embedded-cbor-and-cbor-sequences-in-byte-strings">Embedded CBOR and CBOR Sequences in Byte Strings</xref></t>
            </li>
            <li pn="section-toc.1-1.G.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.4.1"><xref derivedContent="G.4" format="counter" sectionFormat="of" target="section-g.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-concatenated-strings">Concatenated Strings</xref></t>
            </li>
            <li pn="section-toc.1-1.G.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.5.1"><xref derivedContent="G.5" format="counter" sectionFormat="of" target="section-g.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-hexadecimal,-octal,-and-binary-numbers">Hexadecimal, Octal, and Binary Numbers</xref></t>
            </li>
            <li pn="section-toc.1-1.G.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.G.6.1"><xref derivedContent="G.6" format="counter" sectionFormat="of" target="section-g.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-comments">Comments</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.H">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.H.1"><xref derivedContent="H" format="counter" sectionFormat="of" target="section-appendix.h"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples">Examples</xref></t>
          </li>
          <li pn="section-toc.1-1.i">
            <t indent="0" pn="section-toc.1-1.i.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.i"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
      </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">In this document, a notational convention to express Concise Binary
Object Representation (CBOR) data structures <xref target="RFC7049" format="default" sectionFormat="of" derivedContent="RFC7049"/> is defined.</t>
      <t indent="0" pn="section-1-2">The main goal for the convention is to provide a unified notation
that can be used when defining protocols that use CBOR.  We term the
convention &quot;Concise Data Definition Language&quot;, or CDDL.</t>
      <t indent="0" pn="section-1-3">The CBOR notational convention has the following goals:</t>
      <t indent="0" pn="section-1-4">(G1)  Provide an unambiguous description of the overall structure of
      a CBOR data item.</t>
      <t indent="0" pn="section-1-5">(G2)  Be flexible in expressing the multiple ways in which data can
      be represented in the CBOR data format.</t>
      <t indent="0" pn="section-1-6">(G3)  Be able to express common CBOR datatypes and structures.</t>
      <t indent="0" pn="section-1-7">(G4)  Provide a single format that is both readable and editable for
      humans and processable by a machine.</t>
      <t indent="0" pn="section-1-8">(G5)  Enable automatic checking of CBOR data items for data format
      compliance.</t>
      <t indent="0" pn="section-1-9">(G6)  Enable extraction of specific elements from CBOR data for
      further processing.</t>
      <t indent="0" pn="section-1-10">Not an original goal per se, but a convenient side effect of the JSON
generic data model being a subset of the CBOR generic data model, is
the fact that CDDL can also be used for describing JSON data
structures (see Appendix E).</t>
      <t indent="0" pn="section-1-11">This document has the following structure:</t>
      <t indent="0" pn="section-1-12">The syntax of CDDL is defined in Section 3.  Examples of CDDL and a
related CBOR data item (&quot;instance&quot;), some of which use the JSON form,
are described in Appendix H.  Section 4 discusses usage of CDDL.
Examples are provided throughout the text to better illustrate
concept definitions.  A formal definition of CDDL using ABNF grammar
<xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/> is provided in Appendix B.  Finally, a _prelude_ of
standard CDDL definitions that is automatically prepended to, and
thus available in, every CDDL specification is listed in Appendix D.</t>
      <section anchor="requirements-notation" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-requirements-notation">Requirements Notation</name>
        <t indent="0" pn="section-1.1-1">The key words &quot;<bcp14>MUST</bcp14>&quot;, &quot;<bcp14>MUST NOT</bcp14>&quot;, &quot;<bcp14>REQUIRED</bcp14>&quot;, &quot;<bcp14>SHALL</bcp14>&quot;, &quot;<bcp14>SHALL NOT</bcp14>&quot;,
&quot;<bcp14>SHOULD</bcp14>&quot;, &quot;<bcp14>SHOULD NOT</bcp14>&quot;, &quot;<bcp14>RECOMMENDED</bcp14>&quot;, &quot;<bcp14>NOT RECOMMENDED</bcp14>&quot;, &quot;<bcp14>MAY</bcp14>&quot;, and
&quot;<bcp14>OPTIONAL</bcp14>&quot; in this document are to be interpreted as described in
BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all
capitals, as shown here.</t>
      </section>
      <section anchor="terminology" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-terminology">Terminology</name>
        <t indent="0" pn="section-1.2-1">New terms are introduced in _cursive_, which is rendered in plain
text as the new term surrounded by underscores.  CDDL text in the
running text is in &quot;typewriter&quot;, which is rendered in plain text as
the CDDL text in double quotes (double quotes are also used in the
usual English sense; the reader is expected to disambiguate this by
context).</t>
        <t indent="0" pn="section-1.2-2">In this specification, the term &quot;byte&quot; is used in its now-customary
sense as a synonym for &quot;octet&quot;.</t>
      </section>
    </section>
    <section anchor="the-style-of-data-structure-specification" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-the-style-of-data-structure-specification">The Style of Data Structure Specification</name>
      <t indent="0" pn="section-2-1">CDDL focuses on styles of specification that are in use in the
community employing the data model as pioneered by JSON and now
refined in CBOR.</t>
      <t indent="0" pn="section-2-2">There are a number of more or less atomic elements of a CBOR data
model, such as numbers, simple values (false, true, nil), text
strings, and byte strings; CDDL does not focus on specifying their
structure.  CDDL of course also allows adding a CBOR tag to a
data item.</t>
      <t indent="0" pn="section-2-3">Beyond those atomic elements, further components of a data structure
definition language are the datatypes used for composition: arrays
and maps in CBOR (called &quot;arrays&quot; and &quot;objects&quot; in JSON).  While
these are only two representation formats, they are used to specify
four loosely distinguishable styles of composition:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-4">
        <li pn="section-2-4.1"> A _vector_: an array of elements that are mostly of the same
   semantics.  The set of signatures associated with a signed data
   item is a typical application of a vector.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-5">
        <li pn="section-2-5.1"> A _record_: an array the elements of which have different,
   positionally defined semantics, as detailed in the data structure
   definition.  A 2D point, specified as an array of an x coordinate
   (which comes first) and a y coordinate (coming second), is an
   example of a record, as is the pair of exponent (first) and
   mantissa (second) in a CBOR decimal fraction.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-6">
        <li pn="section-2-6.1"> A _table_: a map from a domain of map keys to a domain of map
   values, that are mostly of the same semantics.  A set of language
   tags, each mapped to a text string translated to that specific
   language, is an example of a table.  The key domain is usually not
   limited to a specific set by the specification but is open for the
   application, e.g., in a table mapping IP addresses to Media Access
   Control (MAC) addresses, the specification does not attempt to
   foresee all possible IP addresses.  In a language such as
   JavaScript, a &quot;Map&quot; (as opposed to a plain &quot;Object&quot;) would often
   be employed to achieve the generality of the key domain.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2-7">
        <li pn="section-2-7.1"> A _struct_: a map from a domain of map keys as defined by the
   specification to a domain of map values the semantics of each of
   which is bound to a specific map key.  This is what many people
   have in mind when they think about JSON objects; CBOR adds the
   ability to use map keys that are not just text strings.  Structs
   can be used to solve problems similar to those records are used
   for; the use of explicit map keys facilitates optionality and
   extensibility.</li>
      </ul>
      <t indent="0" pn="section-2-8">Two important concepts provide the foundation for CDDL:</t>
      <t indent="0" pn="section-2-9">1.  Instead of defining all four types of composition in CDDL
    separately, or even defining one kind for arrays (vectors and
    records) and one kind for maps (tables and structs), there is
    only one kind of composition in CDDL: the _group_ (Section 2.1).</t>
      <t indent="0" pn="section-2-10">2.  The other important concept is that of a _type_.  The entire CDDL
    specification defines a type (the one defined by its first
    _rule_), which formally is the set of CBOR data items that are
    acceptable as &quot;instances&quot; for this specification.  CDDL
    predefines a number of basic types such as &quot;uint&quot; (unsigned
    integer) or &quot;tstr&quot; (text string), often making use of a simple
    formal notation for CBOR data items.  Each value that can be
    expressed as a CBOR data item is also a type in its own right,
    e.g., &quot;1&quot;.  A type can be built as a _choice_ of other types,
    e.g., an &quot;int&quot; is either a &quot;uint&quot; or a &quot;nint&quot; (negative integer).
    Finally, a type can be built as an array or a map from a group.</t>
      <t indent="0" pn="section-2-11">The rest of this section introduces a number of basic concepts of
CDDL, and Section 3 defines additional syntax.  Appendix C gives a
concise summary of the semantics of CDDL.</t>
      <section anchor="groups-and-composition-in-cddl" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-groups-and-composition-in-cddl">Groups and Composition in CDDL</name>
        <t indent="0" pn="section-2.1-1">CDDL groups are lists of group _entries_, each of which can be a
name/value pair or a more complex group expression (which then in
turn stands for a sequence of name/value pairs).  A CDDL group is a
production in a grammar that matches certain sequences of name/value
pairs but not others.  The grammar is based on the concepts of
Parsing Expression Grammars (PEGs) (see Appendix A).</t>
        <t indent="0" pn="section-2.1-2">In an array context, only the value of the name/value pair is
represented; the name is annotation only (and can be left off from
the group specification if not needed).  In a map context, the names
become the map keys (&quot;member keys&quot;).</t>
        <t indent="0" pn="section-2.1-3">In an array context, the actual sequence of elements in the group is
important, as that sequence is the information that allows
associating actual array elements with entries in the group.  In a
map context, the sequence of entries in a group is not relevant (but
there is still a need to write down group entries in a sequence).</t>
        <t indent="0" pn="section-2.1-4">An array matches a specification given as a group when the group
matches a sequence of name/value pairs the value parts of which
exactly match the elements of the array in order.</t>
        <t indent="0" pn="section-2.1-5">A map matches a specification given as a group when the group matches
a sequence of name/value pairs such that all of these name/value
pairs are present in the map and the map has no name/value pair that
is not covered by the group.</t>
        <t indent="0" pn="section-2.1-6">A simple example of using a group directly in a map definition is:</t>
        <t indent="0" pn="section-2.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
                          person = {
                            age: int,
                            name: tstr,
                            employer: tstr,
                          }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-8"><figure anchor="fig-1" align="left" suppress-title="false" pn="figure-1">
<name slugifiedName="name-figure-1">Using a Group Directly in a Map</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-9">The three entries of the group are written between the curly braces
that create the map: here, &quot;age&quot;, &quot;name&quot;, and &quot;employer&quot; are the
names that turn into the map key text strings, and &quot;int&quot; and &quot;tstr&quot;
(text string) are the types of the map values under these keys.</t>
        <t indent="0" pn="section-2.1-10">A group by itself (without creating a map around it) can be placed in
(round) parentheses and given a name by using it in a rule:</t>
        <t indent="0" pn="section-2.1-11"><artwork name="" type="" align="left" alt=""><![CDATA[
                          pii = (
                            age: int,
                            name: tstr,
                            employer: tstr,
                          )
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-12"><figure anchor="fig-2" align="left" suppress-title="false" pn="figure-2">
<name slugifiedName="name-figure-2">A Basic Group</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-13">This separate, named group definition allows us to rephrase
Figure 1 as:</t>
        <t indent="0" pn="section-2.1-14"><artwork name="" type="" align="left" alt=""><![CDATA[
                             person = {
                               pii
                             }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-15"><figure anchor="fig-3" align="left" suppress-title="false" pn="figure-3">
<name slugifiedName="name-figure-3">Using a Group by Name</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-16">Note that the (curly) braces signify the creation of a map; the
groups themselves are neutral as to whether they will be used in a
map or an array.</t>
        <t indent="0" pn="section-2.1-17">As shown in Figure 1, the parentheses for groups are optional when
there is some other set of brackets present.  Note that they can
still be used, leading to this not-so-realistic, but perfectly valid,
example:</t>
        <t indent="0" pn="section-2.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
                          person = {(
                            age: int,
                            name: tstr,
                            employer: tstr,
                          )}
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-19"><figure anchor="fig-4" align="left" suppress-title="false" pn="figure-4">
<name slugifiedName="name-figure-4">Using a Parenthesized Group in a Map</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-20">Groups can be used to factor out common parts of structs, e.g.,
instead of writing specifications in copy/paste style, such as in
Figure 5, one can factor out the common subgroup, choose a name for
it, and write only the specific parts into the individual maps
(Figure 6).</t>
        <t indent="0" pn="section-2.1-21"><artwork name="" type="" align="left" alt=""><![CDATA[
                       person = {
                         age: int,
                         name: tstr,
                         employer: tstr,
                       }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-22"><artwork name="" type="" align="left" alt=""><![CDATA[
                       dog = {
                         age: int,
                         name: tstr,
                         leash-length: float,
                       }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-23"><figure anchor="fig-5" align="left" suppress-title="false" pn="figure-5">
<name slugifiedName="name-figure-5">Maps with Copy/Paste</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-24"><artwork name="" type="" align="left" alt=""><![CDATA[
                       person = {
                         identity,
                         employer: tstr,
                       }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-25"><artwork name="" type="" align="left" alt=""><![CDATA[
                       dog = {
                         identity,
                         leash-length: float,
                       }
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-26"><artwork name="" type="" align="left" alt=""><![CDATA[
                       identity = (
                         age: int,
                         name: tstr,
                       )
]]></artwork>
</t>
        <t indent="0" pn="section-2.1-27"><figure anchor="fig-6" align="left" suppress-title="false" pn="figure-6">
<name slugifiedName="name-figure-6">Using a Group for Factorization</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
        <t indent="0" pn="section-2.1-28">Note that the lists inside the braces in the above definitions
constitute (anonymous) groups, while &quot;identity&quot; is a named group,
which can then be included as part of other groups (anonymous as in
the example, or themselves named).</t>
        <section anchor="usage" numbered="true" removeInRFC="false" toc="include" pn="section-2.1.1">
          <name slugifiedName="name-usage">Usage</name>
          <t indent="0" pn="section-2.1.1-1">Groups are the instrument used in composing data structures with
CDDL.  It is a matter of style in defining those structures whether
to define groups (anonymously) right in their contexts or whether to
define them in a separate rule and to reference them with their
respective name (possibly more than once).</t>
          <t indent="0" pn="section-2.1.1-2">With this, one is allowed to define all small parts of their data
structures and compose bigger protocol data units with those or to
have only one big protocol data unit that has all definitions ad hoc
where needed.</t>
        </section>
        <section anchor="syntax" numbered="true" removeInRFC="false" toc="include" pn="section-2.1.2">
          <name slugifiedName="name-syntax">Syntax</name>
          <t indent="0" pn="section-2.1.2-1">The composition syntax is intended to be concise and easy to read:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2.1.2-2">
            <li pn="section-2.1.2-2.1"> The start and end of a group can be marked by &quot;(&quot; and &quot;)&quot;.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2.1.2-3">
            <li pn="section-2.1.2-3.1"> Definitions of entries inside of a group are noted as follows:
   _keytype =&gt; valuetype,_ (read &quot;keytype maps to valuetype&quot;).  The
   comma is actually optional (not just in the final entry), but it
   is considered good style to set it.  The double arrow can be
   replaced by a colon in the common case of directly using a text
   string or integer literal as a key; see Section 3.5.1.  This is
   also the common way of naming elements of an array just for
   documentation; see Section 3.4.</li>
          </ul>
          <t indent="0" pn="section-2.1.2-4">A basic entry consists of a _keytype_ and a _valuetype_, both of
which are types (Section 2.2); this entry matches any name/value pair
the name of which is in the keytype and the value of which is in the
valuetype.</t>
          <t indent="0" pn="section-2.1.2-5">A group defined as a sequence of group entries matches any sequence
of name/value pairs that is composed by concatenation in order of
what the entries match.</t>
          <t indent="0" pn="section-2.1.2-6">A group definition can also contain choices between groups; see
Section 2.2.2.</t>
        </section>
      </section>
      <section anchor="types" numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-types">Types</name>
        <section anchor="values" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.1">
          <name slugifiedName="name-values">Values</name>
          <t indent="0" pn="section-2.2.1-1">Values such as numbers and strings can be used in place of a type.
(For instance, this is a very common thing to do for a key type,
common enough that CDDL provides additional convenience syntax
for this.)</t>
          <t indent="0" pn="section-2.2.1-2">The value notation is based on the C language, but does not offer all
the syntactic variations (see Appendix B for details).  The value
notation for numbers inherits from C the distinction between integer
values (no fractional part or exponent given -- NR1 <xref target="ISO6093" format="default" sectionFormat="of" derivedContent="ISO6093"/>;
&quot;NR&quot; stands for &quot;numerical representation&quot;) and floating-point values
(where a fractional part, an exponent, or both are present -- NR2 or
NR3), so the type &quot;1&quot; does not include any floating-point numbers
while the types &quot;1e3&quot; and &quot;1.5&quot; are both floating-point numbers and
do not include any integer numbers.</t>
        </section>
        <section anchor="choices" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.2">
          <name slugifiedName="name-choices">Choices</name>
          <t indent="0" pn="section-2.2.2-1">Many places that allow a type also allow a choice between types,
delimited by a &quot;/&quot; (slash).  The entire choice construct can be put
into parentheses if this is required to make the construction
unambiguous (please see Appendix B for details of the CDDL grammar).</t>
          <t indent="0" pn="section-2.2.2-2">Choices of values can be used to express enumerations:</t>
          <t indent="0" pn="section-2.2.2-3"><artwork name="" type="" align="left" alt=""><![CDATA[
         attire = "bow tie" / "necktie" / "Internet attire"
         protocol = 6 / 17
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-4">Analogous to types, CDDL also allows choices between groups,
delimited by a &quot;//&quot; (double slash).  Note that the &quot;//&quot; operator
binds much more weakly than the other CDDL operators, so each line
within &quot;delivery&quot; in the following example is its own alternative in
the group choice:</t>
          <t indent="0" pn="section-2.2.2-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                address = { delivery }
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                delivery = (
                street: tstr, ? number: uint, city //
                po-box: uint, city //
                per-pickup: true )
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-7"><artwork name="" type="" align="left" alt=""><![CDATA[
                city = (
                name: tstr, zip-code: uint
                )
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-8">A group choice matches the union of the sets of name/value pair
sequences that the alternatives in the choice can.</t>
          <t indent="0" pn="section-2.2.2-9">For both type choices and group choices, additional alternatives can
be added to a rule later in separate rules by using &quot;/=&quot; and &quot;//=&quot;,
respectively, instead of &quot;=&quot;:</t>
          <t indent="0" pn="section-2.2.2-10"><artwork name="" type="" align="left" alt=""><![CDATA[
              attire /= "swimwear"
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-11"><artwork name="" type="" align="left" alt=""><![CDATA[
              delivery //= (
              lat: float, long: float, drone-type: tstr
              )
]]></artwork>
</t>
          <t indent="0" pn="section-2.2.2-12">It is not an error if a name is first used with a &quot;/=&quot; or &quot;//=&quot;
(there is no need to &quot;create it&quot; with &quot;=&quot;).</t>
          <section anchor="ranges" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.2.1">
            <name slugifiedName="name-ranges">Ranges</name>
            <t indent="0" pn="section-2.2.2.1-1">Instead of naming all the values that make up a choice, CDDL allows
building a _range_ out of two values that are in an ordering
relationship: a lower bound (first value) and an upper bound (second
value).  A range can be inclusive of both bounds given (denoted by
joining two values by &quot;..&quot;), or it can include the lower bound and
exclude the upper bound (denoted by instead using &quot;...&quot;).  If the
lower bound exceeds the upper bound, the resulting type is the empty
set (this behavior can be desirable when generics (Section 3.10) are
being used).</t>
            <t indent="0" pn="section-2.2.2.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
      device-address = byte
      max-byte = 255
      byte = 0..max-byte ; inclusive range
      first-non-byte = 256
      byte1 = 0...first-non-byte ; byte1 is equivalent to byte
]]></artwork>
</t>
            <t indent="0" pn="section-2.2.2.1-3">CDDL currently only allows ranges between integers (matching integer
values) or between floating-point values (matching floating-point
values).  If both are needed in a type, a type choice between the two
kinds of ranges can be (clumsily) used:</t>
            <t indent="0" pn="section-2.2.2.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
             int-range = 0..10 ; only integers match
             float-range = 0.0..10.0 ; only floats match
             BAD-range1 = 0..10.0 ; NOT DEFINED
             BAD-range2 = 0.0..10 ; NOT DEFINED
             numeric-range = int-range / float-range
]]></artwork>
</t>
            <t indent="0" pn="section-2.2.2.1-5">(See also the control operators .lt/.ge and .le/.gt in
Section 3.8.6.)
Note that the dot is a valid name continuation character in CDDL, so</t>
            <t indent="0" pn="section-2.2.2.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   min..max
]]></artwork>
</t>
            <t indent="0" pn="section-2.2.2.1-7">is not a range expression but a single name.  When using a name as
the left-hand side of a range operator, use spacing as in</t>
            <t indent="0" pn="section-2.2.2.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   min .. max
]]></artwork>
</t>
            <t indent="0" pn="section-2.2.2.1-9">to separate off the range operator.</t>
          </section>
          <section anchor="turning-a-group-into-a-choice" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.2.2">
            <name slugifiedName="name-turning-a-group-into-a-choice">Turning a Group into a Choice</name>
            <t indent="0" pn="section-2.2.2.2-1">Some choices are built out of large numbers of values, often
integers, each of which is best given a semantic name in the
specification.  Instead of naming each of these integers and then
accumulating them into a choice, CDDL allows building a choice from a
group by prefixing it with an &quot;&amp;&quot; character:</t>
            <t indent="0" pn="section-2.2.2.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
           terminal-color = &basecolors
           basecolors = (
             black: 0,  red: 1,  green: 2,  yellow: 3,
             blue: 4,  magenta: 5,  cyan: 6,  white: 7,
           )
           extended-color = &(
             basecolors,
             orange: 8,  pink: 9,  purple: 10,  brown: 11,
           )
]]></artwork>
</t>
            <t indent="0" pn="section-2.2.2.2-3">As with the use of groups in arrays (Section 3.4), the member names
have only documentary value (in particular, they might be used by a
tool when displaying integers that are taken from that choice).</t>
          </section>
        </section>
        <section anchor="representation-types" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.3">
          <name slugifiedName="name-representation-types">Representation Types</name>
          <t indent="0" pn="section-2.2.3-1">CDDL allows the specification of a data item type by referring to the
CBOR representation (specifically, to major types and additional
information; see <xref target="RFC7049" section="2" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7049#section-2" derivedContent="RFC7049"/>).  How this is used should be
evident from the prelude (Appendix D): a hash mark (&quot;#&quot;) optionally
followed by a number from 0 to 7 identifying the major type, which
then can be followed by a dot and a number specifying the additional
information.  This construction specifies the set of values that can
be serialized in CBOR (i.e., &quot;any&quot;), by the given major type if one
is given, or by the given major type with the additional information
if both are given.  Where a major type of 6 (Tag) is used, the type
of the tagged item can be specified by appending it in parentheses.</t>
          <t indent="0" pn="section-2.2.3-2">Note that although this notation is based on the CBOR serialization,
it is about a set of values at the data model level, e.g., &quot;#7.25&quot;
specifies the set of values that can be represented as half-precision
floats; it does not mandate that these values also do have to be
serialized as half-precision floats: CDDL does not provide any
language means to restrict the choice of serialization variants.
This also enables the use of CDDL with JSON, which uses a
fundamentally different way of serializing (some of) the same values.</t>
          <t indent="0" pn="section-2.2.3-3">It may be necessary to make use of representation types outside the
prelude, e.g., a specification could start by making use of an
existing tag in a more specific way or could define a new tag not
defined in the prelude:</t>
          <t indent="0" pn="section-2.2.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   my_breakfast = #6.55799(breakfast)   ; cbor-any is too general!
   breakfast = cereal / porridge
   cereal = #6.998(tstr)
   porridge = #6.999([liquid, solid])
   liquid = milk / water
   milk = 0
   water = 1
   solid = tstr
]]></artwork>
</t>
        </section>
        <section anchor="root-type" numbered="true" removeInRFC="false" toc="include" pn="section-2.2.4">
          <name slugifiedName="name-root-type">Root Type</name>
          <t indent="0" pn="section-2.2.4-1">There is no special syntax to identify the root of a CDDL data
structure definition: that role is simply taken by the first rule
defined in the file.</t>
          <t indent="0" pn="section-2.2.4-2">This is motivated by the usual top-down approach for defining data
structures, decomposing a big data structure unit into smaller parts;
however, except for the root type, there is no need to strictly
follow this sequence.</t>
          <t indent="0" pn="section-2.2.4-3">(Note that there is no way to use a group as a root -- it must be
a type.)</t>
        </section>
      </section>
    </section>
    <section anchor="syntax" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-syntax">Syntax</name>
      <t indent="0" pn="section-3-1">In this section, the overall syntax of CDDL is shown, alongside some
examples just illustrating syntax.  (The definition does not attempt
to be overly formal; refer to Appendix B for details.)</t>
      <section anchor="general-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-general-conventions">General Conventions</name>
        <t indent="0" pn="section-3.1-1">The basic syntax is inspired by ABNF <xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>, with the following:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-2">
          <li pn="section-3.1-2.1"> Rules, whether they define groups or types, are defined with a
   name, followed by an equals sign &quot;=&quot; and the actual definition
   according to the respective syntactic rules of that definition.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-3">
          <li pn="section-3.1-3.1"> A name can consist of any of the characters from the set {&quot;A&quot; to
   &quot;Z&quot;, &quot;a&quot; to &quot;z&quot;, &quot;0&quot; to &quot;9&quot;, &quot;_&quot;, &quot;-&quot;, &quot;@&quot;, &quot;.&quot;, &quot;$&quot;}, starting
   with an alphabetic character (including &quot;@&quot;, &quot;_&quot;, &quot;$&quot;) and ending
   in such a character or a digit.</li>
        </ul>
        <t indent="0" pn="section-3.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Names are case sensitive.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  It is preferred style to start a name with a lowercase letter.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  The hyphen is preferred over the underscore (except in a
      "bareword" (Section 3.5.1), where the semantics may actually
      require an underscore).
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  The period may be useful for larger specifications, to express
      some module structure (as in "tcp.throughput" vs.
      "udp.throughput").
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  A number of names are predefined in the CDDL prelude, as listed
      in Appendix D.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Rule names (types or groups) do not appear in the actual CBOR
      encoding, but names used as "barewords" in member keys do.
]]></artwork>
</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-10">
          <li pn="section-3.1-10.1"> Comments are started by a &quot;;&quot; (semicolon) character and finish at
   the end of a line (LF or CRLF).</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-11">
          <li pn="section-3.1-11.1"> Except within strings, whitespace (spaces, newlines, and comments)
   is used to separate syntactic elements for readability (and to
   separate identifiers, range operators, or numbers that follow each
   other); it is otherwise completely optional.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-12">
          <li pn="section-3.1-12.1"> Hexadecimal numbers are preceded by &quot;0x&quot; (without quotes) and are
   case insensitive.  Similarly, binary numbers are preceded by &quot;0b&quot;.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-13">
          <li pn="section-3.1-13.1"> Text strings are enclosed by double quotation '&quot;' characters.
   They follow the conventions for strings as defined in Section 7 of
   [RFC8259].  (ABNF users may want to note that there is no support
   in CDDL for the concept of case insensitivity in text strings; if
   necessary, regular expressions can be used (Section 3.8.3).)</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-14">
          <li pn="section-3.1-14.1"> Byte strings are enclosed by single quotation &quot;'&quot; characters and
   may be prefixed by &quot;h&quot; or &quot;b64&quot;.  If unprefixed, the string is
   interpreted as with a text string, except that single quotes must
   be escaped and that the resulting UTF-8 bytes are marked as a byte
   string (major type 2).  If prefixed as &quot;h&quot; or &quot;b64&quot;, the string is
   interpreted as a sequence of pairs of hex digits (base16; see
   Section 8 of [RFC4648]) or a base64(url) string (Section 4 or
   Section 5 of [RFC4648]), respectively (as with the diagnostic
   notation in Section 6 of [RFC7049]; cf. Appendix G.2); any
   whitespace present within the string (including comments) is
   ignored in the prefixed case.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1-15">
          <li pn="section-3.1-15.1"> CDDL uses UTF-8 [RFC3629] for its encoding.  Processing of CDDL
   does not involve Unicode normalization processes.</li>
        </ul>
        <t indent="0" pn="section-3.1-16">Example:</t>
        <t indent="0" pn="section-3.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
                 ; This is a comment
                 person = { g }
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
                 g = (
                   "name": tstr,
                   age: int,  ; "age" is a bareword
                 )
]]></artwork>
</t>
      </section>
      <section anchor="occurrence" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-occurrence">Occurrence</name>
        <t indent="0" pn="section-3.2-1">An optional _occurrence_ indicator can be given in front of a group
entry.  It is either (1) one of the characters &quot;?&quot; (optional), &quot;*&quot;
(zero or more), or &quot;+&quot; (one or more) or (2) of the form n*m, where n
and m are optional unsigned integers and n is the lower limit
(default 0) and m is the upper limit (default no limit) of
occurrences.</t>
        <t indent="0" pn="section-3.2-2">If no occurrence indicator is specified, the group entry is to occur
exactly once (as if 1*1 were specified).  A group entry with an
occurrence indicator matches sequences of name/value pairs that are
composed by concatenating a number of sequences that the basic group
entry matches, where the number needs to be allowed by the occurrence
indicator.</t>
        <t indent="0" pn="section-3.2-3">Note that CDDL, outside any directives/annotations that could
possibly be defined, does not make any prescription as to whether
arrays or maps use definite-length or indefinite-length encoding.
That is, there is no correlation between leaving the size of an array
&quot;open&quot; in the spec and the fact that it is then interchanged with
definite or indefinite length.</t>
        <t indent="0" pn="section-3.2-4">Please also note that CDDL can describe flexibility that the data
model of the target representation does not have.  This is rather
obvious for JSON but is also relevant for CBOR:</t>
        <t indent="0" pn="section-3.2-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                        apartment = {
                          kitchen: size,
                          * bedroom: size,
                        }
                        size = float ; in m2
]]></artwork>
</t>
        <t indent="0" pn="section-3.2-6">The previous specification does not mean that CBOR is changed to
allow using the key &quot;bedroom&quot; more than once.  In other words, due to
the restrictions imposed by the data model, the third line pretty
much turns into:</t>
        <t indent="0" pn="section-3.2-7"><artwork name="" type="" align="left" alt=""><![CDATA[
                          ? bedroom: size,
]]></artwork>
</t>
        <t indent="0" pn="section-3.2-8">(Occurrence indicators beyond one are still useful in maps for groups
that allow a variety of keys.)</t>
      </section>
      <section anchor="predefined-names-for-types" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-predefined-names-for-types">Predefined Names for Types</name>
        <t indent="0" pn="section-3.3-1">CDDL predefines a number of names.  This subsection summarizes these
names, but please see Appendix D for the exact definitions.</t>
        <t indent="0" pn="section-3.3-2">The following keywords for primitive datatypes are defined:</t>
        <t indent="0" pn="section-3.3-3">&quot;bool&quot;  Boolean value (major type 7, additional information 20
   or 21).</t>
        <t indent="0" pn="section-3.3-4">&quot;uint&quot;  An unsigned integer (major type 0).</t>
        <t indent="0" pn="section-3.3-5">&quot;nint&quot;  A negative integer (major type 1).</t>
        <t indent="0" pn="section-3.3-6">&quot;int&quot;  An unsigned integer or a negative integer.</t>
        <t indent="0" pn="section-3.3-7">&quot;float16&quot;  A number representable as a half-precision float <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/>
   (major type 7, additional information 25).</t>
        <t indent="0" pn="section-3.3-8">&quot;float32&quot;  A number representable as a single-precision float
   <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/> (major type 7, additional information 26).</t>
        <t indent="0" pn="section-3.3-9">&quot;float64&quot;  A number representable as a double-precision float
   <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/> (major type 7, additional information 27).</t>
        <t indent="0" pn="section-3.3-10">&quot;float&quot;  One of float16, float32, or float64.</t>
        <t indent="0" pn="section-3.3-11">&quot;bstr&quot; or &quot;bytes&quot;  A byte string (major type 2).</t>
        <t indent="0" pn="section-3.3-12">&quot;tstr&quot; or &quot;text&quot;  Text string (major type 3).</t>
        <t indent="0" pn="section-3.3-13">(Note that there are no predefined names for arrays or maps; these
are defined with the syntax given below.)</t>
        <t indent="0" pn="section-3.3-14">In addition, a number of types are defined in the prelude that are
associated with CBOR tags, such as &quot;tdate&quot;, &quot;bigint&quot;, &quot;regexp&quot;, etc.</t>
      </section>
      <section anchor="arrays" numbered="true" removeInRFC="false" toc="include" pn="section-3.4">
        <name slugifiedName="name-arrays">Arrays</name>
        <t indent="0" pn="section-3.4-1">Array definitions surround a group with square brackets.</t>
        <t indent="0" pn="section-3.4-2">For each entry, an occurrence indicator as specified in Section 3.2
is permitted.</t>
        <t indent="0" pn="section-3.4-3">For example:</t>
        <t indent="0" pn="section-3.4-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                  unlimited-people = [* person]
                  one-or-two-people = [1*2 person]
                  at-least-two-people = [2* person]
                  person = (
                      name: tstr,
                      age: uint,
                  )
]]></artwork>
</t>
        <t indent="0" pn="section-3.4-5">The group &quot;person&quot; is defined in such a way that repeating it in the
array each time generates alternating names and ages, so these are
four valid values for a data item of type &quot;unlimited-people&quot;:</t>
        <t indent="0" pn="section-3.4-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   ["roundlet", 1047, "psychurgy", 2204, "extrarhythmical", 2231]
   []
   ["aluminize", 212, "climograph", 4124]
   ["penintime", 1513, "endocarditis", 4084, "impermeator", 1669,
    "coextension", 865]
]]></artwork>
</t>
      </section>
      <section anchor="maps" numbered="true" removeInRFC="false" toc="include" pn="section-3.5">
        <name slugifiedName="name-maps">Maps</name>
        <t indent="0" pn="section-3.5-1">The syntax for specifying maps merits special attention, as well as a
number of optimizations and conveniences, as it is likely to be the
focal point of many specifications employing CDDL.  While the syntax
does not strictly distinguish struct and table usage of maps, it
caters specifically to each of them.</t>
        <t indent="0" pn="section-3.5-2">But first, let's reiterate a feature of CBOR that it has inherited
from JSON: the key/value pairs in CBOR maps have no fixed ordering.
(One could imagine situations where fixing the ordering may be of
use.  For example, a decoder could look for values related with
integer keys 1, 3, and 7.  If the order were fixed and the decoder
encounters the key 4 without having encountered key 3, it could
conclude that key 3 is not available without doing more complicated
bookkeeping.  Unfortunately, neither JSON nor CBOR supports this, so
no attempt was made to support this in CDDL either.)</t>
        <section anchor="structs" numbered="true" removeInRFC="false" toc="include" pn="section-3.5.1">
          <name slugifiedName="name-structs">Structs</name>
          <t indent="0" pn="section-3.5.1-1">The &quot;struct&quot; usage of maps is similar to the way JSON objects are
used in many JSON applications.</t>
          <t indent="0" pn="section-3.5.1-2">A map is defined in the same way as that for defining an array (see
Section 3.4), except for using curly braces &quot;{}&quot; instead of square
brackets &quot;[]&quot;.</t>
          <t indent="0" pn="section-3.5.1-3">An occurrence indicator as specified in Section 3.2 is permitted for
each group entry.</t>
          <t indent="0" pn="section-3.5.1-4">The following is an example of a record with a structure embedded:</t>
          <t indent="0" pn="section-3.5.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
    Geography = [
      city           : tstr,
      gpsCoordinates : GpsCoordinates,
    ]
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
    GpsCoordinates = {
      longitude      : uint,            ; degrees, scaled by 10^7
      latitude       : uint,            ; degrees, scaled by 10^7
    }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-7">When encoding, the Geography record is encoded using a CBOR array
with two members (the keys for the group entries are ignored),
whereas the GpsCoordinates structure is encoded as a CBOR map with
two key/value pairs.</t>
          <t indent="0" pn="section-3.5.1-8">Types used in a structure can be defined in separate rules or just in
place (potentially placed inside parentheses, such as for choices).
For example:</t>
          <t indent="0" pn="section-3.5.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
                        located-samples = {
                          sample-point: int,
                          samples: [+ float],
                        }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-10">where &quot;located-samples&quot; is the datatype to be used when referring to
the struct, and &quot;sample-point&quot; and &quot;samples&quot; are the keys to be used.
This is actually a complete example: an identifier that is followed
by a colon can be directly used as the text string for a member key
(we speak of a &quot;bareword&quot; member key), as can a double-quoted string
or a number.  (When other types -- in particular, types that contain
more than one value -- are used as the types of keys, they are
followed by a double arrow; see below.)</t>
          <t indent="0" pn="section-3.5.1-11">If a text string key does not match the syntax for an identifier (or
if the specifier just happens to prefer using double quotes), the
text string syntax can also be used in the member key position,
followed by a colon.  The above example could therefore have been
written with quoted strings in the member key positions.</t>
          <t indent="0" pn="section-3.5.1-12">More generally, types specified in ways other than those listed for
the cases described above can be used in a key-type position by
following them with a double arrow -- in particular, the double arrow
is necessary if a type is named by an identifier (which, when
followed by a colon, would be interpreted as a &quot;bareword&quot; and turned
into a text string).  A literal text string also gives rise to a type
(which contains a single value only -- the given string), so another
form for this example is:</t>
          <t indent="0" pn="section-3.5.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
                      located-samples = {
                        "sample-point" => int,
                        "samples" => [+ float],
                      }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-14">See Section 3.5.4 below for how the colon (&quot;:&quot;) shortcut described
here also adds some implied semantics.</t>
          <t indent="0" pn="section-3.5.1-15">A better way to demonstrate the use of the double arrow may be:</t>
          <t indent="0" pn="section-3.5.1-16"><artwork name="" type="" align="left" alt=""><![CDATA[
          located-samples = {
            sample-point: int,
            samples: [+ float],
            * equipment-type => equipment-tolerances,
          }
          equipment-type = [name: tstr, manufacturer: tstr]
          equipment-tolerances = [+ [float, float]]
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-17">The example below defines a struct with optional entries: display
name (as a text string), the name components first name and family
name (as text strings), and age information (as an unsigned integer).</t>
          <t indent="0" pn="section-3.5.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
                       PersonalData = {
                         ? displayName: tstr,
                         NameComponents,
                         ? age: uint,
                       }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
                       NameComponents = (
                         ? firstName: tstr,
                         ? familyName: tstr,
                       )
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-20">Note that the group definition for NameComponents does not generate
another map; instead, all four keys are directly in the struct built
by PersonalData.</t>
          <t indent="0" pn="section-3.5.1-21">In this example, all key/value pairs are optional from the
perspective of CDDL.  With no occurrence indicator, an entry is
mandatory.</t>
          <t indent="0" pn="section-3.5.1-22">If the addition of more entries not specified by the current
specification is desired, one can add this possibility explicitly:</t>
          <t indent="0" pn="section-3.5.1-23"><artwork name="" type="" align="left" alt=""><![CDATA[
                       PersonalData = {
                         ? displayName: tstr,
                         NameComponents,
                         ? age: uint,
                         * tstr => any
                       }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-24"><artwork name="" type="" align="left" alt=""><![CDATA[
                       NameComponents = (
                         ? firstName: tstr,
                         ? familyName: tstr,
                       )
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-25"><figure anchor="fig-7" align="left" suppress-title="false" pn="figure-7">
<name slugifiedName="name-figure-7">Personal Data: Example for Extensibility</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
          <t indent="0" pn="section-3.5.1-26">The CDDL tool described in Appendix F generated the following as one
acceptable instance for this specification:</t>
          <t indent="0" pn="section-3.5.1-27"><artwork name="" type="" align="left" alt=""><![CDATA[
      {"familyName": "agust", "antiforeignism": "pretzel",
       "springbuck": "illuminatingly", "exuviae": "ephemeris",
       "kilometrage": "frogfish"}
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.1-28">(See Section 3.9 for one way to explicitly identify an extension
point.)</t>
        </section>
        <section anchor="tables" numbered="true" removeInRFC="false" toc="include" pn="section-3.5.2">
          <name slugifiedName="name-tables">Tables</name>
          <t indent="0" pn="section-3.5.2-1">A table can be specified by defining a map with entries where the
key type allows more than just a single value; for example:</t>
          <t indent="0" pn="section-3.5.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                      square-roots = {* x => y}
                      x = int
                      y = float
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.2-3">Here, the key in each key/value pair has datatype x (defined as int),
and the value has datatype y (defined as float).</t>
          <t indent="0" pn="section-3.5.2-4">If the specification does not need to restrict one of x or y (i.e.,
the application is free to choose per entry), it can be replaced by
the predefined name &quot;any&quot;.</t>
          <t indent="0" pn="section-3.5.2-5">As another example, the following could be used as a conversion table
converting from an integer or float to a string:</t>
          <t indent="0" pn="section-3.5.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                   tostring = {* mynumber => tstr}
                   mynumber = int / float
]]></artwork>
</t>
        </section>
        <section anchor="non-deterministic-order" numbered="true" removeInRFC="false" toc="include" pn="section-3.5.3">
          <name slugifiedName="name-non-deterministic-order">Non-deterministic Order</name>
          <t indent="0" pn="section-3.5.3-1">While the way arrays are matched is fully determined by the PEG
formalism (see Appendix A), matching is more complicated for maps, as
maps do not have an inherent order.  For each candidate name/value
pair that the PEG algorithm would try, a matching member is picked
out of the entire map.  For certain group expressions, more than one
member in the map may match.  Most often, this is inconsequential, as
the group expression tends to consume all matches:</t>
          <t indent="0" pn="section-3.5.3-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                         labeled-values = {
                           ? fritz: number,
                           * label => value
                         }
                         label = text
                         value = number
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.3-3">Here, if any member with the key &quot;fritz&quot; is present, this will be
picked by the first entry of the group; all remaining text/number
members will be picked by the second entry (and if anything remains
unpicked, the map does not match).</t>
          <t indent="0" pn="section-3.5.3-4">However, it is possible to construct group expressions where what is
actually picked is indeterminate, but does matter:</t>
          <t indent="0" pn="section-3.5.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                         do-not-do-this = {
                           int => int,
                           int => 6,
                         }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.3-6">When this expression is matched against &quot;{3: 5, 4: 6}&quot;, the first
group entry might pick off the &quot;3: 5&quot;, leaving &quot;4: 6&quot; for matching
the second one.  Or it might pick off &quot;4: 6&quot;, leaving nothing for the
second entry.  This pathological non-determinism is caused by
specifying &quot;more general&quot; before &quot;more specific&quot; and by having a
general rule that only consumes a subset of the map key/value pairs
that it is able to match -- both tend not to occur in real-world
specifications of maps.  At the time of writing, CDDL tools cannot
detect such cases automatically, and for the present version of the
CDDL specification, the specification writer is simply urged to not
write pathologically non-deterministic specifications.</t>
          <t indent="0" pn="section-3.5.3-7">(The astute reader will be reminded of what was called &quot;ambiguous
content models&quot; in the Standard Generalized Markup Language (SGML)
and &quot;non-deterministic content models&quot; in XML.  That problem is
related to the one described here, but the problem here is
specifically caused by the lack of order in maps, something that the
XML schema languages do not have to contend with.  Note that
RELAX NG's &quot;interleave&quot; pattern handles lack of order explicitly on
the specification side, while the instances in XML always have
determinate order.)</t>
        </section>
        <section anchor="cuts-in-maps" numbered="true" removeInRFC="false" toc="include" pn="section-3.5.4">
          <name slugifiedName="name-cuts-in-maps">Cuts in Maps</name>
          <t indent="0" pn="section-3.5.4-1">The extensibility idiom discussed above for structs has one problem:</t>
          <t indent="0" pn="section-3.5.4-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                     extensible-map-example = {
                       ? "optional-key" => int,
                       * tstr => any
                     }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.4-3">In this example, there is one optional key &quot;optional-key&quot;, which,
when present, maps to an integer.  There is also a wildcard for any
future additions.</t>
          <t indent="0" pn="section-3.5.4-4">Unfortunately, the data item</t>
          <t indent="0" pn="section-3.5.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                   { "optional-key": "nonsense" }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.4-6">does match this specification: while the first entry of the group
does not match, the second one (the wildcard) does.  This may very
well be desirable (e.g., if a future extension is to be allowed to
extend the type of &quot;optional-key&quot;), but in many cases it isn't.</t>
          <t indent="0" pn="section-3.5.4-7">In anticipation of a more general potential feature called &quot;cuts&quot;,
CDDL allows inserting a cut &quot;^&quot; into the definition of the map entry:</t>
          <t indent="0" pn="section-3.5.4-8"><artwork name="" type="" align="left" alt=""><![CDATA[
                    extensible-map-example = {
                      ? "optional-key" ^ => int,
                      * tstr => any
                    }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.4-9">A cut in this position means that once the member key matches the
name part of an entry that carries a cut, other potential matches for
the key of the member that occur in later entries in the group of the
map are no longer allowed.  In other words, when a group entry would
pick a key/value pair based on just a matching key, it &quot;locks in&quot; the
pick -- this rule applies, independently of whether the value matches
as well, so when it does not, the entire map fails to match.  In
summary, the example above no longer matches the specification as
modified with the cut.</t>
          <t indent="0" pn="section-3.5.4-10">Since the desire for this kind of exclusive matching is so frequent,
the &quot;:&quot; shortcut is actually defined to include the cut semantics.
So, the preceding example (including the cut) can be written more
simply as:</t>
          <t indent="0" pn="section-3.5.4-11"><artwork name="" type="" align="left" alt=""><![CDATA[
                     extensible-map-example = {
                       ? "optional-key": int,
                       * tstr => any
                     }
]]></artwork>
</t>
          <t indent="0" pn="section-3.5.4-12">or even shorter, using a bareword for the key:</t>
          <t indent="0" pn="section-3.5.4-13"><artwork name="" type="" align="left" alt=""><![CDATA[
                     extensible-map-example = {
                       ? optional-key: int,
                       * tstr => any
                     }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="tags" numbered="true" removeInRFC="false" toc="include" pn="section-3.6">
        <name slugifiedName="name-tags">Tags</name>
        <t indent="0" pn="section-3.6-1">A type can make use of a CBOR tag (major type 6) by using the
representation type notation, giving #6.nnn(type) where nnn is an
unsigned integer giving the tag number and &quot;type&quot; is the type of the
data item being tagged.</t>
        <t indent="0" pn="section-3.6-2">For example, the following line from the CDDL prelude (Appendix D)
defines &quot;biguint&quot; as a type name for an unsigned bignum N:</t>
        <t indent="0" pn="section-3.6-3"><artwork name="" type="" align="left" alt=""><![CDATA[
                        biguint = #6.2(bstr)
]]></artwork>
</t>
        <t indent="0" pn="section-3.6-4">The tags defined by <xref target="RFC7049" format="default" sectionFormat="of" derivedContent="RFC7049"/> are included in the prelude.
Additional tags registered since <xref target="RFC7049" format="default" sectionFormat="of" derivedContent="RFC7049"/> was written need to be
added to a CDDL specification as needed; e.g., a binary Universally
Unique Identifier (UUID) tag could be referenced as &quot;buuid&quot; in a
specification after defining</t>
        <t indent="0" pn="section-3.6-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                         buuid = #6.37(bstr)
]]></artwork>
</t>
        <t indent="0" pn="section-3.6-6">In the following example, usage of tag 32 for URIs is optional:</t>
        <t indent="0" pn="section-3.6-7"><artwork name="" type="" align="left" alt=""><![CDATA[
                     my_uri = #6.32(tstr) / tstr
]]></artwork>
</t>
      </section>
      <section anchor="unwrapping" numbered="true" removeInRFC="false" toc="include" pn="section-3.7">
        <name slugifiedName="name-unwrapping">Unwrapping</name>
        <t indent="0" pn="section-3.7-1">The group that is used to define a map or an array can often be
reused in the definition of another map or array.  Similarly, a type
defined as a tag carries an internal data item that one would like to
refer to.  In these cases, it is expedient to simply use the name of
the map, array, or tag type as a handle for the group or type defined
inside it.</t>
        <t indent="0" pn="section-3.7-2">The &quot;unwrap&quot; operator (written by preceding a name by a tilde
character &quot;~&quot;) can be used to strip the type defined for a name by
one layer, exposing the underlying group (for maps and arrays) or
type (for tags).</t>
        <t indent="0" pn="section-3.7-3">For example, an application might want to define a basic header and
an advanced header.  Without unwrapping, this might be done as
follows:</t>
        <t indent="0" pn="section-3.7-4"><artwork name="" type="" align="left" alt=""><![CDATA[
          basic-header-group = (
            field1: int,
            field2: text,
          )
]]></artwork>
</t>
        <t indent="0" pn="section-3.7-5"><artwork name="" type="" align="left" alt=""><![CDATA[
          basic-header = [ basic-header-group ]
]]></artwork>
</t>
        <t indent="0" pn="section-3.7-6"><artwork name="" type="" align="left" alt=""><![CDATA[
          advanced-header = [
            basic-header-group,
            field3: bytes,
            field4: number, ; as in the tagged type "time"
          ]
]]></artwork>
</t>
        <t indent="0" pn="section-3.7-7">Unwrapping simplifies this to:</t>
        <t indent="0" pn="section-3.7-8"><artwork name="" type="" align="left" alt=""><![CDATA[
                         basic-header = [
                           field1: int,
                           field2: text,
                         ]
]]></artwork>
</t>
        <t indent="0" pn="section-3.7-9"><artwork name="" type="" align="left" alt=""><![CDATA[
                         advanced-header = [
                           ~basic-header,
                           field3: bytes,
                           field4: ~time,
                         ]
]]></artwork>
</t>
        <t indent="0" pn="section-3.7-10">(Note that leaving out the first unwrap operator in the latter
example would lead to nesting the basic-header in its own array
inside the advanced-header, while, with the unwrapped basic-header,
the definition of the group inside basic-header is essentially
repeated inside advanced-header, leading to a single array.  This can
be used for various applications often solved by inheritance in
programming languages.  The effect of unwrapping can also be
described as &quot;threading in&quot; the group or type inside the referenced
type, which suggested the thread-like &quot;~&quot; character.)</t>
      </section>
      <section anchor="controls" numbered="true" removeInRFC="false" toc="include" pn="section-3.8">
        <name slugifiedName="name-controls">Controls</name>
        <t indent="0" pn="section-3.8-1">A _control_ allows relating a _target_ type with a _controller_ type
via a _control operator_.</t>
        <t indent="0" pn="section-3.8-2">The syntax for a control type is &quot;target .control-operator
controller&quot;, where control operators are special identifiers prefixed
by a dot.  (Note that _target_ or _controller_ might need to be
parenthesized.)</t>
        <t indent="0" pn="section-3.8-3">A number of control operators are defined at this point.  Further
control operators may be defined by new versions of this
specification or by registering them according to the procedures in
Section 6.1.</t>
        <section anchor="control-operator-.size" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.1">
          <name slugifiedName="name-control-operator-.size">Control Operator .size</name>
          <t indent="0" pn="section-3.8.1-1">A &quot;.size&quot; control controls the size of the target in bytes by the
control type.  The control is defined for text and byte strings,
where it directly controls the number of bytes in the string.  It is
also defined for unsigned integers (see below).  Figure 8 shows
example usage for byte strings.</t>
          <t indent="0" pn="section-3.8.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                full-address = [[+ label], ip4, ip6]
                ip4 = bstr .size 4
                ip6 = bstr .size 16
                label = bstr .size (1..63)
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.1-3"><figure anchor="fig-8" align="left" suppress-title="false" pn="figure-8">
<name slugifiedName="name-figure-8">Control for Size in Bytes</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
          <t indent="0" pn="section-3.8.1-4">When applied to an unsigned integer, the &quot;.size&quot; control restricts
the range of that integer by giving a maximum number of bytes that
should be needed in a computer representation of that unsigned
integer.  In other words, &quot;uint .size N&quot; is equivalent to
&quot;0...BYTES_N&quot;, where BYTES_N == 256**N.</t>
          <t indent="0" pn="section-3.8.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  audio_sample = uint .size 3 ; 24-bit, equivalent to 0...16777216
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.1-6"><figure anchor="fig-9" align="left" suppress-title="false" pn="figure-9">
<name slugifiedName="name-figure-9">Control for Integer Size in Bytes</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
          <t indent="0" pn="section-3.8.1-7">Note that, as with value restrictions in CDDL, this control is not a
representation constraint; a number that fits into fewer bytes can
still be represented in that form, and an inefficient implementation
could use a longer form (unless that is restricted by some format
constraints outside of CDDL, such as the rules in <xref target="RFC7049" section="3.9" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7049#section-3.9" derivedContent="RFC7049"/>).</t>
        </section>
        <section anchor="control-operator-.bits" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.2">
          <name slugifiedName="name-control-operator-.bits">Control Operator .bits</name>
          <t indent="0" pn="section-3.8.2-1">A &quot;.bits&quot; control on a byte string indicates that, in the target,
only the bits numbered by a number in the control type are allowed to
be set.  (Bits are counted the usual way, bit number &quot;n&quot; being set in
&quot;str&quot; meaning that &quot;(str[n &gt;&gt; 3] &amp; (1 &lt;&lt; (n &amp; 7))) != 0&quot;.)
Similarly, a &quot;.bits&quot; control on an unsigned integer &quot;i&quot; indicates
that for all unsigned integers &quot;n&quot; where &quot;(i &amp; (1 &lt;&lt; n)) != 0&quot;, &quot;n&quot;
must be in the control type.</t>
          <t indent="0" pn="section-3.8.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                   tcpflagbytes = bstr .bits flags
                   flags = &(
                     fin: 8,
                     syn: 9,
                     rst: 10,
                     psh: 11,
                     ack: 12,
                     urg: 13,
                     ece: 14,
                     cwr: 15,
                     ns: 0,
                   ) / (4..7) ; data offset bits
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.2-3"><artwork name="" type="" align="left" alt=""><![CDATA[
                   rwxbits = uint .bits rwx
                   rwx = &(r: 2, w: 1, x: 0)
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.2-4"><figure anchor="fig-10" align="left" suppress-title="false" pn="figure-10">
<name slugifiedName="name-figure-10">Control for What Bits Can Be Set</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
          <t indent="0" pn="section-3.8.2-5">The CDDL tool described in Appendix F generates the following ten
example instances for &quot;tcpflagbytes&quot;:</t>
          <t indent="0" pn="section-3.8.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   h'906d' h'01fc' h'8145' h'01b7' h'013d' h'409f' h'018e' h'c05f'
   h'01fa' h'01fe'
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.2-7">These examples do not illustrate that the above CDDL specification
does not explicitly specify a size of two bytes: a valid all-clear
instance of flag bytes could be &quot;h''&quot; or &quot;h'00'&quot; or even &quot;h'000000'&quot;
as well.</t>
        </section>
        <section anchor="control-operator-.regexp" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.3">
          <name slugifiedName="name-control-operator-.regexp">Control Operator .regexp</name>
          <t indent="0" pn="section-3.8.3-1">A &quot;.regexp&quot; control indicates that the text string given as a target
needs to match the XML Schema Definition (XSD) regular expression
given as a value in the control type.  XSD regular expressions are
defined in Appendix F of <xref target="W3C.REC-xmlschema-2-20041028" format="default" sectionFormat="of" derivedContent="W3C.REC-xmlschema-2-20041028"/>.</t>
          <t indent="0" pn="section-3.8.3-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  nai = tstr .regexp "[A-Za-z0-9]+@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)+"
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.3-3"><figure anchor="fig-11" align="left" suppress-title="false" pn="figure-11">
<name slugifiedName="name-figure-11">Control with an XSD regexp</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
          <t indent="0" pn="section-3.8.3-4">An example matching this regular expression:</t>
          <t indent="0" pn="section-3.8.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                    "N1@CH57HF.4Znqe0.dYJRN.igjf"
]]></artwork>
</t>
          <section anchor="usage-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.3.1">
            <name slugifiedName="name-usage-considerations">Usage Considerations</name>
            <t indent="0" pn="section-3.8.3.1-1">Note that XSD regular expressions do not support the usual \x or \u
escapes for hexadecimal expression of bytes or Unicode code points.
However, in CDDL the XSD regular expressions are contained in text
strings, the literal notation for which provides \u escapes; this
should suffice for most applications that use regular expressions for
text strings.  (Note that this also means that there is one level of
string escaping before the XSD escaping rules are applied.)</t>
            <t indent="0" pn="section-3.8.3.1-2">XSD regular expressions support character class subtraction, a
feature often not found in regular expression libraries;
specification writers may want to use this feature sparingly.
Similar considerations apply to Unicode character classes; where
these are used, the specification that employs CDDL <bcp14>SHOULD</bcp14> identify
which Unicode versions are addressed.</t>
            <t indent="0" pn="section-3.8.3.1-3">Other surprises for infrequent users of XSD regular expressions may
include the following:</t>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.8.3.1-4">
              <li pn="section-3.8.3.1-4.1"> No direct support for case insensitivity.  While case
   insensitivity has gone mostly out of fashion in protocol design,
   it is sometimes needed and then needs to be expressed manually as
   in &quot;[Cc][Aa][Ss][Ee]&quot;.</li>
            </ul>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.8.3.1-5">
              <li pn="section-3.8.3.1-5.1"> The support for popular character classes such as \w and \d is
   based on Unicode character properties; this is often not what is
   desired in an ASCII-based protocol and thus might lead to
   surprises.  (\s and \S do have their more conventional meanings,
   and &quot;.&quot; matches any character but the line-ending characters \r
   or \n.)</li>
            </ul>
          </section>
          <section anchor="discussion" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.3.2">
            <name slugifiedName="name-discussion">Discussion</name>
            <t indent="0" pn="section-3.8.3.2-1">There are many flavors of regular expression in use in the
programming community.  For instance, Perl-Compatible Regular
Expressions (PCREs) are widely used and probably are more useful than
XSD regular expressions.  However, there is no normative reference
for PCREs that could be used in the present document.  Instead, we
opt for XSD regular expressions for now.  There is precedent for that
choice in the IETF, e.g., in YANG <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950"/>.</t>
            <t indent="0" pn="section-3.8.3.2-2">Note that CDDL uses controls as its main extension point.  This
creates the opportunity to add further regular expression formats in
addition to the one referenced here, if desired.  As an example, a
proposal for a &quot;.pcre&quot; control is defined in <xref target="CDDL-Freezer" format="default" sectionFormat="of" derivedContent="CDDL-Freezer"/>.</t>
          </section>
        </section>
        <section anchor="control-operators-.cbor-and-.cborseq" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.4">
          <name slugifiedName="name-control-operators-.cbor-and-.cborseq">Control Operators .cbor and .cborseq</name>
          <t indent="0" pn="section-3.8.4-1">A &quot;.cbor&quot; control on a byte string indicates that the byte string
carries a CBOR-encoded data item.  Decoded, the data item matches the
type given as the right-hand-side argument (type1 in the following
example).</t>
          <t indent="0" pn="section-3.8.4-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   "bytes .cbor type1"
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.4-3">Similarly, a &quot;.cborseq&quot; control on a byte string indicates that the
byte string carries a sequence of CBOR-encoded data items.  When the
data items are taken as an array, the array matches the type given as
the right-hand-side argument (type2 in the following example).</t>
          <t indent="0" pn="section-3.8.4-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   "bytes .cborseq type2"
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.4-5">(The conversion of the encoded sequence to an array can be effected,
for instance, by wrapping the byte string between the two bytes 0x9f
and 0xff and decoding the wrapped byte string as a CBOR-encoded
data item.)</t>
        </section>
        <section anchor="control-operators-.within-and-.and" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.5">
          <name slugifiedName="name-control-operators-.within-and-.and">Control Operators .within and .and</name>
          <t indent="0" pn="section-3.8.5-1">A &quot;.and&quot; control on a type indicates that the data item matches both
the left-hand-side type and the type given as the right-hand side.
(Formally, the resulting type is the intersection of the two types
given.)</t>
          <t indent="0" pn="section-3.8.5-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   "type1 .and type2"
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.5-3">A variant of the &quot;.and&quot; control is the &quot;.within&quot; control, which
expresses an additional intent: the left-hand-side type is meant to
be a subset of the right-hand-side type.</t>
          <t indent="0" pn="section-3.8.5-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   "type1 .within type2"
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.5-5">While both forms have the identical formal semantics (intersection),
the intention of the &quot;.within&quot; form is that the right-hand side gives
guidance to the types allowed on the left-hand side, which typically
is a socket (Section 3.9):</t>
          <t indent="0" pn="section-3.8.5-6"><artwork name="" type="" align="left" alt=""><![CDATA[
     message = $message .within message-structure
     message-structure = [message_type, *message_option]
     message_type = 0..255
     message_option = any
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.5-7"><artwork name="" type="" align="left" alt=""><![CDATA[
     $message /= [3, dough: text, topping: [* text]]
     $message /= [4, noodles: text, sauce: text, parmesan: bool]
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.5-8">For &quot;.within&quot;, a tool might flag an error if type1 allows data items
that are not allowed by type2.  In contrast, for &quot;.and&quot;, there is no
expectation that type1 is already a subset of type2.</t>
        </section>
        <section anchor="control-operators-.lt,-.le,-.gt,-.ge,-.eq,-.ne,-and-.default" numbered="true" removeInRFC="false" toc="include" pn="section-3.8.6">
          <name slugifiedName="name-control-operators-.lt,-.le,-.gt,-.ge,-.eq,-.ne,-and-.default">Control Operators .lt, .le, .gt, .ge, .eq, .ne, and .default</name>
          <t indent="0" pn="section-3.8.6-1">The controls .lt, .le, .gt, .ge, .eq, and .ne specify a constraint
on the left-hand-side type to be a value less than, less than or
equal to, greater than, greater than or equal to, equal to, or not
equal to a value given as a right-hand-side type (containing just
that single value).  In the present specification, the first four
controls (.lt, .le, .gt, and .ge) are defined only for numeric types,
as these have a natural ordering relationship.</t>
          <t indent="0" pn="section-3.8.6-2"><artwork name="" type="" align="left" alt=""><![CDATA[
                  speed = number .ge 0  ; unit: m/s
]]></artwork>
</t>
          <t indent="0" pn="section-3.8.6-3">.ne and .eq are defined for both numeric values and values of other
types.  If one of the values is not of a numeric type, equality is
determined as follows: text strings are equal (satisfy .eq / do not
satisfy .ne) if they are bytewise identical; the same applies for
byte strings.  Arrays are equal if they have the same number of
elements, all of which are equal pairwise in order between the
arrays.  Maps are equal if they have the same number of key/value
pairs, and there is pairwise equality between the key/value pairs
between the two maps.  Tagged values are equal if they both have the
same tag and the values are equal.  Values of simple types match if
they are the same values.  Numeric types that occur within arrays,
maps, or tagged values are equal if their numeric value is equal and
they are both integers or both floating-point values.  All other
cases are not equal (e.g., comparing a text string with a byte
string).</t>
          <t indent="0" pn="section-3.8.6-4">A variant of the &quot;.ne&quot; control is the &quot;.default&quot; control, which
expresses an additional intent: the value specified by the
right-hand-side type is intended as a default value for the
left-hand-side type given, and the implied .ne control is there to
prevent this value from being sent over the wire.  This control is
only meaningful when the control type is used in an optional context;
otherwise, there would be no way to make use of the default value.</t>
          <t indent="0" pn="section-3.8.6-5"><artwork name="" type="" align="left" alt=""><![CDATA[
            timer = {
              time: uint,
              ? displayed-step: (number .gt 0) .default 1
            }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="socket/plug" numbered="true" removeInRFC="false" toc="include" pn="section-3.9">
        <name slugifiedName="name-socket/plug">Socket/Plug</name>
        <t indent="0" pn="section-3.9-1">For both type choices and group choices, a mechanism is defined that
facilitates starting out with empty choices and assembling them
later, potentially in separate files that are concatenated to build
the full specification.</t>
        <t indent="0" pn="section-3.9-2">Per convention, CDDL extension points are marked with a leading
dollar sign (types) or two leading dollar signs (groups).  Tools
honor that convention by not raising an error if such a type or group
is not defined at all; the symbol is then taken to be an empty type
choice (group choice), i.e., no choice is available.</t>
        <t indent="0" pn="section-3.9-3"><artwork name="" type="" align="left" alt=""><![CDATA[
         tcp-header = {seq: uint, ack: uint, * $$tcp-option}
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-4"><artwork name="" type="" align="left" alt=""><![CDATA[
         ; later, in a different file
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-5"><artwork name="" type="" align="left" alt=""><![CDATA[
         $$tcp-option //= (
         sack: [+(left: uint, right: uint)]
         )
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-6"><artwork name="" type="" align="left" alt=""><![CDATA[
         ; and, maybe in another file
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-7"><artwork name="" type="" align="left" alt=""><![CDATA[
         $$tcp-option //= (
         sack-permitted: true
         )
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-8">Names that start with a single &quot;$&quot; are &quot;type sockets&quot;, starting out
as an empty type, and intended to be extended via &quot;/=&quot;.  Names that
start with a double &quot;$$&quot; are &quot;group sockets&quot;, starting out as an
empty group choice, and intended to be extended via &quot;//=&quot;.  In either
case, it is not an error if there is no definition for a socket at
all; this then means there is no way to satisfy the rule (i.e., the
choice is empty).</t>
        <t indent="0" pn="section-3.9-9">As a convention, all definitions (plugs) for socket names must be
augmentations, i.e., they must be using &quot;/=&quot; and &quot;//=&quot;, respectively.</t>
        <t indent="0" pn="section-3.9-10">To pick up the example illustrated in Figure 7, the socket/plug
mechanism could be used as shown in Figure 12:</t>
        <t indent="0" pn="section-3.9-11"><artwork name="" type="" align="left" alt=""><![CDATA[
                  PersonalData = {
                    ? displayName: tstr,
                    NameComponents,
                    ? age: uint,
                    * $$personaldata-extensions
                  }
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-12"><artwork name="" type="" align="left" alt=""><![CDATA[
                  NameComponents = (
                    ? firstName: tstr,
                    ? familyName: tstr,
                  )
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-13"><artwork name="" type="" align="left" alt=""><![CDATA[
                  ; The above already works as is.
                  ; But then, we can add later:
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-14"><artwork name="" type="" align="left" alt=""><![CDATA[
                  $$personaldata-extensions //= (
                    favorite-salsa: tstr,
                  )
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-15"><artwork name="" type="" align="left" alt=""><![CDATA[
                  ; and again, somewhere else:
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-16"><artwork name="" type="" align="left" alt=""><![CDATA[
                  $$personaldata-extensions //= (
                    shoesize: uint,
                  )
]]></artwork>
</t>
        <t indent="0" pn="section-3.9-17"><figure anchor="fig-12" align="left" suppress-title="false" pn="figure-12">
<name slugifiedName="name-figure-12">Personal Data Example: Using Socket/Plug Extensibility</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      </section>
      <section anchor="generics" numbered="true" removeInRFC="false" toc="include" pn="section-3.10">
        <name slugifiedName="name-generics">Generics</name>
        <t indent="0" pn="section-3.10-1">Using angle brackets, the left-hand side of a rule can add formal
parameters after the name being defined, as in:</t>
        <t indent="0" pn="section-3.10-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   messages = message<"reboot", "now"> / message<"sleep", 1..100>
   message<t, v> = {type: t, value: v}
]]></artwork>
</t>
        <t indent="0" pn="section-3.10-3">When using a generic rule, the formal parameters are bound to the
actual arguments supplied (also using angle brackets), within the
scope of the generic rule (as if there were a rule of the form
parameter = argument).</t>
        <t indent="0" pn="section-3.10-4">Generic rules can be used for establishing names for both types and
groups.</t>
        <t indent="0" pn="section-3.10-5">(At this time, there are some limitations to the nesting of generics
in the CDDL tool described in Appendix F.)</t>
      </section>
      <section anchor="operator-precedence" numbered="true" removeInRFC="false" toc="include" pn="section-3.11">
        <name slugifiedName="name-operator-precedence">Operator Precedence</name>
        <t indent="0" pn="section-3.11-1">As with any language that has multiple syntactic features such as
prefix and infix operators, CDDL has operators that bind more tightly
than others.  This is becoming more complicated than, say, in ABNF,
as CDDL has both types and groups, with operators that are specific
to these concepts.  Type operators (such as &quot;/&quot; for type choice)
operate on types, while group operators (such as &quot;//&quot; for group
choice) operate on groups.  Types can simply be used in groups, but
groups need to be bracketed (as arrays or maps) to become types.  So,
type operators naturally bind closer than group operators.</t>
        <t indent="0" pn="section-3.11-2">For instance, in</t>
        <t indent="0" pn="section-3.11-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   t = [group1]
   group1 = (a / b // c / d)
   a = 1 b = 2 c = 3 d = 4
]]></artwork>
</t>
        <t indent="0" pn="section-3.11-4">group1 is a group choice between the type choice of a and b and the
type choice of c and d.  This becomes more relevant once member keys
and/or occurrences are added in:</t>
        <t indent="0" pn="section-3.11-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   t = {group2}
   group2 = (? ab: a / b // cd: c / d)
   a = 1 b = 2 c = 3 d = 4
]]></artwork>
</t>
        <t indent="0" pn="section-3.11-6">is a group choice between the optional member &quot;ab&quot; of type a or b and
the member &quot;cd&quot; of type c or d.  Note that the optionality is
attached to the first choice (&quot;ab&quot;), not to the second choice.</t>
        <t indent="0" pn="section-3.11-7">Similarly, in</t>
        <t indent="0" pn="section-3.11-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   t = [group3]
   group3 = (+ a / b / c)
   a = 1 b = 2 c = 3
]]></artwork>
</t>
        <t indent="0" pn="section-3.11-9">group3 is a repetition of a type choice between a, b, and c; if just
a is to be repeatable, a group choice is needed to focus the
occurrence:</t>
        <t indent="0" pn="section-3.11-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   t = [group4]
   group4 = (+ a // b / c)
   a = 1 b = 2 c = 3
]]></artwork>
</t>
        <t indent="0" pn="section-3.11-11">group4 is a group choice between a repeatable a and a single b or c.</t>
        <t indent="0" pn="section-3.11-12">A comment has been that the semantics of group3 could be
counterintuitive.  In general, as with many other languages with
operator precedence rules, the specification writer is encouraged not
to rely on them, but to insert parentheses liberally to guide readers
that are not familiar with CDDL precedence rules:</t>
        <t indent="0" pn="section-3.11-13"><artwork name="" type="" align="left" alt=""><![CDATA[
   t = [group4a]
   group4a = ((+ a) // (b / c))
   a = 1 b = 2 c = 3
]]></artwork>
</t>
        <t indent="0" pn="section-3.11-14">The operator precedences, in sequence of loose to tight binding, are
defined in Appendix B and summarized in Table 1.  (Arities given are
1 for unary prefix operators and 2 for binary infix operators.)</t>
        <t indent="0" pn="section-3.11-15"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Operator</td>
<td align="left">Arity</td>
<td align="left">Operates on</td>
<td align="left">Precedence </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left">    =</td>
<td align="left">2</td>
<td align="left">name = type, name = group</td>
<td align="left">1      </td>
</tr>
<tr>
<td align="left">    /=</td>
<td align="left">2</td>
<td align="left">name /= type</td>
<td align="left">1      </td>
</tr>
<tr>
<td align="left">   //=</td>
<td align="left">2</td>
<td align="left">name //= group</td>
<td align="left">1      </td>
</tr>
<tr>
<td align="left">    //</td>
<td align="left">2</td>
<td align="left">group // group</td>
<td align="left">2      </td>
</tr>
<tr>
<td align="left">    ,</td>
<td align="left">2</td>
<td align="left">group, group</td>
<td align="left">3      </td>
</tr>
<tr>
<td align="left">    *</td>
<td align="left">1</td>
<td align="left">* group</td>
<td align="left">4      </td>
</tr>
<tr>
<td align="left">   n*m</td>
<td align="left">1</td>
<td align="left">n*m group</td>
<td align="left">4      </td>
</tr>
<tr>
<td align="left">    +</td>
<td align="left">1</td>
<td align="left">+ group</td>
<td align="left">4      </td>
</tr>
<tr>
<td align="left">    ?</td>
<td align="left">1</td>
<td align="left">? group</td>
<td align="left">4      </td>
</tr>
<tr>
<td align="left">    =&gt;</td>
<td align="left">2</td>
<td align="left">type =&gt; type</td>
<td align="left">5      </td>
</tr>
<tr>
<td align="left">    :</td>
<td align="left">2</td>
<td align="left">name: type</td>
<td align="left">5      </td>
</tr>
<tr>
<td align="left">    /</td>
<td align="left">2</td>
<td align="left">type / type</td>
<td align="left">6      </td>
</tr>
<tr>
<td align="left">    ..</td>
<td align="left">2</td>
<td align="left">type..type</td>
<td align="left">7      </td>
</tr>
<tr>
<td align="left">   ...</td>
<td align="left">2</td>
<td align="left">type...type</td>
<td align="left">7      </td>
</tr>
<tr>
<td align="left">  .ctrl</td>
<td align="left">2</td>
<td align="left">type .ctrl type</td>
<td align="left">7      </td>
</tr>
<tr>
<td align="left">    &amp;</td>
<td align="left">1</td>
<td align="left">&amp;group</td>
<td align="left">8      </td>
</tr>
<tr>
<td align="left">    ~</td>
<td align="left">1</td>
<td align="left">~type</td>
<td align="left">8      </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-3.11-16"><artwork name="" type="" align="left" alt=""><![CDATA[
              Table 1: Summary of Operator Precedences
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="making-use-of-cddl" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-making-use-of-cddl">Making Use of CDDL</name>
      <t indent="0" pn="section-4-1">In this section, we discuss several potential ways to employ CDDL.</t>
      <section anchor="as-a-guide-for-a-human-user" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-as-a-guide-for-a-human-user">As a Guide for a Human User</name>
        <t indent="0" pn="section-4.1-1">CDDL can be used to efficiently define the layout of CBOR data, such
that a human implementer can easily see how data is supposed to be
encoded.</t>
        <t indent="0" pn="section-4.1-2">Since CDDL maps parts of the CBOR data to human-readable names, tools
could be built that use CDDL to provide a human-friendly
representation of the CBOR data and allow them to edit such data
while remaining compliant with its CDDL definition.</t>
      </section>
      <section anchor="for-automated-checking-of-cbor-data-structures" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-for-automated-checking-of-cbor-data-structures">For Automated Checking of CBOR Data Structures</name>
        <t indent="0" pn="section-4.2-1">CDDL has been specified such that a machine can handle the CDDL
definition and related CBOR data (and, thus, also JSON data).  For
example, a machine could use CDDL to check whether or not CBOR data
is compliant with its definition.</t>
        <t indent="0" pn="section-4.2-2">The need for thoroughness of such compliance checking depends on the
application.  For example, an application may decide not to check the
data structure at all and use the CDDL definition solely as a means
to indicate the structure of the data to the programmer.</t>
        <t indent="0" pn="section-4.2-3">On the other hand, the application may also implement a checking
mechanism that goes as far as checking that all mandatory map members
are available.</t>
        <t indent="0" pn="section-4.2-4">The matter of how far the data description must be enforced by an
application is left to the designers and implementers of that
application, keeping in mind related security considerations.</t>
        <t indent="0" pn="section-4.2-5">In no case is it intended that a CDDL tool would be &quot;writing code&quot;
for an implementation.</t>
      </section>
      <section anchor="for-data-analysis-tools" numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-for-data-analysis-tools">For Data Analysis Tools</name>
        <t indent="0" pn="section-4.3-1">In the long run, it can be expected that more and more data will be
stored using the CBOR data format.</t>
        <t indent="0" pn="section-4.3-2">Where there is data, there is data analysis and the need to process
such data automatically.  CDDL can be used for such automated data
processing, allowing tools to verify data, clean it, and extract
particular parts of interest from it.</t>
        <t indent="0" pn="section-4.3-3">Since CBOR is designed with constrained devices in mind, a likely use
of it would be small sensors.  An interesting use would thus be
automated analysis of sensor data.</t>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-5-1">This document presents a content rules language for expressing CBOR
data structures.  As such, it does not bring any security issues on
itself, although specifications of protocols that use CBOR naturally
need security analyses when defined.  General guidelines for writing
security considerations are defined in <xref target="RFC3552" format="default" sectionFormat="of" derivedContent="RFC3552"/> (BCP 72).
Specifications using CDDL to define CBOR structures in protocols need
to follow those guidelines.  Additional topics that could be
considered in a security considerations section for a specification
that uses CDDL to define CBOR structures include the following:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-5-2">
        <li pn="section-5-2.1"> Where could the language maybe cause confusion in a way that will
   enable security issues?</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-5-3">
        <li pn="section-5-3.1"> Where a CDDL matcher is part of the implementation of a system,
   the security of the system ought not depend on the correctness of
   the CDDL specification or CDDL implementation without any further
   defenses in place.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-5-4">
        <li pn="section-5-4.1"> Where the CDDL specification includes extension points, the impact
   of extensions on the security of the system needs to be carefully
   considered.</li>
      </ul>
      <t indent="0" pn="section-5-5">Writers of CDDL specifications are strongly encouraged to value
clarity and transparency of the specification over its elegance.
Keep it as simple as possible while still expressing the needed data
model.</t>
      <t indent="0" pn="section-5-6">A related observation about formal description techniques in general
that is strongly recommended to be kept in mind by writers of CDDL
specifications: just because CDDL makes it easier to handle
complexity in a specification, that does not make that complexity
somehow less bad (except maybe on the level of the humans having to
grasp the complex structure while reading the spec).</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section anchor="cddl-control-operators-registry" numbered="true" removeInRFC="false" toc="include" pn="section-6.1">
        <name slugifiedName="name-cddl-control-operators-registry">CDDL Control Operators Registry</name>
        <t indent="0" pn="section-6.1-1">IANA has created a registry for control operators (Section 3.8).  The
&quot;CDDL Control Operators&quot; registry has been created within the
&quot;Concise Data Definition Language (CDDL)&quot; registry.</t>
        <t indent="0" pn="section-6.1-2">Each entry in the subregistry must include the name of the control
operator (by convention given with the leading dot) and a reference
to its documentation.  Names must be composed of the leading dot
followed by a text string conforming to the production &quot;id&quot; in
Appendix B.</t>
        <t indent="0" pn="section-6.1-3">Initial entries in this registry are as follows:</t>
        <t indent="0" pn="section-6.1-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Documentation </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> .size</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .bits</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .regexp</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .cbor</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .cborseq</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .within</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .and</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .lt</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .le</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .gt</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .ge</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .eq</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .ne</td>
<td align="left">RFC 8610      </td>
</tr>
<tr>
<td align="left"> .default</td>
<td align="left">RFC 8610      </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-6.1-5">All other control operator names are Unassigned.</t>
        <t indent="0" pn="section-6.1-6">The IANA policy for additions to this registry is &quot;Specification
Required&quot; as defined in <xref target="RFC8126" format="default" sectionFormat="of" derivedContent="RFC8126"/> (which involves an Expert Review)
for names that do not include an internal dot and &quot;IETF Review&quot; for
names that do include an internal dot.  The expert reviewer is
specifically instructed that other Standards Development
Organizations (SDOs) may want to define control operators that are
specific to their fields (e.g., based on a binary syntax already in
use at the SDO); the review process should strive to facilitate such
an undertaking.</t>
      </section>
    </section>
  </middle>
  <back>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="ISO6093" quoteTitle="true" derivedAnchor="ISO6093">
          <front>
            <title>Information processing -- Representation of numerical values in character strings for information interchange</title>
            <date year="1985"/>
          </front>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <date year="1997" month="March"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">2119</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2119</seriesInfo>
        </reference>
        <reference anchor="RFC3552" target="https://www.rfc-editor.org/info/rfc3552" quoteTitle="true" derivedAnchor="RFC3552">
          <front>
            <title>Guidelines for Writing RFC Text on Security Considerations</title>
            <date year="2003" month="July"/>
          </front>
          <seriesInfo name="BCP">72</seriesInfo>
          <seriesInfo name="RFC">3552</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3552</seriesInfo>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" quoteTitle="true" derivedAnchor="RFC3629">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <date year="2003" month="November"/>
          </front>
          <seriesInfo name="STD">63</seriesInfo>
          <seriesInfo name="RFC">3629</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3629</seriesInfo>
        </reference>
        <reference anchor="RFC4648" target="https://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <date year="2006" month="October"/>
          </front>
          <seriesInfo name="RFC">4648</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4648</seriesInfo>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" quoteTitle="true" derivedAnchor="RFC5234">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <date year="2008" month="January"/>
          </front>
          <seriesInfo name="STD">68</seriesInfo>
          <seriesInfo name="RFC">5234</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5234</seriesInfo>
        </reference>
        <reference anchor="RFC7049" target="https://www.rfc-editor.org/info/rfc7049" quoteTitle="true" derivedAnchor="RFC7049">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <date year="2013" month="October"/>
          </front>
          <seriesInfo name="RFC">7049</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7049</seriesInfo>
        </reference>
        <reference anchor="RFC7493" target="https://www.rfc-editor.org/info/rfc7493" quoteTitle="true" derivedAnchor="RFC7493">
          <front>
            <title>The I-JSON Message Format</title>
            <date year="2015" month="March"/>
          </front>
          <seriesInfo name="RFC">7493</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7493</seriesInfo>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126" quoteTitle="true" derivedAnchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <date year="2017" month="June"/>
          </front>
          <seriesInfo name="BCP">26</seriesInfo>
          <seriesInfo name="RFC">8126</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8126</seriesInfo>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <date year="2017" month="May"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">8174</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8174</seriesInfo>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <date year="2017" month="December"/>
          </front>
          <seriesInfo name="STD">90</seriesInfo>
          <seriesInfo name="RFC">8259</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8259</seriesInfo>
        </reference>
        <reference anchor="W3C.REC-xmlschema-2-20041028" target="https://www.w3.org/TR/2004/REC-xmlschema-2-20041028" quoteTitle="true" derivedAnchor="W3C.REC-xmlschema-2-20041028">
          <front>
            <title>XML Schema Part 2: Datatypes Second Edition</title>
            <date year="2004" month="October"/>
          </front>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="CDDL-Freezer" quoteTitle="true" derivedAnchor="CDDL-Freezer">
          <front>
            <title>A feature freezer for the Concise Data Definition Language (CDDL)</title>
            <date year="2018" month="August"/>
          </front>
        </reference>
        <reference anchor="GRASP" quoteTitle="true" derivedAnchor="GRASP">
          <front>
            <title>A Generic Autonomic Signaling Protocol (GRASP)</title>
            <date year="2017" month="July"/>
          </front>
        </reference>
        <reference anchor="IEEE754" quoteTitle="true" derivedAnchor="IEEE754">
          <front>
            <title>IEEE Standard for Floating-Point Arithmetic</title>
          </front>
          <seriesInfo name="IEEE">Std 754-2008</seriesInfo>
        </reference>
        <reference anchor="JCR" quoteTitle="true" derivedAnchor="JCR">
          <front>
            <title>A Language for Rules Describing JSON Content</title>
            <date year="2017" month="September"/>
          </front>
        </reference>
        <reference anchor="PEG" quoteTitle="true" derivedAnchor="PEG">
          <front>
            <title>Parsing expression grammars: a recognition- based syntactic foundation</title>
            <date year="2004" month="January"/>
          </front>
          <seriesInfo name="DOI">10.1145/964001.964011</seriesInfo>
        </reference>
        <reference anchor="RELAXNG" quoteTitle="true" derivedAnchor="RELAXNG">
          <front>
            <title>Information technology -- Document Schema Definition Language (DSDL) -- Part 2: Regular-grammar- based validation -- RELAX NG</title>
            <date year="2008" month="December"/>
          </front>
          <seriesInfo name="ISO/IEC">19757-2</seriesInfo>
        </reference>
        <reference anchor="RFC7071" target="https://www.rfc-editor.org/info/rfc7071" quoteTitle="true" derivedAnchor="RFC7071">
          <front>
            <title>A Media Type for Reputation Interchange</title>
            <date year="2013" month="November"/>
          </front>
          <seriesInfo name="RFC">7071</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7071</seriesInfo>
        </reference>
        <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950" quoteTitle="true" derivedAnchor="RFC7950">
          <front>
            <title>The YANG 1.1 Data Modeling Language</title>
            <date year="2016" month="August"/>
          </front>
          <seriesInfo name="RFC">7950</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7950</seriesInfo>
        </reference>
        <reference anchor="RFC8007" target="https://www.rfc-editor.org/info/rfc8007" quoteTitle="true" derivedAnchor="RFC8007">
          <front>
            <title>Content Delivery Network Interconnection (CDNI) Control Interface / Triggers</title>
            <date year="2016" month="December"/>
          </front>
          <seriesInfo name="RFC">8007</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8007</seriesInfo>
        </reference>
        <reference anchor="RFC8152" target="https://www.rfc-editor.org/info/rfc8152" quoteTitle="true" derivedAnchor="RFC8152">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <date year="2017" month="July"/>
          </front>
          <seriesInfo name="RFC">8152</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8152</seriesInfo>
        </reference>
        <reference anchor="RFC8428" target="https://www.rfc-editor.org/info/rfc8428" quoteTitle="true" derivedAnchor="RFC8428">
          <front>
            <title>Sensor Measurement Lists (SenML)</title>
            <date year="2018" month="August"/>
          </front>
          <seriesInfo name="RFC">8428</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8428</seriesInfo>
        </reference>
        <reference anchor="YAML" target="https://yaml.org/spec/1.2/spec.html" quoteTitle="true" derivedAnchor="YAML">
          <front>
            <title>YAML Ain't Markup Language (YAML[TM]) Version 1.2</title>
            <date year="2009" month="October"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="parsing-expression-grammars-(pegs)" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-parsing-expression-grammars-(pegs)">Parsing Expression Grammars (PEGs)</name>
      <t indent="0" pn="section-appendix.a-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.a-2">Since the 1950s, many grammar notations are based on Backus-Naur Form
(BNF), a notation for context-free grammars (CFGs) within Chomsky's
generative system of grammars.  The Augmented Backus-Naur Form (ABNF)
<xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>, widely used in IETF specifications and also inspiring the
syntax of CDDL, is an example of this.</t>
      <t indent="0" pn="section-appendix.a-3">Generative grammars can express ambiguity well, but this very
property may make them hard to use in recognition systems, spawning a
number of subdialects that pose constraints on generative grammars to
be used with parser generators; this scenario may be hard for the
specification writer to manage.</t>
      <t indent="0" pn="section-appendix.a-4">PEGs <xref target="PEG" format="default" sectionFormat="of" derivedContent="PEG"/> provide an alternative formal foundation for describing
grammars that emphasizes recognition over generation and resolves
what would have been ambiguity in generative systems by introducing
the concept of &quot;prioritized choice&quot;.</t>
      <t indent="0" pn="section-appendix.a-5">The notation for PEGs is quite close to BNF, with the usual &quot;Extended
BNF&quot; features, such as repetition, added.  However, where BNF uses
the unordered (symmetrical) choice operator &quot;|&quot; (incidentally notated
as &quot;/&quot; in ABNF), PEG provides a prioritized choice operator &quot;/&quot;.  The
two alternatives listed are to be tested in left-to-right order,
locking in the first successful match and disregarding any further
potential matches within the choice (but not disabling alternatives
in choices containing this choice, as a cut (Section 3.5.4) would).</t>
      <t indent="0" pn="section-appendix.a-6">For example, the ABNF expressions</t>
      <t indent="0" pn="section-appendix.a-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   A = "a" "b" / "a"    (1)
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.a-8">and</t>
      <t indent="0" pn="section-appendix.a-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   A = "a" / "a" "b"    (2)
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.a-10">are equivalent in ABNF's original generative framework but are very
different in PEG: in (2), the second alternative will never match, as
any input string starting with an &quot;a&quot; will already succeed in the
first alternative, locking in the match.</t>
      <t indent="0" pn="section-appendix.a-11">Similarly, the occurrence indicators (&quot;?&quot;, &quot;*&quot;, &quot;+&quot;) are &quot;greedy&quot; in
PEG, i.e., they consume as much input as they match (and, as a
consequence, &quot;a* a&quot; in PEG notation or &quot;*a a&quot; in CDDL syntax never
can match anything, as all input matching &quot;a&quot; is already consumed by
the initial &quot;a*&quot;, leaving nothing to match the second &quot;a&quot;).</t>
      <t indent="0" pn="section-appendix.a-12">Incidentally, the grammar of CDDL itself, as written in ABNF in
Appendix B, can be interpreted both (1) in the generative framework
on which RFC 5234 is based and (2) as a PEG.  This was made possible
by ordering the choices in the grammar such that a successful match
made on the left-hand side of a &quot;/&quot; operator is always the intended
match, instead of relying on the power of symmetrical choices (for
example, note the sequence of alternatives in the rule for &quot;uint&quot;,
where the lone zero is behind the longer match alternatives that
start with a zero).</t>
      <t indent="0" pn="section-appendix.a-13">The syntax used for expressing the PEG component of CDDL is based on
ABNF, interpreted in the obvious way with PEG semantics.  The ABNF
convention of notating occurrence indicators before the controlled
primary, and of allowing numeric values for minimum and maximum
occurrence around a &quot;*&quot; sign, is copied.  While PEG is only about
characters, CDDL has a richer set of elements, such as types and
groups.  Specifically, the following constructs map:</t>
      <t indent="0" pn="section-appendix.a-14"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> CDDL</td>
<td align="left">PEG</td>
<td align="left">Remark                                    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> &quot;=&quot;</td>
<td align="left">&quot;&lt;-&quot;</td>
<td align="left">/= and //= are abbreviations              </td>
</tr>
<tr>
<td align="left"> &quot;//&quot;</td>
<td align="left">&quot;/&quot;</td>
<td align="left">prioritized choice                        </td>
</tr>
<tr>
<td align="left"> &quot;/&quot;</td>
<td align="left">&quot;/&quot;</td>
<td align="left">prioritized choice, limited to types only </td>
</tr>
<tr>
<td align="left"> &quot;?&quot; P</td>
<td align="left">P &quot;?&quot;</td>
<td align="left">zero or one                               </td>
</tr>
<tr>
<td align="left"> &quot;*&quot; P</td>
<td align="left">P &quot;*&quot;</td>
<td align="left">zero or more                              </td>
</tr>
<tr>
<td align="left"> &quot;+&quot; P</td>
<td align="left">P &quot;+&quot;</td>
<td align="left">one or more                               </td>
</tr>
<tr>
<td align="left"> A B</td>
<td align="left">A B</td>
<td align="left">sequence                                  </td>
</tr>
<tr>
<td align="left"> A, B</td>
<td align="left">A B</td>
<td align="left">sequence, comma is decoration only        </td>
</tr>
</tbody>
</table>
</t>
      <t indent="0" pn="section-appendix.a-15">The literal notation and the use of square brackets, curly braces,
tildes, ampersands, and hash marks are specific to CDDL and unrelated
to the conventional PEG notation.  The DOT (&quot;.&quot;) from PEG is replaced
by the unadorned &quot;#&quot; or its alias &quot;any&quot;.  Also, CDDL does not provide
the syntactic predicate operators NOT (&quot;!&quot;) or AND (&quot;&amp;&quot;) from PEG,
reducing expressiveness as well as complexity.</t>
      <t indent="0" pn="section-appendix.a-16">For more details about PEG's theoretical foundation and interesting
properties of the operators such as associativity and distributivity,
the reader is referred to <xref target="PEG" format="default" sectionFormat="of" derivedContent="PEG"/>.</t>
    </section>
    <section anchor="abnf-grammar" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-abnf-grammar">ABNF Grammar</name>
      <t indent="0" pn="section-appendix.b-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.b-2">The following is a formal definition of the CDDL syntax in ABNF
<xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>.  Note that, as is defined in ABNF, the quote-delimited
strings below are case insensitive (while string values and names are
case sensitive in CDDL).</t>
      <t indent="0" pn="section-appendix.b-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  cddl = S 1*(rule S)
  rule = typename [genericparm] S assignt S type
       / groupname [genericparm] S assigng S grpent
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  typename = id
  groupname = id
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  assignt = "=" / "/="
  assigng = "=" / "//="
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  genericparm = "<" S id S *("," S id S ) ">"
  genericarg = "<" S type1 S *("," S type1 S ) ">"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  type = type1 *(S "/" S type1)
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  type1 = type2 [S (rangeop / ctlop) S type2]
  ; space may be needed before the operator if type2 ends in a name
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  type2 = value
        / typename [genericarg]
        / "(" S type S ")"
        / "{" S group S "}"
        / "[" S group S "]"
        / "~" S typename [genericarg]
        / "&" S "(" S group S ")"
        / "&" S groupname [genericarg]
        / "#" "6" ["." uint] "(" S type S ")"
        / "#" DIGIT ["." uint]                ; major/ai
        / "#"                                 ; any
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-10"><artwork name="" type="" align="left" alt=""><![CDATA[
  rangeop = "..." / ".."
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-11"><artwork name="" type="" align="left" alt=""><![CDATA[
  ctlop = "." id
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-12"><artwork name="" type="" align="left" alt=""><![CDATA[
  group = grpchoice *(S "//" S grpchoice)
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  grpchoice = *(grpent optcom)
  grpent = [occur S] [memberkey S] type
         / [occur S] groupname [genericarg]  ; preempted by above
         / [occur S] "(" S group S ")"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-14"><artwork name="" type="" align="left" alt=""><![CDATA[
  memberkey = type1 S ["^" S] "=>"
            / bareword S ":"
            / value S ":"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-15"><artwork name="" type="" align="left" alt=""><![CDATA[
  bareword = id
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-16"><artwork name="" type="" align="left" alt=""><![CDATA[
  optcom = S ["," S]
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-17"><artwork name="" type="" align="left" alt=""><![CDATA[
  occur = [uint] "*" [uint]
        / "+"
        / "?"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-18"><artwork name="" type="" align="left" alt=""><![CDATA[
  uint = DIGIT1 *DIGIT
       / "0x" 1*HEXDIG
       / "0b" 1*BINDIG
       / "0"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-19"><artwork name="" type="" align="left" alt=""><![CDATA[
  value = number
        / text
        / bytes
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-20"><artwork name="" type="" align="left" alt=""><![CDATA[
  int = ["-"] uint
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-21"><artwork name="" type="" align="left" alt=""><![CDATA[
  ; This is a float if it has fraction or exponent; int otherwise
  number = hexfloat / (int ["." fraction] ["e" exponent ])
  hexfloat = ["-"] "0x" 1*HEXDIG ["." 1*HEXDIG] "p" exponent
  fraction = 1*DIGIT
  exponent = ["+"/"-"] 1*DIGIT
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-22"><artwork name="" type="" align="left" alt=""><![CDATA[
  text = %x22 *SCHAR %x22
  SCHAR = %x20-21 / %x23-5B / %x5D-7E / %x80-10FFFD / SESC
  SESC = "\" (%x20-7E / %x80-10FFFD)
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-23"><artwork name="" type="" align="left" alt=""><![CDATA[
  bytes = [bsqual] %x27 *BCHAR %x27
  BCHAR = %x20-26 / %x28-5B / %x5D-10FFFD / SESC / CRLF
  bsqual = "h" / "b64"
  id = EALPHA *(*("-" / ".") (EALPHA / DIGIT))
  ALPHA = %x41-5A / %x61-7A
  EALPHA = ALPHA / "@" / "_" / "$"
  DIGIT = %x30-39
  DIGIT1 = %x31-39
  HEXDIG = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
  BINDIG = %x30-31
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-24"><artwork name="" type="" align="left" alt=""><![CDATA[
  S = *WS
  WS = SP / NL
  SP = %x20
  NL = COMMENT / CRLF
  COMMENT = ";" *PCHAR CRLF
  PCHAR = %x20-7E / %x80-10FFFD
  CRLF = %x0A / %x0D.0A
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-25"><figure anchor="fig-13" align="left" suppress-title="false" pn="figure-13">
<name slugifiedName="name-figure-13">CDDL ABNF</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.b-26">Note that this ABNF does not attempt to reflect the detailed rules of
what can be in a prefixed byte string.</t>
    </section>
    <section anchor="matching-rules" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-matching-rules">Matching Rules</name>
      <t indent="0" pn="section-appendix.c-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.c-2">In this appendix, we go through the ABNF syntax rules defined in
Appendix B and briefly describe the matching semantics of each
syntactic feature.  In this context, an instance (data item)
&quot;matches&quot; a CDDL specification if it is allowed by the CDDL
specification; this is then broken down into parts of specifications
(type and group expressions) and parts of instances (data items).</t>
      <t indent="0" pn="section-appendix.c-3">cddl = S 1*(rule S)</t>
      <t indent="0" pn="section-appendix.c-4">A CDDL specification is a sequence of one or more rules.  Each rule
gives a name to a right-hand-side expression, either a CDDL type or a
CDDL group.  Rule names can be used in the rule itself and/or other
rules (and tools can output warnings if that is not the case).  The
order of the rules is significant only in two cases:</t>
      <t indent="0" pn="section-appendix.c-5">1.  The first rule defines the semantics of the entire specification;
    hence, there is no need to give that root rule a special name or
    special syntax in the language (as, for example, with &quot;start&quot; in
    RELAX NG); its name can therefore be chosen to be descriptive.
    (As with all other rule names, the name of the initial rule may
    be used in itself or in other rules.)</t>
      <t indent="0" pn="section-appendix.c-6">2.  Where a rule contributes to a type or group choice (using &quot;/=&quot; or
    &quot;//=&quot;), that choice is populated in the order the rules are
    given; see below.</t>
      <t indent="0" pn="section-appendix.c-7">rule = typename [genericparm] S assignt S type
     / groupname [genericparm] S assigng S grpent</t>
      <t indent="0" pn="section-appendix.c-8">typename = id
groupname = id</t>
      <t indent="0" pn="section-appendix.c-9">A rule defines a name for a type expression (production &quot;type&quot;) or
for a group expression (production &quot;grpent&quot;), with the intention that
the semantics does not change when the name is replaced by its
(parenthesized if needed) definition.  Note that whether the name
defined by a rule stands for a type or a group isn't always
determined by syntax alone: e.g., &quot;a = b&quot; can make &quot;a&quot; a type if &quot;b&quot;
is a type, or a group if &quot;b&quot; is a group.  More subtly, in &quot;a = (b)&quot;,
&quot;a&quot; may be used as a type if &quot;b&quot; is a type, or as a group both when
&quot;b&quot; is a group and when &quot;b&quot; is a type (a good convention to make the
latter case stand out to the human reader is to write &quot;a = (b,)&quot;).
(Note that the same dual meaning of parentheses applies within an
expression but often can be resolved by the context of the
parenthesized expression.  On the more general point, it may not be
clear immediately either whether &quot;b&quot; stands for a group or a type --
this semantic processing may need to span several levels of rule
definitions before a determination can be made.)</t>
      <t indent="0" pn="section-appendix.c-10">assignt = &quot;=&quot; / &quot;/=&quot;
assigng = &quot;=&quot; / &quot;//=&quot;</t>
      <t indent="0" pn="section-appendix.c-11">A plain equals sign defines the rule name as the equivalent of the
expression to the right; it is an error if the name was already
defined with a different expression.  A &quot;/=&quot; or &quot;//=&quot; extends a named
type or a group by additional choices; a number of these could be
replaced by collecting all the right-hand sides and creating a single
rule with a type choice or a group choice built from the right-hand
sides in the order of the rules given.  (It is not an error to extend
a rule name that has not yet been defined; this makes the right-hand
side the first entry in the choice being created.)</t>
      <t indent="0" pn="section-appendix.c-12">genericparm = &quot;&lt;&quot; S id S *(&quot;,&quot; S id S ) &quot;&gt;&quot;
genericarg = &quot;&lt;&quot; S type1 S *(&quot;,&quot; S type1 S ) &quot;&gt;&quot;</t>
      <t indent="0" pn="section-appendix.c-13">Rule names can have generic parameters, which cause temporary
assignments within the right-hand sides to the parameter names from
the arguments given when citing the rule name.</t>
      <t indent="0" pn="section-appendix.c-14">type = type1 *(S &quot;/&quot; S type1)
A type can be given as a choice between one or more types.  The
choice matches a data item if the data item matches any one of the
types given in the choice.  The choice uses PEG semantics as
discussed in Appendix A: the first choice that matches wins.  (As a
result, the order of rules that contribute to a single rule name can
very well matter.)</t>
      <t indent="0" pn="section-appendix.c-15">type1 = type2 [S (rangeop / ctlop) S type2]</t>
      <t indent="0" pn="section-appendix.c-16">Two types can be combined with a range operator (see below) or a
control operator (see Section 3.8).</t>
      <t indent="0" pn="section-appendix.c-17">type2 = value</t>
      <t indent="0" pn="section-appendix.c-18">A type can be just a single value (such as 1 or &quot;icecream&quot; or
h'0815'), which matches only a data item with that specific value (no
conversions defined),</t>
      <t indent="0" pn="section-appendix.c-19"><artwork name="" type="" align="left" alt=""><![CDATA[
   / typename [genericarg]
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-20">or be defined by a rule giving a meaning to a name (possibly after
supplying generic arguments as required by the generic parameters),</t>
      <t indent="0" pn="section-appendix.c-21"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "(" S type S ")"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-22">or be defined in a parenthesized type expression (parentheses may be
necessary to override some operator precedence), or</t>
      <t indent="0" pn="section-appendix.c-23"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "{" S group S "}"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-24">a map expression, which matches a valid CBOR map the key/value pairs
of which can be ordered in such a way that the resulting sequence
matches the group expression, or</t>
      <t indent="0" pn="section-appendix.c-25"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "[" S group S "]"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-26">an array expression, which matches a CBOR array the elements of which
-- when taken as values and complemented by a wildcard (matches
anything) key each -- match the group, or</t>
      <t indent="0" pn="section-appendix.c-27"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "~" S typename [genericarg]
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-28">an &quot;unwrapped&quot; group (see Section 3.7), which matches the group
inside a type defined as a map or an array by wrapping the group, or</t>
      <t indent="0" pn="section-appendix.c-29"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "&" S "(" S group S ")"
   / "&" S groupname [genericarg]
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-30">an enumeration expression, which matches any value that is within the
set of values that the values of the group given can take, or</t>
      <t indent="0" pn="section-appendix.c-31"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "#" "6" ["." uint] "(" S type S ")"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-32">a tagged data item, tagged with the &quot;uint&quot; given and containing the
type given as the tagged value, or</t>
      <t indent="0" pn="section-appendix.c-33"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "#" DIGIT ["." uint]                ; major/ai
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-34">a data item of a major type (given by the DIGIT), optionally
constrained to the additional information given by the uint, or</t>
      <t indent="0" pn="section-appendix.c-35"><artwork name="" type="" align="left" alt=""><![CDATA[
   / "#"                                 ; any
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-36">any data item.</t>
      <t indent="0" pn="section-appendix.c-37">rangeop = &quot;...&quot; / &quot;..&quot;</t>
      <t indent="0" pn="section-appendix.c-38">A range operator can be used to join two type expressions that stand
for either two integer values or two floating-point values; it
matches any value that is between the two values, where the first
value is always included in the matching set and the second value is
included for &quot;..&quot; and excluded for &quot;...&quot;.</t>
      <t indent="0" pn="section-appendix.c-39">ctlop = &quot;.&quot; id</t>
      <t indent="0" pn="section-appendix.c-40">A control operator ties a _target_ type to a _controller_ type as
defined in Section 3.8.  Note that control operators are an extension
point for CDDL; additional documents may want to define additional
control operators.</t>
      <t indent="0" pn="section-appendix.c-41">group = grpchoice *(S &quot;//&quot; S grpchoice)</t>
      <t indent="0" pn="section-appendix.c-42">A group matches any sequence of key/value pairs that matches any of
the choices given (again using PEG semantics).</t>
      <t indent="0" pn="section-appendix.c-43">grpchoice = *(grpent optcom)</t>
      <t indent="0" pn="section-appendix.c-44">Each of the component groups is given as a sequence of group entries.
For a match, the sequence of key/value pairs given needs to match the
sequence of group entries in the sequence given.</t>
      <t indent="0" pn="section-appendix.c-45">grpent = [occur S] [memberkey S] type</t>
      <t indent="0" pn="section-appendix.c-46">A group entry can be given by a value type, which needs to be matched
by the value part of a single element; and, optionally, a memberkey
type, which needs to be matched by the key part of the element, if
the memberkey is given.  If the memberkey is not given, the entry can
only be used for matching arrays, not for maps.  (See below for how
that is modified by the occurrence indicator.)</t>
      <t indent="0" pn="section-appendix.c-47"><artwork name="" type="" align="left" alt=""><![CDATA[
    / [occur S] groupname [genericarg]  ; preempted by above
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-48">A group entry can be built from a named group, or</t>
      <t indent="0" pn="section-appendix.c-49"><artwork name="" type="" align="left" alt=""><![CDATA[
    / [occur S] "(" S group S ")"
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-50">from a parenthesized group, again with a possible occurrence
indicator.</t>
      <t indent="0" pn="section-appendix.c-51">memberkey = type1 S [&quot;^&quot; S] &quot;=&gt;&quot;
          / bareword S &quot;:&quot;
          / value S &quot;:&quot;</t>
      <t indent="0" pn="section-appendix.c-52">Key types can be given by a type expression, a bareword (which stands
for a type that just contains a string value created from this
bareword), or a value (which stands for a type that just contains
this value).  A key value matches its key type if the key value is a
member of the key type, unless a cut preceding it in the group
applies (see Section 3.5.4 for how map matching is influenced by the
presence of the cuts denoted by &quot;^&quot; or &quot;:&quot; in previous entries).</t>
      <t indent="0" pn="section-appendix.c-53">bareword = id</t>
      <t indent="0" pn="section-appendix.c-54">A bareword is an alternative way to write a type with a single text
string value; it can only be used in the syntactic context given
above.</t>
      <t indent="0" pn="section-appendix.c-55">optcom = S [&quot;,&quot; S]</t>
      <t indent="0" pn="section-appendix.c-56">(Optional commas do not influence the matching.)</t>
      <t indent="0" pn="section-appendix.c-57">occur = [uint] &quot;*&quot; [uint]
      / &quot;+&quot;
      / &quot;?&quot;</t>
      <t indent="0" pn="section-appendix.c-58">An occurrence indicator modifies the group given to its right by
requiring the group to match the sequence to be matched exactly for a
certain number of times (see Section 3.2) in sequence, i.e., it acts
as a (possibly infinite) group choice that contains choices with the
group repeated each of the occurrences times.</t>
      <t indent="0" pn="section-appendix.c-59">The rest of the ABNF describes syntax for value notation that should
be familiar to readers from programming languages, with the possible
exception of h'..' and b64'..' for byte strings, as well as syntactic
elements such as comments and line ends.</t>
    </section>
    <section anchor="standard-prelude" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-standard-prelude">Standard Prelude</name>
      <t indent="0" pn="section-appendix.d-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.d-2">The following prelude is automatically added to each CDDL file.
(Note that technically, it is a postlude, as it does not disturb the
selection of the first rule as the root of the definition.)</t>
      <t indent="0" pn="section-appendix.d-3"><artwork name="" type="" align="left" alt=""><![CDATA[
               any = #
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-4"><artwork name="" type="" align="left" alt=""><![CDATA[
               uint = #0
               nint = #1
               int = uint / nint
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-5"><artwork name="" type="" align="left" alt=""><![CDATA[
               bstr = #2
               bytes = bstr
               tstr = #3
               text = tstr
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-6"><artwork name="" type="" align="left" alt=""><![CDATA[
               tdate = #6.0(tstr)
               time = #6.1(number)
               number = int / float
               biguint = #6.2(bstr)
               bignint = #6.3(bstr)
               bigint = biguint / bignint
               integer = int / bigint
               unsigned = uint / biguint
               decfrac = #6.4([e10: int, m: integer])
               bigfloat = #6.5([e2: int, m: integer])
               eb64url = #6.21(any)
               eb64legacy = #6.22(any)
               eb16 = #6.23(any)
               encoded-cbor = #6.24(bstr)
               uri = #6.32(tstr)
               b64url = #6.33(tstr)
               b64legacy = #6.34(tstr)
               regexp = #6.35(tstr)
               mime-message = #6.36(tstr)
               cbor-any = #6.55799(any)
               float16 = #7.25
               float32 = #7.26
               float64 = #7.27
               float16-32 = float16 / float32
               float32-64 = float32 / float64
               float = float16-32 / float64
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-7"><artwork name="" type="" align="left" alt=""><![CDATA[
               false = #7.20
               true = #7.21
               bool = false / true
               nil = #7.22
               null = nil
               undefined = #7.23
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-8"><figure anchor="fig-14" align="left" suppress-title="false" pn="figure-14">
<name slugifiedName="name-figure-14">CDDL Prelude</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.d-9">Note that the prelude is deemed to be fixed.  This means, for
instance, that additional tags beyond those defined in <xref target="RFC7049" format="default" sectionFormat="of" derivedContent="RFC7049"/>, as
registered, need to be defined in each CDDL file that is using them.</t>
      <t indent="0" pn="section-appendix.d-10">A common stumbling point is that the prelude does not define a type
&quot;string&quot;.  CBOR has byte strings (&quot;bytes&quot; in the prelude) and text
strings (&quot;text&quot;), so a type that is simply called &quot;string&quot; would be
ambiguous.</t>
    </section>
    <section anchor="use-with-json" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-use-with-json">Use with JSON</name>
      <t indent="0" pn="section-appendix.e-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.e-2">The JSON generic data model (implicit in <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>) is a subset of
the generic data model of CBOR.  So, one can use CDDL with JSON by
limiting oneself to what can be represented in JSON.  Roughly
speaking, this means leaving out byte strings, tags, and simple
values other than &quot;false&quot;, &quot;true&quot;, and &quot;null&quot;, leading to the
following limited prelude:</t>
      <t indent="0" pn="section-appendix.e-3"><artwork name="" type="" align="left" alt=""><![CDATA[
                   any = #
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                   uint = #0
                   nint = #1
                   int = uint / nint
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                   tstr = #3
                   text = tstr
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                   number = int / float
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-7"><artwork name="" type="" align="left" alt=""><![CDATA[
                   float16 = #7.25
                   float32 = #7.26
                   float64 = #7.27
                   float16-32 = float16 / float32
                   float32-64 = float32 / float64
                   float = float16-32 / float64
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-8"><artwork name="" type="" align="left" alt=""><![CDATA[
                   false = #7.20
                   true = #7.21
                   bool = false / true
                   nil = #7.22
                   null = nil
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-9"><figure anchor="fig-15" align="left" suppress-title="false" pn="figure-15">
<name slugifiedName="name-figure-15">JSON-Compatible Subset of CDDL Prelude</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.e-10">(The major types given here do not have a direct meaning in JSON, but
they can be interpreted as CBOR major types translated through
<xref target="RFC7049" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7049#section-4" derivedContent="RFC7049"/>.)</t>
      <t indent="0" pn="section-appendix.e-11">There are a few fine points in using CDDL with JSON.  First, JSON
does not distinguish between integers and floating-point numbers;
there is only one kind of number (which may happen to be integral).
In this context, specifying a type as &quot;uint&quot;, &quot;nint&quot;, or &quot;int&quot; then
becomes a predicate that the number be integral.  As an example, this
means that the following JSON numbers are all matching &quot;uint&quot;:</t>
      <t indent="0" pn="section-appendix.e-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   10 10.0 1e1 1.0e1 100e-1
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-13">(The fact that these are all integers may be surprising to users
accustomed to the long tradition in programming languages of using
decimal points or exponents in a number to indicate a floating-point
literal.)</t>
      <t indent="0" pn="section-appendix.e-14">CDDL distinguishes the various CBOR number types, but there is only
one number type in JSON.  The effect of specifying a floating-point
precision (float16/float32/float64) is only to restrict the set of
permissible values to those expressible with binary16/binary32/
binary64; this is unlikely to be very useful when using CDDL for
specifying JSON data structures.</t>
      <t indent="0" pn="section-appendix.e-15">Fundamentally, the number system of JSON itself is based on decimal
numbers and decimal fractions and does not have limits to its
precision or range.  In practice, JSON numbers are often parsed into
a number type that is called &quot;float64&quot; here, creating a number of
limitations to the generic data model <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/>.  In particular, this
means that integers can only be expressed with interoperable
exactness when they lie in the range [-(2**53)+1, (2**53)-1] -- a
smaller range than that covered by CDDL &quot;int&quot;.</t>
      <t indent="0" pn="section-appendix.e-16">JSON applications that want to stay compatible with I-JSON (&quot;Internet
JSON&quot;; see <xref target="RFC7493" format="default" sectionFormat="of" derivedContent="RFC7493"/>) may therefore want to define integer types with
more limited ranges, such as in Figure 16.  Note that the types given
here are not part of the prelude; they need to be copied into the
CDDL specification if needed.</t>
      <t indent="0" pn="section-appendix.e-17"><artwork name="" type="" align="left" alt=""><![CDATA[
            ij-uint = 0..9007199254740991
            ij-nint = -9007199254740991..-1
            ij-int = -9007199254740991..9007199254740991
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-18"><figure anchor="fig-16" align="left" suppress-title="false" pn="figure-16">
<name slugifiedName="name-figure-16">I-JSON Types for CDDL (Not Part of Prelude)</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.e-19">JSON applications that do not need to stay compatible with I-JSON and
that actually may need to go beyond the 64-bit unsigned and negative
integers supported by &quot;int&quot; (= &quot;uint&quot;/&quot;nint&quot;) may want to use the
following additional types from the standard prelude, which are
expressed in terms of tags but can straightforwardly be mapped into
JSON (but not I-JSON) numbers:</t>
      <t indent="0" pn="section-appendix.e-20"><artwork name="" type="" align="left" alt=""><![CDATA[
   biguint = #6.2(bstr)
   bignint = #6.3(bstr)
   bigint = biguint / bignint
   integer = int / bigint
   unsigned = uint / biguint
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-21">CDDL at this point does not have a way to express the unlimited
floating-point precision that is theoretically possible with JSON; at
the time of writing, this is rarely used in protocols in practice.</t>
      <t indent="0" pn="section-appendix.e-22">Note that a data model described in CDDL is always restricted by what
can be expressed in the serialization; e.g., floating-point values
such as NaN (not a number) and the infinities cannot be represented
in JSON even if they are allowed in the CDDL generic data model.</t>
    </section>
    <section anchor="a-cddl-tool" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-a-cddl-tool">A CDDL Tool</name>
      <t indent="0" pn="section-appendix.f-1">This appendix is for information only.</t>
      <t indent="0" pn="section-appendix.f-2">A rough CDDL tool is available.  For CDDL specifications, it can
check the syntax, generate one or more instances (expressed in CBOR
diagnostic notation or in pretty-printed JSON), and validate an
existing instance against the specification:</t>
      <t indent="0" pn="section-appendix.f-3"><artwork name="" type="" align="left" alt=""><![CDATA[
                Usage:
                cddl spec.cddl generate [n]
                cddl spec.cddl json-generate [n]
                cddl spec.cddl validate instance.cbor
                cddl spec.cddl validate instance.json
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.f-4"><figure anchor="fig-17" align="left" suppress-title="false" pn="figure-17">
<name slugifiedName="name-figure-17">CDDL Tool Usage</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.f-5">Install on a system with a modern Ruby via:</t>
      <t indent="0" pn="section-appendix.f-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                          gem install cddl
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.f-7"><figure anchor="fig-18" align="left" suppress-title="false" pn="figure-18">
<name slugifiedName="name-figure-18">CDDL Tool Installation</name>
<artwork name="" type="" align="left" alt=""><![CDATA[

]]></artwork>
</figure>
</t>
      <t indent="0" pn="section-appendix.f-8">The accompanying CBOR diagnostic tools (which are automatically
installed by the above) are described in &lt;https://github.com/cabo/
cbor-diag&gt;; they can be used to convert between binary CBOR, a
pretty-printed hexadecimal form of binary CBOR, CBOR diagnostic
notation, JSON, and YAML <xref target="YAML" format="default" sectionFormat="of" derivedContent="YAML"/>.</t>
    </section>
    <section anchor="extended-diagnostic-notation" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.g">
      <name slugifiedName="name-extended-diagnostic-notation">Extended Diagnostic Notation</name>
      <t indent="0" pn="section-appendix.g-1">This appendix is normative.</t>
      <t indent="0" pn="section-appendix.g-2"><xref target="RFC7049" section="6" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7049#section-6" derivedContent="RFC7049"/> defines a &quot;diagnostic notation&quot; in order to be
able to converse about CBOR data items without having to resort to
binary data.  Diagnostic notation is based on JSON, with extensions
for representing CBOR constructs such as binary data and tags.</t>
      <t indent="0" pn="section-appendix.g-3">(Standardizing this together with the actual interchange format does
not serve to create another interchange format but enables the use of
a shared diagnostic notation in tools for and documents about CBOR.)</t>
      <t indent="0" pn="section-appendix.g-4">This appendix discusses a few extensions to the diagnostic notation
that have turned out to be useful since RFC 7049 was written.  We
refer to the result as Extended Diagnostic Notation (EDN).</t>
      <section anchor="whitespace-in-byte-string-notation" numbered="true" removeInRFC="false" toc="include" pn="section-g.1">
        <name slugifiedName="name-whitespace-in-byte-string-notation">Whitespace in Byte String Notation</name>
        <t indent="0" pn="section-g.1-1">Examples often benefit from some whitespace (spaces, line breaks) in
byte strings.  In EDN, whitespace is ignored in prefixed byte
strings; for instance, the following are equivalent:</t>
        <t indent="0" pn="section-g.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   h'48656c6c6f20776f726c64'
   h'48 65 6c 6c 6f 20 77 6f 72 6c 64'
   h'4 86 56c 6c6f
     20776 f726c64'
]]></artwork>
</t>
      </section>
      <section anchor="text-in-byte-string-notation" numbered="true" removeInRFC="false" toc="include" pn="section-g.2">
        <name slugifiedName="name-text-in-byte-string-notation">Text in Byte String Notation</name>
        <t indent="0" pn="section-g.2-1">Diagnostic notation notates byte strings in one of the base encodings
per <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648"/>, enclosed in single quotes, prefixed by &gt;h&lt; for base16,
&gt;b32&lt; for base32, &gt;h32&lt; for base32hex, or &gt;b64&lt; for base64 or
base64url.  Quite often, byte strings carry bytes that are
meaningfully interpreted as UTF-8 text.  EDN allows the use of single
quotes without a prefix to express byte strings with UTF-8 text; for
instance, the following are equivalent:</t>
        <t indent="0" pn="section-g.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   'hello world'
   h'68656c6c6f20776f726c64'
]]></artwork>
</t>
        <t indent="0" pn="section-g.2-3">The escaping rules of JSON strings are applied equivalently for
text-based byte strings, e.g., &quot;\&quot; stands for a single backslash and
&quot;'&quot; stands for a single quote.  Whitespace is included literally,
i.e., the previous section does not apply to text-based byte strings.</t>
      </section>
      <section anchor="embedded-cbor-and-cbor-sequences-in-byte-strings" numbered="true" removeInRFC="false" toc="include" pn="section-g.3">
        <name slugifiedName="name-embedded-cbor-and-cbor-sequences-in-byte-strings">Embedded CBOR and CBOR Sequences in Byte Strings</name>
        <t indent="0" pn="section-g.3-1">Where a byte string is to carry an embedded CBOR-encoded item, or
more generally a sequence of zero or more such items, the diagnostic
notation for these zero or more CBOR data items, separated by commas,
can be enclosed in &lt;&lt; and &gt;&gt; to notate the byte string resulting from
encoding the data items and concatenating the result.  For instance,
each pair of columns in the following are equivalent:</t>
        <t indent="0" pn="section-g.3-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   <<1>>              h'01'
   <<1, 2>>           h'0102'
   <<"foo", null>>    h'63666F6FF6'
   <<>>               h''
]]></artwork>
</t>
      </section>
      <section anchor="concatenated-strings" numbered="true" removeInRFC="false" toc="include" pn="section-g.4">
        <name slugifiedName="name-concatenated-strings">Concatenated Strings</name>
        <t indent="0" pn="section-g.4-1">While the ability to include whitespace enables line-breaking of
encoded byte strings, a mechanism is needed to be able to include
text strings as well as byte strings in direct UTF-8 representation
into line-based documents (such as RFCs and source code).</t>
        <t indent="0" pn="section-g.4-2">We extend the diagnostic notation by allowing multiple text strings
or multiple byte strings to be notated separated by whitespace; these
are then concatenated into a single text or byte string,
respectively.  Text strings and byte strings do not mix within such a
concatenation, except that byte string notation can be used inside a
sequence of concatenated text string notation to encode characters
that may be better represented in an encoded way.  The following four
values are equivalent:</t>
        <t indent="0" pn="section-g.4-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   "Hello world"
   "Hello " "world"
   "Hello" h'20' "world"
   "" h'48656c6c6f20776f726c64' ""
]]></artwork>
</t>
        <t indent="0" pn="section-g.4-4">Similarly, the following byte string values are equivalent:</t>
        <t indent="0" pn="section-g.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   'Hello world'
   'Hello ' 'world'
   'Hello ' h'776f726c64'
   'Hello' h'20' 'world'
   '' h'48656c6c6f20776f726c64' '' b64''
   h'4 86 56c 6c6f' h' 20776 f726c64'
]]></artwork>
</t>
        <t indent="0" pn="section-g.4-6">(Note that the approach of separating by whitespace, while familiar
from the C language, requires some attention -- a single comma makes
a big difference here.)</t>
      </section>
      <section anchor="hexadecimal,-octal,-and-binary-numbers" numbered="true" removeInRFC="false" toc="include" pn="section-g.5">
        <name slugifiedName="name-hexadecimal,-octal,-and-binary-numbers">Hexadecimal, Octal, and Binary Numbers</name>
        <t indent="0" pn="section-g.5-1">In addition to JSON's decimal numbers, EDN provides hexadecimal,
octal, and binary numbers in the usual C-language notation (octal
with 0o prefix present only).</t>
        <t indent="0" pn="section-g.5-2">The following are equivalent:</t>
        <t indent="0" pn="section-g.5-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   4711
   0x1267
   0o11147
   0b1001001100111
]]></artwork>
</t>
        <t indent="0" pn="section-g.5-4">As are:</t>
        <t indent="0" pn="section-g.5-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   1.5
   0x1.8p0
   0x18p-4
]]></artwork>
</t>
      </section>
      <section anchor="comments" numbered="true" removeInRFC="false" toc="include" pn="section-g.6">
        <name slugifiedName="name-comments">Comments</name>
        <t indent="0" pn="section-g.6-1">Longer pieces of diagnostic notation may benefit from comments.  JSON
famously does not provide for comments, and basic diagnostic notation
per RFC 7049 inherits this property.</t>
        <t indent="0" pn="section-g.6-2">In EDN, comments can be included, delimited by slashes (&quot;/&quot;).  Any
text within and including a pair of slashes is considered a comment.</t>
        <t indent="0" pn="section-g.6-3">Comments are considered whitespace.  Hence, they are allowed in
prefixed byte strings; for instance, the following are equivalent:</t>
        <t indent="0" pn="section-g.6-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   h'68656c6c6f20776f726c64'
   h'68 65 6c /doubled l!/ 6c 6f /hello/
     20 /space/
     77 6f 72 6c 64' /world/
]]></artwork>
</t>
        <t indent="0" pn="section-g.6-5">This can be used to annotate a CBOR structure as in:</t>
        <t indent="0" pn="section-g.6-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   /grasp-message/ [/M_DISCOVERY/ 1, /session-id/ 10584416,
                    /objective/ [/objective-name/ "opsonize",
                                 /D, N, S/ 7, /loop-count/ 105]]
]]></artwork>
</t>
        <t indent="0" pn="section-g.6-7">(There are currently no end-of-line comments.  If we want to add
them, &quot;//&quot; sounds like a reasonable delimiter given that we already
use slashes for comments, but we could also go, for example,
for &quot;#&quot;.)</t>
      </section>
    </section>
    <section anchor="examples" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.h">
      <name slugifiedName="name-examples">Examples</name>
      <t indent="0" pn="section-appendix.h-1">This appendix is for information only.</t>
      <t indent="0" pn="section-appendix.h-2">This appendix contains a few examples of structures defined
using CDDL.  The theme for the examples is taken from <xref target="RFC7071" format="default" sectionFormat="of" derivedContent="RFC7071"/>,
which defines certain JSON structures in English.  For a similar
example, it may also be of interest to examine Appendix A of
<xref target="RFC8007" format="default" sectionFormat="of" derivedContent="RFC8007"/>, which contains a CDDL definition for a JSON structure
defined in the main body of that RFC.</t>
      <t indent="0" pn="section-appendix.h-3">These examples all happen to describe data that is interchanged in
JSON.  Examples for CDDL definitions of data that is interchanged in
CBOR can be found in <xref target="RFC8152" format="default" sectionFormat="of" derivedContent="RFC8152"/>, <xref target="GRASP" format="default" sectionFormat="of" derivedContent="GRASP"/>, and <xref target="RFC8428" format="default" sectionFormat="of" derivedContent="RFC8428"/>.</t>
      <t indent="0" pn="section-appendix.h-4"><xref target="RFC7071" format="default" sectionFormat="of" derivedContent="RFC7071"/> defines the &quot;reputon&quot; structure for JSON using somewhat
formalized English text.  Here is a (somewhat verbose) equivalent
definition using the same terms, but notated in CDDL:</t>
      <t indent="0" pn="section-appendix.h-5"><artwork name="" type="" align="left" alt=""><![CDATA[
              reputation-object = {
                reputation-context,
                reputon-list
              }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-6"><artwork name="" type="" align="left" alt=""><![CDATA[
              reputation-context = (
                application: text
              )
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-7"><artwork name="" type="" align="left" alt=""><![CDATA[
              reputon-list = (
                reputons: reputon-array
              )
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-8"><artwork name="" type="" align="left" alt=""><![CDATA[
              reputon-array = [* reputon]
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-9"><artwork name="" type="" align="left" alt=""><![CDATA[
              reputon = {
                rater-value,
                assertion-value,
                rated-value,
                rating-value,
                ? conf-value,
                ? normal-value,
                ? sample-value,
                ? gen-value,
                ? expire-value,
                * ext-value,
              }
              rater-value = ( rater: text )
              assertion-value = ( assertion: text )
              rated-value = ( rated: text )
              rating-value = ( rating: float16 )
              conf-value = ( confidence: float16 )
              normal-value = ( normal-rating: float16 )
              sample-value = ( sample-size: uint )
              gen-value = ( generated: uint )
              expire-value = ( expires: uint )
              ext-value = ( text => any )
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-10">An equivalent, more compact form of this example would be:</t>
      <t indent="0" pn="section-appendix.h-11"><artwork name="" type="" align="left" alt=""><![CDATA[
                     reputation-object = {
                       application: text
                       reputons: [* reputon]
                     }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-12"><artwork name="" type="" align="left" alt=""><![CDATA[
                     reputon = {
                       rater: text
                       assertion: text
                       rated: text
                       rating: float16
                       ? confidence: float16
                       ? normal-rating: float16
                       ? sample-size: uint
                       ? generated: uint
                       ? expires: uint
                       * text => any
                     }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.h-13">Note how this rather clearly delineates the structure somewhat
shrouded by so many words in <xref target="RFC7071" section="6.2.2" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7071#section-6.2.2" derivedContent="RFC7071"/>.  Also, this
definition makes it clear that several ext-values are allowed (by
definition with different member names); RFC 7071 could be read to
forbid the repetition of ext-value (&quot;A specific reputon-element
<bcp14>MUST NOT</bcp14> appear more than once&quot; is ambiguous).</t>
      <t indent="0" pn="section-appendix.h-14">The CDDL tool described in Appendix F generates as one example:</t>
      <t indent="0" pn="section-appendix.h-15"><artwork name="" type="" align="left" alt=""><![CDATA[
               {
                 "application": "conchometry",
                 "reputons": [
                   {
                     "rater": "Ephthianura",
                     "assertion": "codding",
                     "rated": "sphaerolitic",
                     "rating": 0.34133473256800795,
                     "confidence": 0.9481983064298332,
                     "expires": 1568,
                     "unplaster": "grassy"
                   },
                   {
                     "rater": "nonchargeable",
                     "assertion": "raglan",
                     "rated": "alienage",
                     "rating": 0.5724646875815566,
                     "sample-size": 3514,
                     "Aldebaran": "unchurched",
                     "puruloid": "impersonable",
                     "uninfracted": "pericarpoidal",
                     "schorl": "Caro"
                   },
                   {
                     "rater": "precollectable",
                     "assertion": "Merat",
                     "rated": "thermonatrite",
                     "rating": 0.19164006323936977,
                     "confidence": 0.6065252103391268,
                     "normal-rating": 0.5187773690879303,
                     "generated": 899,
                     "speedy": "solidungular",
                     "noviceship": "medicine",
                     "checkrow": "epidictic"
                   }
                 ]
               }
]]></artwork>
</t>
    </section>
    <section anchor="acknowledgements" numbered="false" removeInRFC="false" toc="exclude" pn="section-appendix.i">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
        <t indent="0" pn="section-appendix.i-1">Inspiration was taken from the C and Pascal languages, MPEG's
conventions for describing structures in the ISO base media file
format, RELAX NG and its compact syntax <xref target="RELAXNG" format="default" sectionFormat="of" derivedContent="RELAXNG"/>, and, in
particular, Andrew Lee Newton's early proposals on JSON Content Rules
(JCR) as found in draft version four (-04) of <xref target="JCR" format="default" sectionFormat="of" derivedContent="JCR"/>.</t>
        <t indent="0" pn="section-appendix.i-2">Lots of highly useful feedback came from members of the IETF CBOR WG
-- in particular, Ari Keranen, Brian Carpenter, Burt Harris, Jeffrey
Yasskin, Jim Hague, Jim Schaad, Joe Hildebrand, Max Pritikin, Michael
Richardson, Pete Cordell, Sean Leonard, and Yaron Sheffer.  Also,
Francesca Palombini and Joe volunteered to chair the WG when it was
created, providing the framework for generating and processing this
feedback, with Barry Leiba having taken over from Joe since then.
Chris Lonvick and Ines Robles provided additional reviews during IESG
processing, and Alexey Melnikov steered the process as the
responsible Area Director.</t>
        <t indent="0" pn="section-appendix.i-3">The CDDL tool described in Appendix F was written by Carsten Bormann,
building on previous work by Troy Heninger and Tom Lord.</t>
      </section>
  </back>
</rfc>
