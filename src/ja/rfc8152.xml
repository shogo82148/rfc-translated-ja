<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-cose-msg-24" indexInclude="true" number="8152" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-cose-msg-24" rel="prev"/>
<link href="https://dx.doi.org/10.17487/rfc8152" rel="alternate"/>
  <front>
    <title>CBORオブジェクト署名および暗号化（COSE）</title>
    <seriesInfo name="RFC" value="8152" stream="IETF"/>
    <date year="2017" month="July"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">Concise Binary Object Representation (CBOR) は、小さなコードサイズと小さなメッセージサイズを設計されたデータフォーマットです。このデータフォーマットに対して基本的なセキュリティサービスを定義する必要があります。このドキュメントでは、CBOR Object Signing and Encryption (COSE) プロトコルを定義します。この仕様では、CBOR をシリアル化に使用して、署名、メッセージ認証コード、および暗号化を作成および処理する方法について説明します。この仕様では、CBOR を使用して暗号鍵を表現する方法についても説明します。</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">このメモのステータス</name>
        <t indent="0" pn="section-boilerplate.1.1">これは、インターネット標準トラックドキュメントです。</t>
        <t indent="0" pn="section-boilerplate.1.2">このドキュメントは、インターネット技術標準化団体（IETF）の成果物です。IETFコミュニティの合意を反映しています。公開レビューを受け、インターネット技術指導委員会（IESG）によって公開が承認されました。インターネット標準に関する詳細は、RFC 7841のセクション2を参照してください。</t>
        <t indent="0" pn="section-boilerplate.1.3">このドキュメントの現在の状況、正誤表、およびフィードバックの提供方法に関する情報については、http://www.rfc-editor.org/info/rfc8152を参照してください。</t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">著作権表示</name>
        <t indent="0" pn="section-boilerplate.2-1">Copyright (c) 2017 IETF Trust and the persons identified as the
document authors.  All rights reserved.</t>
        <t indent="0" pn="section-boilerplate.2-2">この文書は、BCP 78およびIETFドキュメントに関するIETFトラストの法的規定（<eref target="https://trustee.ietf.org/license-info" brackets="none"/>）にしたがう必要があります。これらの文書をよく確認し、この文書に関するあなたの権利と制限を説明しています。この文書から抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。</t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">目次</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
            <li pn="section-toc.1-1.1.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-design-changes-from-jose">Design Changes from JOSE</xref></t>
            </li>
            <li pn="section-toc.1-1.1.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requirements-terminology">Requirements Terminology</xref></t>
            </li>
            <li pn="section-toc.1-1.1.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cbor-grammar">CBOR Grammar</xref></t>
            </li>
            <li pn="section-toc.1-1.1.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cbor-related-terminology">CBOR-Related Terminology</xref></t>
            </li>
            <li pn="section-toc.1-1.1.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.5.1"><xref derivedContent="1.5" format="counter" sectionFormat="of" target="section-1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-document-terminology">Document Terminology</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-basic-cose-structure">Basic COSE Structure</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-header-parameters">Header Parameters</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
            <li pn="section-toc.1-1.3.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-common-cose-headers-parameters">Common COSE Headers Parameters</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signing-objects">Signing Objects</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
            <li pn="section-toc.1-1.4.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signing-with-one-or-more-signers">Signing with One or More Signers</xref></t>
            </li>
            <li pn="section-toc.1-1.4.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signing-with-one-signer">Signing with One Signer</xref></t>
            </li>
            <li pn="section-toc.1-1.4.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-externally-supplied-data">Externally Supplied Data</xref></t>
            </li>
            <li pn="section-toc.1-1.4.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signing-and-verification-process">Signing and Verification Process</xref></t>
            </li>
            <li pn="section-toc.1-1.4.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.5.1"><xref derivedContent="4.5" format="counter" sectionFormat="of" target="section-4.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-computing-counter-signatures">Computing Counter Signatures</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encryption-objects">Encryption Objects</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
            <li pn="section-toc.1-1.5.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-enveloped-cose-structure">Enveloped COSE Structure</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.1.2">
              <li pn="section-toc.1-1.5.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1.1.1"><xref derivedContent="5.1.1" format="counter" sectionFormat="of" target="section-5.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-content-key-distribution-methods">Content Key Distribution Methods</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.5.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-recipient-encrypted">Single Recipient Encrypted</xref></t>
            </li>
            <li pn="section-toc.1-1.5.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-how-to-encrypt-and-decrypt-for-aead-algorithms">How to Encrypt and Decrypt for AEAD Algorithms</xref></t>
            </li>
            <li pn="section-toc.1-1.5.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-how-to-encrypt-and-decrypt-for-ae-algorithms">How to Encrypt and Decrypt for AE Algorithms</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-mac-objects">MAC Objects</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
            <li pn="section-toc.1-1.6.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-maced-message-with-recipients">MACed Message with Recipients</xref></t>
            </li>
            <li pn="section-toc.1-1.6.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-maced-messages-with-implicit-key">MACed Messages with Implicit Key</xref></t>
            </li>
            <li pn="section-toc.1-1.6.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-how-to-compute-and-verify-a-mac">How to Compute and Verify a MAC</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-objects">Key Objects</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
            <li pn="section-toc.1-1.7.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-key-common-parameters">COSE Key Common Parameters</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signature-algorithms">Signature Algorithms</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
            <li pn="section-toc.1-1.8.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1.1"><xref derivedContent="8.1" format="counter" sectionFormat="of" target="section-8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecdsa">ECDSA</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.1.2">
              <li pn="section-toc.1-1.8.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1.1.1"><xref derivedContent="8.1.1" format="counter" sectionFormat="of" target="section-8.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.8.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.2.1"><xref derivedContent="8.2" format="counter" sectionFormat="of" target="section-8.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edwards-curve-digital-signature-algorithms-(eddsas)">Edwards-Curve Digital Signature Algorithms (EdDSAs)</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2.2">
              <li pn="section-toc.1-1.8.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="8.2.1" format="counter" sectionFormat="of" target="section-8.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-authentication-code-(mac)-algorithms">Message Authentication Code (MAC) Algorithms</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
            <li pn="section-toc.1-1.9.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-hash-based-message-authentication-codes-(hmacs)">Hash-Based Message Authentication Codes (HMACs)</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.1.2">
              <li pn="section-toc.1-1.9.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1.1"><xref derivedContent="9.1.1" format="counter" sectionFormat="of" target="section-9.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.9.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-aes-message-authentication-code-(aes-cbc-mac)">AES Message Authentication Code (AES-CBC-MAC)</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.2.1" format="counter" sectionFormat="of" target="section-9.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-content-encryption-algorithms">Content Encryption Algorithms</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
            <li pn="section-toc.1-1.10.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-aes-gcm">AES GCM</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.1.2">
              <li pn="section-toc.1-1.10.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1.1.1"><xref derivedContent="10.1.1" format="counter" sectionFormat="of" target="section-10.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.10.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-aes-ccm">AES CCM</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.2.1" format="counter" sectionFormat="of" target="section-10.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.10.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.3.1"><xref derivedContent="10.3" format="counter" sectionFormat="of" target="section-10.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-chacha20-and-poly1305">ChaCha20 and Poly1305</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.3.2">
              <li pn="section-toc.1-1.10.3.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.3.1.1"><xref derivedContent="10.3.1" format="counter" sectionFormat="of" target="section-10.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-derivation-functions-(kdfs)">Key Derivation Functions (KDFs)</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
            <li pn="section-toc.1-1.11.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-hmac-based-extract-and-expand-key-derivation-function-(hkdf)">HMAC-Based Extract-and-Expand Key Derivation Function (HKDF)</xref></t>
            </li>
            <li pn="section-toc.1-1.11.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-context-information-structure">Context Information Structure</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1"><xref derivedContent="12" format="counter" sectionFormat="of" target="section-12"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-content-key-distribution-methods">Content Key Distribution Methods</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.2">
            <li pn="section-toc.1-1.12.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1.1"><xref derivedContent="12.1" format="counter" sectionFormat="of" target="section-12.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-encryption">Direct Encryption</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.1.2">
              <li pn="section-toc.1-1.12.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1.1.1"><xref derivedContent="12.1.1" format="counter" sectionFormat="of" target="section-12.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-key">Direct Key</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.1.1.2">
                <li pn="section-toc.1-1.12.1.1.1">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1.1.1.1"><xref derivedContent="12.1.1.1" format="counter" sectionFormat="of" target="section-12.1.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
                </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.12.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1.2.1"><xref derivedContent="12.1.2" format="counter" sectionFormat="of" target="section-12.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-key-with-kdf">Direct Key with KDF</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.1.2.2">
                <li pn="section-toc.1-1.12.1.2.1">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.1.2.1.1"><xref derivedContent="12.1.2.1" format="counter" sectionFormat="of" target="section-12.1.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
                </li>
                </ul>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.12.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.2.1"><xref derivedContent="12.2" format="counter" sectionFormat="of" target="section-12.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-wrap">Key Wrap</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.2.2">
              <li pn="section-toc.1-1.12.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.2.1.1"><xref derivedContent="12.2.1" format="counter" sectionFormat="of" target="section-12.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-aes-key-wrap">AES Key Wrap</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.2.1.2">
                <li pn="section-toc.1-1.12.2.1.1">
                  <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.2.1.1.1"><xref derivedContent="12.2.1.1" format="counter" sectionFormat="of" target="section-12.2.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations-for-aes-kw">Security Considerations for AES-KW</xref></t>
                </li>
                </ul>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.12.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.3.1"><xref derivedContent="12.3" format="counter" sectionFormat="of" target="section-12.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-transport">Key Transport</xref></t>
            </li>
            <li pn="section-toc.1-1.12.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.4.1"><xref derivedContent="12.4" format="counter" sectionFormat="of" target="section-12.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-key-agreement">Direct Key Agreement</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.4.2">
              <li pn="section-toc.1-1.12.4.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.4.1.1"><xref derivedContent="12.4.1" format="counter" sectionFormat="of" target="section-12.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecdh">ECDH</xref></t>
              </li>
              <li pn="section-toc.1-1.12.4.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.4.2.1"><xref derivedContent="12.4.2" format="counter" sectionFormat="of" target="section-12.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.12.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.5.1"><xref derivedContent="12.5" format="counter" sectionFormat="of" target="section-12.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-agreement-with-key-wrap">Key Agreement with Key Wrap</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.5.2">
              <li pn="section-toc.1-1.12.5.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.12.5.1.1"><xref derivedContent="12.5.1" format="counter" sectionFormat="of" target="section-12.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecdh">ECDH</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.13.1"><xref derivedContent="13" format="counter" sectionFormat="of" target="section-13"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-object-parameters">Key Object Parameters</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.13.2">
            <li pn="section-toc.1-1.13.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.13.1.1"><xref derivedContent="13.1" format="counter" sectionFormat="of" target="section-13.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-elliptic-curve-keys">Elliptic Curve Keys</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.13.1.2">
              <li pn="section-toc.1-1.13.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.13.1.1.1"><xref derivedContent="13.1.1" format="counter" sectionFormat="of" target="section-13.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-double-coordinate-curves">Double Coordinate Curves</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.13.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.13.2.1"><xref derivedContent="13.2" format="counter" sectionFormat="of" target="section-13.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-octet-key-pair">Octet Key Pair</xref></t>
            </li>
            <li pn="section-toc.1-1.13.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.13.3.1"><xref derivedContent="13.3" format="counter" sectionFormat="of" target="section-13.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-symmetric-keys">Symmetric Keys</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.14">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.14.1"><xref derivedContent="14" format="counter" sectionFormat="of" target="section-14"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cbor-encoder-restrictions">CBOR Encoder Restrictions</xref></t>
          </li>
          <li pn="section-toc.1-1.15">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.15.1"><xref derivedContent="15" format="counter" sectionFormat="of" target="section-15"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-application-profiling-considerations">Application Profiling Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.16">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.1"><xref derivedContent="16" format="counter" sectionFormat="of" target="section-16"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.16.2">
            <li pn="section-toc.1-1.16.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.1.1"><xref derivedContent="16.1" format="counter" sectionFormat="of" target="section-16.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cbor-tag-assignment">CBOR Tag Assignment</xref></t>
            </li>
            <li pn="section-toc.1-1.16.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.2.1"><xref derivedContent="16.2" format="counter" sectionFormat="of" target="section-16.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-header-parameters-registry">COSE Header Parameters Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.3.1"><xref derivedContent="16.3" format="counter" sectionFormat="of" target="section-16.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-header-algorithm-parameters-registry">COSE Header Algorithm Parameters Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.4.1"><xref derivedContent="16.4" format="counter" sectionFormat="of" target="section-16.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-algorithms-registry">COSE Algorithms Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.5.1"><xref derivedContent="16.5" format="counter" sectionFormat="of" target="section-16.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-key-common-parameters-registry">COSE Key Common Parameters Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.6.1"><xref derivedContent="16.6" format="counter" sectionFormat="of" target="section-16.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-key-type-parameters-registry">COSE Key Type Parameters Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.7.1"><xref derivedContent="16.7" format="counter" sectionFormat="of" target="section-16.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-key-types-registry">COSE Key Types Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.8">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.8.1"><xref derivedContent="16.8" format="counter" sectionFormat="of" target="section-16.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-elliptic-curves-registry">COSE Elliptic Curves Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.9">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.9.1"><xref derivedContent="16.9" format="counter" sectionFormat="of" target="section-16.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-media-type-registrations">Media Type Registrations</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.16.9.2">
              <li pn="section-toc.1-1.16.9.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.9.1.1"><xref derivedContent="16.9.1" format="counter" sectionFormat="of" target="section-16.9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-security-message">COSE Security Message</xref></t>
              </li>
              <li pn="section-toc.1-1.16.9.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.9.2.1"><xref derivedContent="16.9.2" format="counter" sectionFormat="of" target="section-16.9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-key-media-type">COSE Key Media Type</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.16.10">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.10.1"><xref derivedContent="16.10" format="counter" sectionFormat="of" target="section-16.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-coap-content-formats-registry">CoAP Content-Formats Registry</xref></t>
            </li>
            <li pn="section-toc.1-1.16.11">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.16.11.1"><xref derivedContent="16.11" format="counter" sectionFormat="of" target="section-16.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-expert-review-instructions">Expert Review Instructions</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.17">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.17.1"><xref derivedContent="17" format="counter" sectionFormat="of" target="section-17"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.18">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.18.1"><xref derivedContent="18" format="counter" sectionFormat="of" target="section-18"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.18.2">
            <li pn="section-toc.1-1.18.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.18.1.1"><xref derivedContent="18.1" format="counter" sectionFormat="of" target="section-18.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
            </li>
            <li pn="section-toc.1-1.18.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.18.2.1"><xref derivedContent="18.2" format="counter" sectionFormat="of" target="section-18.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.A">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1"><xref derivedContent="A" format="counter" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-guidelines-for-external-data-authentication-of-algorithms">Guidelines for External Data Authentication of Algorithms</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.2">
            <li pn="section-toc.1-1.A.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-algorithm-identification">Algorithm Identification</xref></t>
            </li>
            <li pn="section-toc.1-1.A.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-counter-signature-without-headers">Counter Signature without Headers</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.B">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.B.1"><xref derivedContent="B" format="counter" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-two-layers-of-recipient-information">Two Layers of Recipient Information</xref></t>
          </li>
          <li pn="section-toc.1-1.C">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1"><xref derivedContent="C" format="counter" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples">Examples</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.2">
            <li pn="section-toc.1-1.C.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1.1"><xref derivedContent="C.1" format="counter" sectionFormat="of" target="section-c.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples-of-signed-messages">Examples of Signed Messages</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.1.2">
              <li pn="section-toc.1-1.C.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1.1.1"><xref derivedContent="C.1.1" format="counter" sectionFormat="of" target="section-c.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-signature">Single Signature</xref></t>
              </li>
              <li pn="section-toc.1-1.C.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1.2.1"><xref derivedContent="C.1.2" format="counter" sectionFormat="of" target="section-c.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-multiple-signers">Multiple Signers</xref></t>
              </li>
              <li pn="section-toc.1-1.C.1.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1.3.1"><xref derivedContent="C.1.3" format="counter" sectionFormat="of" target="section-c.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-counter-signature">Counter Signature</xref></t>
              </li>
              <li pn="section-toc.1-1.C.1.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1.4.1"><xref derivedContent="C.1.4" format="counter" sectionFormat="of" target="section-c.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-signature-with-criticality">Signature with Criticality</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.2.1"><xref derivedContent="C.2" format="counter" sectionFormat="of" target="section-c.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-signer-examples">Single Signer Examples</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.2.2">
              <li pn="section-toc.1-1.C.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.2.1.1"><xref derivedContent="C.2.1" format="counter" sectionFormat="of" target="section-c.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-single-ecdsa-signature">Single ECDSA Signature</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.3.1"><xref derivedContent="C.3" format="counter" sectionFormat="of" target="section-c.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples-of-enveloped-messages">Examples of Enveloped Messages</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.3.2">
              <li pn="section-toc.1-1.C.3.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.3.1.1"><xref derivedContent="C.3.1" format="counter" sectionFormat="of" target="section-c.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-ecdh">Direct ECDH</xref></t>
              </li>
              <li pn="section-toc.1-1.C.3.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.3.2.1"><xref derivedContent="C.3.2" format="counter" sectionFormat="of" target="section-c.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-direct-plus-key-derivation">Direct Plus Key Derivation</xref></t>
              </li>
              <li pn="section-toc.1-1.C.3.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.3.3.1"><xref derivedContent="C.3.3" format="counter" sectionFormat="of" target="section-c.3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-counter-signature-on-encrypted-content">Counter Signature on Encrypted Content</xref></t>
              </li>
              <li pn="section-toc.1-1.C.3.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.3.4.1"><xref derivedContent="C.3.4" format="counter" sectionFormat="of" target="section-c.3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encrypted-content-with-external-data">Encrypted Content with External Data</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.4.1"><xref derivedContent="C.4" format="counter" sectionFormat="of" target="section-c.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples-of-encrypted-messages">Examples of Encrypted Messages</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.4.2">
              <li pn="section-toc.1-1.C.4.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.4.1.1"><xref derivedContent="C.4.1" format="counter" sectionFormat="of" target="section-c.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-simple-encrypted-message">Simple Encrypted Message</xref></t>
              </li>
              <li pn="section-toc.1-1.C.4.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.4.2.1"><xref derivedContent="C.4.2" format="counter" sectionFormat="of" target="section-c.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encrypted-message-with-a-partial-iv">Encrypted Message with a Partial IV</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.5.1"><xref derivedContent="C.5" format="counter" sectionFormat="of" target="section-c.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples-of-maced-messages">Examples of MACed Messages</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.5.2">
              <li pn="section-toc.1-1.C.5.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.5.1.1"><xref derivedContent="C.5.1" format="counter" sectionFormat="of" target="section-c.5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-shared-secret-direct-mac">Shared Secret Direct MAC</xref></t>
              </li>
              <li pn="section-toc.1-1.C.5.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.5.2.1"><xref derivedContent="C.5.2" format="counter" sectionFormat="of" target="section-c.5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ecdh-direct-mac">ECDH Direct MAC</xref></t>
              </li>
              <li pn="section-toc.1-1.C.5.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.5.3.1"><xref derivedContent="C.5.3" format="counter" sectionFormat="of" target="section-c.5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-wrapped-mac">Wrapped MAC</xref></t>
              </li>
              <li pn="section-toc.1-1.C.5.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.5.4.1"><xref derivedContent="C.5.4" format="counter" sectionFormat="of" target="section-c.5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-multi-recipient-maced-message">Multi-Recipient MACed Message</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.6.1"><xref derivedContent="C.6" format="counter" sectionFormat="of" target="section-c.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-examples-of-mac0-messages">Examples of MAC0 Messages</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.6.2">
              <li pn="section-toc.1-1.C.6.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.6.1.1"><xref derivedContent="C.6.1" format="counter" sectionFormat="of" target="section-c.6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-shared-secret-direct-mac">Shared Secret Direct MAC</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.C.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.7.1"><xref derivedContent="C.7" format="counter" sectionFormat="of" target="section-c.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-keys">COSE Keys</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.C.7.2">
              <li pn="section-toc.1-1.C.7.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.7.1.1"><xref derivedContent="C.7.1" format="counter" sectionFormat="of" target="section-c.7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-public-keys">Public Keys</xref></t>
              </li>
              <li pn="section-toc.1-1.C.7.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.7.2.1"><xref derivedContent="C.7.2" format="counter" sectionFormat="of" target="section-c.7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-private-keys">Private Keys</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
      </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">はじめに</name>
      <t indent="0" pn="section-1-1">インターネット・オブ・シングス（IoT）を構成する小型の制約されたデバイスに注目が集まっています。このプロセスから生まれた標準の1つが、「Concise Binary Object Representation（CBOR）」<xref target="RFC7049" format="default" sectionFormat="of" derivedContent="RFC7049"/>です。CBORは、JavaScript Object Notation（JSON）<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>のデータモデルを拡張し、バイナリデータなどを許可しました。CBORは、データ構造をエンコードするためのIETFワーキンググループで採用されており、メッセージ転送や実装サイズの面で小さく、スキーマフリーなデコーダーであることを特徴としています。IoT向けのメッセージセキュリティサービスを提供する必要があり、メッセージエンコーディングフォーマットとしてCBORを使用することは合理的です。</t>
      <t indent="0" pn="section-1-2">JOSEワーキンググループは、JSONを使用して暗号化、署名、およびメッセージ認証コード（MAC）操作を処理し、JSONを使用してキーをエンコードする方法を指定する一連のドキュメントを作成しました。<xref target="RFC7515" format="default" sectionFormat="of" derivedContent="RFC7515"/> <xref target="RFC7516" format="default" sectionFormat="of" derivedContent="RFC7516"/> <xref target="RFC7517" format="default" sectionFormat="of" derivedContent="RFC7517"/> <xref target="RFC7518" format="default" sectionFormat="of" derivedContent="RFC7518"/> このドキュメントでは、同じことをCBORエンコーディング形式に対して行うCBORオブジェクト署名および暗号化（COSE）標準を定義します。元のJSONオブジェクト署名および暗号化（JOSE）ドキュメントのフレーバーを保つことに強い試みがありますが、2つの考慮事項が考慮されています。</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1-3">
        <li pn="section-1-3.1">CBORには、JSONにはない機能があり、使用するのに適しています。これの1つの例は、CBORには、バイナリを最初にbase64エンコードされた文字列に変換することなく、直接エンコードする方法があることです。</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1-4">
        <li pn="section-1-4.1">COSEは、JOSE仕様の直接的なコピーではありません。COSEを作成する過程で、JOSEのために行われた決定が再検討されました。多くの場合、基準が常に同じではなかったため、異なる結果が決定されました。</li>
      </ul>
      <section anchor="design-changes-from-jose" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-design-changes-from-jose">JOSEからの設計変更</name>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-1">
          <li pn="section-1.1-1.1">暗号化、署名、MAC付きのメッセージを簡単に識別し、一貫したビューを持つことができるように、単一のトップメッセージ構造を定義します。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-2">
          <li pn="section-1.1-2.1">署名付きメッセージは、コンテンツに関連する保護されたおよび保護されていないパラメータと、署名に関連するパラメータとを区別します。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-3">
          <li pn="section-1.1-3.1">MAC付きメッセージは、署名付きメッセージから分離されます。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-4">
          <li pn="section-1.1-4.1">MAC付きメッセージは、MAC認証キーを取得するために、封入されたメッセージと同じ受信者アルゴリズムのセットを使用できる能力を持っています。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-5">
          <li pn="section-1.1-5.1">バイナリデータの場合は、base64urlエンコーディングではなくバイナリエンコーディングを使用します。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-6">
          <li pn="section-1.1-6.1">暗号化アルゴリズムの認証タグを、暗号文と組み合わせます。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-1.1-7">
          <li pn="section-1.1-7.1">暗号アルゴリズムのセットは、いくつかの方向で拡張され、他の方向で削減されました。</li>
        </ul>
      </section>
      <section anchor="requirements-terminology" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-requirements-terminology">要件用語</name>
        <t indent="0" pn="section-1.2-1">キーワード「<bcp14>しなければなりません（MUST）</bcp14>」、「<bcp14>してはなりません（MUST NOT）</bcp14>」、
「<bcp14>要求されています（REQUIRED）</bcp14>」、
「<bcp14>することになります（SHALL）</bcp14>」、「<bcp14>することはありません（SHALL NOT）</bcp14>」、
「<bcp14>すべきです（SHOULD）</bcp14>」、「<bcp14>すべきではありません（SHOULD NOT）</bcp14>」、
「<bcp14>推奨されます（RECOMMENDED）</bcp14>」、「<bcp14>推奨されません（NOT RECOMMENDED）</bcp14>」、
「<bcp14>してもよいです（MAY）</bcp14>」、「<bcp14>選択できます（OPTIONAL）</bcp14>」は、
BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/>に記載されているとおりに解釈されるものとします。
ただし、ここに示すようにすべて大文字で表示される場合に限ります。</t>
        <t indent="0" pn="section-1.2-2">単語が小文字で表示される場合、この解釈は適用されません。</t>
      </section>
      <section anchor="cbor-grammar" numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-cbor-grammar">CBOR文法</name>
        <t indent="0" pn="section-1.3-1">There is currently no standard CBOR grammar available for use by
specifications.  The CBOR structures are therefore described in
prose.</t>
        <t indent="0" pn="section-1.3-2">The document was developed by first working on the grammar and then
developing the prose to go with it.  An artifact of this is that the
prose was written using the primitive type strings defined by CBOR
Data Definition Language (CDDL) <xref target="CDDL" format="default" sectionFormat="of" derivedContent="CDDL"/>.  In this specification, the
following primitive types are used:</t>
        <t indent="0" pn="section-1.3-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   any -- non-specific value that permits all CBOR values to be
   placed here.
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   bool -- a boolean value (true: major type 7, value 21; false:
   major type 7, value 20).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   bstr -- byte string (major type 2).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   int -- an unsigned integer or a negative integer.
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   nil -- a null value (major type 7, value 22).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   nint -- a negative integer (major type 1).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   tstr -- a UTF-8 text string (major type 3).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   uint -- an unsigned integer (major type 0).
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-11">Two syntaxes from CDDL appear in this document as shorthand.  These
are:</t>
        <t indent="0" pn="section-1.3-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   FOO / BAR -- indicates that either FOO or BAR can appear here.
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-13"><artwork name="" type="" align="left" alt=""><![CDATA[
   [+ FOO] -- indicates that the type FOO appears one or more times
   in an array.
]]></artwork>
</t>
        <t indent="0" pn="section-1.3-14">As well as the prose description, a version of a CBOR grammar is
presented in CDDL.  Since CDDL has not been published in an RFC, this
grammar may not work with the final version of CDDL.  The CDDL
grammar is informational; the prose description is normative.</t>
        <t indent="0" pn="section-1.3-15">The collected CDDL can be extracted from the XML version of this
document via the following XPath expression below.  (Depending on the
XPath evaluator one is using, it may be necessary to deal with &amp;gt;
as an entity.)</t>
        <t indent="0" pn="section-1.3-16">//artwork[@type='CDDL']/text()</t>
        <t indent="0" pn="section-1.3-17">CDDL expects the initial non-terminal symbol to be the first symbol
in the file.  For this reason, the first fragment of CDDL is
presented here.</t>
        <t indent="0" pn="section-1.3-18">start = COSE_Messages / COSE_Key / COSE_KeySet / Internal_Types</t>
        <t indent="0" pn="section-1.3-19">; This is defined to make the tool quieter:
Internal_Types = Sig_structure / Enc_structure / MAC_structure /
        COSE_KDF_Context</t>
        <t indent="0" pn="section-1.3-20">The non-terminal Internal_Types is defined for dealing with the
automated validation tools used during the writing of this document.
It references those non-terminals that are used for security
computations but are not emitted for transport.</t>
      </section>
      <section anchor="cbor-related-terminology" numbered="true" removeInRFC="false" toc="include" pn="section-1.4">
        <name slugifiedName="name-cbor-related-terminology">CBOR-Related Terminology</name>
        <t indent="0" pn="section-1.4-1">In JSON, maps are called objects and only have one kind of map key: a
string.  In COSE, we use strings, negative integers, and unsigned
integers as map keys.  The integers are used for compactness of
encoding and easy comparison.  The inclusion of strings allows for an
additional range of short encoded values to be used as well.  Since
the word &quot;key&quot; is mainly used in its other meaning, as a
cryptographic key, we use the term &quot;label&quot; for this usage as a map
key.</t>
        <t indent="0" pn="section-1.4-2">The presence of a label in a COSE map that is not a string or an
integer is an error.  Applications can either fail processing or
process messages with incorrect labels; however, they <bcp14>MUST NOT</bcp14> create
messages with incorrect labels.</t>
        <t indent="0" pn="section-1.4-3">A CDDL grammar fragment defines the non-terminal 'label', as in the
previous paragraph, and 'values', which permits any value to be used.</t>
        <t indent="0" pn="section-1.4-4">label = int / tstr
values = any</t>
      </section>
      <section anchor="document-terminology" numbered="true" removeInRFC="false" toc="include" pn="section-1.5">
        <name slugifiedName="name-document-terminology">Document Terminology</name>
        <t indent="0" pn="section-1.5-1">In this document, we use the following terminology:</t>
        <t indent="0" pn="section-1.5-2">Byte is a synonym for octet.</t>
        <t indent="0" pn="section-1.5-3">Constrained Application Protocol (CoAP) is a specialized web transfer
protocol for use in constrained systems.  It is defined in <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/>.</t>
        <t indent="0" pn="section-1.5-4">Authenticated Encryption (AE) <xref target="RFC5116" format="default" sectionFormat="of" derivedContent="RFC5116"/> algorithms are those
encryption algorithms that provide an authentication check of the
contents algorithm with the encryption service.</t>
        <t indent="0" pn="section-1.5-5">Authenticated Encryption with Authenticated Data (AEAD) <xref target="RFC5116" format="default" sectionFormat="of" derivedContent="RFC5116"/>
algorithms provide the same content authentication service as AE
algorithms, but they additionally provide for authentication of non-
encrypted data as well.</t>
      </section>
    </section>
    <section anchor="basic-cose-structure" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-basic-cose-structure">Basic COSE Structure</name>
      <t indent="0" pn="section-2-1">The COSE object structure is designed so that there can be a large
amount of common code when parsing and processing the different types
of security messages.  All of the message structures are built on the
CBOR array type.  The first three elements of the array always
contain the same information:</t>
      <t indent="0" pn="section-2-2">1.  The set of protected header parameters wrapped in a bstr.</t>
      <t indent="0" pn="section-2-3">2.  The set of unprotected header parameters as a map.</t>
      <t indent="0" pn="section-2-4">3.  The content of the message.  The content is either the plaintext
    or the ciphertext as appropriate.  The content may be detached,
    but the location is still used.  The content is wrapped in a bstr
    when present and is a nil value when detached.</t>
      <t indent="0" pn="section-2-5">Elements after this point are dependent on the specific message type.</t>
      <t indent="0" pn="section-2-6">COSE messages are also built using the concept of layers to separate
different types of cryptographic concepts.  As an example of how this
works, consider the COSE_Encrypt message (Section 5.1).  This message
type is broken into two layers: the content layer and the recipient
layer.  In the content layer, the plaintext is encrypted and
information about the encrypted message is placed.  In the recipient
layer, the content encryption key (CEK) is encrypted and information
about how it is encrypted for each recipient is placed.  A single
layer version of the encryption message COSE_Encrypt0 (Section 5.2)
is provided for cases where the CEK is pre-shared.</t>
      <t indent="0" pn="section-2-7">Identification of which type of message has been presented is done by
the following methods:</t>
      <t indent="0" pn="section-2-8">1.  The specific message type is known from the context.  This may be
    defined by a marker in the containing structure or by
    restrictions specified by the application protocol.</t>
      <t indent="0" pn="section-2-9">2.  The message type is identified by a CBOR tag.  Messages with a
    CBOR tag are known in this specification as tagged messages,
    while those without the CBOR tag are known as untagged messages.
    This document defines a CBOR tag for each of the message
    structures.  These tags can be found in Table 1.</t>
      <t indent="0" pn="section-2-10">3.  When a COSE object is carried in a media type of 'application/
    cose', the optional parameter 'cose-type' can be used to identify
    the embedded object.  The parameter is <bcp14>OPTIONAL</bcp14> if the tagged
    version of the structure is used.  The parameter is <bcp14>REQUIRED</bcp14> if
    the untagged version of the structure is used.  The value to use
    with the parameter for each of the structures can be found in
    Table 1.</t>
      <t indent="0" pn="section-2-11">4.  When a COSE object is carried as a CoAP payload, the CoAP
    Content-Format Option can be used to identify the message
    content.  The CoAP Content-Format values can be found in
    Table 26.  The CBOR tag for the message structure is not required
    as each security message is uniquely identified.</t>
      <t indent="0" pn="section-2-12"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> CBOR  Tag</td>
<td align="left">cose-type</td>
<td align="left">Data Item</td>
<td align="left">Semantics                 </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> 98</td>
<td align="left">cose-sign</td>
<td align="left">COSE_Sign</td>
<td align="left">COSE Signed Data Object   </td>
</tr>
<tr>
<td align="left"> 18 </td>
<td align="left">cose-sign1 </td>
<td align="left">COSE_Sign1 </td>
<td align="left">COSE Single Signer Data    Object                    </td>
</tr>
<tr>
<td align="left"> 96 </td>
<td align="left">cose-encrypt </td>
<td align="left">COSE_Encrypt </td>
<td align="left">COSE Encrypted Data        Object                    </td>
</tr>
<tr>
<td align="left"> 16 </td>
<td align="left">cose-encrypt0 </td>
<td align="left">COSE_Encrypt0 </td>
<td align="left">COSE Single Recipient      Encrypted Data Object     </td>
</tr>
<tr>
<td align="left"> 97</td>
<td align="left">cose-mac</td>
<td align="left">COSE_Mac</td>
<td align="left">COSE MACed Data Object    </td>
</tr>
<tr>
<td align="left"> 17 </td>
<td align="left">cose-mac0 </td>
<td align="left">COSE_Mac0 </td>
<td align="left">COSE Mac w/o Recipients    Object                    </td>
</tr>
</tbody>
</table>
</t>
      <t indent="0" pn="section-2-13"><artwork name="" type="" align="left" alt=""><![CDATA[
                Table 1: COSE Message Identification
]]></artwork>
</t>
      <t indent="0" pn="section-2-14">The following CDDL fragment identifies all of the top messages
defined in this document.  Separate non-terminals are defined for the
tagged and the untagged versions of the messages.</t>
      <t indent="0" pn="section-2-15">COSE_Messages = COSE_Untagged_Message / COSE_Tagged_Message</t>
      <t indent="0" pn="section-2-16">COSE_Untagged_Message = COSE_Sign / COSE_Sign1 /
    COSE_Encrypt / COSE_Encrypt0 /
    COSE_Mac / COSE_Mac0</t>
      <t indent="0" pn="section-2-17">COSE_Tagged_Message = COSE_Sign_Tagged / COSE_Sign1_Tagged /
    COSE_Encrypt_Tagged / COSE_Encrypt0_Tagged /
    COSE_Mac_Tagged / COSE_Mac0_Tagged</t>
    </section>
    <section anchor="header-parameters" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-header-parameters">Header Parameters</name>
      <t indent="0" pn="section-3-1">The structure of COSE has been designed to have two buckets of
information that are not considered to be part of the payload itself,
but are used for holding information about content, algorithms, keys,
or evaluation hints for the processing of the layer.  These two
buckets are available for use in all of the structures except for
keys.  While these buckets are present, they may not all be usable in
all instances.  For example, while the protected bucket is defined as
part of the recipient structure, some of the algorithms used for
recipient structures do not provide for authenticated data.  If this
is the case, the protected bucket is left empty.</t>
      <t indent="0" pn="section-3-2">Both buckets are implemented as CBOR maps.  The map key is a 'label'
(Section 1.4).  The value portion is dependent on the definition for
the label.  Both maps use the same set of label/value pairs.  The
integer and string values for labels have been divided into several
sections including a standard range, a private range, and a range
that is dependent on the algorithm selected.  The defined labels can
be found in the &quot;COSE Header Parameters&quot; IANA registry
(Section 16.2).</t>
      <t indent="0" pn="section-3-3">Two buckets are provided for each layer:</t>
      <t indent="0" pn="section-3-4">protected:  Contains parameters about the current layer that are to
   be cryptographically protected.  This bucket <bcp14>MUST</bcp14> be empty if it
   is not going to be included in a cryptographic computation.  This
   bucket is encoded in the message as a binary object.  This value
   is obtained by CBOR encoding the protected map and wrapping it in
   a bstr object.  Senders <bcp14>SHOULD</bcp14> encode a zero-length map as a zero-
   length string rather than as a zero-length map (encoded as h'a0').
   The zero-length binary encoding is preferred because it is both
   shorter and the version used in the serialization structures for
   cryptographic computation.  After encoding the map, the value is
   wrapped in the binary object.  Recipients <bcp14>MUST</bcp14> accept both a zero-
   length binary value and a zero-length map encoded in the binary
   value.  The wrapping allows for the encoding of the protected map
   to be transported with a greater chance that it will not be
   altered in transit.  (Badly behaved intermediates could decode and
   re-encode, but this will result in a failure to verify unless the
   re-encoded byte string is identical to the decoded byte string.)
   This avoids the problem of all parties needing to be able to do a
   common canonical encoding.</t>
      <t indent="0" pn="section-3-5">unprotected:  Contains parameters about the current layer that are
   not cryptographically protected.</t>
      <t indent="0" pn="section-3-6">Only parameters that deal with the current layer are to be placed at
that layer.  As an example of this, the parameter 'content type'
describes the content of the message being carried in the message.
As such, this parameter is placed only in the content layer and is
not placed in the recipient or signature layers.  In principle, one
should be able to process any given layer without reference to any
other layer.  With the exception of the COSE_Sign structure, the only
data that needs to cross layers is the cryptographic key.</t>
      <t indent="0" pn="section-3-7">The buckets are present in all of the security objects defined in
this document.  The fields in order are the 'protected' bucket (as a
CBOR 'bstr' type) and then the 'unprotected' bucket (as a CBOR 'map'
type).  The presence of both buckets is required.  The parameters
that go into the buckets come from the IANA &quot;COSE Header Parameters&quot;
registry (Section 16.2).  Some common parameters are defined in the
next section, but a number of parameters are defined throughout this
document.</t>
      <t indent="0" pn="section-3-8">Labels in each of the maps <bcp14>MUST</bcp14> be unique.  When processing messages,
if a label appears multiple times, the message <bcp14>MUST</bcp14> be rejected as
malformed.  Applications <bcp14>SHOULD</bcp14> verify that the same label does not
occur in both the protected and unprotected headers.  If the message
is not rejected as malformed, attributes <bcp14>MUST</bcp14> be obtained from the
protected bucket before they are obtained from the unprotected
bucket.</t>
      <t indent="0" pn="section-3-9">The following CDDL fragment represents the two header buckets.  A
group &quot;Headers&quot; is defined in CDDL that represents the two buckets in
which attributes are placed.  This group is used to provide these two
fields consistently in all locations.  A type is also defined that
represents the map of common headers.</t>
      <t indent="0" pn="section-3-10">Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)</t>
      <t indent="0" pn="section-3-11">header_map = {
    Generic_Headers,
    * label =&gt; values
}</t>
      <t indent="0" pn="section-3-12">empty_or_serialized_map = bstr .cbor header_map / bstr .size 0</t>
      <section anchor="common-cose-headers-parameters" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-common-cose-headers-parameters">Common COSE Headers Parameters</name>
        <t indent="0" pn="section-3.1-1">This section defines a set of common header parameters.  A summary of
these parameters can be found in Table 2.  This table should be
consulted to determine the value of label and the type of the value.</t>
        <t indent="0" pn="section-3.1-2">The set of header parameters defined in this section are:</t>
        <t indent="0" pn="section-3.1-3">alg:  This parameter is used to indicate the algorithm used for the
   security processing.  This parameter <bcp14>MUST</bcp14> be authenticated where
   the ability to do so exists.  This support is provided by AEAD
   algorithms or construction (COSE_Sign, COSE_Sign0, COSE_Mac, and
   COSE_Mac0).  This authentication can be done either by placing the
   header in the protected header bucket or as part of the externally
   supplied data.  The value is taken from the &quot;COSE Algorithms&quot;
   registry (see Section 16.4).</t>
        <t indent="0" pn="section-3.1-4">crit:  The parameter is used to indicate which protected header
   labels an application that is processing a message is required to
   understand.  Parameters defined in this document do not need to be
   included as they should be understood by all implementations.
   When present, this parameter <bcp14>MUST</bcp14> be placed in the protected
   header bucket.  The array <bcp14>MUST</bcp14> have at least one value in it.
   Not all labels need to be included in the 'crit' parameter.  The
   rules for deciding which header labels are placed in the array
   are:</t>
        <t indent="0" pn="section-3.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Integer labels in the range of 0 to 8 SHOULD be omitted.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Integer labels in the range -1 to -128 can be omitted as they
      are algorithm dependent.  If an application can correctly
      process an algorithm, it can be assumed that it will correctly
      process all of the common parameters associated with that
      algorithm.  Integer labels in the range -129 to -65536 SHOULD
      be included as these would be less common parameters that might
      not be generally supported.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Labels for parameters required for an application MAY be
      omitted.  Applications should have a statement if the label can
      be omitted.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   The header parameter values indicated by 'crit' can be processed
   by either the security library code or an application using a
   security library; the only requirement is that the parameter is
   processed.  If the 'crit' value list includes a value for which
   the parameter is not in the protected bucket, this is a fatal
   error in processing the message.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-9">content type:  This parameter is used to indicate the content type of
   the data in the payload or ciphertext fields.  Integers are from
   the &quot;CoAP Content-Formats&quot; IANA registry table <xref target="COAP.Formats" format="default" sectionFormat="of" derivedContent="COAP.Formats"/>.
   Text values following the syntax of &quot;&lt;type-name&gt;/&lt;subtype-name&gt;&quot;
   where &lt;type-name&gt; and &lt;subtype-name&gt; are defined in <xref target="RFC6838" section="4.2" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc6838#section-4.2" derivedContent="RFC6838"/>.  Leading and trailing whitespace is also omitted.
   Textual content values along with parameters and subparameters can
   be located using the IANA &quot;Media Types&quot; registry.  Applications
   <bcp14>SHOULD</bcp14> provide this parameter if the content structure is
   potentially ambiguous.</t>
        <t indent="0" pn="section-3.1-10">kid:  This parameter identifies one piece of data that can be used as
   input to find the needed cryptographic key.  The value of this
   parameter can be matched against the 'kid' member in a COSE_Key
   structure.  Other methods of key distribution can define an
   equivalent field to be matched.  Applications <bcp14>MUST NOT</bcp14> assume that
   'kid' values are unique.  There may be more than one key with the
   same 'kid' value, so all of the keys associated with this 'kid'
   may need to be checked.  The internal structure of 'kid' values is
   not defined and cannot be relied on by applications.  Key
   identifier values are hints about which key to use.  This is not a
   security-critical field.  For this reason, it can be placed in the
   unprotected headers bucket.</t>
        <t indent="0" pn="section-3.1-11">IV:  This parameter holds the Initialization Vector (IV) value.  For
   some symmetric encryption algorithms, this may be referred to as a
   nonce.  The IV can be placed in the unprotected header as
   modifying the IV will cause the decryption to yield plaintext that
   is readily detectable as garbled.</t>
        <t indent="0" pn="section-3.1-12">Partial IV:  This parameter holds a part of the IV value.  When using
   the COSE_Encrypt0 structure, a portion of the IV can be part of
   the context associated with the key.  This field is used to carry
   a value that causes the IV to be changed for each message.  The IV
   can be placed in the unprotected header as modifying the IV will
   cause the decryption to yield plaintext that is readily detectable
   as garbled.  The 'Initialization Vector' and 'Partial
   Initialization Vector' parameters <bcp14>MUST NOT</bcp14> both be present in the
   same security layer.</t>
        <t indent="0" pn="section-3.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
   The message IV is generated by the following steps:
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-14"><artwork name="" type="" align="left" alt=""><![CDATA[
   1.  Left-pad the Partial IV with zeros to the length of IV.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-15"><artwork name="" type="" align="left" alt=""><![CDATA[
   2.  XOR the padded Partial IV with the context IV.
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-16">counter signature:  This parameter holds one or more counter
   signature values.  Counter signatures provide a method of having a
   second party sign some data.  The counter signature parameter can
   occur as an unprotected attribute in any of the following
   structures: COSE_Sign1, COSE_Signature, COSE_Encrypt,
   COSE_recipient, COSE_Encrypt0, COSE_Mac, and COSE_Mac0.  These
   structures all have the same beginning elements, so that a
   consistent calculation of the counter signature can be computed.
   Details on computing counter signatures are found in Section 4.5.</t>
        <t indent="0" pn="section-3.1-17"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Label </td>
<td align="left">Value Type </td>
<td align="left">Value Registry</td>
<td align="left">Description    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> alg  </td>
<td align="left">1  </td>
<td align="left">int / tstr  </td>
<td align="left">COSE Algorithms registry</td>
<td align="left">Cryptographic   algorithm to    use            </td>
</tr>
<tr>
<td align="left"> crit  </td>
<td align="left">2  </td>
<td align="left">[+ label]  </td>
<td align="left">COSE Header Parameters registry</td>
<td align="left">Critical        headers to be   understood     </td>
</tr>
<tr>
<td align="left"> content</td>
<td align="left">3</td>
<td align="left">tstr / uint</td>
<td align="left">CoAP</td>
<td align="left">Content type   </td>
</tr>
<tr>
<td align="left"> type   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Content- Formats or Media Types registries</td>
<td align="left">of the payload </td>
</tr>
<tr>
<td align="left"> kid</td>
<td align="left">4</td>
<td align="left">bstr</td>
<td align="left"></td>
<td align="left">Key identifier </td>
</tr>
<tr>
<td align="left"> IV  </td>
<td align="left">5  </td>
<td align="left">bstr  </td>
<td align="left">  </td>
<td align="left">Full            Initialization  Vector         </td>
</tr>
<tr>
<td align="left"> Partial</td>
<td align="left">6</td>
<td align="left">bstr</td>
<td align="left"></td>
<td align="left">Partial        </td>
</tr>
<tr>
<td align="left"> IV </td>
<td align="left"> </td>
<td align="left"> </td>
<td align="left"> </td>
<td align="left">Initialization  Vector         </td>
</tr>
<tr>
<td align="left"> counter</td>
<td align="left">7</td>
<td align="left">COSE_Signature</td>
<td align="left"></td>
<td align="left">CBOR-encoded   </td>
</tr>
<tr>
<td align="left"> signature  </td>
<td align="left">  </td>
<td align="left">/ [+ COSE_Signature ]</td>
<td align="left"> </td>
<td align="left">signature       structure      </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-3.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
                  Table 2: Common Header Parameters
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-19">The CDDL fragment that represents the set of headers defined in this
section is given below.  Each of the headers is tagged as optional
because they do not need to be in every map; headers required in
specific maps are discussed above.</t>
        <t indent="0" pn="section-3.1-20">Generic_Headers = (
    ? 1 =&gt; int / tstr,  ; algorithm identifier
    ? 2 =&gt; [+label],    ; criticality
    ? 3 =&gt; tstr / int,  ; content type
    ? 4 =&gt; bstr,        ; key identifier
    ? 5 =&gt; bstr,        ; IV
    ? 6 =&gt; bstr,        ; Partial IV
    ? 7 =&gt; COSE_Signature / [+COSE_Signature] ; Counter signature
)</t>
      </section>
    </section>
    <section anchor="signing-objects" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-signing-objects">Signing Objects</name>
      <t indent="0" pn="section-4-1">COSE supports two different signature structures.  COSE_Sign allows
for one or more signatures to be applied to the same content.
COSE_Sign1 is restricted to a single signer.  The structures cannot
be converted between each other; as the signature computation
includes a parameter identifying which structure is being used, the
converted structure will fail signature validation.</t>
      <section anchor="signing-with-one-or-more-signers" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-signing-with-one-or-more-signers">Signing with One or More Signers</name>
        <t indent="0" pn="section-4.1-1">The COSE_Sign structure allows for one or more signatures to be
applied to a message payload.  Parameters relating to the content and
parameters relating to the signature are carried along with the
signature itself.  These parameters may be authenticated by the
signature, or just present.  An example of a parameter about the
content is the content type.  Examples of parameters about the
signature would be the algorithm and key used to create the signature
and counter signatures.</t>
        <t indent="0" pn="section-4.1-2">RFC 5652 indicates that:</t>
        <t indent="0" pn="section-4.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   When more than one signature is present, the successful validation
   of one signature associated with a given signer is usually treated
   as a successful signature by that signer.  However, there are some
   application environments where other rules are needed.  An
   application that employs a rule other than one valid signature for
   each signer must specify those rules.  Also, where simple matching
   of the signer identifier is not sufficient to determine whether
   the signatures were generated by the same signer, the application
   specification must describe how to determine which signatures were
   generated by the same signer.  Support for different communities
   of recipients is the primary reason that signers choose to include
   more than one signature.
]]></artwork>
</t>
        <t indent="0" pn="section-4.1-4">For example, the COSE_Sign structure might include signatures
generated with the Edwards-curve Digital Signature Algorithm (EdDSA)
<xref target="RFC8032" format="default" sectionFormat="of" derivedContent="RFC8032"/> and with the Elliptic Curve Digital Signature Algorithm
(ECDSA) <xref target="DSS" format="default" sectionFormat="of" derivedContent="DSS"/>.  This allows recipients to verify the signature
associated with one algorithm or the other.  More-detailed
information on multiple signature evaluations can be found in
<xref target="RFC5752" format="default" sectionFormat="of" derivedContent="RFC5752"/>.</t>
        <t indent="0" pn="section-4.1-5">The signature structure can be encoded as either tagged or untagged
depending on the context it will be used in.  A tagged COSE_Sign
structure is identified by the CBOR tag 98.  The CDDL fragment that
represents this is:</t>
        <t indent="0" pn="section-4.1-6">COSE_Sign_Tagged = #6.98(COSE_Sign)</t>
        <t indent="0" pn="section-4.1-7">A COSE Signed Message is defined in two parts.  The CBOR object that
carries the body and information about the body is called the
COSE_Sign structure.  The CBOR object that carries the signature and
information about the signature is called the COSE_Signature
structure.  Examples of COSE Signed Messages can be found in
Appendix C.1.</t>
        <t indent="0" pn="section-4.1-8">The COSE_Sign structure is a CBOR array.  The fields of the array in
order are:</t>
        <t indent="0" pn="section-4.1-9">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.1-10">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.1-11">payload:  This field contains the serialized content to be signed.
   If the payload is not present in the message, the application is
   required to supply the payload separately.  The payload is wrapped
   in a bstr to ensure that it is transported without changes.  If
   the payload is transported separately (&quot;detached content&quot;), then a
   nil CBOR object is placed in this location, and it is the
   responsibility of the application to ensure that it will be
   transported without changes.</t>
        <t indent="0" pn="section-4.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   Note: When a signature with a message recovery algorithm is used
   (Section 8), the maximum number of bytes that can be recovered is
   the length of the payload.  The size of the payload is reduced by
   the number of bytes that will be recovered.  If all of the bytes
   of the payload are consumed, then the payload is encoded as a
   zero-length binary string rather than as being absent.
]]></artwork>
</t>
        <t indent="0" pn="section-4.1-13">signatures:  This field is an array of signatures.  Each signature is
   represented as a COSE_Signature structure.</t>
        <t indent="0" pn="section-4.1-14">The CDDL fragment that represents the above text for COSE_Sign
follows.</t>
        <t indent="0" pn="section-4.1-15">COSE_Sign = [
    Headers,
    payload : bstr / nil,
    signatures : [+ COSE_Signature]
]</t>
        <t indent="0" pn="section-4.1-16">The COSE_Signature structure is a CBOR array.  The fields of the
array in order are:</t>
        <t indent="0" pn="section-4.1-17">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.1-18">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.1-19">signature:  This field contains the computed signature value.  The
   type of the field is a bstr.  Algorithms <bcp14>MUST</bcp14> specify padding if
   the signature value is not a multiple of 8 bits.</t>
        <t indent="0" pn="section-4.1-20">The CDDL fragment that represents the above text for COSE_Signature
follows.</t>
        <t indent="0" pn="section-4.1-21">COSE_Signature =  [
    Headers,
    signature : bstr
]</t>
      </section>
      <section anchor="signing-with-one-signer" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-signing-with-one-signer">Signing with One Signer</name>
        <t indent="0" pn="section-4.2-1">The COSE_Sign1 signature structure is used when only one signature is
going to be placed on a message.  The parameters dealing with the
content and the signature are placed in the same pair of buckets
rather than having the separation of COSE_Sign.</t>
        <t indent="0" pn="section-4.2-2">The structure can be encoded as either tagged or untagged depending
on the context it will be used in.  A tagged COSE_Sign1 structure is
identified by the CBOR tag 18.  The CDDL fragment that represents
this is:</t>
        <t indent="0" pn="section-4.2-3">COSE_Sign1_Tagged = #6.18(COSE_Sign1)</t>
        <t indent="0" pn="section-4.2-4">The CBOR object that carries the body, the signature, and the
information about the body and signature is called the COSE_Sign1
structure.  Examples of COSE_Sign1 messages can be found in
Appendix C.2.</t>
        <t indent="0" pn="section-4.2-5">The COSE_Sign1 structure is a CBOR array.  The fields of the array in
order are:</t>
        <t indent="0" pn="section-4.2-6">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.2-7">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-4.2-8">payload:  This is as described in Section 4.1.</t>
        <t indent="0" pn="section-4.2-9">signature:  This field contains the computed signature value.  The
   type of the field is a bstr.</t>
        <t indent="0" pn="section-4.2-10">The CDDL fragment that represents the above text for COSE_Sign1
follows.</t>
        <t indent="0" pn="section-4.2-11">COSE_Sign1 = [
    Headers,
    payload : bstr / nil,
    signature : bstr
]</t>
      </section>
      <section anchor="externally-supplied-data" numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-externally-supplied-data">Externally Supplied Data</name>
        <t indent="0" pn="section-4.3-1">One of the features offered in the COSE document is the ability for
applications to provide additional data to be authenticated, but that
is not carried as part of the COSE object.  The primary reason for
supporting this can be seen by looking at the CoAP message structure
<xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/>, where the facility exists for options to be carried before
the payload.  Examples of data that can be placed in this location
would be the CoAP code or CoAP options.  If the data is in the header
section, then it is available for proxies to help in performing its
operations.  For example, the Accept Option can be used by a proxy to
determine if an appropriate value is in the proxy's cache.  But the
sender can prevent a proxy from changing the set of values that it
will accept by including that value in the resulting authentication
tag.  However, it may also be desired to protect these values so that
if they are modified in transit, it can be detected.</t>
        <t indent="0" pn="section-4.3-2">This document describes the process for using a byte array of
externally supplied authenticated data; however, the method of
constructing the byte array is a function of the application.
Applications that use this feature need to define how the externally
supplied authenticated data is to be constructed.  Such a
construction needs to take into account the following issues:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-4.3-3">
          <li pn="section-4.3-3.1"> If multiple items are included, applications need to ensure that
   the same byte string is not produced if there are different
   inputs.  This could occur by appending the strings 'AB' and 'CDE'
   or by appending the strings 'ABC' and 'DE'.  This is usually
   addressed by making fields a fixed width and/or encoding the
   length of the field as part of the output.  Using options from
   CoAP [RFC7252] as an example, these fields use a TLV structure so
   they can be concatenated without any problems.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-4.3-4">
          <li pn="section-4.3-4.1"> If multiple items are included, an order for the items needs to be
   defined.  Using options from CoAP as an example, an application
   could state that the fields are to be ordered by the option
   number.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-4.3-5">
          <li pn="section-4.3-5.1"> Applications need to ensure that the byte stream is going to be
   the same on both sides.  Using options from CoAP might give a
   problem if the same relative numbering is kept.  An intermediate
   node could insert or remove an option, changing how the relative
   number is done.  An application would need to specify that the
   relative number must be re-encoded to be relative only to the
   options that are in the external data.</li>
        </ul>
      </section>
      <section anchor="signing-and-verification-process" numbered="true" removeInRFC="false" toc="include" pn="section-4.4">
        <name slugifiedName="name-signing-and-verification-process">Signing and Verification Process</name>
        <t indent="0" pn="section-4.4-1">In order to create a signature, a well-defined byte stream is needed.
The Sig_structure is used to create the canonical form.  This signing
and verification process takes in the body information (COSE_Sign or
COSE_Sign1), the signer information (COSE_Signature), and the
application data (external source).  A Sig_structure is a CBOR array.
The fields of the Sig_structure in order are:</t>
        <t indent="0" pn="section-4.4-2">1.  A text string identifying the context of the signature.  The
    context string is:</t>
        <t indent="0" pn="section-4.4-3"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Signature" for signatures using the COSE_Signature structure.
]]></artwork>
</t>
        <t indent="0" pn="section-4.4-4"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Signature1" for signatures using the COSE_Sign1 structure.
]]></artwork>
</t>
        <t indent="0" pn="section-4.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
       "CounterSignature" for signatures used as counter signature
       attributes.
]]></artwork>
</t>
        <t indent="0" pn="section-4.4-6">2.  The protected attributes from the body structure encoded in a
    bstr type.  If there are no protected attributes, a bstr of
    length zero is used.</t>
        <t indent="0" pn="section-4.4-7">3.  The protected attributes from the signer structure encoded in a
    bstr type.  If there are no protected attributes, a bstr of
    length zero is used.  This field is omitted for the COSE_Sign1
    signature structure.</t>
        <t indent="0" pn="section-4.4-8">4.  The protected attributes from the application encoded in a bstr
    type.  If this field is not supplied, it defaults to a zero-
    length binary string.  (See Section 4.3 for application guidance
    on constructing this field.)</t>
        <t indent="0" pn="section-4.4-9">5.  The payload to be signed encoded in a bstr type.  The payload is
    placed here independent of how it is transported.</t>
        <t indent="0" pn="section-4.4-10">The CDDL fragment that describes the above text is:</t>
        <t indent="0" pn="section-4.4-11">Sig_structure = [
    context : &quot;Signature&quot; / &quot;Signature1&quot; / &quot;CounterSignature&quot;,
    body_protected : empty_or_serialized_map,
    ? sign_protected : empty_or_serialized_map,
    external_aad : bstr,
    payload : bstr
]</t>
        <t indent="0" pn="section-4.4-12">How to compute a signature:</t>
        <t indent="0" pn="section-4.4-13">1.  Create a Sig_structure and populate it with the appropriate
    fields.</t>
        <t indent="0" pn="section-4.4-14">2.  Create the value ToBeSigned by encoding the Sig_structure to a
    byte string, using the encoding described in Section 14.</t>
        <t indent="0" pn="section-4.4-15">3.  Call the signature creation algorithm passing in K (the key to
    sign with), alg (the algorithm to sign with), and ToBeSigned (the
    value to sign).</t>
        <t indent="0" pn="section-4.4-16">4.  Place the resulting signature value in the 'signature' field of
    the array.</t>
        <t indent="0" pn="section-4.4-17">The steps for verifying a signature are:</t>
        <t indent="0" pn="section-4.4-18">1.  Create a Sig_structure object and populate it with the
    appropriate fields.</t>
        <t indent="0" pn="section-4.4-19">2.  Create the value ToBeSigned by encoding the Sig_structure to a
    byte string, using the encoding described in Section 14.</t>
        <t indent="0" pn="section-4.4-20">3.  Call the signature verification algorithm passing in K (the key
    to verify with), alg (the algorithm used sign with), ToBeSigned
    (the value to sign), and sig (the signature to be verified).</t>
        <t indent="0" pn="section-4.4-21">In addition to performing the signature verification, the application
may also perform the appropriate checks to ensure that the key is
correctly paired with the signing identity and that the signing
identity is authorized before performing actions.</t>
      </section>
      <section anchor="computing-counter-signatures" numbered="true" removeInRFC="false" toc="include" pn="section-4.5">
        <name slugifiedName="name-computing-counter-signatures">Computing Counter Signatures</name>
        <t indent="0" pn="section-4.5-1">Counter signatures provide a method of associating a different
signature generated by different signers with some piece of content.
This is normally used to provide a signature on a signature allowing
for a proof that a signature existed at a given time (i.e., a
Timestamp).  In this document, we allow for counter signatures to
exist in a greater number of environments.  As an example, it is
possible to place a counter signature in the unprotected attributes
of a COSE_Encrypt object.  This would allow for an intermediary to
either verify that the encrypted byte stream has not been modified,
without being able to decrypt it, or assert that an encrypted byte
stream either existed at a given time or passed through it in terms
of routing (i.e., a proxy signature).</t>
        <t indent="0" pn="section-4.5-2">An example of a counter signature on a signature can be found in
Appendix C.1.3.  An example of a counter signature in an encryption
object can be found in Appendix C.3.3.</t>
        <t indent="0" pn="section-4.5-3">The creation and validation of counter signatures over the different
items relies on the fact that the objects have the same structure.
The elements are a set of protected attributes, a set of unprotected
attributes, and a body, in that order.  This means that the
Sig_structure can be used in a uniform manner to get the byte stream
for processing a signature.  If the counter signature is going to be
computed over a COSE_Encrypt structure, the body_protected and
payload items can be mapped into the Sig_structure in the same manner
as from the COSE_Sign structure.</t>
        <t indent="0" pn="section-4.5-4">It should be noted that only a signature algorithm with appendix (see
Section 8) can be used for counter signatures.  This is because the
body should be able to be processed without having to evaluate the
counter signature, and this is not possible for signature schemes
with message recovery.</t>
      </section>
    </section>
    <section anchor="encryption-objects" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-encryption-objects">Encryption Objects</name>
      <t indent="0" pn="section-5-1">COSE supports two different encryption structures.  COSE_Encrypt0 is
used when a recipient structure is not needed because the key to be
used is known implicitly.  COSE_Encrypt is used the rest of the time.
This includes cases where there are multiple recipients or a
recipient algorithm other than direct is used.</t>
      <section anchor="enveloped-cose-structure" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-enveloped-cose-structure">Enveloped COSE Structure</name>
        <t indent="0" pn="section-5.1-1">The enveloped structure allows for one or more recipients of a
message.  There are provisions for parameters about the content and
parameters about the recipient information to be carried in the
message.  The protected parameters associated with the content are
authenticated by the content encryption algorithm.  The protected
parameters associated with the recipient are authenticated by the
recipient algorithm (when the algorithm supports it).  Examples of
parameters about the content are the type of the content and the
content encryption algorithm.  Examples of parameters about the
recipient are the recipient's key identifier and the recipient's
encryption algorithm.</t>
        <t indent="0" pn="section-5.1-2">The same techniques and structures are used for encrypting both the
plaintext and the keys.  This is different from the approach used by
both &quot;Cryptographic Message Syntax (CMS)&quot; <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/> and &quot;JSON Web
Encryption (JWE)&quot; <xref target="RFC7516" format="default" sectionFormat="of" derivedContent="RFC7516"/> where different structures are used for
the content layer and for the recipient layer.  Two structures are
defined: COSE_Encrypt to hold the encrypted content and
COSE_recipient to hold the encrypted keys for recipients.  Examples
of encrypted messages can be found in Appendix C.3.</t>
        <t indent="0" pn="section-5.1-3">The COSE_Encrypt structure can be encoded as either tagged or
untagged depending on the context it will be used in.  A tagged
COSE_Encrypt structure is identified by the CBOR tag 96.  The CDDL
fragment that represents this is:</t>
        <t indent="0" pn="section-5.1-4">COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)</t>
        <t indent="0" pn="section-5.1-5">The COSE_Encrypt structure is a CBOR array.  The fields of the array
in order are:</t>
        <t indent="0" pn="section-5.1-6">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.1-7">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.1-8">ciphertext:  This field contains the ciphertext encoded as a bstr.
   If the ciphertext is to be transported independently of the
   control information about the encryption process (i.e., detached
   content), then the field is encoded as a nil value.</t>
        <t indent="0" pn="section-5.1-9">recipients:  This field contains an array of recipient information
   structures.  The type for the recipient information structure is a
   COSE_recipient.</t>
        <t indent="0" pn="section-5.1-10">The CDDL fragment that corresponds to the above text is:</t>
        <t indent="0" pn="section-5.1-11">COSE_Encrypt = [
    Headers,
    ciphertext : bstr / nil,
    recipients : [+COSE_recipient]
]</t>
        <t indent="0" pn="section-5.1-12">The COSE_recipient structure is a CBOR array.  The fields of the
array in order are:</t>
        <t indent="0" pn="section-5.1-13">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.1-14">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.1-15">ciphertext:  This field contains the encrypted key encoded as a bstr.
   All encoded keys are symmetric keys; the binary value of the key
   is the content.  If there is not an encrypted key, then this field
   is encoded as a nil value.</t>
        <t indent="0" pn="section-5.1-16">recipients:  This field contains an array of recipient information
   structures.  The type for the recipient information structure is a
   COSE_recipient (an example of this can be found in Appendix B).
   If there are no recipient information structures, this element is
   absent.</t>
        <t indent="0" pn="section-5.1-17">The CDDL fragment that corresponds to the above text for
COSE_recipient is:</t>
        <t indent="0" pn="section-5.1-18">COSE_recipient = [
    Headers,
    ciphertext : bstr / nil,
    ? recipients : [+COSE_recipient]
]</t>
        <section anchor="content-key-distribution-methods" numbered="true" removeInRFC="false" toc="include" pn="section-5.1.1">
          <name slugifiedName="name-content-key-distribution-methods">Content Key Distribution Methods</name>
          <t indent="0" pn="section-5.1.1-1">An encrypted message consists of an encrypted content and an
encrypted CEK for one or more recipients.  The CEK is encrypted for
each recipient, using a key specific to that recipient.  The details
of this encryption depend on which class the recipient algorithm
falls into.  Specific details on each of the classes can be found in
Section 12.  A short summary of the five content key distribution
methods is:</t>
          <t indent="0" pn="section-5.1.1-2">direct:  The CEK is the same as the identified previously distributed
   symmetric key or is derived from a previously distributed secret.
   No CEK is transported in the message.</t>
          <t indent="0" pn="section-5.1.1-3">symmetric key-encryption keys (KEK):  The CEK is encrypted using a
   previously distributed symmetric KEK.  Also known as key wrap.</t>
          <t indent="0" pn="section-5.1.1-4">key agreement:  The recipient's public key and a sender's private key
   are used to generate a pairwise secret, a Key Derivation Function
   (KDF) is applied to derive a key, and then the CEK is either the
   derived key or encrypted by the derived key.</t>
          <t indent="0" pn="section-5.1.1-5">key transport:  The CEK is encrypted with the recipient's public key.
   No key transport algorithms are defined in this document.</t>
          <t indent="0" pn="section-5.1.1-6">passwords:  The CEK is encrypted in a KEK that is derived from a
   password.  No password algorithms are defined in this document.</t>
        </section>
      </section>
      <section anchor="single-recipient-encrypted" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-single-recipient-encrypted">Single Recipient Encrypted</name>
        <t indent="0" pn="section-5.2-1">The COSE_Encrypt0 encrypted structure does not have the ability to
specify recipients of the message.  The structure assumes that the
recipient of the object will already know the identity of the key to
be used in order to decrypt the message.  If a key needs to be
identified to the recipient, the enveloped structure ought to be
used.</t>
        <t indent="0" pn="section-5.2-2">Examples of encrypted messages can be found in Appendix C.3.</t>
        <t indent="0" pn="section-5.2-3">The COSE_Encrypt0 structure can be encoded as either tagged or
untagged depending on the context it will be used in.  A tagged
COSE_Encrypt0 structure is identified by the CBOR tag 16.  The CDDL
fragment that represents this is:</t>
        <t indent="0" pn="section-5.2-4">COSE_Encrypt0_Tagged = #6.16(COSE_Encrypt0)</t>
        <t indent="0" pn="section-5.2-5">The COSE_Encrypt0 structure is a CBOR array.  The fields of the array
in order are:</t>
        <t indent="0" pn="section-5.2-6">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.2-7">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-5.2-8">ciphertext:  This is as described in Section 5.1.</t>
        <t indent="0" pn="section-5.2-9">The CDDL fragment for COSE_Encrypt0 that corresponds to the above
text is:</t>
        <t indent="0" pn="section-5.2-10">COSE_Encrypt0 = [
    Headers,
    ciphertext : bstr / nil,
]</t>
      </section>
      <section anchor="how-to-encrypt-and-decrypt-for-aead-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-how-to-encrypt-and-decrypt-for-aead-algorithms">How to Encrypt and Decrypt for AEAD Algorithms</name>
        <t indent="0" pn="section-5.3-1">The encryption algorithm for AEAD algorithms is fairly simple.  The
first step is to create a consistent byte stream for the
authenticated data structure.  For this purpose, we use an
Enc_structure.  The Enc_structure is a CBOR array.  The fields of the
Enc_structure in order are:</t>
        <t indent="0" pn="section-5.3-2">1.  A text string identifying the context of the authenticated data
    structure.  The context string is:</t>
        <t indent="0" pn="section-5.3-3"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Encrypt0" for the content encryption of a COSE_Encrypt0 data
       structure.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Encrypt" for the first layer of a COSE_Encrypt data structure
       (i.e., for content encryption).
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Enc_Recipient" for a recipient encoding to be placed in an
       COSE_Encrypt data structure.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-6"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Mac_Recipient" for a recipient encoding to be placed in a
       MACed message structure.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-7"><artwork name="" type="" align="left" alt=""><![CDATA[
       "Rec_Recipient" for a recipient encoding to be placed in a
       recipient structure.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-8">2.  The protected attributes from the body structure encoded in a
    bstr type.  If there are no protected attributes, a bstr of
    length zero is used.</t>
        <t indent="0" pn="section-5.3-9">3.  The protected attributes from the application encoded in a bstr
    type.  If this field is not supplied, it defaults to a zero-
    length bstr.  (See Section 4.3 for application guidance on
    constructing this field.)</t>
        <t indent="0" pn="section-5.3-10">The CDDL fragment that describes the above text is:</t>
        <t indent="0" pn="section-5.3-11">Enc_structure = [
    context : &quot;Encrypt&quot; / &quot;Encrypt0&quot; / &quot;Enc_Recipient&quot; /
        &quot;Mac_Recipient&quot; / &quot;Rec_Recipient&quot;,
    protected : empty_or_serialized_map,
    external_aad : bstr
]</t>
        <t indent="0" pn="section-5.3-12">How to encrypt a message:</t>
        <t indent="0" pn="section-5.3-13">1.  Create an Enc_structure and populate it with the appropriate
    fields.</t>
        <t indent="0" pn="section-5.3-14">2.  Encode the Enc_structure to a byte stream (Additional
    Authenticated Data (AAD)), using the encoding described in
    Section 14.</t>
        <t indent="0" pn="section-5.3-15">3.  Determine the encryption key (K).  This step is dependent on the
    class of recipient algorithm being used.  For:</t>
        <t indent="0" pn="section-5.3-16"><artwork name="" type="" align="left" alt=""><![CDATA[
    No Recipients:  The key to be used is determined by the algorithm
       and key at the current layer.  Examples are key transport keys
       (Section 12.3), key wrap keys (Section 12.2.1), or pre-shared
       secrets.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-17"><artwork name="" type="" align="left" alt=""><![CDATA[
    Direct Encryption and Direct Key Agreement:  The key is
       determined by the key and algorithm in the recipient
       structure.  The encryption algorithm and size of the key to be
       used are inputs into the KDF used for the recipient.  (For
       direct, the KDF can be thought of as the identity operation.)
       Examples of these algorithms are found in Sections 12.1.2 and
       12.4.1.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-18"><artwork name="" type="" align="left" alt=""><![CDATA[
    Other:  The key is randomly or pseudorandomly generated.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-19">4.  Call the encryption algorithm with K (the encryption key), P (the
    plaintext), and AAD.  Place the returned ciphertext into the
    'ciphertext' field of the structure.</t>
        <t indent="0" pn="section-5.3-20">5.  For recipients of the message, recursively perform the encryption
    algorithm for that recipient, using K (the encryption key) as the
    plaintext.</t>
        <t indent="0" pn="section-5.3-21">How to decrypt a message:</t>
        <t indent="0" pn="section-5.3-22">1.  Create an Enc_structure and populate it with the appropriate
    fields.</t>
        <t indent="0" pn="section-5.3-23">2.  Encode the Enc_structure to a byte stream (AAD), using the
    encoding described in Section 14.</t>
        <t indent="0" pn="section-5.3-24">3.  Determine the decryption key.  This step is dependent on the
    class of recipient algorithm being used.  For:</t>
        <t indent="0" pn="section-5.3-25"><artwork name="" type="" align="left" alt=""><![CDATA[
    No Recipients:  The key to be used is determined by the algorithm
       and key at the current layer.  Examples are key transport keys
       (Section 12.3), key wrap keys (Section 12.2.1), or pre-shared
       secrets.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-26"><artwork name="" type="" align="left" alt=""><![CDATA[
    Direct Encryption and Direct Key Agreement:  The key is
       determined by the key and algorithm in the recipient
       structure.  The encryption algorithm and size of the key to be
       used are inputs into the KDF used for the recipient.  (For
       direct, the KDF can be thought of as the identity operation.)
       Examples of these algorithms are found in Sections 12.1.2 and
       12.4.1.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-27"><artwork name="" type="" align="left" alt=""><![CDATA[
    Other:  The key is determined by decoding and decrypting one of
       the recipient structures.
]]></artwork>
</t>
        <t indent="0" pn="section-5.3-28">4.  Call the decryption algorithm with K (the decryption key to use),
    C (the ciphertext), and AAD.</t>
      </section>
      <section anchor="how-to-encrypt-and-decrypt-for-ae-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-5.4">
        <name slugifiedName="name-how-to-encrypt-and-decrypt-for-ae-algorithms">How to Encrypt and Decrypt for AE Algorithms</name>
        <t indent="0" pn="section-5.4-1">How to encrypt a message:</t>
        <t indent="0" pn="section-5.4-2">1.  Verify that the 'protected' field is empty.</t>
        <t indent="0" pn="section-5.4-3">2.  Verify that there was no external additional authenticated data
    supplied for this operation.</t>
        <t indent="0" pn="section-5.4-4">3.  Determine the encryption key.  This step is dependent on the
    class of recipient algorithm being used.  For:</t>
        <t indent="0" pn="section-5.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
    No Recipients:  The key to be used is determined by the algorithm
       and key at the current layer.  Examples are key transport keys
       (Section 12.3), key wrap keys (Section 12.2.1), or pre-shared
       secrets.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-6"><artwork name="" type="" align="left" alt=""><![CDATA[
    Direct Encryption and Direct Key Agreement:  The key is
       determined by the key and algorithm in the recipient
       structure.  The encryption algorithm and size of the key to be
       used are inputs into the KDF used for the recipient.  (For
       direct, the KDF can be thought of as the identity operation.)
       Examples of these algorithms are found in Sections 12.1.2 and
       12.4.1.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-7"><artwork name="" type="" align="left" alt=""><![CDATA[
    Other:  The key is randomly generated.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-8">4.  Call the encryption algorithm with K (the encryption key to use)
    and P (the plaintext).  Place the returned ciphertext into the
    'ciphertext' field of the structure.</t>
        <t indent="0" pn="section-5.4-9">5.  For recipients of the message, recursively perform the encryption
    algorithm for that recipient, using K (the encryption key) as the
    plaintext.</t>
        <t indent="0" pn="section-5.4-10">How to decrypt a message:</t>
        <t indent="0" pn="section-5.4-11">1.  Verify that the 'protected' field is empty.</t>
        <t indent="0" pn="section-5.4-12">2.  Verify that there was no external additional authenticated data
    supplied for this operation.</t>
        <t indent="0" pn="section-5.4-13">3.  Determine the decryption key.  This step is dependent on the
    class of recipient algorithm being used.  For:</t>
        <t indent="0" pn="section-5.4-14"><artwork name="" type="" align="left" alt=""><![CDATA[
    No Recipients:  The key to be used is determined by the algorithm
       and key at the current layer.  Examples are key transport keys
       (Section 12.3), key wrap keys (Section 12.2.1), or pre-shared
       secrets.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-15"><artwork name="" type="" align="left" alt=""><![CDATA[
    Direct Encryption and Direct Key Agreement:  The key is
       determined by the key and algorithm in the recipient
       structure.  The encryption algorithm and size of the key to be
       used are inputs into the KDF used for the recipient.  (For
       direct, the KDF can be thought of as the identity operation.)
       Examples of these algorithms are found in Sections 12.1.2 and
       12.4.1.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-16"><artwork name="" type="" align="left" alt=""><![CDATA[
    Other:  The key is determined by decoding and decrypting one of
       the recipient structures.
]]></artwork>
</t>
        <t indent="0" pn="section-5.4-17">4.  Call the decryption algorithm with K (the decryption key to use)
    and C (the ciphertext).</t>
      </section>
    </section>
    <section anchor="mac-objects" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-mac-objects">MAC Objects</name>
      <t indent="0" pn="section-6-1">COSE supports two different MAC structures.  COSE_MAC0 is used when a
recipient structure is not needed because the key to be used is
implicitly known.  COSE_MAC is used for all other cases.  These
include a requirement for multiple recipients, the key being unknown,
and a recipient algorithm of other than direct.</t>
      <t indent="0" pn="section-6-2">In this section, we describe the structure and methods to be used
when doing MAC authentication in COSE.  This document allows for the
use of all of the same classes of recipient algorithms as are allowed
for encryption.</t>
      <t indent="0" pn="section-6-3">When using MAC operations, there are two modes in which they can be
used.  The first is just a check that the content has not been
changed since the MAC was computed.  Any class of recipient algorithm
can be used for this purpose.  The second mode is to both check that
the content has not been changed since the MAC was computed and to
use the recipient algorithm to verify who sent it.  The classes of
recipient algorithms that support this are those that use a pre-
shared secret or do static-static (SS) key agreement (without the key
wrap step).  In both of these cases, the entity that created and sent
the message MAC can be validated.  (This knowledge of the sender
assumes that there are only two parties involved and that you did not
send the message to yourself.)  The origination property can be
obtained with both of the MAC message structures.</t>
      <section anchor="maced-message-with-recipients" numbered="true" removeInRFC="false" toc="include" pn="section-6.1">
        <name slugifiedName="name-maced-message-with-recipients">MACed Message with Recipients</name>
        <t indent="0" pn="section-6.1-1">The multiple recipient MACed message uses two structures: the
COSE_Mac structure defined in this section for carrying the body and
the COSE_recipient structure (Section 5.1) to hold the key used for
the MAC computation.  Examples of MACed messages can be found in
Appendix C.5.</t>
        <t indent="0" pn="section-6.1-2">The MAC structure can be encoded as either tagged or untagged
depending on the context it will be used in.  A tagged COSE_Mac
structure is identified by the CBOR tag 97.  The CDDL fragment that
represents this is:</t>
        <t indent="0" pn="section-6.1-3">COSE_Mac_Tagged = #6.97(COSE_Mac)</t>
        <t indent="0" pn="section-6.1-4">The COSE_Mac structure is a CBOR array.  The fields of the array in
order are:</t>
        <t indent="0" pn="section-6.1-5">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-6.1-6">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-6.1-7">payload:  This field contains the serialized content to be MACed.  If
   the payload is not present in the message, the application is
   required to supply the payload separately.  The payload is wrapped
   in a bstr to ensure that it is transported without changes.  If
   the payload is transported separately (i.e., detached content),
   then a nil CBOR value is placed in this location, and it is the
   responsibility of the application to ensure that it will be
   transported without changes.</t>
        <t indent="0" pn="section-6.1-8">tag:  This field contains the MAC value.</t>
        <t indent="0" pn="section-6.1-9">recipients:  This is as described in Section 5.1.</t>
        <t indent="0" pn="section-6.1-10">The CDDL fragment that represents the above text for COSE_Mac
follows.</t>
        <t indent="0" pn="section-6.1-11">COSE_Mac = [
   Headers,
   payload : bstr / nil,
   tag : bstr,
   recipients :[+COSE_recipient]
]</t>
      </section>
      <section anchor="maced-messages-with-implicit-key" numbered="true" removeInRFC="false" toc="include" pn="section-6.2">
        <name slugifiedName="name-maced-messages-with-implicit-key">MACed Messages with Implicit Key</name>
        <t indent="0" pn="section-6.2-1">In this section, we describe the structure and methods to be used
when doing MAC authentication for those cases where the recipient is
implicitly known.</t>
        <t indent="0" pn="section-6.2-2">The MACed message uses the COSE_Mac0 structure defined in this
section for carrying the body.  Examples of MACed messages with an
implicit key can be found in Appendix C.6.</t>
        <t indent="0" pn="section-6.2-3">The MAC structure can be encoded as either tagged or untagged
depending on the context it will be used in.  A tagged COSE_Mac0
structure is identified by the CBOR tag 17.  The CDDL fragment that
represents this is:</t>
        <t indent="0" pn="section-6.2-4">COSE_Mac0_Tagged = #6.17(COSE_Mac0)</t>
        <t indent="0" pn="section-6.2-5">The COSE_Mac0 structure is a CBOR array.  The fields of the array in
order are:</t>
        <t indent="0" pn="section-6.2-6">protected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-6.2-7">unprotected:  This is as described in Section 3.</t>
        <t indent="0" pn="section-6.2-8">payload:  This is as described in Section 6.1.</t>
        <t indent="0" pn="section-6.2-9">tag:  This field contains the MAC value.</t>
        <t indent="0" pn="section-6.2-10">The CDDL fragment that corresponds to the above text is:</t>
        <t indent="0" pn="section-6.2-11">COSE_Mac0 = [
   Headers,
   payload : bstr / nil,
   tag : bstr,
]</t>
      </section>
      <section anchor="how-to-compute-and-verify-a-mac" numbered="true" removeInRFC="false" toc="include" pn="section-6.3">
        <name slugifiedName="name-how-to-compute-and-verify-a-mac">How to Compute and Verify a MAC</name>
        <t indent="0" pn="section-6.3-1">In order to get a consistent encoding of the data to be
authenticated, the MAC_structure is used to have a canonical form.
The MAC_structure is a CBOR array.  The fields of the MAC_structure
in order are:</t>
        <t indent="0" pn="section-6.3-2">1.  A text string that identifies the structure that is being
    encoded.  This string is &quot;MAC&quot; for the COSE_Mac structure.  This
    string is &quot;MAC0&quot; for the COSE_Mac0 structure.</t>
        <t indent="0" pn="section-6.3-3">2.  The protected attributes from the COSE_MAC structure.  If there
    are no protected attributes, a zero-length bstr is used.</t>
        <t indent="0" pn="section-6.3-4">3.  The protected attributes from the application encoded as a bstr
    type.  If this field is not supplied, it defaults to a zero-
    length binary string.  (See Section 4.3 for application guidance
    on constructing this field.)</t>
        <t indent="0" pn="section-6.3-5">4.  The payload to be MACed encoded in a bstr type.  The payload is
    placed here independent of how it is transported.</t>
        <t indent="0" pn="section-6.3-6">The CDDL fragment that corresponds to the above text is:</t>
        <t indent="0" pn="section-6.3-7">MAC_structure = [
     context : &quot;MAC&quot; / &quot;MAC0&quot;,
     protected : empty_or_serialized_map,
     external_aad : bstr,
     payload : bstr
]</t>
        <t indent="0" pn="section-6.3-8">The steps to compute a MAC are:</t>
        <t indent="0" pn="section-6.3-9">1.  Create a MAC_structure and populate it with the appropriate
    fields.</t>
        <t indent="0" pn="section-6.3-10">2.  Create the value ToBeMaced by encoding the MAC_structure to a
    byte stream, using the encoding described in Section 14.</t>
        <t indent="0" pn="section-6.3-11">3.  Call the MAC creation algorithm passing in K (the key to use),
    alg (the algorithm to MAC with), and ToBeMaced (the value to
    compute the MAC on).</t>
        <t indent="0" pn="section-6.3-12">4.  Place the resulting MAC in the 'tag' field of the COSE_Mac or
    COSE_Mac0 structure.</t>
        <t indent="0" pn="section-6.3-13">5.  Encrypt and encode the MAC key for each recipient of the message.</t>
        <t indent="0" pn="section-6.3-14">The steps to verify a MAC are:</t>
        <t indent="0" pn="section-6.3-15">1.  Create a MAC_structure object and populate it with the
    appropriate fields.</t>
        <t indent="0" pn="section-6.3-16">2.  Create the value ToBeMaced by encoding the MAC_structure to a
    byte stream, using the encoding described in Section 14.</t>
        <t indent="0" pn="section-6.3-17">3.  Obtain the cryptographic key from one of the recipients of the
    message.</t>
        <t indent="0" pn="section-6.3-18">4.  Call the MAC creation algorithm passing in K (the key to use),
    alg (the algorithm to MAC with), and ToBeMaced (the value to
    compute the MAC on).</t>
        <t indent="0" pn="section-6.3-19">5.  Compare the MAC value to the 'tag' field of the COSE_Mac or
    COSE_Mac0 structure.</t>
      </section>
    </section>
    <section anchor="key-objects" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-key-objects">Key Objects</name>
      <t indent="0" pn="section-7-1">A COSE Key structure is built on a CBOR map object.  The set of
common parameters that can appear in a COSE Key can be found in the
IANA &quot;COSE Key Common Parameters&quot; registry (Section 16.5).
Additional parameters defined for specific key types can be found in
the IANA &quot;COSE Key Type Parameters&quot; registry (Section 16.6).</t>
      <t indent="0" pn="section-7-2">A COSE Key Set uses a CBOR array object as its underlying type.  The
values of the array elements are COSE Keys.  A COSE Key Set <bcp14>MUST</bcp14> have
at least one element in the array.  Examples of COSE Key Sets can be
found in Appendix C.7.</t>
      <t indent="0" pn="section-7-3">Each element in a COSE Key Set <bcp14>MUST</bcp14> be processed independently.  If
one element in a COSE Key Set is either malformed or uses a key that
is not understood by an application, that key is ignored and the
other keys are processed normally.</t>
      <t indent="0" pn="section-7-4">The element &quot;kty&quot; is a required element in a COSE_Key map.</t>
      <t indent="0" pn="section-7-5">The CDDL grammar describing COSE_Key and COSE_KeySet is:</t>
      <t indent="0" pn="section-7-6">COSE_Key = {
    1 =&gt; tstr / int,          ; kty
    ? 2 =&gt; bstr,              ; kid
    ? 3 =&gt; tstr / int,        ; alg
    ? 4 =&gt; [+ (tstr / int) ], ; key_ops
    ? 5 =&gt; bstr,              ; Base IV
    * label =&gt; values
}</t>
      <t indent="0" pn="section-7-7">COSE_KeySet = [+COSE_Key]</t>
      <section anchor="cose-key-common-parameters" numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-cose-key-common-parameters">COSE Key Common Parameters</name>
        <t indent="0" pn="section-7.1-1">This document defines a set of common parameters for a COSE Key
object.  Table 3 provides a summary of the parameters defined in this
section.  There are also parameters that are defined for specific key
types.  Key-type-specific parameters can be found in Section 13.</t>
        <t indent="0" pn="section-7.1-2"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Label </td>
<td align="left">CBOR Type </td>
<td align="left">Value Registry</td>
<td align="left">Description       </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> kty  </td>
<td align="left">1  </td>
<td align="left">tstr / int  </td>
<td align="left">COSE Key Common Parameters</td>
<td align="left">Identification of  the key type      </td>
</tr>
<tr>
<td align="left"> kid   </td>
<td align="left">2   </td>
<td align="left">bstr   </td>
<td align="left">   </td>
<td align="left">Key                identification     value -- match to  kid in message    </td>
</tr>
<tr>
<td align="left"> alg  </td>
<td align="left">3  </td>
<td align="left">tstr / int  </td>
<td align="left">COSE Algorithms </td>
<td align="left">Key usage          restriction to     this algorithm    </td>
</tr>
<tr>
<td align="left"> key_ops  </td>
<td align="left">4  </td>
<td align="left">[+ (tstr/int)]  </td>
<td align="left">  </td>
<td align="left">Restrict set of    permissible        operations        </td>
</tr>
<tr>
<td align="left"> Base IV  </td>
<td align="left">5  </td>
<td align="left">bstr  </td>
<td align="left">  </td>
<td align="left">Base IV to be      xor-ed with        Partial IVs       </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-7.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
                       Table 3: Key Map Labels
]]></artwork>
</t>
        <t indent="0" pn="section-7.1-4">kty:  This parameter is used to identify the family of keys for this
   structure and, thus, the set of key-type-specific parameters to be
   found.  The set of values defined in this document can be found in
   Table 21.  This parameter <bcp14>MUST</bcp14> be present in a key object.
   Implementations <bcp14>MUST</bcp14> verify that the key type is appropriate for
   the algorithm being processed.  The key type <bcp14>MUST</bcp14> be included as
   part of the trust decision process.</t>
        <t indent="0" pn="section-7.1-5">alg:  This parameter is used to restrict the algorithm that is used
   with the key.  If this parameter is present in the key structure,
   the application <bcp14>MUST</bcp14> verify that this algorithm matches the
   algorithm for which the key is being used.  If the algorithms do
   not match, then this key object <bcp14>MUST NOT</bcp14> be used to perform the
   cryptographic operation.  Note that the same key can be in a
   different key structure with a different or no algorithm
   specified; however, this is considered to be a poor security
   practice.</t>
        <t indent="0" pn="section-7.1-6">kid:  This parameter is used to give an identifier for a key.  The
   identifier is not structured and can be anything from a user-
   provided string to a value computed on the public portion of the
   key.  This field is intended for matching against a 'kid'
   parameter in a message in order to filter down the set of keys
   that need to be checked.</t>
        <t indent="0" pn="section-7.1-7">key_ops:  This parameter is defined to restrict the set of operations
   that a key is to be used for.  The value of the field is an array
   of values from Table 4.  Algorithms define the values of key ops
   that are permitted to appear and are required for specific
   operations.  The set of values matches that in <xref target="RFC7517" format="default" sectionFormat="of" derivedContent="RFC7517"/> and
   <xref target="W3C.WebCrypto" format="default" sectionFormat="of" derivedContent="W3C.WebCrypto"/>.</t>
        <t indent="0" pn="section-7.1-8">Base IV:  This parameter is defined to carry the base portion of an
   IV.  It is designed to be used with the Partial IV header
   parameter defined in Section 3.1.  This field provides the ability
   to associate a Partial IV with a key that is then modified on a
   per message basis with the Partial IV.</t>
        <t indent="0" pn="section-7.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   Extreme care needs to be taken when using a Base IV in an
   application.  Many encryption algorithms lose security if the same
   IV is used twice.
]]></artwork>
</t>
        <t indent="0" pn="section-7.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   If different keys are derived for each sender, using the same Base
   IV with Partial IVs starting at zero is likely to ensure that the
   IV would not be used twice for a single key.  If different keys
   are derived for each sender, starting at the same Base IV is
   likely to satisfy this condition.  If the same key is used for
   multiple senders, then the application needs to provide for a
   method of dividing the IV space up between the senders.  This
   could be done by providing a different base point to start from or
   a different Partial IV to start with and restricting the number of
   messages to be sent before rekeying.
]]></artwork>
</t>
        <t indent="0" pn="section-7.1-11"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description                                     </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> sign </td>
<td align="left">1 </td>
<td align="left">The key is used to create signatures.  Requires  private key fields.                             </td>
</tr>
<tr>
<td align="left"> verify</td>
<td align="left">2</td>
<td align="left">The key is used for verification of signatures. </td>
</tr>
<tr>
<td align="left"> encrypt</td>
<td align="left">3</td>
<td align="left">The key is used for key transport encryption.   </td>
</tr>
<tr>
<td align="left"> decrypt </td>
<td align="left">4 </td>
<td align="left">The key is used for key transport decryption.    Requires private key fields.                    </td>
</tr>
<tr>
<td align="left"> wrap</td>
<td align="left">5</td>
<td align="left">The key is used for key wrap encryption.        </td>
</tr>
<tr>
<td align="left"> key</td>
</tr>
<tr>
<td align="left"> unwrap</td>
<td align="left">6</td>
<td align="left">The key is used for key wrap decryption.        </td>
</tr>
<tr>
<td align="left"> key</td>
<td align="left"></td>
<td align="left">Requires private key fields.                    </td>
</tr>
<tr>
<td align="left"> derive</td>
<td align="left">7</td>
<td align="left">The key is used for deriving keys.  Requires    </td>
</tr>
<tr>
<td align="left"> key</td>
<td align="left"></td>
<td align="left">private key fields.                             </td>
</tr>
<tr>
<td align="left"> derive</td>
<td align="left">8</td>
<td align="left">The key is used for deriving bits not to be     </td>
</tr>
<tr>
<td align="left"> bits</td>
<td align="left"></td>
<td align="left">used as a key.  Requires private key fields.    </td>
</tr>
<tr>
<td align="left"> MAC</td>
<td align="left">9</td>
<td align="left">The key is used for creating MACs.              </td>
</tr>
<tr>
<td align="left"> create</td>
</tr>
<tr>
<td align="left"> MAC</td>
<td align="left">10</td>
<td align="left">The key is used for validating MACs.            </td>
</tr>
<tr>
<td align="left"> verify</td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-7.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
                    Table 4: Key Operation Values
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="signature-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-signature-algorithms">Signature Algorithms</name>
      <t indent="0" pn="section-8-1">There are two signature algorithm schemes.  The first is signature
with appendix.  In this scheme, the message content is processed and
a signature is produced; the signature is called the appendix.  This
is the scheme used by algorithms such as ECDSA and the RSA
Probabilistic Signature Scheme (RSASSA-PSS).  (In fact, the SSA in
RSASSA-PSS stands for Signature Scheme with Appendix.)</t>
      <t indent="0" pn="section-8-2">The signature functions for this scheme are:</t>
      <t indent="0" pn="section-8-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   signature = Sign(message content, key)
]]></artwork>
</t>
      <t indent="0" pn="section-8-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   valid = Verification(message content, key, signature)
]]></artwork>
</t>
      <t indent="0" pn="section-8-5">The second scheme is signature with message recovery (an example of
such an algorithm is <xref target="PVSig" format="default" sectionFormat="of" derivedContent="PVSig"/>).  In this scheme, the message content
is processed, but part of it is included in the signature.  Moving
bytes of the message content into the signature allows for smaller
signatures; the signature size is still potentially large, but the
message content has shrunk.  This has implications for systems
implementing these algorithms and for applications that use them.
The first is that the message content is not fully available until
after a signature has been validated.  Until that point, the part of
the message contained inside of the signature is unrecoverable.  The
second is that the security analysis of the strength of the signature
is very much based on the structure of the message content.  Messages
that are highly predictable require additional randomness to be
supplied as part of the signature process.  In the worst case, it
becomes the same as doing a signature with appendix.  Finally, in the
event that multiple signatures are applied to a message, all of the
signature algorithms are going to be required to consume the same
number of bytes of message content.  This means that the mixing of
the different schemes in a single message is not supported, and if a
recovery signature scheme is used, then the same amount of content
needs to be consumed by all of the signatures.</t>
      <t indent="0" pn="section-8-6">The signature functions for this scheme are:</t>
      <t indent="0" pn="section-8-7"> signature, message sent = Sign(message content, key)</t>
      <t indent="0" pn="section-8-8"> valid, message content = Verification(message sent, key, signature)</t>
      <t indent="0" pn="section-8-9">Signature algorithms are used with the COSE_Signature and COSE_Sign1
structures.  At this time, only signatures with appendixes are
defined for use with COSE; however, considerable interest has been
expressed in using a signature with message recovery algorithm due to
the effective size reduction that is possible.  Implementations will
need to keep this in mind for later possible integration.</t>
      <section anchor="ecdsa" numbered="true" removeInRFC="false" toc="include" pn="section-8.1">
        <name slugifiedName="name-ecdsa">ECDSA</name>
        <t indent="0" pn="section-8.1-1">ECDSA <xref target="DSS" format="default" sectionFormat="of" derivedContent="DSS"/> defines a signature algorithm using ECC.  Implementations
<bcp14>SHOULD</bcp14> use a deterministic version of ECDSA such as the one defined
in <xref target="RFC6979" format="default" sectionFormat="of" derivedContent="RFC6979"/>.  The use of a deterministic signature algorithm allows
for systems to avoid relying on random number generators in order to
avoid generating the same value of 'k' (the per-message random
value).  Biased generation of the value 'k' can be attacked, and
collisions of this value leads to leaked keys.  It additionally
allows for doing deterministic tests for the signature algorithm.
The use of deterministic ECDSA does not lessen the need to have good
random number generation when creating the private key.</t>
        <t indent="0" pn="section-8.1-2">The ECDSA signature algorithm is parameterized with a hash function
(h).  In the event that the length of the hash function output is
greater than the group of the key, the leftmost bytes of the hash
output are used.</t>
        <t indent="0" pn="section-8.1-3">The algorithms defined in this document can be found in Table 5.</t>
        <t indent="0" pn="section-8.1-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Hash</td>
<td align="left">Description      </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> ES256</td>
<td align="left">-7</td>
<td align="left">SHA-256</td>
<td align="left">ECDSA w/ SHA-256 </td>
</tr>
<tr>
<td align="left"> ES384</td>
<td align="left">-35</td>
<td align="left">SHA-384</td>
<td align="left">ECDSA w/ SHA-384 </td>
</tr>
<tr>
<td align="left"> ES512</td>
<td align="left">-36</td>
<td align="left">SHA-512</td>
<td align="left">ECDSA w/ SHA-512 </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-8.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                   Table 5: ECDSA Algorithm Values
]]></artwork>
</t>
        <t indent="0" pn="section-8.1-6">This document defines ECDSA to work only with the curves P-256,
P-384, and P-521.  This document requires that the curves be encoded
using the 'EC2' (2 coordinate elliptic curve) key type.
Implementations need to check that the key type and curve are correct
when creating and verifying a signature.  Other documents can define
it to work with other curves and points in the future.</t>
        <t indent="0" pn="section-8.1-7">In order to promote interoperability, it is suggested that SHA-256 be
used only with curve P-256, SHA-384 be used only with curve P-384,
and SHA-512 be used with curve P-521.  This is aligned with the
recommendation in <xref target="RFC5480" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc5480#section-4" derivedContent="RFC5480"/>.</t>
        <t indent="0" pn="section-8.1-8">The signature algorithm results in a pair of integers (R, S).  These
integers will be the same length as the length of the key used for
the signature process.  The signature is encoded by converting the
integers into byte strings of the same length as the key size.  The
length is rounded up to the nearest byte and is left padded with zero
bits to get to the correct length.  The two integers are then
concatenated together to form a byte string that is the resulting
signature.</t>
        <t indent="0" pn="section-8.1-9">Using the function defined in <xref target="RFC8017" format="default" sectionFormat="of" derivedContent="RFC8017"/>, the signature is:
Signature = I2OSP(R, n) | I2OSP(S, n)
where n = ceiling(key_length / 8)</t>
        <t indent="0" pn="section-8.1-10">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1-11">
          <li pn="section-8.1-11.1"> The 'kty' field MUST be present, and it MUST be 'EC2'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1-12">
          <li pn="section-8.1-12.1"> If the 'alg' field is present, it MUST match the ECDSA signature
   algorithm being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1-13">
          <li pn="section-8.1-13.1"> If the 'key_ops' field is present, it MUST include 'sign' when
   creating an ECDSA signature.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1-14">
          <li pn="section-8.1-14.1"> If the 'key_ops' field is present, it MUST include 'verify' when
   verifying an ECDSA signature.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-8.1.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-8.1.1-1">The security strength of the signature is no greater than the minimum
of the security strength associated with the bit length of the key
and the security strength of the hash function.</t>
          <t indent="0" pn="section-8.1.1-2">Note: Use of this technique is a good idea even when good random
number generation exists.  Doing so both reduces the possibility of
having the same value of 'k' in two signature operations and allows
for reproducible signature values, which helps testing.</t>
          <t indent="0" pn="section-8.1.1-3">There are two substitution attacks that can theoretically be mounted
against the ECDSA signature algorithm.</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1.1-4">
            <li pn="section-8.1.1-4.1"> Changing the curve used to validate the signature: If one changes
   the curve used to validate the signature, then potentially one
   could have two messages with the same signature, each computed
   under a different curve.  The only requirement on the new curve is
   that its order be the same as the old one and it be acceptable to
   the client.  An example would be to change from using the curve
   secp256r1 (aka P-256) to using secp256k1.  (Both are 256-bit
   curves.)  We currently do not have any way to deal with this
   version of the attack except to restrict the overall set of curves
   that can be used.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.1.1-5">
            <li pn="section-8.1.1-5.1"> Change the hash function used to validate the signature: If one
   either has two different hash functions of the same length or can
   truncate a hash function down, then one could potentially find
   collisions between the hash functions rather than within a single
   hash function (for example, truncating SHA-512 to 256 bits might
   collide with a SHA-256 bit hash value).  As the hash algorithm is
   part of the signature algorithm identifier, this attack is
   mitigated by including a signature algorithm identifier in the
   protected header.</li>
          </ul>
        </section>
      </section>
      <section anchor="edwards-curve-digital-signature-algorithms-(eddsas)" numbered="true" removeInRFC="false" toc="include" pn="section-8.2">
        <name slugifiedName="name-edwards-curve-digital-signature-algorithms-(eddsas)">Edwards-Curve Digital Signature Algorithms (EdDSAs)</name>
        <t indent="0" pn="section-8.2-1"><xref target="RFC8032" format="default" sectionFormat="of" derivedContent="RFC8032"/> describes the elliptic curve signature scheme Edwards-curve
Digital Signature Algorithm (EdDSA).  In that document, the signature
algorithm is instantiated using parameters for edwards25519 and
edwards448 curves.  The document additionally describes two variants
of the EdDSA algorithm: Pure EdDSA, where no hash function is applied
to the content before signing, and HashEdDSA, where a hash function
is applied to the content before signing and the result of that hash
function is signed.  For EdDSA, the content to be signed (either the
message or the pre-hash value) is processed twice inside of the
signature algorithm.  For use with COSE, only the pure EdDSA version
is used.  This is because it is not expected that extremely large
contents are going to be needed and, based on the arrangement of the
message structure, the entire message is going to need to be held in
memory in order to create or verify a signature.  This means that
there does not appear to be a need to be able to do block updates of
the hash, followed by eliminating the message from memory.
Applications can provide the same features by defining the content of
the message as a hash value and transporting the COSE object (with
the hash value) and the content as separate items.</t>
        <t indent="0" pn="section-8.2-2">The algorithms defined in this document can be found in Table 6.  A
single signature algorithm is defined, which can be used for multiple
curves.</t>
        <t indent="0" pn="section-8.2-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> EdDSA</td>
<td align="left">-8</td>
<td align="left">EdDSA       </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-8.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                   Table 6: EdDSA Algorithm Values
]]></artwork>
</t>
        <t indent="0" pn="section-8.2-5"><xref target="RFC8032" format="default" sectionFormat="of" derivedContent="RFC8032"/> describes the method of encoding the signature value.</t>
        <t indent="0" pn="section-8.2-6">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.2-7">
          <li pn="section-8.2-7.1"> The 'kty' field MUST be present, and it MUST be 'OKP' (Octet Key
   Pair).</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.2-8">
          <li pn="section-8.2-8.1"> The 'crv' field MUST be present, and it MUST be a curve defined
   for this signature algorithm.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.2-9">
          <li pn="section-8.2-9.1"> If the 'alg' field is present, it MUST match 'EdDSA'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.2-10">
          <li pn="section-8.2-10.1"> If the 'key_ops' field is present, it MUST include 'sign' when
   creating an EdDSA signature.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-8.2-11">
          <li pn="section-8.2-11.1"> If the 'key_ops' field is present, it MUST include 'verify' when
   verifying an EdDSA signature.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-8.2.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-8.2.1-1">How public values are computed is not the same when looking at EdDSA
and Elliptic Curve Diffie-Hellman (ECDH); for this reason, they
should not be used with the other algorithm.</t>
          <t indent="0" pn="section-8.2.1-2">If batch signature verification is performed, a well-seeded
cryptographic random number generator is <bcp14>REQUIRED</bcp14>.  Signing and non-
batch signature verification are deterministic operations and do not
need random numbers of any kind.</t>
        </section>
      </section>
    </section>
    <section anchor="message-authentication-code-(mac)-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-message-authentication-code-(mac)-algorithms">Message Authentication Code (MAC) Algorithms</name>
      <t indent="0" pn="section-9-1">Message Authentication Codes (MACs) provide data authentication and
integrity protection.  They provide either no or very limited data
origination.  A MAC, for example, can be used to prove the identity
of the sender to a third party.</t>
      <t indent="0" pn="section-9-2">MACs use the same scheme as signature with appendix algorithms.  The
message content is processed and an authentication code is produced.
The authentication code is frequently called a tag.</t>
      <t indent="0" pn="section-9-3">The MAC functions are:</t>
      <t indent="0" pn="section-9-4">tag = MAC_Create(message content, key)</t>
      <t indent="0" pn="section-9-5">valid = MAC_Verify(message content, key, tag)</t>
      <t indent="0" pn="section-9-6">MAC algorithms can be based on either a block cipher algorithm (i.e.,
AES-MAC) or a hash algorithm (i.e., a Hash-based Message
Authentication Code (HMAC)).  This document defines a MAC algorithm
using each of these constructions.</t>
      <t indent="0" pn="section-9-7">MAC algorithms are used in the COSE_Mac and COSE_Mac0 structures.</t>
      <section anchor="hash-based-message-authentication-codes-(hmacs)" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-hash-based-message-authentication-codes-(hmacs)">Hash-Based Message Authentication Codes (HMACs)</name>
        <t indent="0" pn="section-9.1-1">HMAC <xref target="RFC2104" format="default" sectionFormat="of" derivedContent="RFC2104"/> <xref target="RFC4231" format="default" sectionFormat="of" derivedContent="RFC4231"/> was designed to deal with length extension
attacks.  The algorithm was also designed to allow for new hash
algorithms to be directly plugged in without changes to the hash
function.  The HMAC design process has been shown as solid since,
while the security of hash algorithms such as MD5 has decreased over
time; the security of HMAC combined with MD5 has not yet been shown
to be compromised <xref target="RFC6151" format="default" sectionFormat="of" derivedContent="RFC6151"/>.</t>
        <t indent="0" pn="section-9.1-2">The HMAC algorithm is parameterized by an inner and outer padding, a
hash function (h), and an authentication tag value length.  For this
specification, the inner and outer padding are fixed to the values
set in <xref target="RFC2104" format="default" sectionFormat="of" derivedContent="RFC2104"/>.  The length of the authentication tag corresponds
to the difficulty of producing a forgery.  For use in constrained
environments, we define a set of HMAC algorithms that are truncated.</t>
        <t indent="0" pn="section-9.1-3">There are currently no known issues with truncation; however, the
security strength of the message tag is correspondingly reduced in
strength.  When truncating, the leftmost tag length bits are kept and
transmitted.</t>
        <t indent="0" pn="section-9.1-4">The algorithms defined in this document can be found in Table 7.</t>
        <t indent="0" pn="section-9.1-5"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Value </td>
<td align="left">Hash </td>
<td align="left">Tag Length</td>
<td align="left">Description              </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> HMAC</td>
<td align="left">4</td>
<td align="left">SHA-256</td>
<td align="left">64</td>
<td align="left">HMAC w/ SHA-256          </td>
</tr>
<tr>
<td align="left"> 256/64</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">truncated to 64 bits     </td>
</tr>
<tr>
<td align="left"> HMAC</td>
<td align="left">5</td>
<td align="left">SHA-256</td>
<td align="left">256</td>
<td align="left">HMAC w/ SHA-256          </td>
</tr>
<tr>
<td align="left"> 256/256</td>
</tr>
<tr>
<td align="left"> HMAC</td>
<td align="left">6</td>
<td align="left">SHA-384</td>
<td align="left">384</td>
<td align="left">HMAC w/ SHA-384          </td>
</tr>
<tr>
<td align="left"> 384/384</td>
</tr>
<tr>
<td align="left"> HMAC</td>
<td align="left">7</td>
<td align="left">SHA-512</td>
<td align="left">512</td>
<td align="left">HMAC w/ SHA-512          </td>
</tr>
<tr>
<td align="left"> 512/512</td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-9.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                   Table 7: HMAC Algorithm Values
]]></artwork>
</t>
        <t indent="0" pn="section-9.1-7">Some recipient algorithms carry the key while others derive a key
from secret data.  For those algorithms that carry the key (such as
AES Key Wrap), the size of the HMAC key <bcp14>SHOULD</bcp14> be the same size as
the underlying hash function.  For those algorithms that derive the
key (such as ECDH), the derived key <bcp14>MUST</bcp14> be the same size as the
underlying hash function.</t>
        <t indent="0" pn="section-9.1-8">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1-9">
          <li pn="section-9.1-9.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1-10">
          <li pn="section-9.1-10.1"> If the 'alg' field is present, it MUST match the HMAC algorithm
   being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1-11">
          <li pn="section-9.1-11.1"> If the 'key_ops' field is present, it MUST include 'MAC create'
   when creating an HMAC authentication tag.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1-12">
          <li pn="section-9.1-12.1"> If the 'key_ops' field is present, it MUST include 'MAC verify'
   when verifying an HMAC authentication tag.</li>
        </ul>
        <t indent="0" pn="section-9.1-13">Implementations creating and validating MAC values <bcp14>MUST</bcp14> validate that
the key type, key length, and algorithm are correct and appropriate
for the entities involved.</t>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-9.1.1-1">HMAC has proved to be resistant to attack even when used with
weakened hash algorithms.  The current best known attack is to brute
force the key.  This means that key size is going to be directly
related to the security of an HMAC operation.</t>
        </section>
      </section>
      <section anchor="aes-message-authentication-code-(aes-cbc-mac)" numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-aes-message-authentication-code-(aes-cbc-mac)">AES Message Authentication Code (AES-CBC-MAC)</name>
        <t indent="0" pn="section-9.2-1">AES-CBC-MAC is defined in <xref target="MAC" format="default" sectionFormat="of" derivedContent="MAC"/>.  (Note that this is not the same
algorithm as AES Cipher-Based Message Authentication Code (AES-CMAC)
<xref target="RFC4493" format="default" sectionFormat="of" derivedContent="RFC4493"/>.)</t>
        <t indent="0" pn="section-9.2-2">AES-CBC-MAC is parameterized by the key length, the authentication
tag length, and the IV used.  For all of these algorithms, the IV is
fixed to all zeros.  We provide an array of algorithms for various
key lengths and tag lengths.  The algorithms defined in this document
are found in Table 8.</t>
        <t indent="0" pn="section-9.2-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Value </td>
<td align="left">Key Length</td>
<td align="left">Tag Length</td>
<td align="left">Description           </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> AES-MAC</td>
<td align="left">14</td>
<td align="left">128</td>
<td align="left">64</td>
<td align="left">AES-MAC 128-bit key,  </td>
</tr>
<tr>
<td align="left"> 128/64</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">64-bit tag            </td>
</tr>
<tr>
<td align="left"> AES-MAC</td>
<td align="left">15</td>
<td align="left">256</td>
<td align="left">64</td>
<td align="left">AES-MAC 256-bit key,  </td>
</tr>
<tr>
<td align="left"> 256/64</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">64-bit tag            </td>
</tr>
<tr>
<td align="left"> AES-MAC</td>
<td align="left">25</td>
<td align="left">128</td>
<td align="left">128</td>
<td align="left">AES-MAC 128-bit key,  </td>
</tr>
<tr>
<td align="left"> 128/128</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">128-bit tag           </td>
</tr>
<tr>
<td align="left"> AES-MAC</td>
<td align="left">26</td>
<td align="left">256</td>
<td align="left">128</td>
<td align="left">AES-MAC 256-bit key,  </td>
</tr>
<tr>
<td align="left"> 256/128</td>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
<td align="left">128-bit tag           </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-9.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                  Table 8: AES-MAC Algorithm Values
]]></artwork>
</t>
        <t indent="0" pn="section-9.2-5">Keys may be obtained either from a key structure or from a recipient
structure.  Implementations creating and validating MAC values <bcp14>MUST</bcp14>
validate that the key type, key length, and algorithm are correct and
appropriate for the entities involved.</t>
        <t indent="0" pn="section-9.2-6">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2-7">
          <li pn="section-9.2-7.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2-8">
          <li pn="section-9.2-8.1"> If the 'alg' field is present, it MUST match the AES-MAC algorithm
   being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2-9">
          <li pn="section-9.2-9.1"> If the 'key_ops' field is present, it MUST include 'MAC create'
   when creating an AES-MAC authentication tag.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2-10">
          <li pn="section-9.2-10.1"> If the 'key_ops' field is present, it MUST include 'MAC verify'
   when verifying an AES-MAC authentication tag.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9.2.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-9.2.1-1">A number of attacks exist against Cipher Block Chaining Message
Authentication Code (CBC-MAC) that need to be considered.</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-2">
            <li pn="section-9.2.1-2.1"> A single key must only be used for messages of a fixed and known
   length.  If this is not the case, an attacker will be able to
   generate a message with a valid tag given two message and tag
   pairs.  This can be addressed by using different keys for messages
   of different lengths.  The current structure mitigates this
   problem, as a specific encoding structure that includes lengths is
   built and signed.  (CMAC also addresses this issue.)</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-3">
            <li pn="section-9.2.1-3.1"> Cipher Block Chaining (CBC) mode, if the same key is used for both
   encryption and authentication operations, an attacker can produce
   messages with a valid authentication code.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-4">
            <li pn="section-9.2.1-4.1"> If the IV can be modified, then messages can be forged.  This is
   addressed by fixing the IV to all zeros.</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="content-encryption-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-10">
      <name slugifiedName="name-content-encryption-algorithms">Content Encryption Algorithms</name>
      <t indent="0" pn="section-10-1">Content encryption algorithms provide data confidentiality for
potentially large blocks of data using a symmetric key.  They provide
integrity on the data that was encrypted; however, they provide
either no or very limited data origination.  (One cannot, for
example, be used to prove the identity of the sender to a third
party.)  The ability to provide data origination is linked to how the
CEK is obtained.</t>
      <t indent="0" pn="section-10-2">COSE restricts the set of legal content encryption algorithms to
those that support authentication both of the content and additional
data.  The encryption process will generate some type of
authentication value, but that value may be either explicit or
implicit in terms of the algorithm definition.  For simplicity's
sake, the authentication code will normally be defined as being
appended to the ciphertext stream.  The encryption functions are:</t>
      <t indent="0" pn="section-10-3">ciphertext = Encrypt(message content, key, additional data)</t>
      <t indent="0" pn="section-10-4">valid, message content = Decrypt(cipher text, key, additional data)
Most AEAD algorithms are logically defined as returning the message
content only if the decryption is valid.  Many but not all</t>
      <t indent="0" pn="section-10-5">implementations will follow this convention.  The message content
<bcp14>MUST NOT</bcp14> be used if the decryption does not validate.</t>
      <t indent="0" pn="section-10-6">These algorithms are used in COSE_Encrypt and COSE_Encrypt0.</t>
      <section anchor="aes-gcm" numbered="true" removeInRFC="false" toc="include" pn="section-10.1">
        <name slugifiedName="name-aes-gcm">AES GCM</name>
        <t indent="0" pn="section-10.1-1">The Galois/Counter Mode (GCM) mode is a generic authenticated
encryption block cipher mode defined in <xref target="AES-GCM" format="default" sectionFormat="of" derivedContent="AES-GCM"/>.  The GCM mode is
combined with the AES block encryption algorithm to define an AEAD
cipher.</t>
        <t indent="0" pn="section-10.1-2">The GCM mode is parameterized by the size of the authentication tag
and the size of the nonce.  This document fixes the size of the nonce
at 96 bits.  The size of the authentication tag is limited to a small
set of values.  For this document however, the size of the
authentication tag is fixed at 128 bits.</t>
        <t indent="0" pn="section-10.1-3">The set of algorithms defined in this document are in Table 9.</t>
        <t indent="0" pn="section-10.1-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description                              </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> A128GCM</td>
<td align="left">1</td>
<td align="left">AES-GCM mode w/ 128-bit key, 128-bit tag </td>
</tr>
<tr>
<td align="left"> A192GCM</td>
<td align="left">2</td>
<td align="left">AES-GCM mode w/ 192-bit key, 128-bit tag </td>
</tr>
<tr>
<td align="left"> A256GCM</td>
<td align="left">3</td>
<td align="left">AES-GCM mode w/ 256-bit key, 128-bit tag </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-10.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                Table 9: Algorithm Value for AES-GCM
]]></artwork>
</t>
        <t indent="0" pn="section-10.1-6">Keys may be obtained either from a key structure or from a recipient
structure.  Implementations encrypting and decrypting <bcp14>MUST</bcp14> validate
that the key type, key length, and algorithm are correct and
appropriate for the entities involved.</t>
        <t indent="0" pn="section-10.1-7">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1-8">
          <li pn="section-10.1-8.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1-9">
          <li pn="section-10.1-9.1"> If the 'alg' field is present, it MUST match the AES-GCM algorithm
   being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1-10">
          <li pn="section-10.1-10.1"> If the 'key_ops' field is present, it MUST include 'encrypt' or
   'wrap key' when encrypting.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1-11">
          <li pn="section-10.1-11.1"> If the 'key_ops' field is present, it MUST include 'decrypt' or
   'unwrap key' when decrypting.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.1.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-10.1.1-1">When using AES-GCM, the following restrictions <bcp14>MUST</bcp14> be enforced:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1.1-2">
            <li pn="section-10.1.1-2.1"> The key and nonce pair MUST be unique for every message encrypted.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.1.1-3">
            <li pn="section-10.1.1-3.1"> The total amount of data encrypted for a single key MUST NOT
   exceed 2^39 - 256 bits.  An explicit check is required only in
   environments where it is expected that it might be exceeded.</li>
          </ul>
          <t indent="0" pn="section-10.1.1-4">Consideration was given to supporting smaller tag values; the
constrained community would desire tag sizes in the 64-bit range.
Doing so drastically changes both the maximum messages size
(generally not an issue) and the number of times that a key can be
used.  Given that Counter with CBC-MAC (CCM) is the usual mode for
constrained environments, restricted modes are not supported.</t>
        </section>
      </section>
      <section anchor="aes-ccm" numbered="true" removeInRFC="false" toc="include" pn="section-10.2">
        <name slugifiedName="name-aes-ccm">AES CCM</name>
        <t indent="0" pn="section-10.2-1">CCM is a generic authentication encryption block cipher mode defined
in <xref target="RFC3610" format="default" sectionFormat="of" derivedContent="RFC3610"/>.  The CCM mode is combined with the AES block encryption
algorithm to define a commonly used content encryption algorithm used
in constrained devices.</t>
        <t indent="0" pn="section-10.2-2">The CCM mode has two parameter choices.  The first choice is M, the
size of the authentication field.  The choice of the value for M
involves a trade-off between message growth (from the tag) and the
probability that an attacker can undetectably modify a message.  The
second choice is L, the size of the length field.  This value
requires a trade-off between the maximum message size and the size of
the Nonce.</t>
        <t indent="0" pn="section-10.2-3">It is unfortunate that the specification for CCM specified L and M as
a count of bytes rather than a count of bits.  This leads to possible
misunderstandings where AES-CCM-8 is frequently used to refer to a
version of CCM mode where the size of the authentication is 64 bits
and not 8 bits.  These values have traditionally been specified as
bit counts rather than byte counts.  This document will follow the
convention of using bit counts so that it is easier to compare the
different algorithms presented in this document.</t>
        <t indent="0" pn="section-10.2-4">We define a matrix of algorithms in this document over the values of
L and M.  Constrained devices are usually operating in situations
where they use short messages and want to avoid doing recipient-
specific cryptographic operations.  This favors smaller values of
both L and M.  Less-constrained devices will want to be able to use
larger messages and are more willing to generate new keys for every
operation.  This favors larger values of L and M.</t>
        <t indent="0" pn="section-10.2-5">The following values are used for L:</t>
        <t indent="0" pn="section-10.2-6">16 bits (2):  This limits messages to 2^16 bytes (64 KiB) in length.
   This is sufficiently long for messages in the constrained world.
   The nonce length is 13 bytes allowing for 2^(13*8) possible values
   of the nonce without repeating.</t>
        <t indent="0" pn="section-10.2-7">64 bits (8):  This limits messages to 2^64 bytes in length.  The
   nonce length is 7 bytes allowing for 2^56 possible values of the
   nonce without repeating.</t>
        <t indent="0" pn="section-10.2-8">The following values are used for M:</t>
        <t indent="0" pn="section-10.2-9">64 bits (8):  This produces a 64-bit authentication tag.  This
   implies that there is a 1 in 2^64 chance that a modified message
   will authenticate.</t>
        <t indent="0" pn="section-10.2-10">128 bits (16):  This produces a 128-bit authentication tag.  This
   implies that there is a 1 in 2^128 chance that a modified message
   will authenticate.</t>
        <t indent="0" pn="section-10.2-11"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">L</td>
<td align="left">M</td>
<td align="left">k</td>
<td align="left">Description         </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> AES-CCM-16-64-128  </td>
<td align="left">10  </td>
<td align="left">16  </td>
<td align="left">64  </td>
<td align="left">128  </td>
<td align="left">AES-CCM mode         128-bit key, 64-bit  tag, 13-byte nonce  </td>
</tr>
<tr>
<td align="left"> AES-CCM-16-64-256  </td>
<td align="left">11  </td>
<td align="left">16  </td>
<td align="left">64  </td>
<td align="left">256  </td>
<td align="left">AES-CCM mode         256-bit key, 64-bit  tag, 13-byte nonce  </td>
</tr>
<tr>
<td align="left"> AES-CCM-64-64-128  </td>
<td align="left">12  </td>
<td align="left">64  </td>
<td align="left">64  </td>
<td align="left">128  </td>
<td align="left">AES-CCM mode         128-bit key, 64-bit  tag, 7-byte nonce   </td>
</tr>
<tr>
<td align="left"> AES-CCM-64-64-256  </td>
<td align="left">13  </td>
<td align="left">64  </td>
<td align="left">64  </td>
<td align="left">256  </td>
<td align="left">AES-CCM mode         256-bit key, 64-bit  tag, 7-byte nonce   </td>
</tr>
<tr>
<td align="left"> AES-CCM-16-128-128   </td>
<td align="left">30   </td>
<td align="left">16   </td>
<td align="left">128   </td>
<td align="left">128   </td>
<td align="left">AES-CCM mode         128-bit key,         128-bit tag,         13-byte nonce       </td>
</tr>
<tr>
<td align="left"> AES-CCM-16-128-256   </td>
<td align="left">31   </td>
<td align="left">16   </td>
<td align="left">128   </td>
<td align="left">256   </td>
<td align="left">AES-CCM mode         256-bit key,         128-bit tag,         13-byte nonce       </td>
</tr>
<tr>
<td align="left"> AES-CCM-64-128-128   </td>
<td align="left">32   </td>
<td align="left">64   </td>
<td align="left">128   </td>
<td align="left">128   </td>
<td align="left">AES-CCM mode         128-bit key,         128-bit tag, 7-byte  nonce               </td>
</tr>
<tr>
<td align="left"> AES-CCM-64-128-256   </td>
<td align="left">33   </td>
<td align="left">64   </td>
<td align="left">128   </td>
<td align="left">256   </td>
<td align="left">AES-CCM mode         256-bit key,         128-bit tag, 7-byte  nonce               </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-10.2-12"><artwork name="" type="" align="left" alt=""><![CDATA[
               Table 10: Algorithm Values for AES-CCM
]]></artwork>
</t>
        <t indent="0" pn="section-10.2-13">Keys may be obtained either from a key structure or from a recipient
structure.  Implementations encrypting and decrypting <bcp14>MUST</bcp14> validate
that the key type, key length, and algorithm are correct and
appropriate for the entities involved.</t>
        <t indent="0" pn="section-10.2-14">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2-15">
          <li pn="section-10.2-15.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2-16">
          <li pn="section-10.2-16.1"> If the 'alg' field is present, it MUST match the AES-CCM algorithm
   being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2-17">
          <li pn="section-10.2-17.1"> If the 'key_ops' field is present, it MUST include 'encrypt' or
   'wrap key' when encrypting.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2-18">
          <li pn="section-10.2-18.1"> If the 'key_ops' field is present, it MUST include 'decrypt' or
   'unwrap key' when decrypting.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.2.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-10.2.1-1">When using AES-CCM, the following restrictions <bcp14>MUST</bcp14> be enforced:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2.1-2">
            <li pn="section-10.2.1-2.1"> The key and nonce pair MUST be unique for every message encrypted.
   Note that the value of L influences the number of unique nonces.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.2.1-3">
            <li pn="section-10.2.1-3.1"> The total number of times the AES block cipher is used MUST NOT
   exceed 2^61 operations.  This limitation is the sum of times the
   block cipher is used in computing the MAC value and in performing
   stream encryption operations.  An explicit check is required only
   in environments where it is expected that it might be exceeded.</li>
          </ul>
          <t indent="0" pn="section-10.2.1-4"><xref target="RFC3610" format="default" sectionFormat="of" derivedContent="RFC3610"/> additionally calls out one other consideration of note.  It
is possible to do a pre-computation attack against the algorithm in
cases where portions of the plaintext are highly predictable.  This
reduces the security of the key size by half.  Ways to deal with this
attack include adding a random portion to the nonce value and/or
increasing the key size used.  Using a portion of the nonce for a
random value will decrease the number of messages that a single key
can be used for.  Increasing the key size may require more resources
in the constrained device.  See Sections 5 and 10 of <xref target="RFC3610" format="default" sectionFormat="of" derivedContent="RFC3610"/> for
more information.</t>
        </section>
      </section>
      <section anchor="chacha20-and-poly1305" numbered="true" removeInRFC="false" toc="include" pn="section-10.3">
        <name slugifiedName="name-chacha20-and-poly1305">ChaCha20 and Poly1305</name>
        <t indent="0" pn="section-10.3-1">ChaCha20 and Poly1305 combined together is an AEAD mode that is
defined in <xref target="RFC7539" format="default" sectionFormat="of" derivedContent="RFC7539"/>.  This is an algorithm defined to be a cipher
that is not AES and thus would not suffer from any future weaknesses
found in AES.  These cryptographic functions are designed to be fast
in software-only implementations.</t>
        <t indent="0" pn="section-10.3-2">The ChaCha20/Poly1305 AEAD construction defined in <xref target="RFC7539" format="default" sectionFormat="of" derivedContent="RFC7539"/> has no
parameterization.  It takes a 256-bit key and a 96-bit nonce, as well
as the plaintext and additional data as inputs and produces the
ciphertext as an option.  We define one algorithm identifier for this
algorithm in Table 11.</t>
        <t indent="0" pn="section-10.3-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description                           </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> ChaCha20/Poly1305 </td>
<td align="left">24 </td>
<td align="left">ChaCha20/Poly1305 w/ 256-bit key,      128-bit tag                           </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-10.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                Table 11: Algorithm Value for AES-GCM
]]></artwork>
</t>
        <t indent="0" pn="section-10.3-5">Keys may be obtained either from a key structure or from a recipient
structure.  Implementations encrypting and decrypting <bcp14>MUST</bcp14> validate
that the key type, key length, and algorithm are correct and
appropriate for the entities involved.</t>
        <t indent="0" pn="section-10.3-6">When using a COSE key for this algorithm, the following checks are
made:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.3-7">
          <li pn="section-10.3-7.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.3-8">
          <li pn="section-10.3-8.1"> If the 'alg' field is present, it MUST match the ChaCha20/Poly1305
   algorithm being used.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.3-9">
          <li pn="section-10.3-9.1"> If the 'key_ops' field is present, it MUST include 'encrypt' or
   'wrap key' when encrypting.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.3-10">
          <li pn="section-10.3-10.1"> If the 'key_ops' field is present, it MUST include 'decrypt' or
   'unwrap key' when decrypting.</li>
        </ul>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.3.1">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-10.3.1-1">The key and nonce values <bcp14>MUST</bcp14> be a unique pair for every invocation
of the algorithm.  Nonce counters are considered to be an acceptable
way of ensuring that they are unique.</t>
        </section>
      </section>
    </section>
    <section anchor="key-derivation-functions-(kdfs)" numbered="true" removeInRFC="false" toc="include" pn="section-11">
      <name slugifiedName="name-key-derivation-functions-(kdfs)">Key Derivation Functions (KDFs)</name>
      <t indent="0" pn="section-11-1">KDFs are used to take some secret value and generate a different one.
The secret value comes in three flavors:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11-2">
        <li pn="section-11-2.1"> Secrets that are uniformly random: This is the type of secret that
   is created by a good random number generator.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11-3">
        <li pn="section-11-3.1"> Secrets that are not uniformly random: This is type of secret that
   is created by operations like key agreement.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11-4">
        <li pn="section-11-4.1"> Secrets that are not random: This is the type of secret that
   people generate for things like passwords.</li>
      </ul>
      <t indent="0" pn="section-11-5">General KDFs work well with the first type of secret, can do
reasonably well with the second type of secret, and generally do
poorly with the last type of secret.  None of the KDFs in this
section are designed to deal with the type of secrets that are used
for passwords.  Functions like PBES2 <xref target="RFC8018" format="default" sectionFormat="of" derivedContent="RFC8018"/> need to be used for
that type of secret.</t>
      <t indent="0" pn="section-11-6">The same KDF can be set up to deal with the first two types of
secrets in a different way.  The KDF defined in Section 11.1 is such
a function.  This is reflected in the set of algorithms defined for
the HMAC-based Extract-and-Expand Key Derivation Function (HKDF).</t>
      <t indent="0" pn="section-11-7">When using KDFs, one component that is included is context
information.  Context information is used to allow for different
keying information to be derived from the same secret.  The use of
context-based keying material is considered to be a good security
practice.</t>
      <t indent="0" pn="section-11-8">This document defines a single context structure and a single KDF.
These elements are used for all of the recipient algorithms defined
in this document that require a KDF process.  These algorithms are
defined in Sections 12.1.2, 12.4.1, and 12.5.1.</t>
      <section anchor="hmac-based-extract-and-expand-key-derivation-function-(hkdf)" numbered="true" removeInRFC="false" toc="include" pn="section-11.1">
        <name slugifiedName="name-hmac-based-extract-and-expand-key-derivation-function-(hkdf)">HMAC-Based Extract-and-Expand Key Derivation Function (HKDF)</name>
        <t indent="0" pn="section-11.1-1">The HKDF key derivation algorithm is defined in <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/>.</t>
        <t indent="0" pn="section-11.1-2">The HKDF algorithm takes these inputs:</t>
        <t indent="0" pn="section-11.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   secret -- a shared value that is secret.  Secrets may be either
   previously shared or derived from operations like a Diffie-Hellman
   (DH) key agreement.
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   salt -- an optional value that is used to change the generation
   process.  The salt value can be either public or private.  If the
   salt is public and carried in the message, then the 'salt'
   algorithm header parameter defined in Table 13 is used.  While
   [RFC5869] suggests that the length of the salt be the same as the
   length of the underlying hash value, any amount of salt will
   improve the security as different key values will be generated.
   This parameter is protected by being included in the key
   computation and does not need to be separately authenticated.  The
   salt value does not need to be unique for every message sent.
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   length -- the number of bytes of output that need to be generated.
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   context information -- Information that describes the context in
   which the resulting value will be used.  Making this information
   specific to the context in which the material is going to be used
   ensures that the resulting material will always be tied to that
   usage.  The context structure defined in Section 11.2 is used by
   the KDFs in this document.
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   PRF -- The underlying pseudorandom function to be used in the HKDF
   algorithm.  The PRF is encoded into the HKDF algorithm selection.
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-8">HKDF is defined to use HMAC as the underlying PRF.  However, it is
possible to use other functions in the same construct to provide a
different KDF that is more appropriate in the constrained world.
Specifically, one can use AES-CBC-MAC as the PRF for the expand step,
but not for the extract step.  When using a good random shared secret
of the correct length, the extract step can be skipped.  For the AES
algorithm versions, the extract step is always skipped.</t>
        <t indent="0" pn="section-11.1-9">The extract step cannot be skipped if the secret is not uniformly
random, for example, if it is the result of an ECDH key agreement
step.  This implies that the AES HKDF version cannot be used with
ECDH.  If the extract step is skipped, the 'salt' value is not used
as part of the HKDF functionality.</t>
        <t indent="0" pn="section-11.1-10">The algorithms defined in this document are found in Table 12.</t>
        <t indent="0" pn="section-11.1-11"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">PRF</td>
<td align="left">Description                     </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> HKDF SHA-256 </td>
<td align="left">HMAC with SHA-256</td>
<td align="left">HKDF using HMAC SHA-256 as the   PRF                             </td>
</tr>
<tr>
<td align="left"> HKDF SHA-512 </td>
<td align="left">HMAC with SHA-512</td>
<td align="left">HKDF using HMAC SHA-512 as the   PRF                             </td>
</tr>
<tr>
<td align="left"> HKDF AES-</td>
<td align="left">AES-CBC-MAC-128</td>
<td align="left">HKDF using AES-MAC as the PRF   </td>
</tr>
<tr>
<td align="left"> MAC-128</td>
<td align="left"></td>
<td align="left">w/ 128-bit key                  </td>
</tr>
<tr>
<td align="left"> HKDF AES-</td>
<td align="left">AES-CBC-MAC-256</td>
<td align="left">HKDF using AES-MAC as the PRF   </td>
</tr>
<tr>
<td align="left"> MAC-256</td>
<td align="left"></td>
<td align="left">w/ 256-bit key                  </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-11.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
                      Table 12: HKDF Algorithms
]]></artwork>
</t>
        <t indent="0" pn="section-11.1-13"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Label</td>
<td align="left">Type</td>
<td align="left">Algorithm</td>
<td align="left">Description </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> salt          </td>
<td align="left">-20          </td>
<td align="left">bstr          </td>
<td align="left">direct+HKDF-SHA-256, direct +HKDF-SHA-512, direct+HKDF- AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH-ES+A128KW, ECDH-ES+A192KW, ECDH- ES+A256KW, ECDH-SS+A128KW, ECDH-SS+A192KW, ECDH- SS+A256KW</td>
<td align="left">Random salt </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-11.1-14"><artwork name="" type="" align="left" alt=""><![CDATA[
                 Table 13: HKDF Algorithm Parameters
]]></artwork>
</t>
      </section>
      <section anchor="context-information-structure" numbered="true" removeInRFC="false" toc="include" pn="section-11.2">
        <name slugifiedName="name-context-information-structure">Context Information Structure</name>
        <t indent="0" pn="section-11.2-1">The context information structure is used to ensure that the derived
keying material is &quot;bound&quot; to the context of the transaction.  The
context information structure used here is based on that defined in
<xref target="SP800-56A" format="default" sectionFormat="of" derivedContent="SP800-56A"/>.  By using CBOR for the encoding of the context
information structure, we automatically get the same type and length
separation of fields that is obtained by the use of ASN.1.  This
means that there is no need to encode the lengths for the base
elements, as it is done by the encoding used in JOSE (<xref target="RFC7518" section="4.6.2" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7518#section-4.6.2" derivedContent="RFC7518"/>).</t>
        <t indent="0" pn="section-11.2-2">The context information structure refers to PartyU and PartyV as the
two parties that are doing the key derivation.  Unless the
application protocol defines differently, we assign PartyU to the
entity that is creating the message and PartyV to the entity that is
receiving the message.  By doing this association, different keys
will be derived for each direction as the context information is
different in each direction.</t>
        <t indent="0" pn="section-11.2-3">The context structure is built from information that is known to both
entities.  This information can be obtained from a variety of
sources:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11.2-4">
          <li pn="section-11.2-4.1"> Fields can be defined by the application.  This is commonly used
   to assign fixed names to parties, but it can be used for other
   items such as nonces.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11.2-5">
          <li pn="section-11.2-5.1"> Fields can be defined by usage of the output.  Examples of this
   are the algorithm and key size that are being generated.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-11.2-6">
          <li pn="section-11.2-6.1"> Fields can be defined by parameters from the message.  We define a
   set of parameters in Table 14 that can be used to carry the values
   associated with the context structure.  Examples of this are
   identities and nonce values.  These parameters are designed to be
   placed in the unprotected bucket of the recipient structure; they
   do not need to be in the protected bucket since they already are
   included in the cryptographic computation by virtue of being
   included in the context structure.</li>
        </ul>
        <t indent="0" pn="section-11.2-7"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Label</td>
<td align="left">Type</td>
<td align="left">Algorithm</td>
<td align="left">Description </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> PartyU</td>
<td align="left">-21</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party U     </td>
</tr>
<tr>
<td align="left"> identity           </td>
<td align="left">           </td>
<td align="left">           </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">identity     information </td>
</tr>
<tr>
<td align="left"> PartyU</td>
<td align="left">-22</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party U     </td>
</tr>
<tr>
<td align="left"> nonce           </td>
<td align="left">           </td>
<td align="left">/ int          </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">provided     nonce       </td>
</tr>
<tr>
<td align="left"> PartyU</td>
<td align="left">-23</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party U     </td>
</tr>
<tr>
<td align="left"> other           </td>
<td align="left">           </td>
<td align="left">           </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">other        provided     information </td>
</tr>
<tr>
<td align="left"> PartyV</td>
<td align="left">-24</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party V     </td>
</tr>
<tr>
<td align="left"> identity           </td>
<td align="left">           </td>
<td align="left">           </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">identity     information </td>
</tr>
<tr>
<td align="left"> PartyV</td>
<td align="left">-25</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party V     </td>
</tr>
<tr>
<td align="left"> nonce           </td>
<td align="left">           </td>
<td align="left">/ int          </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">provided     nonce       </td>
</tr>
<tr>
<td align="left"> PartyV</td>
<td align="left">-26</td>
<td align="left">bstr</td>
<td align="left">direct+HKDF-SHA-256,</td>
<td align="left">Party V     </td>
</tr>
<tr>
<td align="left"> other           </td>
<td align="left">           </td>
<td align="left">           </td>
<td align="left">direct+HKDF-SHA-512, direct+HKDF-AES-128, direct+HKDF-AES-256, ECDH-ES+HKDF-256, ECDH- ES+HKDF-512, ECDH- SS+HKDF-256, ECDH- SS+HKDF-512, ECDH- ES+A128KW, ECDH- ES+A192KW, ECDH- ES+A256KW, ECDH- SS+A128KW, ECDH- SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">other        provided     information </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-11.2-8"><artwork name="" type="" align="left" alt=""><![CDATA[
               Table 14: Context Algorithm Parameters
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-9">We define a CBOR object to hold the context information.  This object
is referred to as COSE_KDF_Context.  The object is based on a CBOR
array type.  The fields in the array are:</t>
        <t indent="0" pn="section-11.2-10">AlgorithmID:  This field indicates the algorithm for which the key
   material will be used.  This normally is either a key wrap
   algorithm identifier or a content encryption algorithm identifier.
   The values are from the &quot;COSE Algorithms&quot; registry.  This field is
   required to be present.  The field exists in the context
   information so that if the same environment is used for different
   algorithms, then completely different keys will be generated for
   each of those algorithms.  This practice means if algorithm A is
   broken and thus is easier to find, the key derived for algorithm B
   will not be the same as the key derived for algorithm A.</t>
        <t indent="0" pn="section-11.2-11">PartyUInfo:  This field holds information about party U.  The
   PartyUInfo is encoded as a CBOR array.  The elements of PartyUInfo
   are encoded in the order presented.  The elements of the
   PartyUInfo array are:</t>
        <t indent="0" pn="section-11.2-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   identity:  This contains the identity information for party U.
      The identities can be assigned in one of two manners.  First, a
      protocol can assign identities based on roles.  For example,
      the roles of "client" and "server" may be assigned to different
      entities in the protocol.  Each entity would then use the
      correct label for the data they send or receive.  The second
      way for a protocol to assign identities is to use a name based
      on a naming system (i.e., DNS, X.509 names).
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-13"><artwork name="" type="" align="left" alt=""><![CDATA[
      We define an algorithm parameter 'PartyU identity' that can be
      used to carry identity information in the message.  However,
      identity information is often known as part of the protocol and
      can thus be inferred rather than made explicit.  If identity
      information is carried in the message, applications SHOULD have
      a way of validating the supplied identity information.  The
      identity information does not need to be specified and is set
      to nil in that case.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-14"><artwork name="" type="" align="left" alt=""><![CDATA[
   nonce:  This contains a nonce value.  The nonce can either be
      implicit from the protocol or be carried as a value in the
      unprotected headers.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-15"><artwork name="" type="" align="left" alt=""><![CDATA[
      We define an algorithm parameter 'PartyU nonce' that can be
      used to carry this value in the message; however, the nonce
      value could be determined by the application and the value
      determined from elsewhere.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-16"><artwork name="" type="" align="left" alt=""><![CDATA[
      This option does not need to be specified and is set to nil in
      that case.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-17"><artwork name="" type="" align="left" alt=""><![CDATA[
   other:  This contains other information that is defined by the
      protocol.  This option does not need to be specified and is set
      to nil in that case.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-18">PartyVInfo:  This field holds information about party V.  The content
   of the structure is the same as for the PartyUInfo but for party
   V.</t>
        <t indent="0" pn="section-11.2-19">SuppPubInfo:  This field contains public information that is mutually
   known to both parties.</t>
        <t indent="0" pn="section-11.2-20"><artwork name="" type="" align="left" alt=""><![CDATA[
   keyDataLength:  This is set to the number of bits of the desired
      output value.  This practice means if algorithm A can use two
      different key lengths, the key derived for longer key size will
      not contain the key for shorter key size as a prefix.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-21"><artwork name="" type="" align="left" alt=""><![CDATA[
   protected:  This field contains the protected parameter field.  If
      there are no elements in the protected field, then use a zero-
      length bstr.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-22"><artwork name="" type="" align="left" alt=""><![CDATA[
   other:  This field is for free form data defined by the
      application.  An example is that an application could define
      two different strings to be placed here to generate different
      keys for a data stream versus a control stream.  This field is
      optional and will only be present if the application defines a
      structure for this information.  Applications that define this
      SHOULD use CBOR to encode the data so that types and lengths
      are correctly included.
]]></artwork>
</t>
        <t indent="0" pn="section-11.2-23">SuppPrivInfo:  This field contains private information that is
   mutually known private information.  An example of this
   information would be a preexisting shared secret.  (This could,
   for example, be used in combination with an ECDH key agreement to
   provide a secondary proof of identity.)  The field is optional and
   will only be present if the application defines a structure for
   this information.  Applications that define this <bcp14>SHOULD</bcp14> use CBOR
   to encode the data so that types and lengths are correctly
   included.</t>
        <t indent="0" pn="section-11.2-24">The following CDDL fragment corresponds to the text above.</t>
        <t indent="0" pn="section-11.2-25">PartyInfo = (
    identity : bstr / nil,
    nonce : bstr / int / nil,
    other : bstr / nil
)</t>
        <t indent="0" pn="section-11.2-26">COSE_KDF_Context = [
    AlgorithmID : int / tstr,
    PartyUInfo : [ PartyInfo ],
    PartyVInfo : [ PartyInfo ],
    SuppPubInfo : [
        keyDataLength : uint,
        protected : empty_or_serialized_map,
        ? other : bstr
    ],
    ? SuppPrivInfo : bstr
]</t>
      </section>
    </section>
    <section anchor="content-key-distribution-methods" numbered="true" removeInRFC="false" toc="include" pn="section-12">
      <name slugifiedName="name-content-key-distribution-methods">Content Key Distribution Methods</name>
      <t indent="0" pn="section-12-1">Content key distribution methods (recipient algorithms) can be
defined into a number of different classes.  COSE has the ability to
support many classes of recipient algorithms.  In this section, a
number of classes are listed, and then a set of algorithms are
specified for each of the classes.  The names of the recipient
algorithm classes used here are the same as those defined in
<xref target="RFC7516" format="default" sectionFormat="of" derivedContent="RFC7516"/>.  Other specifications use different terms for the
recipient algorithm classes or do not support some of the recipient
algorithm classes.</t>
      <section anchor="direct-encryption" numbered="true" removeInRFC="false" toc="include" pn="section-12.1">
        <name slugifiedName="name-direct-encryption">Direct Encryption</name>
        <t indent="0" pn="section-12.1-1">The direct encryption class algorithms share a secret between the
sender and the recipient that is used either directly or after
manipulation as the CEK.  When direct encryption mode is used, it
<bcp14>MUST</bcp14> be the only mode used on the message.</t>
        <t indent="0" pn="section-12.1-2">The COSE_Recipient structure for the recipient is organized as
follows:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1-3">
          <li pn="section-12.1-3.1"> The 'protected' field MUST be a zero-length item unless it is used
   in the computation of the content key.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1-4">
          <li pn="section-12.1-4.1"> The 'alg' parameter MUST be present.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1-5">
          <li pn="section-12.1-5.1"> A parameter identifying the shared secret SHOULD be present.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1-6">
          <li pn="section-12.1-6.1"> The 'ciphertext' field MUST be a zero-length item.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1-7">
          <li pn="section-12.1-7.1"> The 'recipients' field MUST be absent.</li>
        </ul>
        <section anchor="direct-key" numbered="true" removeInRFC="false" toc="include" pn="section-12.1.1">
          <name slugifiedName="name-direct-key">Direct Key</name>
          <t indent="0" pn="section-12.1.1-1">This recipient algorithm is the simplest; the identified key is
directly used as the key for the next layer down in the message.
There are no algorithm parameters defined for this algorithm.  The
algorithm identifier value is assigned in Table 15.</t>
          <t indent="0" pn="section-12.1.1-2">When this algorithm is used, the protected field <bcp14>MUST</bcp14> be zero length.
The key type <bcp14>MUST</bcp14> be 'Symmetric'.</t>
          <t indent="0" pn="section-12.1.1-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description       </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> direct</td>
<td align="left">-6</td>
<td align="left">Direct use of CEK </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.1.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                        Table 15: Direct Key
]]></artwork>
</t>
          <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-12.1.1.1">
            <name slugifiedName="name-security-considerations">Security Considerations</name>
            <t indent="0" pn="section-12.1.1.1-1">This recipient algorithm has several potential problems that need to
be considered:</t>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.1.1-2">
              <li pn="section-12.1.1.1-2.1"> These keys need to have some method to be regularly updated over
   time.  All of the content encryption algorithms specified in this
   document have limits on how many times a key can be used without
   significant loss of security.</li>
            </ul>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.1.1-3">
              <li pn="section-12.1.1.1-3.1"> These keys need to be dedicated to a single algorithm.  There have
   been a number of attacks developed over time when a single key is
   used for multiple different algorithms.  One example of this is
   the use of a single key for both the CBC encryption mode and the
   CBC-MAC authentication mode.</li>
            </ul>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.1.1-4">
              <li pn="section-12.1.1.1-4.1"> Breaking one message means all messages are broken.  If an
   adversary succeeds in determining the key for a single message,
   then the key for all messages is also determined.</li>
            </ul>
          </section>
        </section>
        <section anchor="direct-key-with-kdf" numbered="true" removeInRFC="false" toc="include" pn="section-12.1.2">
          <name slugifiedName="name-direct-key-with-kdf">Direct Key with KDF</name>
          <t indent="0" pn="section-12.1.2-1">These recipient algorithms take a common shared secret between the
two parties and applies the HKDF function (Section 11.1), using the
context structure defined in Section 11.2 to transform the shared
secret into the CEK.  The 'protected' field can be of non-zero
length.  Either the 'salt' parameter of HKDF or the 'PartyU nonce'
parameter of the context structure <bcp14>MUST</bcp14> be present.  The salt/nonce
parameter can be generated either randomly or deterministically.  The
requirement is that it be a unique value for the shared secret in
question.</t>
          <t indent="0" pn="section-12.1.2-2">If the salt/nonce value is generated randomly, then it is suggested
that the length of the random value be the same length as the hash
function underlying HKDF.  While there is no way to guarantee that it
will be unique, there is a high probability that it will be unique.
If the salt/nonce value is generated deterministically, it can be
guaranteed to be unique, and thus there is no length requirement.</t>
          <t indent="0" pn="section-12.1.2-3">A new IV must be used for each message if the same key is used.  The
IV can be modified in a predictable manner, a random manner, or an
unpredictable manner (i.e., encrypting a counter).</t>
          <t indent="0" pn="section-12.1.2-4">The IV used for a key can also be generated from the same HKDF
functionality as the key is generated.  If HKDF is used for
generating the IV, the algorithm identifier is set to &quot;IV-
GENERATION&quot;.</t>
          <t indent="0" pn="section-12.1.2-5">When these algorithms are used, the key type <bcp14>MUST</bcp14> be 'symmetric'.</t>
          <t indent="0" pn="section-12.1.2-6">The set of algorithms defined in this document can be found in
Table 16.</t>
          <t indent="0" pn="section-12.1.2-7"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">KDF</td>
<td align="left">Description           </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> direct+HKDF-SHA-256 </td>
<td align="left">-10 </td>
<td align="left">HKDF SHA-256</td>
<td align="left">Shared secret w/ HKDF  and SHA-256           </td>
</tr>
<tr>
<td align="left"> direct+HKDF-SHA-512 </td>
<td align="left">-11 </td>
<td align="left">HKDF SHA-512</td>
<td align="left">Shared secret w/ HKDF  and SHA-512           </td>
</tr>
<tr>
<td align="left"> direct+HKDF-AES-128 </td>
<td align="left">-12 </td>
<td align="left">HKDF AES- MAC-128</td>
<td align="left">Shared secret w/ AES-  MAC 128-bit key       </td>
</tr>
<tr>
<td align="left"> direct+HKDF-AES-256 </td>
<td align="left">-13 </td>
<td align="left">HKDF AES- MAC-256</td>
<td align="left">Shared secret w/ AES-  MAC 256-bit key       </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.1.2-8"><artwork name="" type="" align="left" alt=""><![CDATA[
                    Table 16: Direct Key with KDF
]]></artwork>
</t>
          <t indent="0" pn="section-12.1.2-9">When using a COSE key for this algorithm, the following checks are
made:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.2-10">
            <li pn="section-12.1.2-10.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.2-11">
            <li pn="section-12.1.2-11.1"> If the 'alg' field is present, it MUST match the algorithm being
   used.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.1.2-12">
            <li pn="section-12.1.2-12.1"> If the 'key_ops' field is present, it MUST include 'deriveKey' or
   'deriveBits'.</li>
          </ul>
          <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-12.1.2.1">
            <name slugifiedName="name-security-considerations">Security Considerations</name>
            <t indent="0" pn="section-12.1.2.1-1">The shared secret needs to have some method to be regularly updated
over time.  The shared secret forms the basis of trust.  Although not
used directly, it should still be subject to scheduled rotation.</t>
            <t indent="0" pn="section-12.1.2.1-2">While these methods do not provide for perfect forward secrecy, as
the same shared secret is used for all of the keys generated, if the
key for any single message is discovered, only the message (or series
of messages) using that derived key are compromised.  A new key
derivation step will generate a new key that requires the same amount
of work to get the key.</t>
          </section>
        </section>
      </section>
      <section anchor="key-wrap" numbered="true" removeInRFC="false" toc="include" pn="section-12.2">
        <name slugifiedName="name-key-wrap">Key Wrap</name>
        <t indent="0" pn="section-12.2-1">In key wrap mode, the CEK is randomly generated and that key is then
encrypted by a shared secret between the sender and the recipient.
All of the currently defined key wrap algorithms for COSE are AE
algorithms.  Key wrap mode is considered to be superior to direct
encryption if the system has any capability for doing random key
generation.  This is because the shared key is used to wrap random
data rather than data that has some degree of organization and may in
fact be repeating the same content.  The use of key wrap loses the
weak data origination that is provided by the direct encryption
algorithms.</t>
        <t indent="0" pn="section-12.2-2">The COSE_Encrypt structure for the recipient is organized as follows:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2-3">
          <li pn="section-12.2-3.1"> The 'protected' field MUST be absent if the key wrap algorithm is
   an AE algorithm.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2-4">
          <li pn="section-12.2-4.1"> The 'recipients' field is normally absent, but can be used.
   Applications MUST deal with a recipient field being present, not
   being able to decrypt that recipient is an acceptable way of
   dealing with it.  Failing to process the message is not an
   acceptable way of dealing with it.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2-5">
          <li pn="section-12.2-5.1"> The plaintext to be encrypted is the key from next layer down
   (usually the content layer).</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2-6">
          <li pn="section-12.2-6.1"> At a minimum, the 'unprotected' field MUST contain the 'alg'
   parameter and SHOULD contain a parameter identifying the shared
   secret.</li>
        </ul>
        <section anchor="aes-key-wrap" numbered="true" removeInRFC="false" toc="include" pn="section-12.2.1">
          <name slugifiedName="name-aes-key-wrap">AES Key Wrap</name>
          <t indent="0" pn="section-12.2.1-1">The AES Key Wrap algorithm is defined in <xref target="RFC3394" format="default" sectionFormat="of" derivedContent="RFC3394"/>.  This algorithm
uses an AES key to wrap a value that is a multiple of 64 bits.  As
such, it can be used to wrap a key for any of the content encryption
algorithms defined in this document.  The algorithm requires a single
fixed parameter, the initial value.  This is fixed to the value
specified in <xref target="RFC3394" section="2.2.3.1" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc3394#section-2.2.3.1" derivedContent="RFC3394"/>.  There are no public
parameters that vary on a per-invocation basis.  The protected header
field <bcp14>MUST</bcp14> be empty.</t>
          <t indent="0" pn="section-12.2.1-2">Keys may be obtained either from a key structure or from a recipient
structure.  Implementations encrypting and decrypting <bcp14>MUST</bcp14> validate
that the key type, key length, and algorithm are correct and
appropriate for the entities involved.</t>
          <t indent="0" pn="section-12.2.1-3">When using a COSE key for this algorithm, the following checks are
made:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2.1-4">
            <li pn="section-12.2.1-4.1"> The 'kty' field MUST be present, and it MUST be 'Symmetric'.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2.1-5">
            <li pn="section-12.2.1-5.1"> If the 'alg' field is present, it MUST match the AES Key Wrap
   algorithm being used.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2.1-6">
            <li pn="section-12.2.1-6.1"> If the 'key_ops' field is present, it MUST include 'encrypt' or
   'wrap key' when encrypting.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.2.1-7">
            <li pn="section-12.2.1-7.1"> If the 'key_ops' field is present, it MUST include 'decrypt' or
   'unwrap key' when decrypting.</li>
          </ul>
          <t indent="0" pn="section-12.2.1-8"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Key Size</td>
<td align="left">Description                 </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> A128KW</td>
<td align="left">-3</td>
<td align="left">128</td>
<td align="left">AES Key Wrap w/ 128-bit key </td>
</tr>
<tr>
<td align="left"> A192KW</td>
<td align="left">-4</td>
<td align="left">192</td>
<td align="left">AES Key Wrap w/ 192-bit key </td>
</tr>
<tr>
<td align="left"> A256KW</td>
<td align="left">-5</td>
<td align="left">256</td>
<td align="left">AES Key Wrap w/ 256-bit key </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.2.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
               Table 17: AES Key Wrap Algorithm Values
]]></artwork>
</t>
          <section anchor="security-considerations-for-aes-kw" numbered="true" removeInRFC="false" toc="include" pn="section-12.2.1.1">
            <name slugifiedName="name-security-considerations-for-aes-kw">Security Considerations for AES-KW</name>
            <t indent="0" pn="section-12.2.1.1-1">The shared secret needs to have some method to be regularly updated
over time.  The shared secret is the basis of trust.</t>
          </section>
        </section>
      </section>
      <section anchor="key-transport" numbered="true" removeInRFC="false" toc="include" pn="section-12.3">
        <name slugifiedName="name-key-transport">Key Transport</name>
        <t indent="0" pn="section-12.3-1">Key transport mode is also called key encryption mode in some
standards.  Key transport mode differs from key wrap mode in that it
uses an asymmetric encryption algorithm rather than a symmetric
encryption algorithm to protect the key.  This document does not
define any key transport mode algorithms.</t>
        <t indent="0" pn="section-12.3-2">When using a key transport algorithm, the COSE_Encrypt structure for
the recipient is organized as follows:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.3-3">
          <li pn="section-12.3-3.1"> The 'protected' field MUST be absent.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.3-4">
          <li pn="section-12.3-4.1"> The plaintext to be encrypted is the key from the next layer down
   (usually the content layer).</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.3-5">
          <li pn="section-12.3-5.1"> At a minimum, the 'unprotected' field MUST contain the 'alg'
   parameter and SHOULD contain a parameter identifying the
   asymmetric key.</li>
        </ul>
      </section>
      <section anchor="direct-key-agreement" numbered="true" removeInRFC="false" toc="include" pn="section-12.4">
        <name slugifiedName="name-direct-key-agreement">Direct Key Agreement</name>
        <t indent="0" pn="section-12.4-1">The 'direct key agreement' class of recipient algorithms uses a key
agreement method to create a shared secret.  A KDF is then applied to
the shared secret to derive a key to be used in protecting the data.
This key is normally used as a CEK or MAC key, but could be used for
other purposes if more than two layers are in use (see Appendix B).</t>
        <t indent="0" pn="section-12.4-2">The most commonly used key agreement algorithm is Diffie-Hellman, but
other variants exist.  Since COSE is designed for a store and forward
environment rather than an online environment, many of the DH
variants cannot be used as the receiver of the message cannot provide
any dynamic key material.  One side effect of this is that perfect
forward secrecy (see <xref target="RFC4949" format="default" sectionFormat="of" derivedContent="RFC4949"/>) is not achievable.  A static key will
always be used for the receiver of the COSE object.</t>
        <t indent="0" pn="section-12.4-3">Two variants of DH that are supported are:</t>
        <t indent="0" pn="section-12.4-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   Ephemeral-Static (ES) DH: where the sender of the message creates
   a one-time DH key and uses a static key for the recipient.  The
   use of the ephemeral sender key means that no additional random
   input is needed as this is randomly generated for each message.
]]></artwork>
</t>
        <t indent="0" pn="section-12.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   Static-Static DH: where a static key is used for both the sender
   and the recipient.  The use of static keys allows for the
   recipient to get a weak version of data origination for the
   message.  When static-static key agreement is used, then some
   piece of unique data for the KDF is required to ensure that a
   different key is created for each message.
]]></artwork>
</t>
        <t indent="0" pn="section-12.4-6">When direct key agreement mode is used, there <bcp14>MUST</bcp14> be only one
recipient in the message.  This method creates the key directly, and
that makes it difficult to mix with additional recipients.  If
multiple recipients are needed, then the version with key wrap needs
to be used.</t>
        <t indent="0" pn="section-12.4-7">The COSE_Encrypt structure for the recipient is organized as follows:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4-8">
          <li pn="section-12.4-8.1"> At a minimum, headers MUST contain the 'alg' parameter and SHOULD
   contain a parameter identifying the recipient's asymmetric key.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4-9">
          <li pn="section-12.4-9.1"> The headers SHOULD identify the sender's key for the static-static
   versions and MUST contain the sender's ephemeral key for the
   ephemeral-static versions.</li>
        </ul>
        <section anchor="ecdh" numbered="true" removeInRFC="false" toc="include" pn="section-12.4.1">
          <name slugifiedName="name-ecdh">ECDH</name>
          <t indent="0" pn="section-12.4.1-1">The mathematics for ECDH can be found in <xref target="RFC6090" format="default" sectionFormat="of" derivedContent="RFC6090"/>.  In this
document, the algorithm is extended to be used with the two curves
defined in <xref target="RFC7748" format="default" sectionFormat="of" derivedContent="RFC7748"/>.</t>
          <t indent="0" pn="section-12.4.1-2">ECDH is parameterized by the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-3">
            <li pn="section-12.4.1-3.1"> Curve Type/Curve: The curve selected controls not only the size of
   the shared secret, but the mathematics for computing the shared
   secret.  The curve selected also controls how a point in the curve
   is represented and what happens for the identity points on the
   curve.  In this specification, we allow for a number of different
   curves to be used.  A set of curves are defined in Table 22.
   The math used to obtain the computed secret is based on the curve
   selected and not on the ECDH algorithm.  For this reason, a new
   algorithm does not need to be defined for each of the curves.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-4">
            <li pn="section-12.4.1-4.1"> Computed Secret to Shared Secret: Once the computed secret is
   known, the resulting value needs to be converted to a byte string
   to run the KDF.  The x-coordinate is used for all of the curves
   defined in this document.  For curves X25519 and X448, the
   resulting value is used directly as it is a byte string of a known
   length.  For the P-256, P-384, and P-521 curves, the x-coordinate
   is run through the I2OSP function defined in [RFC8017], using the
   same computation for n as is defined in Section 8.1.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-5">
            <li pn="section-12.4.1-5.1"> Ephemeral-Static or Static-Static: The key agreement process may
   be done using either a static or an ephemeral key for the sender's
   side.  When using ephemeral keys, the sender MUST generate a new
   ephemeral key for every key agreement operation.  The ephemeral
   key is placed in the 'ephemeral key' parameter and MUST be present
   for all algorithm identifiers that use ephemeral keys.  When using
   static keys, the sender MUST either generate a new random value or
   create a unique value.  For the KDFs used, this means either the
   'salt' parameter for HKDF (Table 13) or the 'PartyU nonce'
   parameter for the context structure (Table 14) MUST be present
   (both can be present if desired).  The value in the parameter MUST
   be unique for the pair of keys being used.  It is acceptable to
   use a global counter that is incremented for every static-static
   operation and use the resulting value.  When using static keys,
   the static key should be identified to the recipient.  The static
   key can be identified either by providing the key ('static key')
   or by providing a key identifier for the static key ('static key
   id').  Both of these parameters are defined in Table 19.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-6">
            <li pn="section-12.4.1-6.1"> Key Derivation Algorithm: The result of an ECDH key agreement
   process does not provide a uniformly random secret.  As such, it
   needs to be run through a KDF in order to produce a usable key.
   Processing the secret through a KDF also allows for the
   introduction of context material: how the key is going to be used
   and one-time material for static-static key agreement.  All of the
   algorithms defined in this document use one of the HKDF algorithms
   defined in Section 11.1 with the context structure defined in
   Section 11.2.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-7">
            <li pn="section-12.4.1-7.1"> Key Wrap Algorithm: No key wrap algorithm is used.  This is
   represented in Table 18 as 'none'.  The key size for the context
   structure is the content layer encryption algorithm size.</li>
          </ul>
          <t indent="0" pn="section-12.4.1-8">The set of direct ECDH algorithms defined in this document are found
in Table 18.</t>
          <t indent="0" pn="section-12.4.1-9"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Value </td>
<td align="left">KDF </td>
<td align="left">Ephemeral- Static</td>
<td align="left">Key Wrap</td>
<td align="left">Description   </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> ECDH-ES +</td>
<td align="left">-25</td>
<td align="left">HKDF -</td>
<td align="left">yes</td>
<td align="left">none</td>
<td align="left">ECDH ES w/    </td>
</tr>
<tr>
<td align="left"> HKDF-256  </td>
<td align="left">  </td>
<td align="left">SHA-256  </td>
<td align="left">  </td>
<td align="left">  </td>
<td align="left">HKDF -         generate key   directly      </td>
</tr>
<tr>
<td align="left"> ECDH-ES +</td>
<td align="left">-26</td>
<td align="left">HKDF -</td>
<td align="left">yes</td>
<td align="left">none</td>
<td align="left">ECDH ES w/    </td>
</tr>
<tr>
<td align="left"> HKDF-512  </td>
<td align="left">  </td>
<td align="left">SHA-512  </td>
<td align="left">  </td>
<td align="left">  </td>
<td align="left">HKDF -         generate key   directly      </td>
</tr>
<tr>
<td align="left"> ECDH-SS +</td>
<td align="left">-27</td>
<td align="left">HKDF -</td>
<td align="left">no</td>
<td align="left">none</td>
<td align="left">ECDH SS w/    </td>
</tr>
<tr>
<td align="left"> HKDF-256  </td>
<td align="left">  </td>
<td align="left">SHA-256  </td>
<td align="left">  </td>
<td align="left">  </td>
<td align="left">HKDF -         generate key   directly      </td>
</tr>
<tr>
<td align="left"> ECDH-SS +</td>
<td align="left">-28</td>
<td align="left">HKDF -</td>
<td align="left">no</td>
<td align="left">none</td>
<td align="left">ECDH SS w/    </td>
</tr>
<tr>
<td align="left"> HKDF-512  </td>
<td align="left">  </td>
<td align="left">SHA-512  </td>
<td align="left">  </td>
<td align="left">  </td>
<td align="left">HKDF -         generate key   directly      </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.4.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
                   Table 18: ECDH Algorithm Values
]]></artwork>
</t>
          <t indent="0" pn="section-12.4.1-11"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Label</td>
<td align="left">Type</td>
<td align="left">Algorithm</td>
<td align="left">Description  </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> ephemeral</td>
<td align="left">-1</td>
<td align="left">COSE_Key</td>
<td align="left">ECDH-ES+HKDF-256,</td>
<td align="left">Ephemeral    </td>
</tr>
<tr>
<td align="left"> key   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">ECDH-ES+HKDF-512, ECDH-ES+A128KW, ECDH-ES+A192KW, ECDH-ES+A256KW</td>
<td align="left">public key    for the       sender       </td>
</tr>
<tr>
<td align="left"> static</td>
<td align="left">-2</td>
<td align="left">COSE_Key</td>
<td align="left">ECDH-SS+HKDF-256,</td>
<td align="left">Static       </td>
</tr>
<tr>
<td align="left"> key   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">ECDH-SS+HKDF-512, ECDH-SS+A128KW, ECDH-SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">public key    for the       sender       </td>
</tr>
<tr>
<td align="left"> static</td>
<td align="left">-3</td>
<td align="left">bstr</td>
<td align="left">ECDH-SS+HKDF-256,</td>
<td align="left">Static       </td>
</tr>
<tr>
<td align="left"> key id   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">ECDH-SS+HKDF-512, ECDH-SS+A128KW, ECDH-SS+A192KW, ECDH-SS+A256KW</td>
<td align="left">public key    identifier    for the       sender       </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.4.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
                 Table 19: ECDH Algorithm Parameters
]]></artwork>
</t>
          <t indent="0" pn="section-12.4.1-13">This document defines these algorithms to be used with the curves
P-256, P-384, P-521, X25519, and X448.  Implementations <bcp14>MUST</bcp14> verify
that the key type and curve are correct.  Different curves are
restricted to different key types.  Implementations <bcp14>MUST</bcp14> verify that
the curve and algorithm are appropriate for the entities involved.</t>
          <t indent="0" pn="section-12.4.1-14">When using a COSE key for this algorithm, the following checks are
made:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-15">
            <li pn="section-12.4.1-15.1"> The 'kty' field MUST be present, and it MUST be 'EC2' or 'OKP'.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-16">
            <li pn="section-12.4.1-16.1"> If the 'alg' field is present, it MUST match the key agreement
   algorithm being used.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-17">
            <li pn="section-12.4.1-17.1"> If the 'key_ops' field is present, it MUST include 'derive key' or
   'derive bits' for the private key.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.4.1-18">
            <li pn="section-12.4.1-18.1"> If the 'key_ops' field is present, it MUST be empty for the public
   key.</li>
          </ul>
        </section>
        <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-12.4.2">
          <name slugifiedName="name-security-considerations">Security Considerations</name>
          <t indent="0" pn="section-12.4.2-1">There is a method of checking that points provided from external
entities are valid.  For the 'EC2' key format, this can be done by
checking that the x and y values form a point on the curve.  For the
'OKP' format, there is no simple way to do point validation.</t>
          <t indent="0" pn="section-12.4.2-2">Consideration was given to requiring that the public keys of both
entities be provided as part of the key derivation process (as
recommended in <xref target="RFC7748" section="6.1" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7748#section-6.1" derivedContent="RFC7748"/>).  This was not done as COSE
is used in a store and forward format rather than in online key
exchange.  In order for this to be a problem, either the receiver
public key has to be chosen maliciously or the sender has to be
malicious.  In either case, all security evaporates anyway.</t>
          <t indent="0" pn="section-12.4.2-3">A proof of possession of the private key associated with the public
key is recommended when a key is moved from untrusted to trusted
(either by the end user or by the entity that is responsible for
making trust statements on keys).</t>
        </section>
      </section>
      <section anchor="key-agreement-with-key-wrap" numbered="true" removeInRFC="false" toc="include" pn="section-12.5">
        <name slugifiedName="name-key-agreement-with-key-wrap">Key Agreement with Key Wrap</name>
        <t indent="0" pn="section-12.5-1">Key Agreement with Key Wrap uses a randomly generated CEK.  The CEK
is then encrypted using a key wrap algorithm and a key derived from
the shared secret computed by the key agreement algorithm.  The
function for this would be:</t>
        <t indent="0" pn="section-12.5-2">encryptedKey = KeyWrap(KDF(DH-Shared, context), CEK)
The COSE_Encrypt structure for the recipient is organized as follows:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5-3">
          <li pn="section-12.5-3.1"> The 'protected' field is fed into the KDF context structure.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5-4">
          <li pn="section-12.5-4.1"> The plaintext to be encrypted is the key from the next layer down
   (usually the content layer).</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5-5">
          <li pn="section-12.5-5.1"> The 'alg' parameter MUST be present in the layer.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5-6">
          <li pn="section-12.5-6.1"> A parameter identifying the recipient's key SHOULD be present.  A
   parameter identifying the sender's key SHOULD be present.</li>
        </ul>
        <section anchor="ecdh" numbered="true" removeInRFC="false" toc="include" pn="section-12.5.1">
          <name slugifiedName="name-ecdh">ECDH</name>
          <t indent="0" pn="section-12.5.1-1">These algorithms are defined in Table 20.</t>
          <t indent="0" pn="section-12.5.1-2">ECDH with Key Agreement is parameterized by the same parameters as
for ECDH; see Section 12.4.1, with the following modifications:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5.1-3">
            <li pn="section-12.5.1-3.1"> Key Wrap Algorithm: Any of the key wrap algorithms defined in
   Section 12.2.1 are supported.  The size of the key used for the
   key wrap algorithm is fed into the KDF.  The set of identifiers
   are found in Table 20.</li>
          </ul>
          <t indent="0" pn="section-12.5.1-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Value </td>
<td align="left">KDF </td>
<td align="left">Ephemeral- Static</td>
<td align="left">Key Wrap</td>
<td align="left">Description   </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> ECDH-ES +</td>
<td align="left">-29</td>
<td align="left">HKDF -</td>
<td align="left">yes</td>
<td align="left">A128KW</td>
<td align="left">ECDH ES w/    </td>
</tr>
<tr>
<td align="left"> A128KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        128-bit key   </td>
</tr>
<tr>
<td align="left"> ECDH-ES +</td>
<td align="left">-30</td>
<td align="left">HKDF -</td>
<td align="left">yes</td>
<td align="left">A192KW</td>
<td align="left">ECDH ES w/    </td>
</tr>
<tr>
<td align="left"> A192KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        192-bit key   </td>
</tr>
<tr>
<td align="left"> ECDH-ES +</td>
<td align="left">-31</td>
<td align="left">HKDF -</td>
<td align="left">yes</td>
<td align="left">A256KW</td>
<td align="left">ECDH ES w/    </td>
</tr>
<tr>
<td align="left"> A256KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        256-bit key   </td>
</tr>
<tr>
<td align="left"> ECDH-SS +</td>
<td align="left">-32</td>
<td align="left">HKDF -</td>
<td align="left">no</td>
<td align="left">A128KW</td>
<td align="left">ECDH SS w/    </td>
</tr>
<tr>
<td align="left"> A128KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        128-bit key   </td>
</tr>
<tr>
<td align="left"> ECDH-SS +</td>
<td align="left">-33</td>
<td align="left">HKDF -</td>
<td align="left">no</td>
<td align="left">A192KW</td>
<td align="left">ECDH SS w/    </td>
</tr>
<tr>
<td align="left"> A192KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        192-bit key   </td>
</tr>
<tr>
<td align="left"> ECDH-SS +</td>
<td align="left">-34</td>
<td align="left">HKDF -</td>
<td align="left">no</td>
<td align="left">A256KW</td>
<td align="left">ECDH SS w/    </td>
</tr>
<tr>
<td align="left"> A256KW   </td>
<td align="left">   </td>
<td align="left">SHA-256   </td>
<td align="left">   </td>
<td align="left">   </td>
<td align="left">Concat KDF     and AES Key    Wrap w/        256-bit key   </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-12.5.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
            Table 20: ECDH Algorithm Values with Key Wrap
]]></artwork>
</t>
          <t indent="0" pn="section-12.5.1-6">When using a COSE key for this algorithm, the following checks are
made:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5.1-7">
            <li pn="section-12.5.1-7.1"> The 'kty' field MUST be present, and it MUST be 'EC2' or 'OKP'.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5.1-8">
            <li pn="section-12.5.1-8.1"> If the 'alg' field is present, it MUST match the key agreement
   algorithm being used.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5.1-9">
            <li pn="section-12.5.1-9.1"> If the 'key_ops' field is present, it MUST include 'derive key' or
   'derive bits' for the private key.</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-12.5.1-10">
            <li pn="section-12.5.1-10.1"> If the 'key_ops' field is present, it MUST be empty for the public
   key.</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="key-object-parameters" numbered="true" removeInRFC="false" toc="include" pn="section-13">
      <name slugifiedName="name-key-object-parameters">Key Object Parameters</name>
      <t indent="0" pn="section-13-1">The COSE_Key object defines a way to hold a single key object.  It is
still required that the members of individual key types be defined.
This section of the document is where we define an initial set of
members for specific key types.</t>
      <t indent="0" pn="section-13-2">For each of the key types, we define both public and private members.
The public members are what is transmitted to others for their usage.
Private members allow for the archival of keys by individuals.
However, there are some circumstances in which private keys may be
distributed to entities in a protocol.  Examples include: entities
that have poor random number generation, centralized key creation for
multi-cast type operations, and protocols in which a shared secret is
used as a bearer token for authorization purposes.</t>
      <t indent="0" pn="section-13-3">Key types are identified by the 'kty' member of the COSE_Key object.
In this document, we define four values for the member:</t>
      <t indent="0" pn="section-13-4"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Description                                   </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> OKP</td>
<td align="left">1</td>
<td align="left">Octet Key Pair                                </td>
</tr>
<tr>
<td align="left"> EC2 </td>
<td align="left">2 </td>
<td align="left">Elliptic Curve Keys w/ x- and y-coordinate     pair                                          </td>
</tr>
<tr>
<td align="left"> Symmetric</td>
<td align="left">4</td>
<td align="left">Symmetric Keys                                </td>
</tr>
<tr>
<td align="left"> Reserved</td>
<td align="left">0</td>
<td align="left">This value is reserved                        </td>
</tr>
</tbody>
</table>
</t>
      <t indent="0" pn="section-13-5"><artwork name="" type="" align="left" alt=""><![CDATA[
                      Table 21: Key Type Values
]]></artwork>
</t>
      <section anchor="elliptic-curve-keys" numbered="true" removeInRFC="false" toc="include" pn="section-13.1">
        <name slugifiedName="name-elliptic-curve-keys">Elliptic Curve Keys</name>
        <t indent="0" pn="section-13.1-1">Two different key structures are defined for elliptic curve keys.
One version uses both an x-coordinate and a y-coordinate, potentially
with point compression ('EC2').  This is the traditional EC point
representation that is used in <xref target="RFC5480" format="default" sectionFormat="of" derivedContent="RFC5480"/>.  The other version uses
only the x-coordinate as the y-coordinate is either to be recomputed
or not needed for the key agreement operation ('OKP').</t>
        <t indent="0" pn="section-13.1-2">Applications <bcp14>MUST</bcp14> check that the curve and the key type are
consistent and reject a key if they are not.</t>
        <t indent="0" pn="section-13.1-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Value</td>
<td align="left">Key Type</td>
<td align="left">Description                        </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> P-256</td>
<td align="left">1</td>
<td align="left">EC2</td>
<td align="left">NIST P-256 also known as secp256r1 </td>
</tr>
<tr>
<td align="left"> P-384</td>
<td align="left">2</td>
<td align="left">EC2</td>
<td align="left">NIST P-384 also known as secp384r1 </td>
</tr>
<tr>
<td align="left"> P-521</td>
<td align="left">3</td>
<td align="left">EC2</td>
<td align="left">NIST P-521 also known as secp521r1 </td>
</tr>
<tr>
<td align="left"> X25519</td>
<td align="left">4</td>
<td align="left">OKP</td>
<td align="left">X25519 for use w/ ECDH only        </td>
</tr>
<tr>
<td align="left"> X448</td>
<td align="left">5</td>
<td align="left">OKP</td>
<td align="left">X448 for use w/ ECDH only          </td>
</tr>
<tr>
<td align="left"> Ed25519</td>
<td align="left">6</td>
<td align="left">OKP</td>
<td align="left">Ed25519 for use w/ EdDSA only      </td>
</tr>
<tr>
<td align="left"> Ed448</td>
<td align="left">7</td>
<td align="left">OKP</td>
<td align="left">Ed448 for use w/ EdDSA only        </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-13.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
                      Table 22: Elliptic Curves
]]></artwork>
</t>
        <section anchor="double-coordinate-curves" numbered="true" removeInRFC="false" toc="include" pn="section-13.1.1">
          <name slugifiedName="name-double-coordinate-curves">Double Coordinate Curves</name>
          <t indent="0" pn="section-13.1.1-1">The traditional way of sending ECs has been to send either both the
x-coordinate and y-coordinate or the x-coordinate and a sign bit for
the y-coordinate.  The latter encoding has not been recommended in
the IETF due to potential IPR issues.  However, for operations in
constrained environments, the ability to shrink a message by not
sending the y-coordinate is potentially useful.</t>
          <t indent="0" pn="section-13.1.1-2">For EC keys with both coordinates, the 'kty' member is set to 2
(EC2).  The key parameters defined in this section are summarized in
Table 23.  The members that are defined for this key type are:</t>
          <t indent="0" pn="section-13.1.1-3">crv: This contains an identifier of the curve to be used with the
     key.  The curves defined in this document for this key type can
     be found in Table 22.  Other curves may be registered in the
     future, and private curves can be used as well.</t>
          <t indent="0" pn="section-13.1.1-4">x:   This contains the x-coordinate for the EC point.  The integer is
     converted to an octet string as defined in <xref target="SEC1" format="default" sectionFormat="of" derivedContent="SEC1"/>.  Leading zero
     octets <bcp14>MUST</bcp14> be preserved.</t>
          <t indent="0" pn="section-13.1.1-5">y:   This contains either the sign bit or the value of the
     y-coordinate for the EC point.  When encoding the value y, the
     integer is converted to an octet string (as defined in <xref target="SEC1" format="default" sectionFormat="of" derivedContent="SEC1"/>)
     and encoded as a CBOR bstr.  Leading zero octets <bcp14>MUST</bcp14> be
     preserved.  The compressed point encoding is also supported.
     Compute the sign bit as laid out in the Elliptic-Curve-Point-to-
     Octet-String Conversion function of <xref target="SEC1" format="default" sectionFormat="of" derivedContent="SEC1"/>.  If the sign bit is
     zero, then encode y as a CBOR false value; otherwise, encode y
     as a CBOR true value.  The encoding of the infinity point is not
     supported.</t>
          <t indent="0" pn="section-13.1.1-6">d:   This contains the private key.</t>
          <t indent="0" pn="section-13.1.1-7">For public keys, it is <bcp14>REQUIRED</bcp14> that 'crv', 'x', and 'y' be present
in the structure.  For private keys, it is <bcp14>REQUIRED</bcp14> that 'crv' and
'd' be present in the structure.  For private keys, it is <bcp14>RECOMMENDED</bcp14>
that 'x' and 'y' also be present, but they can be recomputed from the
required elements and omitting them saves on space.</t>
          <t indent="0" pn="section-13.1.1-8"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Key  Type</td>
<td align="left">Name </td>
<td align="left">Label </td>
<td align="left">CBOR Type</td>
<td align="left">Description                       </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> 2 </td>
<td align="left">crv </td>
<td align="left">-1 </td>
<td align="left">int / tstr</td>
<td align="left">EC identifier - Taken from the     &quot;COSE Elliptic Curves&quot; registry   </td>
</tr>
<tr>
<td align="left"> 2</td>
<td align="left">x</td>
<td align="left">-2</td>
<td align="left">bstr</td>
<td align="left">x-coordinate                      </td>
</tr>
<tr>
<td align="left"> 2 </td>
<td align="left">y </td>
<td align="left">-3 </td>
<td align="left">bstr / bool</td>
<td align="left">y-coordinate                      </td>
</tr>
<tr>
<td align="left"> 2</td>
<td align="left">d</td>
<td align="left">-4</td>
<td align="left">bstr</td>
<td align="left">Private key                       </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-13.1.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
                     Table 23: EC Key Parameters
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="octet-key-pair" numbered="true" removeInRFC="false" toc="include" pn="section-13.2">
        <name slugifiedName="name-octet-key-pair">Octet Key Pair</name>
        <t indent="0" pn="section-13.2-1">A new key type is defined for Octet Key Pairs (OKP).  Do not assume
that keys using this type are elliptic curves.  This key type could
be used for other curve types (for example, mathematics based on
hyper-elliptic surfaces).</t>
        <t indent="0" pn="section-13.2-2">The key parameters defined in this section are summarized in
Table 24.  The members that are defined for this key type are:</t>
        <t indent="0" pn="section-13.2-3">crv: This contains an identifier of the curve to be used with the
     key.  The curves defined in this document for this key type can
     be found in Table 22.  Other curves may be registered in the
     future and private curves can be used as well.</t>
        <t indent="0" pn="section-13.2-4">x:   This contains the x-coordinate for the EC point.  The octet
     string represents a little-endian encoding of x.</t>
        <t indent="0" pn="section-13.2-5">d:   This contains the private key.</t>
        <t indent="0" pn="section-13.2-6">For public keys, it is <bcp14>REQUIRED</bcp14> that 'crv' and 'x' be present in the
structure.  For private keys, it is <bcp14>REQUIRED</bcp14> that 'crv' and 'd' be
present in the structure.  For private keys, it is <bcp14>RECOMMENDED</bcp14> that
'x' also be present, but it can be recomputed from the required
elements and omitting it saves on space.</t>
        <t indent="0" pn="section-13.2-7"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Key Type</td>
<td align="left">Label</td>
<td align="left">Type</td>
<td align="left">Description                       </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> crv  </td>
<td align="left">1  </td>
<td align="left">-1  </td>
<td align="left">int / tstr </td>
<td align="left">EC identifier - Taken from the     &quot;COSE Key Common Parameters&quot;       registry                          </td>
</tr>
<tr>
<td align="left"> x</td>
<td align="left">1</td>
<td align="left">-2</td>
<td align="left">bstr</td>
<td align="left">x-coordinate                      </td>
</tr>
<tr>
<td align="left"> d</td>
<td align="left">1</td>
<td align="left">-4</td>
<td align="left">bstr</td>
<td align="left">Private key                       </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-13.2-8"><artwork name="" type="" align="left" alt=""><![CDATA[
                 Table 24: Octet Key Pair Parameters
]]></artwork>
</t>
      </section>
      <section anchor="symmetric-keys" numbered="true" removeInRFC="false" toc="include" pn="section-13.3">
        <name slugifiedName="name-symmetric-keys">Symmetric Keys</name>
        <t indent="0" pn="section-13.3-1">Occasionally it is required that a symmetric key be transported
between entities.  This key structure allows for that to happen.</t>
        <t indent="0" pn="section-13.3-2">For symmetric keys, the 'kty' member is set to 4 ('Symmetric').  The
member that is defined for this key type is:</t>
        <t indent="0" pn="section-13.3-3">k: This contains the value of the key.</t>
        <t indent="0" pn="section-13.3-4">This key structure does not have a form that contains only public
members.  As it is expected that this key structure is going to be
transmitted, care must be taken that it is never transmitted
accidentally or insecurely.  For symmetric keys, it is <bcp14>REQUIRED</bcp14> that
'k' be present in the structure.</t>
        <t indent="0" pn="section-13.3-5"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name</td>
<td align="left">Key Type</td>
<td align="left">Label</td>
<td align="left">Type</td>
<td align="left">Description </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> k</td>
<td align="left">4</td>
<td align="left">-1</td>
<td align="left">bstr</td>
<td align="left">Key Value   </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-13.3-6"><artwork name="" type="" align="left" alt=""><![CDATA[
                 Table 25: Symmetric Key Parameters
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="cbor-encoder-restrictions" numbered="true" removeInRFC="false" toc="include" pn="section-14">
      <name slugifiedName="name-cbor-encoder-restrictions">CBOR Encoder Restrictions</name>
      <t indent="0" pn="section-14-1">There has been an attempt to limit the number of places where the
document needs to impose restrictions on how the CBOR Encoder needs
to work.  We have managed to narrow it down to the following
restrictions:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-14-2">
        <li pn="section-14-2.1"> The restriction applies to the encoding of the Sig_structure, the
   Enc_structure, and the MAC_structure.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-14-3">
        <li pn="section-14-3.1"> The rules for &quot;Canonical CBOR&quot; (Section 3.9 of RFC 7049) MUST be
   used in these locations.  The main rule that needs to be enforced
   is that all lengths in these structures MUST be encoded such that
   they are using definite lengths, and the minimum length encoding
   is used.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-14-4">
        <li pn="section-14-4.1"> Applications MUST NOT generate messages with the same label used
   twice as a key in a single map.  Applications MUST NOT parse and
   process messages with the same label used twice as a key in a
   single map.  Applications can enforce the parse and process
   requirement by using parsers that will fail the parse step or by
   using parsers that will pass all keys to the application, and the
   application can perform the check for duplicate keys.</li>
      </ul>
    </section>
    <section anchor="application-profiling-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-15">
      <name slugifiedName="name-application-profiling-considerations">Application Profiling Considerations</name>
      <t indent="0" pn="section-15-1">This document is designed to provide a set of security services, but
not implementation requirements for specific usage.  The
interoperability requirements are provided for how each of the
individual services are used and how the algorithms are to be used
for interoperability.  The requirements about which algorithms and
which services are needed are deferred to each application.</t>
      <t indent="0" pn="section-15-2">An example of a profile can be found in <xref target="OSCOAP" format="default" sectionFormat="of" derivedContent="OSCOAP"/> where two profiles
are being developed.  One is for carrying content by itself, and the
other is for carrying content in combination with CoAP headers.</t>
      <t indent="0" pn="section-15-3">It is intended that a profile of this document be created that
defines the interoperability requirements for that specific
application.  This section provides a set of guidelines and topics
that need to be considered when profiling this document.</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-15-4">
        <li pn="section-15-4.1"> Applications need to determine the set of messages defined in this
   document that they will be using.  The set of messages corresponds
   fairly directly to the set of security services that are needed
   and to the security levels needed.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-15-5">
        <li pn="section-15-5.1"> Applications may define new header parameters for a specific
   purpose.  Applications will often times select specific header
   parameters to use or not to use.  For example, an application
   would normally state a preference for using either the IV or the
   Partial IV parameter.  If the Partial IV parameter is specified,
   then the application would also need to define how the fixed
   portion of the IV would be determined.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-15-6">
        <li pn="section-15-6.1"> When applications use externally defined authenticated data, they
   need to define how that data is encoded.  This document assumes
   that the data will be provided as a byte stream.  More information
   can be found in Section 4.3.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-15-7">
        <li pn="section-15-7.1"> Applications need to determine the set of security algorithms that
   are to be used.  When selecting the algorithms to be used as the
   mandatory-to-implement set, consideration should be given to
   choosing different types of algorithms when two are chosen for a
   specific purpose.  An example of this would be choosing HMAC-
   SHA512 and AES-CMAC as different MAC algorithms; the construction
   is vastly different between these two algorithms.  This means that
   a weakening of one algorithm would be unlikely to lead to a
   weakening of the other algorithms.  Of course, these algorithms do
   not provide the same level of security and thus may not be
   comparable for the desired security functionality.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-15-8">
        <li pn="section-15-8.1"> Applications may need to provide some type of negotiation or
   discovery method if multiple algorithms or message structures are
   permitted.  The method can be as simple as requiring
   preconfiguration of the set of algorithms to providing a discovery
   method built into the protocol.  S/MIME provided a number of
   different ways to approach the problem that applications could
   follow:</li>
      </ul>
      <t indent="0" pn="section-15-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Advertising in the message (S/MIME capabilities) [RFC5751].
]]></artwork>
</t>
      <t indent="0" pn="section-15-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Advertising in the certificate (capabilities extension)
      [RFC4262].
]]></artwork>
</t>
      <t indent="0" pn="section-15-11"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Minimum requirements for the S/MIME, which have been updated
      over time [RFC2633] [RFC5751] (note that [RFC2633] has been
      obsoleted by [RFC5751]).
]]></artwork>
</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-16">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section anchor="cbor-tag-assignment" numbered="true" removeInRFC="false" toc="include" pn="section-16.1">
        <name slugifiedName="name-cbor-tag-assignment">CBOR Tag Assignment</name>
        <t indent="0" pn="section-16.1-1">IANA has assigned the following tags from the &quot;CBOR Tags&quot; registry.
The tags for COSE_Sign1, COSE_Encrypt0, and COSE_Mac0 were assigned
in the 1 to 23 value range (one byte long when encoded).  The tags
for COSE_Sign, COSE_Encrypt, and COSE_Mac were assigned in the 24 to
255 value range (two bytes long when encoded).</t>
        <t indent="0" pn="section-16.1-2">The tags assigned are in Table 1.</t>
      </section>
      <section anchor="cose-header-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.2">
        <name slugifiedName="name-cose-header-parameters-registry">COSE Header Parameters Registry</name>
        <t indent="0" pn="section-16.2-1">IANA has created a new registry titled &quot;COSE Header Parameters&quot;.  The
registry has been created to use the &quot;Expert Review Required&quot;
registration procedure <xref target="RFC8126" format="default" sectionFormat="of" derivedContent="RFC8126"/>.  Guidelines for the experts are
provided in Section 16.11.  It should be noted that, in addition to
the expert review, some portions of the registry require a
specification, potentially a Standards Track RFC, be supplied as
well.</t>
        <t indent="0" pn="section-16.2-2">The columns of the registry are:</t>
        <t indent="0" pn="section-16.2-3">Name:  The name is present to make it easier to refer to and discuss
   the registration entry.  The value is not used in the protocol.
   Names are to be unique in the table.</t>
        <t indent="0" pn="section-16.2-4">Label:  This is the value used for the label.  The label can be
   either an integer or a string.  Registration in the table is based
   on the value of the label requested.  Integer values between 1 and
   255 and strings of length 1 are designated as &quot;Standards Action&quot;.
   Integer values from 256 to 65535 and strings of length 2 are
   designated as &quot;Specification Required&quot;.  Integer values of greater
   than 65535 and strings of length greater than 2 are designated as
   &quot;Expert Review&quot;.  Integer values in the range -1 to -65536 are
   &quot;delegated to the COSE Header Algorithm Parameters registry&quot;.
   Integer values less than -65536 are marked as private use.</t>
        <t indent="0" pn="section-16.2-5">Value Type:  This contains the CBOR type for the value portion of the
   label.</t>
        <t indent="0" pn="section-16.2-6">Value Registry:  This contains a pointer to the registry used to
   contain values where the set is limited.</t>
        <t indent="0" pn="section-16.2-7">Description:  This contains a brief description of the header field.</t>
        <t indent="0" pn="section-16.2-8">Reference:  This contains a pointer to the specification defining the
   header field (where public).</t>
        <t indent="0" pn="section-16.2-9">The initial contents of the registry can be found in Tables 2 and 27.
All of the entries in the &quot;References&quot; column of this registry point
to this document.</t>
        <t indent="0" pn="section-16.2-10">Additionally, the label of 0 is to be marked as 'Reserved'.</t>
      </section>
      <section anchor="cose-header-algorithm-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.3">
        <name slugifiedName="name-cose-header-algorithm-parameters-registry">COSE Header Algorithm Parameters Registry</name>
        <t indent="0" pn="section-16.3-1">IANA has created a new registry titled &quot;COSE Header Algorithm
Parameters&quot;.  The registry uses the &quot;Expert Review Required&quot;
registration procedure.  Expert review guidelines are provided in
Section 16.11.</t>
        <t indent="0" pn="section-16.3-2">The columns of the registry are:</t>
        <t indent="0" pn="section-16.3-3">Name:  The name is present to make it easier to refer to and discuss
   the registration entry.  The value is not used in the protocol.</t>
        <t indent="0" pn="section-16.3-4">Algorithm:  The algorithm(s) that this registry entry is used for.
   This value is taken from the &quot;COSE Algorithms&quot; registry.  Multiple
   algorithms can be specified in this entry.  For the table, the
   algorithm/label pair <bcp14>MUST</bcp14> be unique.</t>
        <t indent="0" pn="section-16.3-5">Label:  This is the value used for the label.  The label is an
   integer in the range of -1 to -65536.</t>
        <t indent="0" pn="section-16.3-6">Type:  This contains the CBOR type for the value portion of the
   label.</t>
        <t indent="0" pn="section-16.3-7">Description:  This contains a brief description of the header field.</t>
        <t indent="0" pn="section-16.3-8">Reference:  This contains a pointer to the specification defining the
   header field (where public).</t>
        <t indent="0" pn="section-16.3-9">The initial contents of the registry can be found in Tables 13, 14,
and 19.  All of the entries in the &quot;References&quot; column of this
registry point to this document.</t>
      </section>
      <section anchor="cose-algorithms-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.4">
        <name slugifiedName="name-cose-algorithms-registry">COSE Algorithms Registry</name>
        <t indent="0" pn="section-16.4-1">IANA has created a new registry titled &quot;COSE Algorithms&quot;.  The
registry has been created to use the &quot;Expert Review Required&quot;
registration procedure.  Guidelines for the experts are provided in
Section 16.11.  It should be noted that, in addition to the expert
review, some portions of the registry require a specification,
potentially a Standards Track RFC, be supplied as well.</t>
        <t indent="0" pn="section-16.4-2">The columns of the registry are:</t>
        <t indent="0" pn="section-16.4-3">Name:  A value that can be used to identify an algorithm in documents
   for easier comprehension.  The name <bcp14>SHOULD</bcp14> be unique.  However,
   the 'Value' field is what is used to identify the algorithm, not
   the 'name' field.</t>
        <t indent="0" pn="section-16.4-4">Value:  The value to be used to identify this algorithm.  Algorithm
   values <bcp14>MUST</bcp14> be unique.  The value can be a positive integer, a
   negative integer, or a string.  Integer values between -256 and
   255 and strings of length 1 are designated as &quot;Standards Action&quot;.
   Integer values from -65536 to 65535 and strings of length 2 are
   designated as &quot;Specification Required&quot;.  Integer values greater
   than 65535 and strings of length greater than 2 are designated as
   &quot;Expert Review&quot;.  Integer values less than -65536 are marked as
   private use.</t>
        <t indent="0" pn="section-16.4-5">Description:  A short description of the algorithm.</t>
        <t indent="0" pn="section-16.4-6">Reference:  A document where the algorithm is defined (if publicly
   available).</t>
        <t indent="0" pn="section-16.4-7">Recommended:  Does the IETF have a consensus recommendation to use
   the algorithm?  The legal values are 'Yes', 'No', and
   'Deprecated'.</t>
        <t indent="0" pn="section-16.4-8">The initial contents of the registry can be found in Tables 5, 6, 7,
8, 9, 10, 11, 15, 16, 17, 18, and 20.  All of the entries in the
&quot;References&quot; column of this registry point to this document.  All of
the entries in the &quot;Recommended&quot; column are set to &quot;Yes&quot;.</t>
        <t indent="0" pn="section-16.4-9">Additionally, the label of 0 is to be marked as 'Reserved'.</t>
        <t indent="0" pn="section-16.4-10">NOTE: The assignment of algorithm identifiers in this document was
done so that positive numbers were used for the first layer objects
(COSE_Sign, COSE_Sign1, COSE_Encrypt, COSE_Encrypt0, COSE_Mac, and
COSE_Mac0).  Negative numbers were used for second layer objects
(COSE_Signature and COSE_recipient).  Expert reviewers should
consider this practice, but are not expected to be restricted by this
precedent.</t>
      </section>
      <section anchor="cose-key-common-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.5">
        <name slugifiedName="name-cose-key-common-parameters-registry">COSE Key Common Parameters Registry</name>
        <t indent="0" pn="section-16.5-1">IANA has created a new registry titled &quot;COSE Key Common Parameters&quot;.
The registry has been created to use the &quot;Expert Review Required&quot;
registration procedure.  Guidelines for the experts are provided in
Section 16.11.  It should be noted that, in addition to the expert
review, some portions of the registry require a specification,
potentially a Standards Track RFC, be supplied as well.</t>
        <t indent="0" pn="section-16.5-2">The columns of the registry are:</t>
        <t indent="0" pn="section-16.5-3">Name:  This is a descriptive name that enables easier reference to
   the item.  It is not used in the encoding.</t>
        <t indent="0" pn="section-16.5-4">Label:  The value to be used to identify this algorithm.  Key map
   labels <bcp14>MUST</bcp14> be unique.  The label can be a positive integer, a
   negative integer, or a string.  Integer values between 0 and 255
   and strings of length 1 are designated as &quot;Standards Action&quot;.
   Integer values from 256 to 65535 and strings of length 2 are
   designated as &quot;Specification Required&quot;.  Integer values of greater
   than 65535 and strings of length greater than 2 are designated as
   &quot;Expert Review&quot;.  Integer values in the range -65536 to -1 are
   &quot;used for key parameters specific to a single algorithm delegated
   to the COSE Key Type Parameters registry&quot;.  Integer values less
   than -65536 are marked as private use.</t>
        <t indent="0" pn="section-16.5-5">CBOR Type:  This field contains the CBOR type for the field.</t>
        <t indent="0" pn="section-16.5-6">Value Registry:  This field denotes the registry that values come
   from, if one exists.</t>
        <t indent="0" pn="section-16.5-7">Description:  This field contains a brief description for the field.</t>
        <t indent="0" pn="section-16.5-8">Reference:  This contains a pointer to the public specification for
   the field if one exists.</t>
        <t indent="0" pn="section-16.5-9">This registry has been initially populated by the values in Table 3.
All of the entries in the &quot;References&quot; column of this registry point
to this document.</t>
      </section>
      <section anchor="cose-key-type-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.6">
        <name slugifiedName="name-cose-key-type-parameters-registry">COSE Key Type Parameters Registry</name>
        <t indent="0" pn="section-16.6-1">IANA has created a new registry titled &quot;COSE Key Type Parameters&quot;.
The registry has been created to use the &quot;Expert Review Required&quot;
registration procedure.  Expert review guidelines are provided in
Section 16.11.</t>
        <t indent="0" pn="section-16.6-2">The columns of the table are:</t>
        <t indent="0" pn="section-16.6-3">Key Type:  This field contains a descriptive string of a key type.
   This should be a value that is in the &quot;COSE Key Common Parameters&quot;
   registry and is placed in the 'kty' field of a COSE Key structure.</t>
        <t indent="0" pn="section-16.6-4">Name:  This is a descriptive name that enables easier reference to
   the item.  It is not used in the encoding.</t>
        <t indent="0" pn="section-16.6-5">Label:  The label is to be unique for every value of key type.  The
   range of values is from -65536 to -1.  Labels are expected to be
   reused for different keys.</t>
        <t indent="0" pn="section-16.6-6">CBOR Type:  This field contains the CBOR type for the field.</t>
        <t indent="0" pn="section-16.6-7">Description:  This field contains a brief description for the field.</t>
        <t indent="0" pn="section-16.6-8">Reference:  This contains a pointer to the public specification for
   the field if one exists.</t>
        <t indent="0" pn="section-16.6-9">This registry has been initially populated by the values in Tables
23, 24, and 25.  All of the entries in the &quot;References&quot; column of
this registry point to this document.</t>
      </section>
      <section anchor="cose-key-types-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.7">
        <name slugifiedName="name-cose-key-types-registry">COSE Key Types Registry</name>
        <t indent="0" pn="section-16.7-1">IANA has created a new registry titled &quot;COSE Key Types&quot;.  The
registry has been created to use the &quot;Expert Review Required&quot;
registration procedure.  Expert review guidelines are provided in
Section 16.11.</t>
        <t indent="0" pn="section-16.7-2">The columns of this table are:</t>
        <t indent="0" pn="section-16.7-3">Name:  This is a descriptive name that enables easier reference to
   the item.  The name <bcp14>MUST</bcp14> be unique.  It is not used in the
   encoding.</t>
        <t indent="0" pn="section-16.7-4">Value:  This is the value used to identify the curve.  These values
   <bcp14>MUST</bcp14> be unique.  The value can be a positive integer, a negative
   integer, or a string.</t>
        <t indent="0" pn="section-16.7-5">Description:  This field contains a brief description of the curve.</t>
        <t indent="0" pn="section-16.7-6">References:  This contains a pointer to the public specification for
   the curve if one exists.</t>
        <t indent="0" pn="section-16.7-7">This registry has been initially populated by the values in Table 21.
The specification column for all of these entries will be this
document.</t>
      </section>
      <section anchor="cose-elliptic-curves-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.8">
        <name slugifiedName="name-cose-elliptic-curves-registry">COSE Elliptic Curves Registry</name>
        <t indent="0" pn="section-16.8-1">IANA has created a new registry titled &quot;COSE Elliptic Curves&quot;.  The
registry has been created to use the &quot;Expert Review Required&quot;
registration procedure.  Guidelines for the experts are provided in
Section 16.11.  It should be noted that, in addition to the expert
review, some portions of the registry require a specification,
potentially a Standards Track RFC, be supplied as well.</t>
        <t indent="0" pn="section-16.8-2">The columns of the table are:</t>
        <t indent="0" pn="section-16.8-3">Name:  This is a descriptive name that enables easier reference to
   the item.  It is not used in the encoding.</t>
        <t indent="0" pn="section-16.8-4">Value:  This is the value used to identify the curve.  These values
   <bcp14>MUST</bcp14> be unique.  The integer values from -256 to 255 are
   designated as &quot;Standards Action&quot;.  The integer values from 256 to
   65535 and -65536 to -257 are designated as &quot;Specification
   Required&quot;.  Integer values over 65535 are designated as &quot;Expert
   Review&quot;.  Integer values less than -65536 are marked as private
   use.</t>
        <t indent="0" pn="section-16.8-5">Key Type:  This designates the key type(s) that can be used with this
   curve.</t>
        <t indent="0" pn="section-16.8-6">Description:  This field contains a brief description of the curve.</t>
        <t indent="0" pn="section-16.8-7">Reference:  This contains a pointer to the public specification for
   the curve if one exists.</t>
        <t indent="0" pn="section-16.8-8">Recommended:  Does the IETF have a consensus recommendation to use
   the algorithm?  The legal values are 'Yes', 'No', and
   'Deprecated'.</t>
        <t indent="0" pn="section-16.8-9">This registry has been initially populated by the values in Table 22.
All of the entries in the &quot;References&quot; column of this registry point
to this document.  All of the entries in the &quot;Recommended&quot; column are
set to &quot;Yes&quot;.</t>
      </section>
      <section anchor="media-type-registrations" numbered="true" removeInRFC="false" toc="include" pn="section-16.9">
        <name slugifiedName="name-media-type-registrations">Media Type Registrations</name>
        <section anchor="cose-security-message" numbered="true" removeInRFC="false" toc="include" pn="section-16.9.1">
          <name slugifiedName="name-cose-security-message">COSE Security Message</name>
          <t indent="0" pn="section-16.9.1-1">This section registers the 'application/cose' media type in the
&quot;Media Types&quot; registry.  These media types are used to indicate that
the content is a COSE message.</t>
          <t indent="0" pn="section-16.9.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   Type name: application
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   Subtype name: cose
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   Required parameters: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   Optional parameters: cose-type
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   Encoding considerations: binary
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   Security considerations: See the Security Considerations section
   of RFC 8152.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   Interoperability considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   Published specification: RFC 8152
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   Applications that use this media type: IoT applications sending
   security content over HTTP(S) transports.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-11"><artwork name="" type="" align="left" alt=""><![CDATA[
   Fragment identifier considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   Additional information:
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Deprecated alias names for this type: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-14"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Magic number(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-15"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  File extension(s): cbor
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-16"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Macintosh file type code(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
   Person & email address to contact for further information:
   iesg@ietf.org
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
   Intended usage: COMMON
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
   Restrictions on usage: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-20"><artwork name="" type="" align="left" alt=""><![CDATA[
   Author: Jim Schaad, ietf@augustcellars.com
   Change Controller: IESG
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.1-21"><artwork name="" type="" align="left" alt=""><![CDATA[
   Provisional registration?  No
]]></artwork>
</t>
        </section>
        <section anchor="cose-key-media-type" numbered="true" removeInRFC="false" toc="include" pn="section-16.9.2">
          <name slugifiedName="name-cose-key-media-type">COSE Key Media Type</name>
          <t indent="0" pn="section-16.9.2-1">This section registers the 'application/cose-key' and 'application/
cose-key-set' media types in the &quot;Media Types&quot; registry.  These media
types are used to indicate, respectively, that content is a COSE_Key
or COSE_KeySet object.</t>
          <t indent="0" pn="section-16.9.2-2">The template for registering 'application/cose-key' is:</t>
          <t indent="0" pn="section-16.9.2-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   Type name: application
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   Subtype name: cose-key
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   Required parameters: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   Optional parameters: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-7"><artwork name="" type="" align="left" alt=""><![CDATA[
   Encoding considerations: binary
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-8"><artwork name="" type="" align="left" alt=""><![CDATA[
   Security considerations: See the Security Considerations section
   of RFC 8152.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-9"><artwork name="" type="" align="left" alt=""><![CDATA[
   Interoperability considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-10"><artwork name="" type="" align="left" alt=""><![CDATA[
   Published specification: RFC 8152
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-11"><artwork name="" type="" align="left" alt=""><![CDATA[
   Applications that use this media type: Distribution of COSE based
   keys for IoT applications.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-12"><artwork name="" type="" align="left" alt=""><![CDATA[
   Fragment identifier considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-13"><artwork name="" type="" align="left" alt=""><![CDATA[
   Additional information:
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-14"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Deprecated alias names for this type: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-15"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Magic number(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-16"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  File extension(s): cbor
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-17"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Macintosh file type code(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-18"><artwork name="" type="" align="left" alt=""><![CDATA[
   Person & email address to contact for further information:
   iesg@ietf.org
   Intended usage: COMMON
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-19"><artwork name="" type="" align="left" alt=""><![CDATA[
   Restrictions on usage: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-20"><artwork name="" type="" align="left" alt=""><![CDATA[
   Author: Jim Schaad, ietf@augustcellars.com
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-21"><artwork name="" type="" align="left" alt=""><![CDATA[
   Change Controller: IESG
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-22"><artwork name="" type="" align="left" alt=""><![CDATA[
   Provisional registration?  No
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-23">The template for registering 'application/cose-key-set' is:</t>
          <t indent="0" pn="section-16.9.2-24"><artwork name="" type="" align="left" alt=""><![CDATA[
   Type name: application
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-25"><artwork name="" type="" align="left" alt=""><![CDATA[
   Subtype name: cose-key-set
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-26"><artwork name="" type="" align="left" alt=""><![CDATA[
   Required parameters: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-27"><artwork name="" type="" align="left" alt=""><![CDATA[
   Optional parameters: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-28"><artwork name="" type="" align="left" alt=""><![CDATA[
   Encoding considerations: binary
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-29"><artwork name="" type="" align="left" alt=""><![CDATA[
   Security considerations: See the Security Considerations section
   of RFC 8152.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-30"><artwork name="" type="" align="left" alt=""><![CDATA[
   Interoperability considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-31"><artwork name="" type="" align="left" alt=""><![CDATA[
   Published specification: RFC 8152
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-32"><artwork name="" type="" align="left" alt=""><![CDATA[
   Applications that use this media type: Distribution of COSE based
   keys for IoT applications.
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-33"><artwork name="" type="" align="left" alt=""><![CDATA[
   Fragment identifier considerations: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-34"><artwork name="" type="" align="left" alt=""><![CDATA[
   Additional information:
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-35"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Deprecated alias names for this type: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-36"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Magic number(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-37"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  File extension(s): cbor
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-38"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  Macintosh file type code(s): N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-39"><artwork name="" type="" align="left" alt=""><![CDATA[
   Person & email address to contact for further information:
   iesg@ietf.org
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-40"><artwork name="" type="" align="left" alt=""><![CDATA[
   Intended usage: COMMON
   Restrictions on usage: N/A
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-41"><artwork name="" type="" align="left" alt=""><![CDATA[
   Author: Jim Schaad, ietf@augustcellars.com
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-42"><artwork name="" type="" align="left" alt=""><![CDATA[
   Change Controller: IESG
]]></artwork>
</t>
          <t indent="0" pn="section-16.9.2-43"><artwork name="" type="" align="left" alt=""><![CDATA[
   Provisional registration?  No
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="coap-content-formats-registry" numbered="true" removeInRFC="false" toc="include" pn="section-16.10">
        <name slugifiedName="name-coap-content-formats-registry">CoAP Content-Formats Registry</name>
        <t indent="0" pn="section-16.10-1">IANA has added the following entries to the &quot;CoAP Content-Formats&quot;
registry.</t>
        <t indent="0" pn="section-16.10-2"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Media Type</td>
<td align="left">Encoding</td>
<td align="left">ID</td>
<td align="left">Reference </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">98</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> sign&quot;</td>
</tr>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">18</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> sign1&quot;</td>
</tr>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">96</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> encrypt&quot;</td>
</tr>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">16</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> encrypt0&quot;</td>
</tr>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">97</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> mac&quot;</td>
</tr>
<tr>
<td align="left"> application/cose; cose-type=&quot;cose-</td>
<td align="left"></td>
<td align="left">17</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> mac0&quot;</td>
</tr>
<tr>
<td align="left"> application/cose-key</td>
<td align="left"></td>
<td align="left">101</td>
<td align="left">[RFC8152] </td>
</tr>
<tr>
<td align="left"> application/cose-key-set</td>
<td align="left"></td>
<td align="left">102</td>
<td align="left">[RFC8152] </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-16.10-3"><artwork name="" type="" align="left" alt=""><![CDATA[
               Table 26: CoAP Content-Formats for COSE
]]></artwork>
</t>
      </section>
      <section anchor="expert-review-instructions" numbered="true" removeInRFC="false" toc="include" pn="section-16.11">
        <name slugifiedName="name-expert-review-instructions">Expert Review Instructions</name>
        <t indent="0" pn="section-16.11-1">All of the IANA registries established in this document are defined
as expert review.  This section gives some general guidelines for
what the experts should be looking for, but they are being designated
as experts for a reason, so they should be given substantial
latitude.</t>
        <t indent="0" pn="section-16.11-2">Expert reviewers should take into consideration the following points:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-16.11-3">
          <li pn="section-16.11-3.1"> Point squatting should be discouraged.  Reviewers are encouraged
   to get sufficient information for registration requests to ensure
   that the usage is not going to duplicate one that is already
   registered, and that the point is likely to be used in
   deployments.  The zones tagged as private use are intended for
   testing purposes and closed environments; code points in other
   ranges should not be assigned for testing.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-16.11-4">
          <li pn="section-16.11-4.1"> Specifications are required for the standards track range of point
   assignment.  Specifications should exist for specification
   required ranges, but early assignment before a specification is
   available is considered to be permissible.  Specifications are
   needed for the first-come, first-serve range if they are expected
   to be used outside of closed environments in an interoperable way.
   When specifications are not provided, the description provided
   needs to have sufficient information to identify what the point is
   being used for.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-16.11-5">
          <li pn="section-16.11-5.1"> Experts should take into account the expected usage of fields when
   approving point assignment.  The fact that there is a range for
   standards track documents does not mean that a standards track
   document cannot have points assigned outside of that range.  The
   length of the encoded value should be weighed against how many
   code points of that length are left, the size of device it will be
   used on, and the number of code points left that encode to that
   size.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-16.11-6">
          <li pn="section-16.11-6.1"> When algorithms are registered, vanity registrations should be
   discouraged.  One way to do this is to require registrations to
   provide additional documentation on security analysis of the
   algorithm.  Another thing that should be considered is requesting
   an opinion on the algorithm from the Crypto Forum Research Group
   (CFRG).  Algorithms that do not meet the security requirements of
   the community and the messages structures should not be
   registered.</li>
        </ul>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-17">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-17-1">There are a number of security considerations that need to be taken
into account by implementers of this specification.  The security
considerations that are specific to an individual algorithm are
placed next to the description of the algorithm.  While some
considerations have been highlighted here, additional considerations
may be found in the documents listed in the references.</t>
      <t indent="0" pn="section-17-2">Implementations need to protect the private key material for any
individuals.  There are some cases in this document that need to be
highlighted on this issue.</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-3">
        <li pn="section-17-3.1"> Using the same key for two different algorithms can leak
   information about the key.  It is therefore recommended that keys
   be restricted to a single algorithm.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-4">
        <li pn="section-17-4.1"> Use of 'direct' as a recipient algorithm combined with a second
   recipient algorithm exposes the direct key to the second
   recipient.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-5">
        <li pn="section-17-5.1"> Several of the algorithms in this document have limits on the
   number of times that a key can be used without leaking information
   about the key.</li>
      </ul>
      <t indent="0" pn="section-17-6">The use of ECDH and direct plus KDF (with no key wrap) will not
directly lead to the private key being leaked; the one way function
of the KDF will prevent that.  There is, however, a different issue
that needs to be addressed.  Having two recipients requires that the
CEK be shared between two recipients.  The second recipient therefore
has a CEK that was derived from material that can be used for the
weak proof of origin.  The second recipient could create a message
using the same CEK and send it to the first recipient; the first
recipient would, for either static-static ECDH or direct plus KDF,
make an assumption that the CEK could be used for proof of origin
even though it is from the wrong entity.  If the key wrap step is
added, then no proof of origin is implied and this is not an issue.</t>
      <t indent="0" pn="section-17-7">Although it has been mentioned before, the use of a single key for
multiple algorithms has been demonstrated in some cases to leak
information about a key, provide the opportunity for attackers to
forge integrity tags, or gain information about encrypted content.
Binding a key to a single algorithm prevents these problems.  Key
creators and key consumers are strongly encouraged not only to create
new keys for each different algorithm, but to include that selection
of algorithm in any distribution of key material and strictly enforce
the matching of algorithms in the key structure to algorithms in the
message structure.  In addition to checking that algorithms are
correct, the key form needs to be checked as well.  Do not use an
'EC2' key where an 'OKP' key is expected.</t>
      <t indent="0" pn="section-17-8">Before using a key for transmission, or before acting on information
received, a trust decision on a key needs to be made.  Is the data or
action something that the entity associated with the key has a right
to see or a right to request?  A number of factors are associated
with this trust decision.  Some of the ones that are highlighted here
are:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-9">
        <li pn="section-17-9.1"> What are the permissions associated with the key owner?</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-10">
        <li pn="section-17-10.1"> Is the cryptographic algorithm acceptable in the current context?</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-11">
        <li pn="section-17-11.1"> Have the restrictions associated with the key, such as algorithm
   or freshness, been checked and are they correct?</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-12">
        <li pn="section-17-12.1"> Is the request something that is reasonable, given the current
   state of the application?</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-17-13">
        <li pn="section-17-13.1"> Have any security considerations that are part of the message been
   enforced (as specified by the application or 'crit' parameter)?</li>
      </ul>
      <t indent="0" pn="section-17-14">There are a large number of algorithms presented in this document
that use nonce values.  For all of the nonces defined in this
document, there is some type of restriction on the nonce being a
unique value either for a key or for some other conditions.  In all
of these cases, there is no known requirement on the nonce being both
unique and unpredictable; under these circumstances, it's reasonable
to use a counter for creation of the nonce.  In cases where one wants
the pattern of the nonce to be unpredictable as well as unique, one
can use a key created for that purpose and encrypt the counter to
produce the nonce value.</t>
      <t indent="0" pn="section-17-15">One area that has been starting to get exposure is doing traffic
analysis of encrypted messages based on the length of the message.
This specification does not provide for a uniform method of providing
padding as part of the message structure.  An observer can
distinguish between two different strings (for example, 'YES' and
'NO') based on the length for all of the content encryption
algorithms that are defined in this document.  This means that it is
up to the applications to document how content padding is to be done
in order to prevent or discourage such analysis.  (For example, the
strings could be defined as 'YES' and 'NO '.)</t>
    </section>
  </middle>
  <back>
    <references pn="section-18">
      <name slugifiedName="name-references">References</name>
      <references pn="section-18.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="AES-GCM" target="https://csrc.nist.gov/publications/nistpubs/800- 38D/SP-800-38D.pdf" quoteTitle="true" derivedAnchor="AES-GCM">
          <front>
            <title>Recommendation for Block Cipher Modes of Operation: Galois/Counter Mode (GCM) and GMAC</title>
            <date year="2007" month="November"/>
          </front>
          <seriesInfo name="DOI">10.6028/NIST.SP.800-38D</seriesInfo>
        </reference>
        <reference anchor="COAP.Formats" target="http://www.iana.org/assignments/core-parameters/" quoteTitle="true" derivedAnchor="COAP.Formats">
          <front>
            <title>Constrained RESTful Environments (CoRE) Parameters</title>
          </front>
        </reference>
        <reference anchor="DSS" target="http://nvlpubs.nist.gov/nistpubs/FIPS/ NIST.FIPS.186-4.pdf" quoteTitle="true" derivedAnchor="DSS">
          <front>
            <title>Digital Signature Standard (DSS)</title>
            <date year="2013" month="July"/>
          </front>
          <seriesInfo name="FIPS PUB">186-4</seriesInfo>
          <seriesInfo name="DOI">10.6028/NIST.FIPS.186-4</seriesInfo>
        </reference>
        <reference anchor="MAC" target="http://csrc.nist.gov/publications/fips/fips113/ fips113.html" quoteTitle="true" derivedAnchor="MAC">
          <front>
            <title>Computer Data Authentication</title>
            <date year="1985" month="May"/>
          </front>
          <seriesInfo name="FIPS PUB">113</seriesInfo>
        </reference>
        <reference anchor="RFC2104" target="http://www.rfc-editor.org/info/rfc2104" quoteTitle="true" derivedAnchor="RFC2104">
          <front>
            <title>HMAC: Keyed- Hashing for Message Authentication</title>
            <date year="1997" month="February"/>
          </front>
          <seriesInfo name="RFC">2104</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2104</seriesInfo>
        </reference>
        <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <date year="1997" month="March"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">2119</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2119</seriesInfo>
        </reference>
        <reference anchor="RFC3394" target="http://www.rfc-editor.org/info/rfc3394" quoteTitle="true" derivedAnchor="RFC3394">
          <front>
            <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
            <date year="2002" month="September"/>
          </front>
          <seriesInfo name="RFC">3394</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3394</seriesInfo>
        </reference>
        <reference anchor="RFC3610" target="http://www.rfc-editor.org/info/rfc3610" quoteTitle="true" derivedAnchor="RFC3610">
          <front>
            <title>Counter with CBC-MAC (CCM)</title>
            <date year="2003" month="September"/>
          </front>
          <seriesInfo name="RFC">3610</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3610</seriesInfo>
        </reference>
        <reference anchor="RFC5869" target="http://www.rfc-editor.org/info/rfc5869" quoteTitle="true" derivedAnchor="RFC5869">
          <front>
            <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
            <date year="2010" month="May"/>
          </front>
          <seriesInfo name="RFC">5869</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5869</seriesInfo>
        </reference>
        <reference anchor="RFC6090" target="http://www.rfc-editor.org/info/rfc6090" quoteTitle="true" derivedAnchor="RFC6090">
          <front>
            <title>Fundamental Elliptic Curve Cryptography Algorithms</title>
            <date year="2011" month="February"/>
          </front>
          <seriesInfo name="RFC">6090</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6090</seriesInfo>
        </reference>
        <reference anchor="RFC6979" target="http://www.rfc-editor.org/info/rfc6979" quoteTitle="true" derivedAnchor="RFC6979">
          <front>
            <title>Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
            <date year="2013" month="August"/>
          </front>
          <seriesInfo name="RFC">6979</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6979</seriesInfo>
        </reference>
        <reference anchor="RFC7049" target="http://www.rfc-editor.org/info/rfc7049" quoteTitle="true" derivedAnchor="RFC7049">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <date year="2013" month="October"/>
          </front>
          <seriesInfo name="RFC">7049</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7049</seriesInfo>
        </reference>
        <reference anchor="RFC7539" target="http://www.rfc-editor.org/info/rfc7539" quoteTitle="true" derivedAnchor="RFC7539">
          <front>
            <title>ChaCha20 and Poly1305 for IETF Protocols</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7539</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7539</seriesInfo>
        </reference>
        <reference anchor="RFC7748" target="http://www.rfc-editor.org/info/rfc7748" quoteTitle="true" derivedAnchor="RFC7748">
          <front>
            <title>Elliptic Curves for Security</title>
            <date year="2016" month="January"/>
          </front>
          <seriesInfo name="RFC">7748</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7748</seriesInfo>
        </reference>
        <reference anchor="RFC8032" target="http://www.rfc-editor.org/info/rfc8032" quoteTitle="true" derivedAnchor="RFC8032">
          <front>
            <title>Edwards-Curve Digital Signature Algorithm (EdDSA)</title>
            <date year="2017" month="January"/>
          </front>
          <seriesInfo name="RFC">8032</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8032</seriesInfo>
        </reference>
        <reference anchor="RFC8174" target="http://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <date year="2017" month="May"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">8174</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8174</seriesInfo>
        </reference>
        <reference anchor="SEC1" target="http://www.secg.org/sec1-v2.pdf" quoteTitle="true" derivedAnchor="SEC1">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <date year="2009" month="May"/>
          </front>
        </reference>
      </references>
      <references pn="section-18.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="CDDL" quoteTitle="true" derivedAnchor="CDDL">
          <front>
            <title>CBOR data definition language (CDDL): a notational convention to express CBOR data structures</title>
            <date year="2017" month="March"/>
          </front>
        </reference>
        <reference anchor="OSCOAP" quoteTitle="true" derivedAnchor="OSCOAP">
          <front>
            <title>Object Security of CoAP (OSCOAP)</title>
            <date year="2017" month="May"/>
          </front>
        </reference>
        <reference anchor="PVSig" quoteTitle="true" derivedAnchor="PVSig">
          <front>
            <title>Formal Security Proofs for a Signature Scheme with Partial Message Recovery</title>
            <date year="2000" month="June"/>
          </front>
          <seriesInfo name="DOI">10.1007/3-540-45353-9_11</seriesInfo>
        </reference>
        <reference anchor="RFC2633" target="http://www.rfc-editor.org/info/rfc2633" quoteTitle="true" derivedAnchor="RFC2633">
          <front>
            <title>S/MIME Version 3 Message Specification</title>
            <date year="1999" month="June"/>
          </front>
          <seriesInfo name="RFC">2633</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2633</seriesInfo>
        </reference>
        <reference anchor="RFC4231" target="http://www.rfc-editor.org/info/rfc4231" quoteTitle="true" derivedAnchor="RFC4231">
          <front>
            <title>Identifiers and Test Vectors for HMAC-SHA- 224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512</title>
            <date year="2005" month="December"/>
          </front>
          <seriesInfo name="RFC">4231</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4231</seriesInfo>
        </reference>
        <reference anchor="RFC4262" target="http://www.rfc-editor.org/info/rfc4262" quoteTitle="true" derivedAnchor="RFC4262">
          <front>
            <title>X.509 Certificate Extension for Secure/ Multipurpose Internet Mail Extensions (S/MIME) Capabilities</title>
            <date year="2005" month="December"/>
          </front>
          <seriesInfo name="RFC">4262</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4262</seriesInfo>
        </reference>
        <reference anchor="RFC4493" target="http://www.rfc-editor.org/info/rfc4493" quoteTitle="true" derivedAnchor="RFC4493">
          <front>
            <title>The AES-CMAC Algorithm</title>
            <date year="2006" month="June"/>
          </front>
          <seriesInfo name="RFC">4493</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4493</seriesInfo>
        </reference>
        <reference anchor="RFC4949" target="http://www.rfc-editor.org/info/rfc4949" quoteTitle="true" derivedAnchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <date year="2007" month="August"/>
          </front>
          <seriesInfo name="RFC">4949</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4949</seriesInfo>
        </reference>
        <reference anchor="RFC5116" target="http://www.rfc-editor.org/info/rfc5116" quoteTitle="true" derivedAnchor="RFC5116">
          <front>
            <title>An Interface and Algorithms for Authenticated Encryption</title>
            <date year="2008" month="January"/>
          </front>
          <seriesInfo name="RFC">5116</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5116</seriesInfo>
        </reference>
        <reference anchor="RFC5480" target="http://www.rfc-editor.org/info/rfc5480" quoteTitle="true" derivedAnchor="RFC5480">
          <front>
            <title>Elliptic Curve Cryptography Subject Public Key Information</title>
            <date year="2009" month="March"/>
          </front>
          <seriesInfo name="RFC">5480</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5480</seriesInfo>
        </reference>
        <reference anchor="RFC5652" target="http://www.rfc-editor.org/info/rfc5652" quoteTitle="true" derivedAnchor="RFC5652">
          <front>
            <title>Cryptographic Message Syntax (CMS)</title>
            <date year="2009" month="September"/>
          </front>
          <seriesInfo name="STD">70</seriesInfo>
          <seriesInfo name="RFC">5652</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5652</seriesInfo>
        </reference>
        <reference anchor="RFC5751" target="http://www.rfc-editor.org/info/rfc5751" quoteTitle="true" derivedAnchor="RFC5751">
          <front>
            <title>Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.2 Message Specification</title>
            <date year="2010" month="January"/>
          </front>
          <seriesInfo name="RFC">5751</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5751</seriesInfo>
        </reference>
        <reference anchor="RFC5752" target="http://www.rfc-editor.org/info/rfc5752" quoteTitle="true" derivedAnchor="RFC5752">
          <front>
            <title>Multiple Signatures in Cryptographic Message Syntax (CMS)</title>
            <date year="2010" month="January"/>
          </front>
          <seriesInfo name="RFC">5752</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5752</seriesInfo>
        </reference>
        <reference anchor="RFC5990" target="http://www.rfc-editor.org/info/rfc5990" quoteTitle="true" derivedAnchor="RFC5990">
          <front>
            <title>Use of the RSA-KEM Key Transport Algorithm in the Cryptographic Message Syntax (CMS)</title>
            <date year="2010" month="September"/>
          </front>
          <seriesInfo name="RFC">5990</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5990</seriesInfo>
        </reference>
        <reference anchor="RFC6151" target="http://www.rfc-editor.org/info/rfc6151" quoteTitle="true" derivedAnchor="RFC6151">
          <front>
            <title>Updated Security Considerations for the MD5 Message-Digest and the HMAC-MD5 Algorithms</title>
            <date year="2011" month="March"/>
          </front>
          <seriesInfo name="RFC">6151</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6151</seriesInfo>
        </reference>
        <reference anchor="RFC6838" target="http://www.rfc-editor.org/info/rfc6838" quoteTitle="true" derivedAnchor="RFC6838">
          <front>
            <title>Media Type Specifications and Registration Procedures</title>
            <date year="2013" month="January"/>
          </front>
          <seriesInfo name="BCP">13</seriesInfo>
          <seriesInfo name="RFC">6838</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6838</seriesInfo>
        </reference>
        <reference anchor="RFC7159" target="http://www.rfc-editor.org/info/rfc7159" quoteTitle="true" derivedAnchor="RFC7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <date year="2014" month="March"/>
          </front>
          <seriesInfo name="RFC">7159</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7159</seriesInfo>
        </reference>
        <reference anchor="RFC7252" target="http://www.rfc-editor.org/info/rfc7252" quoteTitle="true" derivedAnchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <date year="2014" month="June"/>
          </front>
          <seriesInfo name="RFC">7252</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7252</seriesInfo>
        </reference>
        <reference anchor="RFC7515" target="http://www.rfc-editor.org/info/rfc7515" quoteTitle="true" derivedAnchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7515</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7515</seriesInfo>
        </reference>
        <reference anchor="RFC7516" target="http://www.rfc-editor.org/info/rfc7516" quoteTitle="true" derivedAnchor="RFC7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7516</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7516</seriesInfo>
        </reference>
        <reference anchor="RFC7517" target="http://www.rfc-editor.org/info/rfc7517" quoteTitle="true" derivedAnchor="RFC7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7517</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7517</seriesInfo>
        </reference>
        <reference anchor="RFC7518" target="http://www.rfc-editor.org/info/rfc7518" quoteTitle="true" derivedAnchor="RFC7518">
          <front>
            <title>JSON Web Algorithms (JWA)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7518</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7518</seriesInfo>
        </reference>
        <reference anchor="RFC8017" target="http://www.rfc-editor.org/info/rfc8017" quoteTitle="true" derivedAnchor="RFC8017">
          <front>
            <title>PKCS #1: RSA Cryptography Specifications Version 2.2</title>
            <date year="2016" month="November"/>
          </front>
          <seriesInfo name="RFC">8017</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8017</seriesInfo>
        </reference>
        <reference anchor="RFC8018" target="http://www.rfc-editor.org/info/rfc8018" quoteTitle="true" derivedAnchor="RFC8018">
          <front>
            <title>PKCS #5: Password-Based Cryptography Specification Version 2.1</title>
            <date year="2017" month="January"/>
          </front>
          <seriesInfo name="RFC">8018</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8018</seriesInfo>
        </reference>
        <reference anchor="RFC8126" target="http://www.rfc-editor.org/info/rfc8126" quoteTitle="true" derivedAnchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <date year="2017" month="June"/>
          </front>
          <seriesInfo name="BCP">26</seriesInfo>
          <seriesInfo name="RFC">8126</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC8126</seriesInfo>
        </reference>
        <reference anchor="SP800-56A" target="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/ NIST.SP.800-56Ar2.pdf" quoteTitle="true" derivedAnchor="SP800-56A">
          <front>
            <title>Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography</title>
            <date year="2013" month="May"/>
          </front>
          <seriesInfo name="DOI">10.6028/NIST.SP.800-56Ar2</seriesInfo>
        </reference>
        <reference anchor="W3C.WebCrypto" target="https://www.w3.org/TR/WebCryptoAPI/" quoteTitle="true" derivedAnchor="W3C.WebCrypto">
          <front>
            <title>Web Cryptography API</title>
            <date year="2017" month="January"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="guidelines-for-external-data-authentication-of-algorithms" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-guidelines-for-external-data-authentication-of-algorithms">Guidelines for External Data Authentication of Algorithms</name>
      <t indent="0" pn="section-appendix.a-1">A portion of the working group has expressed a strong desire to relax
the rule that the algorithm identifier be required to appear in each
level of a COSE object.  There are two basic reasons that have been
advanced to support this position.  First, the resulting message will
be smaller if the algorithm identifier is omitted from the most
common messages in a CoAP environment.  Second, there is a potential
bug that will arise if full checking is not done correctly between
the different places that an algorithm identifier could be placed
(the message itself, an application statement, the key structure that
the sender possesses, and the key structure the recipient possesses).</t>
      <t indent="0" pn="section-appendix.a-2">This appendix lays out how such a change can be made and the details
that an application needs to specify in order to use this option.
Two different sets of details are specified: those needed to omit an
algorithm identifier and those needed to use a variant on the counter
signature attribute that contains no attributes about itself.</t>
      <section anchor="algorithm-identification" numbered="true" removeInRFC="false" toc="include" pn="section-a.1">
        <name slugifiedName="name-algorithm-identification">Algorithm Identification</name>
        <t indent="0" pn="section-a.1-1">In this section, three sets of recommendations are laid out.  The
first set of recommendations apply to having an implicit algorithm
identified for a single layer of a COSE object.  The second set of
recommendations apply to having multiple implicit algorithms
identified for multiple layers of a COSE object.  The third set of
recommendations apply to having implicit algorithms for multiple COSE
object constructs.</t>
        <t indent="0" pn="section-a.1-2">The key words from RFC 2119 are deliberately not used here.  This
specification can provide recommendations, but it cannot enforce
them.</t>
        <t indent="0" pn="section-a.1-3">This set of recommendations applies to the case where an application
is distributing a fixed algorithm along with the key information for
use in a single COSE object.  This normally applies to the smallest
of the COSE objects, specifically COSE_Sign1, COSE_Mac0, and
COSE_Encrypt0, but could apply to the other structures as well.</t>
        <t indent="0" pn="section-a.1-4">The following items should be taken into account:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-5">
          <li pn="section-a.1-5.1"> Applications need to list the set of COSE structures that implicit
   algorithms are to be used in.  Applications need to require that
   the receipt of an explicit algorithm identifier in one of these
   structures will lead to the message being rejected.  This
   requirement is stated so that there will never be a case where
   there is any ambiguity about the question of which algorithm
   should be used, the implicit or the explicit one.  This applies
   even if the transported algorithm identifier is a protected
   attribute.  This applies even if the transported algorithm is the
   same as the implicit algorithm.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-6">
          <li pn="section-a.1-6.1"> Applications need to define the set of information that is to be
   considered to be part of a context when omitting algorithm
   identifiers.  At a minimum, this would be the key identifier (if
   needed), the key, the algorithm, and the COSE structure it is used
   with.  Applications should restrict the use of a single key to a
   single algorithm.  As noted for some of the algorithms in this
   document, the use of the same key in different related algorithms
   can lead to leakage of information about the key, leakage about
   the data or the ability to perform forgeries.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-7">
          <li pn="section-a.1-7.1"> In many cases, applications that make the algorithm identifier
   implicit will also want to make the context identifier implicit
   for the same reason.  That is, omitting the context identifier
   will decrease the message size (potentially significantly
   depending on the length of the identifier).  Applications that do
   this will need to describe the circumstances where the context
   identifier is to be omitted and how the context identifier is to
   be inferred in these cases.  (An exhaustive search over all of the
   keys would normally not be considered to be acceptable.)  An
   example of how this can be done is to tie the context to a
   transaction identifier.  Both would be sent on the original
   message, but only the transaction identifier would need to be sent
   after that point as the context is tied into the transaction
   identifier.  Another way would be to associate a context with a
   network address.  All messages coming from a single network
   address can be assumed to be associated with a specific context.
   (In this case, the address would normally be distributed as part
   of the context.)</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-8">
          <li pn="section-a.1-8.1"> Applications cannot rely on key identifiers being unique unless
   they take significant efforts to ensure that they are computed in
   such a way as to create this guarantee.  Even when an application
   does this, the uniqueness might be violated if the application is
   run in different contexts (i.e., with a different context
   provider) or if the system combines the security contexts from
   different applications together into a single store.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-9">
          <li pn="section-a.1-9.1"> Applications should continue the practice of protecting the
   algorithm identifier.  Since this is not done by placing it in the
   protected attributes field, applications should define an
   application-specific external data structure that includes this
   value.  This external data field can be used as such for content
   encryption, MAC, and signature algorithms.  It can be used in the
   SuppPrivInfo field for those algorithms that use a KDF to derive a
   key value.  Applications may also want to protect other
   information that is part of the context structure as well.  It
   should be noted that those fields, such as the key or a Base IV,
   are protected by virtue of being used in the cryptographic
   computation and do not need to be included in the external data
   field.</li>
        </ul>
        <t indent="0" pn="section-a.1-10">The second case is having multiple implicit algorithm identifiers
specified for a multiple layer COSE object.  An example of how this
would work is the encryption context that an application specifies,
which contains a content encryption algorithm, a key wrap algorithm,
a key identifier, and a shared secret.  The sender omits sending the
algorithm identifier for both the content layer and the recipient
layer leaving only the key identifier.  The receiver then uses the
key identifier to get the implicit algorithm identifiers.</t>
        <t indent="0" pn="section-a.1-11">The following additional items need to be taken into consideration:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-12">
          <li pn="section-a.1-12.1"> Applications that want to support this will need to define a
   structure that allows for, and clearly identifies, both the COSE
   structure to be used with a given key and the structure and
   algorithm to be used for the secondary layer.  The key for the
   secondary layer is computed as normal from the recipient layer.</li>
        </ul>
        <t indent="0" pn="section-a.1-13">The third case is having multiple implicit algorithm identifiers, but
targeted at potentially unrelated layers or different COSE objects.
There are a number of different scenarios where this might be
applicable.  Some of these scenarios are:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-14">
          <li pn="section-a.1-14.1"> Two contexts are distributed as a pair.  Each of the contexts is
   for use with a COSE_Encrypt message.  Each context will consist of
   distinct secret keys and IVs and potentially even different
   algorithms.  One context is for sending messages from party A to
   party B, and the second context is for sending messages from party
   B to party A.  This means that there is no chance for a reflection
   attack to occur as each party uses different secret keys to send
   its messages; a message that is reflected back to it would fail to
   decrypt.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-15">
          <li pn="section-a.1-15.1"> Two contexts are distributed as a pair.  The first context is used
   for encryption of the message, and the second context is used to
   place a counter signature on the message.  The intention is that
   the second context can be distributed to other entities
   independently of the first context.  This allows these entities to
   validate that the message came from an individual without being
   able to decrypt the message and see the content.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-16">
          <li pn="section-a.1-16.1"> Two contexts are distributed as a pair.  The first context
   contains a key for dealing with MACed messages, and the second
   context contains a key for dealing with encrypted messages.  This
   allows for a unified distribution of keys to participants for
   different types of messages that have different keys, but where
   the keys may be used in a coordinated manner.</li>
        </ul>
        <t indent="0" pn="section-a.1-17">For these cases, the following additional items need to be
considered:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-a.1-18">
          <li pn="section-a.1-18.1"> Applications need to ensure that the multiple contexts stay
   associated.  If one of the contexts is invalidated for any reason,
   all of the contexts associated with it should also be invalidated.</li>
        </ul>
      </section>
      <section anchor="counter-signature-without-headers" numbered="true" removeInRFC="false" toc="include" pn="section-a.2">
        <name slugifiedName="name-counter-signature-without-headers">Counter Signature without Headers</name>
        <t indent="0" pn="section-a.2-1">There is a group of people who want to have a counter signature
parameter that is directly tied to the value being signed, and thus
the authenticated and unauthenticated buckets can be removed from the
message being sent.  The focus on this is an even smaller size, as
all of the information on the process of creating the counter
signature is implicit rather than being explicitly carried in the
message.  This includes not only the algorithm identifier as
presented above, but also items such as the key identification, which
is always external to the signature structure.  This means that the
entities that are doing the validation of the counter signature are
required to infer which key is to be used from context rather than
being explicit.  One way of doing this would be to presume that all
data coming from a specific port (or to a specific URL) is to be
validated by a specific key.  (Note that this does not require that
the key identifier be part of the value signed as it does not serve a
cryptographic purpose.  If the key validates the counter signature,
then it should be presumed that the entity associated with that key
produced the signature.)</t>
        <t indent="0" pn="section-a.2-2">When computing the signature for the bare counter signature header,
the same Sig_structure defined in Section 4.4 is used.  The
sign_protected field is omitted, as there is no protected header
field in this counter signature header.  The value of
&quot;CounterSignature0&quot; is placed in the context field of the
Sig_stucture.</t>
        <t indent="0" pn="section-a.2-3"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Name </td>
<td align="left">Label </td>
<td align="left">Value Type</td>
<td align="left">Value</td>
<td align="left">Description           </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> CounterSignature0  </td>
<td align="left">9  </td>
<td align="left">bstr  </td>
<td align="left">  </td>
<td align="left">Counter signature      with implied signer    and headers           </td>
</tr>
</tbody>
</table>
</t>
        <t indent="0" pn="section-a.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
          Table 27: Header Parameter for CounterSignature0
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="two-layers-of-recipient-information" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-two-layers-of-recipient-information">Two Layers of Recipient Information</name>
      <t indent="0" pn="section-appendix.b-1">All of the currently defined recipient algorithm classes only use two
layers of the COSE_Encrypt structure.  The first layer is the message
content, and the second layer is the content key encryption.
However, if one uses a recipient algorithm such as the RSA Key
Encapsulation Mechanism (RSA-KEM) (see Appendix A of RSA-KEM
<xref target="RFC5990" format="default" sectionFormat="of" derivedContent="RFC5990"/>), then it makes sense to have three layers of the
COSE_Encrypt structure.</t>
      <t indent="0" pn="section-appendix.b-2">These layers would be:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-3">
        <li pn="section-appendix.b-3.1"> Layer 0: The content encryption layer.  This layer contains the
   payload of the message.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-4">
        <li pn="section-appendix.b-4.1"> Layer 1: The encryption of the CEK by a KEK.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-5">
        <li pn="section-appendix.b-5.1"> Layer 2: The encryption of a long random secret using an RSA key
   and a key derivation function to convert that secret into the KEK.</li>
      </ul>
      <t indent="0" pn="section-appendix.b-6">This is an example of what a triple layer message would look like.
The message has the following layers:</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-7">
        <li pn="section-appendix.b-7.1"> Layer 0: Has a content encrypted with AES-GCM using a 128-bit key.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-8">
        <li pn="section-appendix.b-8.1"> Layer 1: Uses the AES Key Wrap algorithm with a 128-bit key.</li>
      </ul>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-appendix.b-9">
        <li pn="section-appendix.b-9.1"> Layer 2: Uses ECDH Ephemeral-Static direct to generate the layer 1
   key.</li>
      </ul>
      <t indent="0" pn="section-appendix.b-10">In effect, this example is a decomposed version of using the
ECDH-ES+A128KW algorithm.</t>
      <t indent="0" pn="section-appendix.b-11">Size of binary file is 183 bytes</t>
      <t indent="0" pn="section-appendix.b-12">96(
  [
    / protected / h'a10101' / {
        \ alg \ 1:1 \ AES-GCM 128 \
      } / ,
    / unprotected / {
      / iv / 5:h'02d1f7e6f26c43d4868d87ce'
    },
    / ciphertext / h'64f84d913ba60a76070a9a48f26e97e863e2852948658f0
811139868826e89218a75715b',
    / recipients / [
      [
        / protected / h'',
        / unprotected / {
          / alg / 1:-3 / A128KW /
        },
        / ciphertext / h'dbd43c4e9d719c27c6275c67d628d493f090593db82
18f11',
        / recipients / [
          [
            / protected / h'a1013818' / {
                \ alg \ 1:-25 \ ECDH-ES + HKDF-256 \
              } / ,
            / unprotected / {
              / ephemeral / -1:{
                / kty / 1:2,
                / crv / -1:1,
                / x / -2:h'b2add44368ea6d641f9ca9af308b4079aeb519f11
e9b8a55a600b21233e86e68',
                / y / -3:false
              },
              / kid / 4:'meriadoc.brandybuck@buckland.example'
            },
            / ciphertext / h''
          ]
        ]
      ]
    ]
  ]
)</t>
    </section>
    <section anchor="examples" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-examples">Examples</name>
      <t indent="0" pn="section-appendix.c-1">This appendix includes a set of examples that show the different
features and message types that have been defined in this document.
To make the examples easier to read, they are presented using the
extended CBOR diagnostic notation (defined in <xref target="CDDL" format="default" sectionFormat="of" derivedContent="CDDL"/>) rather than as
a binary dump.</t>
      <t indent="0" pn="section-appendix.c-2">A GitHub project has been created at &lt;https://github.com/cose-wg/
Examples&gt; that contains not only the examples presented in this
document, but a more complete set of testing examples as well.  Each
example is found in a JSON file that contains the inputs used to
create the example, some of the intermediate values that can be used
in debugging the example and the output of the example presented in
both a hex and a CBOR diagnostic notation format.  Some of the
examples at the site are designed failure testing cases; these are
clearly marked as such in the JSON file.  If errors in the examples
in this document are found, the examples on GitHub will be updated,
and a note to that effect will be placed in the JSON file.</t>
      <t indent="0" pn="section-appendix.c-3">As noted, the examples are presented using the CBOR's diagnostic
notation.  A Ruby-based tool exists that can convert between the
diagnostic notation and binary.  This tool can be installed with the
command line:</t>
      <t indent="0" pn="section-appendix.c-4">gem install cbor-diag</t>
      <t indent="0" pn="section-appendix.c-5">The diagnostic notation can be converted into binary files using the
following command line:</t>
      <t indent="0" pn="section-appendix.c-6">diag2cbor.rb &lt; inputfile &gt; outputfile</t>
      <t indent="0" pn="section-appendix.c-7">The examples can be extracted from the XML version of this document
via an XPath expression as all of the artwork is tagged with the
attribute type='CBORdiag'.  (Depending on the XPath evaluator one is
using, it may be necessary to deal with &amp;gt; as an entity.)</t>
      <t indent="0" pn="section-appendix.c-8">//artwork[@type='CDDL']/text()</t>
      <section anchor="examples-of-signed-messages" numbered="true" removeInRFC="false" toc="include" pn="section-c.1">
        <name slugifiedName="name-examples-of-signed-messages">Examples of Signed Messages</name>
        <section anchor="single-signature" numbered="true" removeInRFC="false" toc="include" pn="section-c.1.1">
          <name slugifiedName="name-single-signature">Single Signature</name>
          <t indent="0" pn="section-c.1.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.1-2">
            <li pn="section-c.1.1-2.1"> Signature Algorithm: ECDSA w/ SHA-256, Curve P-256</li>
          </ul>
          <t indent="0" pn="section-c.1.1-3">Size of binary file is 103 bytes</t>
          <t indent="0" pn="section-c.1.1-4">98(
  [
    / protected / h'',
    / unprotected / {},
    / payload / 'This is the content.',
    / signatures / [
      [
        / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
        / unprotected / {
          / kid / 4:'11'
        },
        / signature / h'e2aeafd40d69d19dfe6e52077c5d7ff4e408282cbefb
5d06cbf414af2e19d982ac45ac98b8544c908b4507de1e90b717c3d34816fe926a2b
98f53afd2fa0f30a'
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="multiple-signers" numbered="true" removeInRFC="false" toc="include" pn="section-c.1.2">
          <name slugifiedName="name-multiple-signers">Multiple Signers</name>
          <t indent="0" pn="section-c.1.2-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.2-2">
            <li pn="section-c.1.2-2.1"> Signature Algorithm: ECDSA w/ SHA-256, Curve P-256</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.2-3">
            <li pn="section-c.1.2-3.1"> Signature Algorithm: ECDSA w/ SHA-512, Curve P-521
Size of binary file is 277 bytes</li>
          </ul>
          <t indent="0" pn="section-c.1.2-4">98(
  [
    / protected / h'',
    / unprotected / {},
    / payload / 'This is the content.',
    / signatures / [
      [
        / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
        / unprotected / {
          / kid / 4:'11'
        },
        / signature / h'e2aeafd40d69d19dfe6e52077c5d7ff4e408282cbefb
5d06cbf414af2e19d982ac45ac98b8544c908b4507de1e90b717c3d34816fe926a2b
98f53afd2fa0f30a'
      ],
      [
        / protected / h'a1013823' / {
            \ alg \ 1:-36
          } / ,
        / unprotected / {
          / kid / 4:'bilbo.baggins@hobbiton.example'
        },
        / signature / h'00a2d28a7c2bdb1587877420f65adf7d0b9a06635dd1
de64bb62974c863f0b160dd2163734034e6ac003b01e8705524c5c4ca479a952f024
7ee8cb0b4fb7397ba08d009e0c8bf482270cc5771aa143966e5a469a09f613488030
c5b07ec6d722e3835adb5b2d8c44e95ffb13877dd2582866883535de3bb03d01753f
83ab87bb4f7a0297'
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="counter-signature" numbered="true" removeInRFC="false" toc="include" pn="section-c.1.3">
          <name slugifiedName="name-counter-signature">Counter Signature</name>
          <t indent="0" pn="section-c.1.3-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.3-2">
            <li pn="section-c.1.3-2.1"> Signature Algorithm: ECDSA w/ SHA-256, Curve P-256</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.3-3">
            <li pn="section-c.1.3-3.1"> The same parameters are used for both the signature and the
   counter signature.</li>
          </ul>
          <t indent="0" pn="section-c.1.3-4">Size of binary file is 180 bytes</t>
          <t indent="0" pn="section-c.1.3-5">98(
  [
    / protected / h'',
    / unprotected / {
      / countersign / 7:[
        / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
        / unprotected / {
          / kid / 4:'11'
        },
        / signature / h'5ac05e289d5d0e1b0a7f048a5d2b643813ded50bc9e4
9220f4f7278f85f19d4a77d655c9d3b51e805a74b099e1e085aacd97fc29d72f887e
8802bb6650cceb2c'
      ]
    },
    / payload / 'This is the content.',
    / signatures / [
      [
        / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
        / unprotected / {
          / kid / 4:'11'
        },
        / signature / h'e2aeafd40d69d19dfe6e52077c5d7ff4e408282cbefb
5d06cbf414af2e19d982ac45ac98b8544c908b4507de1e90b717c3d34816fe926a2b
98f53afd2fa0f30a'
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="signature-with-criticality" numbered="true" removeInRFC="false" toc="include" pn="section-c.1.4">
          <name slugifiedName="name-signature-with-criticality">Signature with Criticality</name>
          <t indent="0" pn="section-c.1.4-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.4-2">
            <li pn="section-c.1.4-2.1"> Signature Algorithm: ECDSA w/ SHA-256, Curve P-256</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.1.4-3">
            <li pn="section-c.1.4-3.1"> There is a criticality marker on the &quot;reserved&quot; header parameter
Size of binary file is 125 bytes</li>
          </ul>
          <t indent="0" pn="section-c.1.4-4">98(
  [
    / protected / h'a2687265736572766564f40281687265736572766564' /
{
        &quot;reserved&quot;:false,
        \ crit \ 2:[
          &quot;reserved&quot;
        ]
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / signatures / [
      [
        / protected / h'a10126' / {
            \ alg \ 1:-7 \ ECDSA 256 \
          } / ,
        / unprotected / {
          / kid / 4:'11'
        },
        / signature / h'3fc54702aa56e1b2cb20284294c9106a63f91bac658d
69351210a031d8fc7c5ff3e4be39445b1a3e83e1510d1aca2f2e8a7c081c7645042b
18aba9d1fad1bd9c'
      ]
    ]
  ]
)</t>
        </section>
      </section>
      <section anchor="single-signer-examples" numbered="true" removeInRFC="false" toc="include" pn="section-c.2">
        <name slugifiedName="name-single-signer-examples">Single Signer Examples</name>
        <section anchor="single-ecdsa-signature" numbered="true" removeInRFC="false" toc="include" pn="section-c.2.1">
          <name slugifiedName="name-single-ecdsa-signature">Single ECDSA Signature</name>
          <t indent="0" pn="section-c.2.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.2.1-2">
            <li pn="section-c.2.1-2.1"> Signature Algorithm: ECDSA w/ SHA-256, Curve P-256
Size of binary file is 98 bytes</li>
          </ul>
          <t indent="0" pn="section-c.2.1-3">18(
  [
    / protected / h'a10126' / {
        \ alg \ 1:-7 \ ECDSA 256 \
      } / ,
    / unprotected / {
      / kid / 4:'11'
    },
    / payload / 'This is the content.',
    / signature / h'8eb33e4ca31d1c465ab05aac34cc6b23d58fef5c083106c4
d25a91aef0b0117e2af9a291aa32e14ab834dc56ed2a223444547e01f11d3b0916e5
a4c345cacb36'
  ]
)</t>
        </section>
      </section>
      <section anchor="examples-of-enveloped-messages" numbered="true" removeInRFC="false" toc="include" pn="section-c.3">
        <name slugifiedName="name-examples-of-enveloped-messages">Examples of Enveloped Messages</name>
        <section anchor="direct-ecdh" numbered="true" removeInRFC="false" toc="include" pn="section-c.3.1">
          <name slugifiedName="name-direct-ecdh">Direct ECDH</name>
          <t indent="0" pn="section-c.3.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.1-2">
            <li pn="section-c.3.1-2.1"> CEK: AES-GCM w/ 128-bit key</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.1-3">
            <li pn="section-c.3.1-3.1"> Recipient class: ECDH Ephemeral-Static, Curve P-256
Size of binary file is 151 bytes</li>
          </ul>
          <t indent="0" pn="section-c.3.1-4">96(
  [
    / protected / h'a10101' / {
        \ alg \ 1:1 \ AES-GCM 128 \
      } / ,
    / unprotected / {
      / iv / 5:h'c9cf4df2fe6c632bf7886413'
    },
    / ciphertext / h'7adbe2709ca818fb415f1e5df66f4e1a51053ba6d65a1a0
c52a357da7a644b8070a151b0',
    / recipients / [
      [
        / protected / h'a1013818' / {
            \ alg \ 1:-25 \ ECDH-ES + HKDF-256 \
          } / ,
        / unprotected / {
          / ephemeral / -1:{
            / kty / 1:2,
            / crv / -1:1,
            / x / -2:h'98f50a4ff6c05861c8860d13a638ea56c3f5ad7590bbf
bf054e1c7b4d91d6280',
            / y / -3:true
          },
          / kid / 4:'meriadoc.brandybuck@buckland.example'
        },
        / ciphertext / h''
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="direct-plus-key-derivation" numbered="true" removeInRFC="false" toc="include" pn="section-c.3.2">
          <name slugifiedName="name-direct-plus-key-derivation">Direct Plus Key Derivation</name>
          <t indent="0" pn="section-c.3.2-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.2-2">
            <li pn="section-c.3.2-2.1"> CEK: AES-CCM w/ 128-bit key, truncate the tag to 64 bits</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.2-3">
            <li pn="section-c.3.2-3.1"> Recipient class: Use HKDF on a shared secret with the following
   implicit fields as part of the context.</li>
          </ul>
          <t indent="0" pn="section-c.3.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  salt: "aabbccddeeffgghh"
]]></artwork>
</t>
          <t indent="0" pn="section-c.3.2-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  PartyU identity: "lighting-client"
]]></artwork>
</t>
          <t indent="0" pn="section-c.3.2-6"><artwork name="" type="" align="left" alt=""><![CDATA[
   *  PartyV identity: "lighting-server"
   *  Supplementary Public Other: "Encryption Example 02"
]]></artwork>
</t>
          <t indent="0" pn="section-c.3.2-7">Size of binary file is 91 bytes</t>
          <t indent="0" pn="section-c.3.2-8">96(
  [
    / protected / h'a1010a' / {
        \ alg \ 1:10 \ AES-CCM-16-64-128 \
      } / ,
    / unprotected / {
      / iv / 5:h'89f52f65a1c580933b5261a76c'
    },
    / ciphertext / h'753548a19b1307084ca7b2056924ed95f2e3b17006dfe93
1b687b847',
    / recipients / [
      [
        / protected / h'a10129' / {
            \ alg \ 1:-10
          } / ,
        / unprotected / {
          / salt / -20:'aabbccddeeffgghh',
          / kid / 4:'our-secret'
        },
        / ciphertext / h''
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="counter-signature-on-encrypted-content" numbered="true" removeInRFC="false" toc="include" pn="section-c.3.3">
          <name slugifiedName="name-counter-signature-on-encrypted-content">Counter Signature on Encrypted Content</name>
          <t indent="0" pn="section-c.3.3-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.3-2">
            <li pn="section-c.3.3-2.1"> CEK: AES-GCM w/ 128-bit key</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.3-3">
            <li pn="section-c.3.3-3.1"> Recipient class: ECDH Ephemeral-Static, Curve P-256
Size of binary file is 326 bytes</li>
          </ul>
          <t indent="0" pn="section-c.3.3-4">96(
  [
    / protected / h'a10101' / {
        \ alg \ 1:1 \ AES-GCM 128 \
      } / ,
    / unprotected / {
      / iv / 5:h'c9cf4df2fe6c632bf7886413',
      / countersign / 7:[
        / protected / h'a1013823' / {
            \ alg \ 1:-36
          } / ,
        / unprotected / {
          / kid / 4:'bilbo.baggins@hobbiton.example'
        },
        / signature / h'00929663c8789bb28177ae28467e66377da12302d7f9
594d2999afa5dfa531294f8896f2b6cdf1740014f4c7f1a358e3a6cf57f4ed6fb02f
cf8f7aa989f5dfd07f0700a3a7d8f3c604ba70fa9411bd10c2591b483e1d2c31de00
3183e434d8fba18f17a4c7e3dfa003ac1cf3d30d44d2533c4989d3ac38c38b71481c
c3430c9d65e7ddff'
      ]
    },
    / ciphertext / h'7adbe2709ca818fb415f1e5df66f4e1a51053ba6d65a1a0
c52a357da7a644b8070a151b0',
    / recipients / [
      [
        / protected / h'a1013818' / {
            \ alg \ 1:-25 \ ECDH-ES + HKDF-256 \
          } / ,
        / unprotected / {
          / ephemeral / -1:{
            / kty / 1:2,
            / crv / -1:1,
            / x / -2:h'98f50a4ff6c05861c8860d13a638ea56c3f5ad7590bbf
bf054e1c7b4d91d6280',
            / y / -3:true
          },
          / kid / 4:'meriadoc.brandybuck@buckland.example'
        },
        / ciphertext / h''
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="encrypted-content-with-external-data" numbered="true" removeInRFC="false" toc="include" pn="section-c.3.4">
          <name slugifiedName="name-encrypted-content-with-external-data">Encrypted Content with External Data</name>
          <t indent="0" pn="section-c.3.4-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.4-2">
            <li pn="section-c.3.4-2.1"> CEK: AES-GCM w/ 128-bit key</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.4-3">
            <li pn="section-c.3.4-3.1"> Recipient class: ECDH static-Static, Curve P-256 with AES Key Wrap</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.3.4-4">
            <li pn="section-c.3.4-4.1"> Externally Supplied AAD: h'0011bbcc22dd44ee55ff660077'</li>
          </ul>
          <t indent="0" pn="section-c.3.4-5">Size of binary file is 173 bytes</t>
          <t indent="0" pn="section-c.3.4-6">96(
  [
    / protected / h'a10101' / {
        \ alg \ 1:1 \ AES-GCM 128 \
      } / ,
    / unprotected / {
      / iv / 5:h'02d1f7e6f26c43d4868d87ce'
    },
    / ciphertext / h'64f84d913ba60a76070a9a48f26e97e863e28529d8f5335
e5f0165eee976b4a5f6c6f09d',
    / recipients / [
      [
        / protected / h'a101381f' / {
            \ alg \ 1:-32 \ ECHD-SS+A128KW \
          } / ,
        / unprotected / {
          / static kid / -3:'peregrin.took@tuckborough.example',
          / kid / 4:'meriadoc.brandybuck@buckland.example',
          / U nonce / -22:h'0101'
        },
        / ciphertext / h'41e0d76f579dbd0d936a662d54d8582037de2e366fd
e1c62'
      ]
    ]
  ]
)</t>
        </section>
      </section>
      <section anchor="examples-of-encrypted-messages" numbered="true" removeInRFC="false" toc="include" pn="section-c.4">
        <name slugifiedName="name-examples-of-encrypted-messages">Examples of Encrypted Messages</name>
        <section anchor="simple-encrypted-message" numbered="true" removeInRFC="false" toc="include" pn="section-c.4.1">
          <name slugifiedName="name-simple-encrypted-message">Simple Encrypted Message</name>
          <t indent="0" pn="section-c.4.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.4.1-2">
            <li pn="section-c.4.1-2.1"> CEK: AES-CCM w/ 128-bit key and a 64-bit tag
Size of binary file is 52 bytes</li>
          </ul>
          <t indent="0" pn="section-c.4.1-3">16(
  [
    / protected / h'a1010a' / {
        \ alg \ 1:10 \ AES-CCM-16-64-128 \
      } / ,
    / unprotected / {
      / iv / 5:h'89f52f65a1c580933b5261a78c'
    },
    / ciphertext / h'5974e1b99a3a4cc09a659aa2e9e7fff161d38ce71cb45ce
460ffb569'
  ]
)</t>
        </section>
        <section anchor="encrypted-message-with-a-partial-iv" numbered="true" removeInRFC="false" toc="include" pn="section-c.4.2">
          <name slugifiedName="name-encrypted-message-with-a-partial-iv">Encrypted Message with a Partial IV</name>
          <t indent="0" pn="section-c.4.2-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.4.2-2">
            <li pn="section-c.4.2-2.1"> CEK: AES-CCM w/ 128-bit key and a 64-bit tag</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.4.2-3">
            <li pn="section-c.4.2-3.1"> Prefix for IV is 89F52F65A1C580933B52</li>
          </ul>
          <t indent="0" pn="section-c.4.2-4">Size of binary file is 41 bytes</t>
          <t indent="0" pn="section-c.4.2-5">16(
  [
    / protected / h'a1010a' / {
        \ alg \ 1:10 \ AES-CCM-16-64-128 \
      } / ,
    / unprotected / {
      / partial iv / 6:h'61a7'
    },
    / ciphertext / h'252a8911d465c125b6764739700f0141ed09192de139e05
3bd09abca'
  ]
)</t>
        </section>
      </section>
      <section anchor="examples-of-maced-messages" numbered="true" removeInRFC="false" toc="include" pn="section-c.5">
        <name slugifiedName="name-examples-of-maced-messages">Examples of MACed Messages</name>
        <section anchor="shared-secret-direct-mac" numbered="true" removeInRFC="false" toc="include" pn="section-c.5.1">
          <name slugifiedName="name-shared-secret-direct-mac">Shared Secret Direct MAC</name>
          <t indent="0" pn="section-c.5.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.1-2">
            <li pn="section-c.5.1-2.1"> MAC: AES-CMAC, 256-bit key, truncated to 64 bits</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.1-3">
            <li pn="section-c.5.1-3.1"> Recipient class: direct shared secret
Size of binary file is 57 bytes</li>
          </ul>
          <t indent="0" pn="section-c.5.1-4">97(
  [
    / protected / h'a1010f' / {
        \ alg \ 1:15 \ AES-CBC-MAC-256//64 \
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / tag / h'9e1226ba1f81b848',
    / recipients / [
      [
        / protected / h'',
        / unprotected / {
          / alg / 1:-6 / direct /,
          / kid / 4:'our-secret'
        },
        / ciphertext / h''
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="ecdh-direct-mac" numbered="true" removeInRFC="false" toc="include" pn="section-c.5.2">
          <name slugifiedName="name-ecdh-direct-mac">ECDH Direct MAC</name>
          <t indent="0" pn="section-c.5.2-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.2-2">
            <li pn="section-c.5.2-2.1"> MAC: HMAC w/SHA-256, 256-bit key</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.2-3">
            <li pn="section-c.5.2-3.1"> Recipient class: ECDH key agreement, two static keys, HKDF w/
   context structure</li>
          </ul>
          <t indent="0" pn="section-c.5.2-4">Size of binary file is 214 bytes</t>
          <t indent="0" pn="section-c.5.2-5">97(
  [
    / protected / h'a10105' / {
        \ alg \ 1:5 \ HMAC 256//256 \
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / tag / h'81a03448acd3d305376eaa11fb3fe416a955be2cbe7ec96f012c99
4bc3f16a41',
    / recipients / [
      [
        / protected / h'a101381a' / {
            \ alg \ 1:-27 \ ECDH-SS + HKDF-256 \
          } / ,
        / unprotected / {
          / static kid / -3:'peregrin.took@tuckborough.example',
          / kid / 4:'meriadoc.brandybuck@buckland.example',
          / U nonce / -22:h'4d8553e7e74f3c6a3a9dd3ef286a8195cbf8a23d
19558ccfec7d34b824f42d92bd06bd2c7f0271f0214e141fb779ae2856abf585a583
68b017e7f2a9e5ce4db5'
        },
        / ciphertext / h''
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="wrapped-mac" numbered="true" removeInRFC="false" toc="include" pn="section-c.5.3">
          <name slugifiedName="name-wrapped-mac">Wrapped MAC</name>
          <t indent="0" pn="section-c.5.3-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.3-2">
            <li pn="section-c.5.3-2.1"> MAC: AES-MAC, 128-bit key, truncated to 64 bits</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.3-3">
            <li pn="section-c.5.3-3.1"> Recipient class: AES Key Wrap w/ a pre-shared 256-bit key
Size of binary file is 109 bytes</li>
          </ul>
          <t indent="0" pn="section-c.5.3-4">97(
  [
    / protected / h'a1010e' / {
        \ alg \ 1:14 \ AES-CBC-MAC-128//64 \
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / tag / h'36f5afaf0bab5d43',
    / recipients / [
      [
        / protected / h'',
        / unprotected / {
          / alg / 1:-5 / A256KW /,
          / kid / 4:'018c0ae5-4d9b-471b-bfd6-eef314bc7037'
        },
        / ciphertext / h'711ab0dc2fc4585dce27effa6781c8093eba906f227
b6eb0'
      ]
    ]
  ]
)</t>
        </section>
        <section anchor="multi-recipient-maced-message" numbered="true" removeInRFC="false" toc="include" pn="section-c.5.4">
          <name slugifiedName="name-multi-recipient-maced-message">Multi-Recipient MACed Message</name>
          <t indent="0" pn="section-c.5.4-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.4-2">
            <li pn="section-c.5.4-2.1"> MAC: HMAC w/ SHA-256, 128-bit key</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.5.4-3">
            <li pn="section-c.5.4-3.1"> Recipient class: Uses three different methods</li>
          </ul>
          <t indent="0" pn="section-c.5.4-4"><artwork name="" type="" align="left" alt=""><![CDATA[
   1.  ECDH Ephemeral-Static, Curve P-521, AES Key Wrap w/ 128-bit
       key
]]></artwork>
</t>
          <t indent="0" pn="section-c.5.4-5"><artwork name="" type="" align="left" alt=""><![CDATA[
   2.  AES Key Wrap w/ 256-bit key
]]></artwork>
</t>
          <t indent="0" pn="section-c.5.4-6">Size of binary file is 309 bytes</t>
          <t indent="0" pn="section-c.5.4-7">97(
  [
    / protected / h'a10105' / {
        \ alg \ 1:5 \ HMAC 256//256 \
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / tag / h'bf48235e809b5c42e995f2b7d5fa13620e7ed834e337f6aa43df16
1e49e9323e',
    / recipients / [
      [
        / protected / h'a101381c' / {
            \ alg \ 1:-29 \ ECHD-ES+A128KW \
          } / ,
        / unprotected / {
          / ephemeral / -1:{
            / kty / 1:2,
            / crv / -1:3,
            / x / -2:h'0043b12669acac3fd27898ffba0bcd2e6c366d53bc4db
71f909a759304acfb5e18cdc7ba0b13ff8c7636271a6924b1ac63c02688075b55ef2
d613574e7dc242f79c3',
            / y / -3:true
          },
          / kid / 4:'bilbo.baggins@hobbiton.example'
        },
        / ciphertext / h'339bc4f79984cdc6b3e6ce5f315a4c7d2b0ac466fce
a69e8c07dfbca5bb1f661bc5f8e0df9e3eff5'
      ],
      [
        / protected / h'',
        / unprotected / {
          / alg / 1:-5 / A256KW /,
          / kid / 4:'018c0ae5-4d9b-471b-bfd6-eef314bc7037'
        },
        / ciphertext / h'0b2c7cfce04e98276342d6476a7723c090dfdd15f9a
518e7736549e998370695e6d6a83b4ae507bb'
      ]
    ]
  ]
)</t>
        </section>
      </section>
      <section anchor="examples-of-mac0-messages" numbered="true" removeInRFC="false" toc="include" pn="section-c.6">
        <name slugifiedName="name-examples-of-mac0-messages">Examples of MAC0 Messages</name>
        <section anchor="shared-secret-direct-mac" numbered="true" removeInRFC="false" toc="include" pn="section-c.6.1">
          <name slugifiedName="name-shared-secret-direct-mac">Shared Secret Direct MAC</name>
          <t indent="0" pn="section-c.6.1-1">This example uses the following:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.6.1-2">
            <li pn="section-c.6.1-2.1"> MAC: AES-CMAC, 256-bit key, truncated to 64 bits</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.6.1-3">
            <li pn="section-c.6.1-3.1"> Recipient class: direct shared secret</li>
          </ul>
          <t indent="0" pn="section-c.6.1-4">Size of binary file is 37 bytes</t>
          <t indent="0" pn="section-c.6.1-5">17(
  [
    / protected / h'a1010f' / {
        \ alg \ 1:15 \ AES-CBC-MAC-256//64 \
      } / ,
    / unprotected / {},
    / payload / 'This is the content.',
    / tag / h'726043745027214f'
  ]
)</t>
          <t indent="0" pn="section-c.6.1-6">Note that this example uses the same inputs as Appendix C.5.1.</t>
        </section>
      </section>
      <section anchor="cose-keys" numbered="true" removeInRFC="false" toc="include" pn="section-c.7">
        <name slugifiedName="name-cose-keys">COSE Keys</name>
        <section anchor="public-keys" numbered="true" removeInRFC="false" toc="include" pn="section-c.7.1">
          <name slugifiedName="name-public-keys">Public Keys</name>
          <t indent="0" pn="section-c.7.1-1">This is an example of a COSE Key Set.  This example includes the
public keys for all of the previous examples.</t>
          <t indent="0" pn="section-c.7.1-2">In order the keys are:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.1-3">
            <li pn="section-c.7.1-3.1"> An EC key with a kid of &quot;meriadoc.brandybuck@buckland.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.1-4">
            <li pn="section-c.7.1-4.1"> An EC key with a kid of &quot;peregrin.took@tuckborough.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.1-5">
            <li pn="section-c.7.1-5.1"> An EC key with a kid of &quot;bilbo.baggins@hobbiton.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.1-6">
            <li pn="section-c.7.1-6.1"> An EC key with a kid of &quot;11&quot;
Size of binary file is 481 bytes</li>
          </ul>
          <t indent="0" pn="section-c.7.1-7">[
  {
    -1:1,
    -2:h'65eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c0
8551d',
    -3:h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd008
4d19c',
    1:2,
    2:'meriadoc.brandybuck@buckland.example'
  },
  {
    -1:1,
    -2:h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f745228255a219a86d6a
09eff',
    -3:h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72ccfed6b6fb6ed28bbf
c117e',
    1:2,
    2:'11'
  },
  {
    -1:3,
    -2:h'0072992cb3ac08ecf3e5c63dedec0d51a8c1f79ef2f82f94f3c737bf5de
7986671eac625fe8257bbd0394644caaa3aaf8f27a4585fbbcad0f2457620085e5c8
f42ad',
    -3:h'01dca6947bce88bc5790485ac97427342bc35f887d86d65a089377e247e
60baa55e4e8501e2ada5724ac51d6909008033ebc10ac999b9d7f5cc2519f3fe1ea1
d9475',
    1:2,
    2:'bilbo.baggins@hobbiton.example'
  },
  {
    -1:1,
    -2:h'98f50a4ff6c05861c8860d13a638ea56c3f5ad7590bbfbf054e1c7b4d91
d6280',
    -3:h'f01400b089867804b8e9fc96c3932161f1934f4223069170d924b7e03bf
822bb',
    1:2,
    2:'peregrin.took@tuckborough.example'
  }
]</t>
        </section>
        <section anchor="private-keys" numbered="true" removeInRFC="false" toc="include" pn="section-c.7.2">
          <name slugifiedName="name-private-keys">Private Keys</name>
          <t indent="0" pn="section-c.7.2-1">This is an example of a COSE Key Set.  This example includes the
private keys for all of the previous examples.</t>
          <t indent="0" pn="section-c.7.2-2">In order the keys are:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-3">
            <li pn="section-c.7.2-3.1"> An EC key with a kid of &quot;meriadoc.brandybuck@buckland.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-4">
            <li pn="section-c.7.2-4.1"> A shared-secret key with a kid of &quot;our-secret&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-5">
            <li pn="section-c.7.2-5.1"> An EC key with a kid of &quot;peregrin.took@tuckborough.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-6">
            <li pn="section-c.7.2-6.1"> A shared-secret key with a kid of &quot;018c0ae5-4d9b-471b-
   bfd6-eef314bc7037&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-7">
            <li pn="section-c.7.2-7.1"> An EC key with a kid of &quot;bilbo.baggins@hobbiton.example&quot;</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-c.7.2-8">
            <li pn="section-c.7.2-8.1"> An EC key with a kid of &quot;11&quot;</li>
          </ul>
          <t indent="0" pn="section-c.7.2-9">Size of binary file is 816 bytes</t>
          <t indent="0" pn="section-c.7.2-10">[
  {
    1:2,
    2:'meriadoc.brandybuck@buckland.example',
    -1:1,
    -2:h'65eda5a12577c2bae829437fe338701a10aaa375e1bb5b5de108de439c0
8551d',
    -3:h'1e52ed75701163f7f9e40ddf9f341b3dc9ba860af7e0ca7ca7e9eecd008
4d19c',
    -4:h'aff907c99f9ad3aae6c4cdf21122bce2bd68b5283e6907154ad911840fa
208cf'
  },
  {
    1:2,
    2:'11',
    -1:1,
    -2:h'bac5b11cad8f99f9c72b05cf4b9e26d244dc189f745228255a219a86d6a
09eff',
    -3:h'20138bf82dc1b6d562be0fa54ab7804a3a64b6d72ccfed6b6fb6ed28bbf
c117e',
    -4:h'57c92077664146e876760c9520d054aa93c3afb04e306705db609030850
7b4d3'
  },
  {
    1:2,
    2:'bilbo.baggins@hobbiton.example',
    -1:3,
    -2:h'0072992cb3ac08ecf3e5c63dedec0d51a8c1f79ef2f82f94f3c737bf5de
7986671eac625fe8257bbd0394644caaa3aaf8f27a4585fbbcad0f2457620085e5c8
f42ad',
    -3:h'01dca6947bce88bc5790485ac97427342bc35f887d86d65a089377e247e
60baa55e4e8501e2ada5724ac51d6909008033ebc10ac999b9d7f5cc2519f3fe1ea1
d9475',
    -4:h'00085138ddabf5ca975f5860f91a08e91d6d5f9a76ad4018766a476680b
55cd339e8ab6c72b5facdb2a2a50ac25bd086647dd3e2e6e99e84ca2c3609fdf177f
eb26d'
  },
  {
    1:4,
    2:'our-secret',
    -1:h'849b57219dae48de646d07dbb533566e976686457c1491be3a76dcea6c4
27188'
  },
  {
    1:2,
    -1:1,
    2:'peregrin.took@tuckborough.example',
    -2:h'98f50a4ff6c05861c8860d13a638ea56c3f5ad7590bbfbf054e1c7b4d91
d6280',
    -3:h'f01400b089867804b8e9fc96c3932161f1934f4223069170d924b7e03bf
822bb',
    -4:h'02d1f7e6f26c43d4868d87ceb2353161740aacf1f7163647984b522a848
df1c3'
  },
  {
    1:4,
    2:'our-secret2',
    -1:h'849b5786457c1491be3a76dcea6c4271'
  },
  {
    1:4,
    2:'018c0ae5-4d9b-471b-bfd6-eef314bc7037',
    -1:h'849b57219dae48de646d07dbb533566e976686457c1491be3a76dcea6c4
27188'
  }
]
Acknowledgments</t>
          <t indent="0" pn="section-c.7.2-11">This document is a product of the COSE working group of the IETF.</t>
          <t indent="0" pn="section-c.7.2-12">The following individuals are to blame for getting me started on this
project in the first place: Richard Barnes, Matt Miller, and Martin
Thomson.</t>
          <t indent="0" pn="section-c.7.2-13">The initial version of the specification was based to some degree on
the outputs of the JOSE and S/MIME working groups.</t>
          <t indent="0" pn="section-c.7.2-14">The following individuals provided input into the final form of the
document: Carsten Bormann, John Bradley, Brain Campbell, Michael B.
Jones, Ilari Liusvaara, Francesca Palombini, Ludwig Seitz, and Goran
Selander.</t>
        </section>
      </section>
    </section>
  </back>
</rfc>
