<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-jose-json-web-signature-41" indexInclude="true" number="7515" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-jose-json-web-signature-41" rel="prev"/>
<link href="https://dx.doi.org/10.17487/rfc7515" rel="alternate"/>
  <front>
    <title>JSON Web Signature (JWS)</title>
    <seriesInfo name="RFC" value="7515" stream="IETF"/>
    <date year="2015" month="May"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">JSON Web Signature (JWS) represents content secured with digital
signatures or Message Authentication Codes (MACs) using JSON-based
data structures.  Cryptographic algorithms and identifiers for use
with this specification are described in the separate JSON Web
Algorithms (JWA) specification and an IANA registry defined by that
specification.  Related encryption capabilities are described in the
separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1.1">This is an Internet Standards Track document.</t>
        <t indent="0" pn="section-boilerplate.1.2">This document is a product of the Internet Engineering Task Force
(IETF).  It represents the consensus of the IETF community.  It has
received public review and has been approved for publication by the
Internet Engineering Steering Group (IESG).  Further information on
Internet Standards is available in Section 2 of RFC 5741.</t>
        <t indent="0" pn="section-boilerplate.1.3">Information about the current status of this document, any errata,
and how to provide feedback on it may be obtained at
http://www.rfc-editor.org/info/rfc7515.</t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">Copyright (c) 2015 IETF Trust and the persons identified as the
document authors.  All rights reserved.</t>
        <t indent="0" pn="section-boilerplate.2-2">This document is subject to BCP 78 and the IETF Trust's Legal
Provisions Relating to IETF Documents
(http://trustee.ietf.org/license-info) in effect on the date of
publication of this document.  Please review these documents
carefully, as they describe your rights and restrictions with respect
to this document.  Code Components extracted from this document must
include Simplified BSD License text as described in Section 4.e of
the Trust Legal Provisions and are provided without warranty as
described in the Simplified BSD License.</t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
            <li pn="section-toc.1-1.1.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">Notational Conventions</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-web-signature-(jws)-overview">JSON Web Signature (JWS) Overview</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
            <li pn="section-toc.1-1.3.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-compact-serialization-overview">JWS Compact Serialization Overview</xref></t>
            </li>
            <li pn="section-toc.1-1.3.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-json-serialization-overview">JWS JSON Serialization Overview</xref></t>
            </li>
            <li pn="section-toc.1-1.3.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws">Example JWS</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jose-header">JOSE Header</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
            <li pn="section-toc.1-1.4.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registered-header-parameter-names">Registered Header Parameter Names</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.1.2">
              <li pn="section-toc.1-1.4.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;alg&quot;-(algorithm)-header-parameter">&quot;alg&quot; (Algorithm) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;jku&quot;-(jwk-set-url)-header-parameter">&quot;jku&quot; (JWK Set URL) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;jwk&quot;-(json-web-key)-header-parameter">&quot;jwk&quot; (JSON Web Key) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.4.1"><xref derivedContent="4.1.4" format="counter" sectionFormat="of" target="section-4.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;kid&quot;-(key-id)-header-parameter">&quot;kid&quot; (Key ID) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.5">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.5.1"><xref derivedContent="4.1.5" format="counter" sectionFormat="of" target="section-4.1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5u&quot;-(x.509-url)-header-parameter">&quot;x5u&quot; (X.509 URL) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.6">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.6.1"><xref derivedContent="4.1.6" format="counter" sectionFormat="of" target="section-4.1.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter">&quot;x5c&quot; (X.509 Certificate Chain) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.7">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.7.1"><xref derivedContent="4.1.7" format="counter" sectionFormat="of" target="section-4.1.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter">&quot;x5t&quot; (X.509 Certificate SHA-1 Thumbprint) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.8">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.8.1"><xref derivedContent="4.1.8" format="counter" sectionFormat="of" target="section-4.1.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header">&quot;x5t#S256&quot; (X.509 Certificate SHA-256 Thumbprint) Header</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.9">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.9.1"><xref derivedContent="4.1.9" format="counter" sectionFormat="of" target="section-4.1.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;typ&quot;-(type)-header-parameter">&quot;typ&quot; (Type) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.10">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.10.1"><xref derivedContent="4.1.10" format="counter" sectionFormat="of" target="section-4.1.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;cty&quot;-(content-type)-header-parameter">&quot;cty&quot; (Content Type) Header Parameter</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.11">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.11.1"><xref derivedContent="4.1.11" format="counter" sectionFormat="of" target="section-4.1.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;crit&quot;-(critical)-header-parameter">&quot;crit&quot; (Critical) Header Parameter</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.4.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-public-header-parameter-names">Public Header Parameter Names</xref></t>
            </li>
            <li pn="section-toc.1-1.4.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-private-header-parameter-names">Private Header Parameter Names</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-producing-and-consuming-jwss">Producing and Consuming JWSs</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
            <li pn="section-toc.1-1.5.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-signature-or-mac-computation">Message Signature or MAC Computation</xref></t>
            </li>
            <li pn="section-toc.1-1.5.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-signature-or-mac-validation">Message Signature or MAC Validation</xref></t>
            </li>
            <li pn="section-toc.1-1.5.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-string-comparison-rules">String Comparison Rules</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-identification">Key Identification</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializations">Serializations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
            <li pn="section-toc.1-1.7.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-compact-serialization">JWS Compact Serialization</xref></t>
            </li>
            <li pn="section-toc.1-1.7.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-json-serialization">JWS JSON Serialization</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.2.1" format="counter" sectionFormat="of" target="section-7.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-general-jws-json-serialization-syntax">General JWS JSON Serialization Syntax</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2.2" format="counter" sectionFormat="of" target="section-7.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flattened-jws-json-serialization-syntax">Flattened JWS JSON Serialization Syntax</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tls-requirements">TLS Requirements</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
            <li pn="section-toc.1-1.9.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-web-signature-and-encryption-header-parameters-registry">JSON Web Signature and Encryption Header Parameters Registry</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.1.2">
              <li pn="section-toc.1-1.9.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1.1"><xref derivedContent="9.1.1" format="counter" sectionFormat="of" target="section-9.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registration-template">Registration Template</xref></t>
              </li>
              <li pn="section-toc.1-1.9.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.2.1"><xref derivedContent="9.1.2" format="counter" sectionFormat="of" target="section-9.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-initial-registry-contents">Initial Registry Contents</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.9.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-media-type-registration">Media Type Registration</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.2.1" format="counter" sectionFormat="of" target="section-9.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registry-contents">Registry Contents</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
            <li pn="section-toc.1-1.10.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-entropy-and-random-values">Key Entropy and Random Values</xref></t>
            </li>
            <li pn="section-toc.1-1.10.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-protection">Key Protection</xref></t>
            </li>
            <li pn="section-toc.1-1.10.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.3.1"><xref derivedContent="10.3" format="counter" sectionFormat="of" target="section-10.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-origin-authentication">Key Origin Authentication</xref></t>
            </li>
            <li pn="section-toc.1-1.10.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.4.1"><xref derivedContent="10.4" format="counter" sectionFormat="of" target="section-10.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cryptographic-agility">Cryptographic Agility</xref></t>
            </li>
            <li pn="section-toc.1-1.10.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.5.1"><xref derivedContent="10.5" format="counter" sectionFormat="of" target="section-10.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-differences-between-digital-signatures-and-macs">Differences between Digital Signatures and MACs</xref></t>
            </li>
            <li pn="section-toc.1-1.10.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.6.1"><xref derivedContent="10.6" format="counter" sectionFormat="of" target="section-10.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-algorithm-validation">Algorithm Validation</xref></t>
            </li>
            <li pn="section-toc.1-1.10.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.7.1"><xref derivedContent="10.7" format="counter" sectionFormat="of" target="section-10.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-algorithm-protection">Algorithm Protection</xref></t>
            </li>
            <li pn="section-toc.1-1.10.8">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.8.1"><xref derivedContent="10.8" format="counter" sectionFormat="of" target="section-10.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-chosen-plaintext-attacks">Chosen Plaintext Attacks</xref></t>
            </li>
            <li pn="section-toc.1-1.10.9">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.9.1"><xref derivedContent="10.9" format="counter" sectionFormat="of" target="section-10.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-timing-attacks">Timing Attacks</xref></t>
            </li>
            <li pn="section-toc.1-1.10.10">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.10.1"><xref derivedContent="10.10" format="counter" sectionFormat="of" target="section-10.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-replay-protection">Replay Protection</xref></t>
            </li>
            <li pn="section-toc.1-1.10.11">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.11.1"><xref derivedContent="10.11" format="counter" sectionFormat="of" target="section-10.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sha-1-certificate-thumbprints">SHA-1 Certificate Thumbprints</xref></t>
            </li>
            <li pn="section-toc.1-1.10.12">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.12.1"><xref derivedContent="10.12" format="counter" sectionFormat="of" target="section-10.12"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-security-considerations">JSON Security Considerations</xref></t>
            </li>
            <li pn="section-toc.1-1.10.13">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.13.1"><xref derivedContent="10.13" format="counter" sectionFormat="of" target="section-10.13"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unicode-comparison-security-considerations">Unicode Comparison Security Considerations</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
            <li pn="section-toc.1-1.11.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
            </li>
            <li pn="section-toc.1-1.11.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.A">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1"><xref derivedContent="A" format="counter" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-examples">JWS Examples</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.2">
            <li pn="section-toc.1-1.A.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-hmac-sha-256">Example JWS Using HMAC SHA-256</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.1.2">
              <li pn="section-toc.1-1.A.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.1.1"><xref derivedContent="A.1.1" format="counter" sectionFormat="of" target="section-a.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.2.1"><xref derivedContent="A.1.2" format="counter" sectionFormat="of" target="section-a.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-rsassa-pkcs1-v1_5-sha-256">Example JWS Using RSASSA-PKCS1-v1_5 SHA-256</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.2.2">
              <li pn="section-toc.1-1.A.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.1.1"><xref derivedContent="A.2.1" format="counter" sectionFormat="of" target="section-a.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.2.1"><xref derivedContent="A.2.2" format="counter" sectionFormat="of" target="section-a.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.1"><xref derivedContent="A.3" format="counter" sectionFormat="of" target="section-a.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-ecdsa-p-256-sha-256">Example JWS Using ECDSA P-256 SHA-256</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.3.2">
              <li pn="section-toc.1-1.A.3.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.1.1"><xref derivedContent="A.3.1" format="counter" sectionFormat="of" target="section-a.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.3.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.2.1"><xref derivedContent="A.3.2" format="counter" sectionFormat="of" target="section-a.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.1"><xref derivedContent="A.4" format="counter" sectionFormat="of" target="section-a.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-ecdsa-p-521-sha-512">Example JWS Using ECDSA P-521 SHA-512</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.4.2">
              <li pn="section-toc.1-1.A.4.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.1.1"><xref derivedContent="A.4.1" format="counter" sectionFormat="of" target="section-a.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.4.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.2.1"><xref derivedContent="A.4.2" format="counter" sectionFormat="of" target="section-a.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.5.1"><xref derivedContent="A.5" format="counter" sectionFormat="of" target="section-a.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-unsecured-jws">Example Unsecured JWS</xref></t>
            </li>
            <li pn="section-toc.1-1.A.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.1"><xref derivedContent="A.6" format="counter" sectionFormat="of" target="section-a.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-general-jws-json-serialization">Example JWS Using General JWS JSON Serialization</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.6.2">
              <li pn="section-toc.1-1.A.6.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.1.1"><xref derivedContent="A.6.1" format="counter" sectionFormat="of" target="section-a.6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-per-signature-protected-headers">JWS Per-Signature Protected Headers</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.2.1"><xref derivedContent="A.6.2" format="counter" sectionFormat="of" target="section-a.6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-per-signature-unprotected-headers">JWS Per-Signature Unprotected Headers</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.3.1"><xref derivedContent="A.6.3" format="counter" sectionFormat="of" target="section-a.6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-complete-jose-header-values">Complete JOSE Header Values</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.4.1"><xref derivedContent="A.6.4" format="counter" sectionFormat="of" target="section-a.6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-complete-jws-json-serialization-representation">Complete JWS JSON Serialization Representation</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.7.1"><xref derivedContent="A.7" format="counter" sectionFormat="of" target="section-a.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-flattened-jws-json-serialization">Example JWS Using Flattened JWS JSON Serialization</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.B">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.B.1"><xref derivedContent="B" format="counter" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5c&quot;-(x.509-certificate-chain)-example">&quot;x5c&quot; (X.509 Certificate Chain) Example</xref></t>
          </li>
          <li pn="section-toc.1-1.C">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1"><xref derivedContent="C" format="counter" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notes-on-implementing-base64url-encoding-without-padding">Notes on Implementing base64url Encoding without Padding</xref></t>
          </li>
          <li pn="section-toc.1-1.D">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.D.1"><xref derivedContent="D" format="counter" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notes-on-key-selection">Notes on Key Selection</xref></t>
          </li>
          <li pn="section-toc.1-1.E">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.E.1"><xref derivedContent="E" format="counter" sectionFormat="of" target="section-appendix.e"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-negative-test-case-for-&quot;crit&quot;-header-parameter">Negative Test Case for &quot;crit&quot; Header Parameter</xref></t>
          </li>
          <li pn="section-toc.1-1.F">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.F.1"><xref derivedContent="F" format="counter" sectionFormat="of" target="section-appendix.f"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-detached-content">Detached Content</xref></t>
          </li>
          <li pn="section-toc.1-1.g">
            <t indent="0" pn="section-toc.1-1.g.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.g"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
      </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">JSON Web Signature (JWS) represents content secured with digital
signatures or Message Authentication Codes (MACs) using JSON-based
<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/> data structures.  The JWS cryptographic mechanisms provide
integrity protection for an arbitrary sequence of octets.  See
Section 10.5 for a discussion on the differences between digital
signatures and MACs.</t>
      <t indent="0" pn="section-1-2">Two closely related serializations for JWSs are defined.  The JWS
Compact Serialization is a compact, URL-safe representation intended
for space-constrained environments such as HTTP Authorization headers
and URI query parameters.  The JWS JSON Serialization represents JWSs
as JSON objects and enables multiple signatures and/or MACs to be
applied to the same content.  Both share the same cryptographic
underpinnings.</t>
      <t indent="0" pn="section-1-3">Cryptographic algorithms and identifiers for use with this
specification are described in the separate JSON Web Algorithms (JWA)
<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> specification and an IANA registry defined by that
specification.  Related encryption capabilities are described in the
separate JSON Web Encryption (JWE) <xref target="JWE" format="default" sectionFormat="of" derivedContent="JWE"/> specification.</t>
      <t indent="0" pn="section-1-4">Names defined by this specification are short because a core goal is
for the resulting representations to be compact.</t>
      <section anchor="notational-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-notational-conventions">Notational Conventions</name>
        <t indent="0" pn="section-1.1-1">The key words &quot;<bcp14>MUST</bcp14>&quot;, &quot;<bcp14>MUST NOT</bcp14>&quot;, &quot;<bcp14>REQUIRED</bcp14>&quot;, &quot;<bcp14>SHALL</bcp14>&quot;, &quot;<bcp14>SHALL NOT</bcp14>&quot;,
&quot;<bcp14>SHOULD</bcp14>&quot;, &quot;<bcp14>SHOULD NOT</bcp14>&quot;, &quot;<bcp14>RECOMMENDED</bcp14>&quot;, &quot;<bcp14>NOT RECOMMENDED</bcp14>&quot;, &quot;<bcp14>MAY</bcp14>&quot;, and
&quot;<bcp14>OPTIONAL</bcp14>&quot; in this document are to be interpreted as described in
&quot;Key words for use in RFCs to Indicate Requirement Levels&quot; <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>.
The interpretation should only be applied when the terms appear in
all capital letters.</t>
        <t indent="0" pn="section-1.1-2">BASE64URL(OCTETS) denotes the base64url encoding of OCTETS, per
Section 2.</t>
        <t indent="0" pn="section-1.1-3">UTF8(STRING) denotes the octets of the UTF-8 <xref target="RFC3629" format="default" sectionFormat="of" derivedContent="RFC3629"/> representation
of STRING, where STRING is a sequence of zero or more Unicode
<xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/> characters.</t>
        <t indent="0" pn="section-1.1-4">ASCII(STRING) denotes the octets of the ASCII <xref target="RFC20" format="default" sectionFormat="of" derivedContent="RFC20"/> representation
of STRING, where STRING is a sequence of zero or more ASCII
characters.</t>
        <t indent="0" pn="section-1.1-5">The concatenation of two values A and B is denoted as A || B.</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t indent="0" pn="section-2-1">These terms are defined by this specification:</t>
      <t indent="0" pn="section-2-2">JSON Web Signature (JWS)
   A data structure representing a digitally signed or MACed message.</t>
      <t indent="0" pn="section-2-3">JOSE Header
   JSON object containing the parameters describing the cryptographic
   operations and parameters employed.  The JOSE (JSON Object Signing
   and Encryption) Header is comprised of a set of Header Parameters.</t>
      <t indent="0" pn="section-2-4">JWS Payload
   The sequence of octets to be secured -- a.k.a. the message.  The
   payload can contain an arbitrary sequence of octets.</t>
      <t indent="0" pn="section-2-5">JWS Signature
   Digital signature or MAC over the JWS Protected Header and the JWS
   Payload.</t>
      <t indent="0" pn="section-2-6">Header Parameter
   A name/value pair that is member of the JOSE Header.</t>
      <t indent="0" pn="section-2-7">JWS Protected Header
   JSON object that contains the Header Parameters that are integrity
   protected by the JWS Signature digital signature or MAC operation.
   For the JWS Compact Serialization, this comprises the entire JOSE
   Header.  For the JWS JSON Serialization, this is one component of
   the JOSE Header.</t>
      <t indent="0" pn="section-2-8">JWS Unprotected Header
   JSON object that contains the Header Parameters that are not
   integrity protected.  This can only be present when using the JWS
   JSON Serialization.</t>
      <t indent="0" pn="section-2-9">Base64url Encoding
   Base64 encoding using the URL- and filename-safe character set
   defined in Section 5 of RFC 4648 <xref target="RFC4648" format="default" sectionFormat="of" derivedContent="RFC4648"/>, with all trailing '='
   characters omitted (as permitted by Section 3.2) and without the
   inclusion of any line breaks, whitespace, or other additional
   characters.  Note that the base64url encoding of the empty octet
   sequence is the empty string.  (See Appendix C for notes on
   implementing base64url encoding without padding.)</t>
      <t indent="0" pn="section-2-10">JWS Signing Input
   The input to the digital signature or MAC computation.  Its value
   is ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||
   BASE64URL(JWS Payload)).</t>
      <t indent="0" pn="section-2-11">JWS Compact Serialization
   A representation of the JWS as a compact, URL-safe string.</t>
      <t indent="0" pn="section-2-12">JWS JSON Serialization
   A representation of the JWS as a JSON object.  Unlike the JWS
   Compact Serialization, the JWS JSON Serialization enables multiple
   digital signatures and/or MACs to be applied to the same content.
   This representation is neither optimized for compactness nor URL-
   safe.</t>
      <t indent="0" pn="section-2-13">Unsecured JWS
   A JWS that provides no integrity protection.  Unsecured JWSs use
   the &quot;alg&quot; value &quot;none&quot;.</t>
      <t indent="0" pn="section-2-14">Collision-Resistant Name
   A name in a namespace that enables names to be allocated in a
   manner such that they are highly unlikely to collide with other
   names.  Examples of collision-resistant namespaces include: Domain
   Names, Object Identifiers (OIDs) as defined in the ITU-T X.660 and
   X.670 Recommendation series, and Universally Unique IDentifiers
   (UUIDs) <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>.  When using an administratively delegated
   namespace, the definer of a name needs to take reasonable
   precautions to ensure they are in control of the portion of the
   namespace they use to define the name.</t>
      <t indent="0" pn="section-2-15">StringOrURI
   A JSON string value, with the additional requirement that while
   arbitrary string values <bcp14>MAY</bcp14> be used, any value containing a &quot;:&quot;
   character <bcp14>MUST</bcp14> be a URI <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/>.  StringOrURI values are
   compared as case-sensitive strings with no transformations or
   canonicalizations applied.</t>
      <t indent="0" pn="section-2-16">The terms &quot;JSON Web Encryption (JWE)&quot;, &quot;JWE Compact Serialization&quot;,
and &quot;JWE JSON Serialization&quot; are defined by the JWE specification
<xref target="JWE" format="default" sectionFormat="of" derivedContent="JWE"/>.</t>
      <t indent="0" pn="section-2-17">The terms &quot;Digital Signature&quot; and &quot;Message Authentication Code (MAC)&quot;
are defined by the &quot;Internet Security Glossary, Version 2&quot; <xref target="RFC4949" format="default" sectionFormat="of" derivedContent="RFC4949"/>.</t>
    </section>
    <section anchor="json-web-signature-(jws)-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-json-web-signature-(jws)-overview">JSON Web Signature (JWS) Overview</name>
      <t indent="0" pn="section-3-1">JWS represents digitally signed or MACed content using JSON data
structures and base64url encoding.  These JSON data structures <bcp14>MAY</bcp14>
contain whitespace and/or line breaks before or after any JSON values
or structural characters, in accordance with Section 2 of RFC 7159
<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>.  A JWS represents these logical values (each of which is
defined in Section 2):</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3-2">
        <li pn="section-3-2.1"> JOSE Header</li>
        <li pn="section-3-2.2"> JWS Payload</li>
        <li pn="section-3-2.3"> JWS Signature</li>
      </ul>
      <t indent="0" pn="section-3-3">For a JWS, the JOSE Header members are the union of the members of
these values (each of which is defined in Section 2):</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3-4">
        <li pn="section-3-4.1"> JWS Protected Header</li>
        <li pn="section-3-4.2"> JWS Unprotected Header</li>
      </ul>
      <t indent="0" pn="section-3-5">This document defines two serializations for JWSs: a compact, URL-
safe serialization called the JWS Compact Serialization and a JSON
serialization called the JWS JSON Serialization.  In both
serializations, the JWS Protected Header, JWS Payload, and JWS
Signature are base64url encoded, since JSON lacks a way to directly
represent arbitrary octet sequences.</t>
      <section anchor="jws-compact-serialization-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-jws-compact-serialization-overview">JWS Compact Serialization Overview</name>
        <t indent="0" pn="section-3.1-1">In the JWS Compact Serialization, no JWS Unprotected Header is used.
In this case, the JOSE Header and the JWS Protected Header are the
same.</t>
        <t indent="0" pn="section-3.1-2">In the JWS Compact Serialization, a JWS is represented as the
concatenation:</t>
        <t indent="0" pn="section-3.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   BASE64URL(UTF8(JWS Protected Header)) || '.' ||
   BASE64URL(JWS Payload) || '.' ||
   BASE64URL(JWS Signature)
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-4">See Section 7.1 for more information about the JWS Compact
Serialization.</t>
      </section>
      <section anchor="jws-json-serialization-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-jws-json-serialization-overview">JWS JSON Serialization Overview</name>
        <t indent="0" pn="section-3.2-1">In the JWS JSON Serialization, one or both of the JWS Protected
Header and JWS Unprotected Header <bcp14>MUST</bcp14> be present.  In this case, the
members of the JOSE Header are the union of the members of the JWS
Protected Header and the JWS Unprotected Header values that are
present.</t>
        <t indent="0" pn="section-3.2-2">In the JWS JSON Serialization, a JWS is represented as a JSON object
containing some or all of these four members:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.2-3">
          <li pn="section-3.2-3.1"> &quot;protected&quot;, with the value BASE64URL(UTF8(JWS Protected Header))</li>
          <li pn="section-3.2-3.2"> &quot;header&quot;, with the value JWS Unprotected Header</li>
          <li pn="section-3.2-3.3"> &quot;payload&quot;, with the value BASE64URL(JWS Payload)</li>
          <li pn="section-3.2-3.4"> &quot;signature&quot;, with the value BASE64URL(JWS Signature)</li>
        </ul>
        <t indent="0" pn="section-3.2-4">The three base64url-encoded result strings and the JWS Unprotected
Header value are represented as members within a JSON object.  The
inclusion of some of these values is <bcp14>OPTIONAL</bcp14>.  The JWS JSON
Serialization can also represent multiple signature and/or MAC
values, rather than just one.  See Section 7.2 for more information
about the JWS JSON Serialization.</t>
      </section>
      <section anchor="example-jws" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-example-jws">Example JWS</name>
        <t indent="0" pn="section-3.3-1">This section provides an example of a JWS.  Its computation is
described in more detail in Appendix A.1, including specifying the
exact octet sequences representing the JSON values used and the key
value used.</t>
        <t indent="0" pn="section-3.3-2">The following example JWS Protected Header declares that the encoded
object is a JSON Web Token <xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/> and the JWS Protected Header and the
JWS Payload are secured using the HMAC SHA-256 <xref target="RFC2104" format="default" sectionFormat="of" derivedContent="RFC2104"/> <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/>
algorithm:</t>
        <t indent="0" pn="section-3.3-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"typ":"JWT",
   "alg":"HS256"}
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-4">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
        <t indent="0" pn="section-3.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-6">The UTF-8 representation of the following JSON object is used as the
JWS Payload.  (Note that the payload can be any content and need not
be a representation of a JSON object.)</t>
        <t indent="0" pn="section-3.3-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-8">Encoding this JWS Payload as BASE64URL(JWS Payload) gives this value
(with line breaks for display purposes only):</t>
        <t indent="0" pn="section-3.3-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-10">Computing the HMAC of the JWS Signing Input ASCII(BASE64URL(UTF8(JWS
Protected Header)) || '.' || BASE64URL(JWS Payload)) with the HMAC
SHA-256 algorithm using the key specified in Appendix A.1 and
base64url-encoding the result yields this BASE64URL(JWS Signature)
value:</t>
        <t indent="0" pn="section-3.3-11"><artwork name="" type="" align="left" alt=""><![CDATA[
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-12">Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):</t>
        <t indent="0" pn="section-3.3-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-14">See Appendix A for additional examples, including examples using the
JWS JSON Serialization in Sections A.6 and A.7.</t>
      </section>
    </section>
    <section anchor="jose-header" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-jose-header">JOSE Header</name>
      <t indent="0" pn="section-4-1">For a JWS, the members of the JSON object(s) representing the JOSE
Header describe the digital signature or MAC applied to the JWS
Protected Header and the JWS Payload and optionally additional
properties of the JWS.  The Header Parameter names within the JOSE
Header <bcp14>MUST</bcp14> be unique; JWS parsers <bcp14>MUST</bcp14> either reject JWSs with
duplicate Header Parameter names or use a JSON parser that returns
only the lexically last duplicate member name, as specified in
Section 15.12 (&quot;The JSON Object&quot;) of ECMAScript 5.1 <xref target="ECMAScript" format="default" sectionFormat="of" derivedContent="ECMAScript"/>.</t>
      <t indent="0" pn="section-4-2">Implementations are required to understand the specific Header
Parameters defined by this specification that are designated as &quot;<bcp14>MUST</bcp14>
be understood&quot; and process them in the manner defined in this
specification.  All other Header Parameters defined by this
specification that are not so designated <bcp14>MUST</bcp14> be ignored when not
understood.  Unless listed as a critical Header Parameter, per
Section 4.1.11, all Header Parameters not defined by this
specification <bcp14>MUST</bcp14> be ignored when not understood.</t>
      <t indent="0" pn="section-4-3">There are three classes of Header Parameter names: Registered Header
Parameter names, Public Header Parameter names, and Private Header
Parameter names.</t>
      <section anchor="registered-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-registered-header-parameter-names">Registered Header Parameter Names</name>
        <t indent="0" pn="section-4.1-1">The following Header Parameter names for use in JWSs are registered
in the IANA &quot;JSON Web Signature and Encryption Header Parameters&quot;
registry established by Section 9.1, with meanings as defined in the
subsections below.</t>
        <t indent="0" pn="section-4.1-2">As indicated by the common registry, JWSs and JWEs share a common
Header Parameter space; when a parameter is used by both
specifications, its usage must be compatible between the
specifications.</t>
        <section anchor="&quot;alg&quot;-(algorithm)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.1">
          <name slugifiedName="name-&quot;alg&quot;-(algorithm)-header-parameter">&quot;alg&quot; (Algorithm) Header Parameter</name>
          <t indent="0" pn="section-4.1.1-1">The &quot;alg&quot; (algorithm) Header Parameter identifies the cryptographic
algorithm used to secure the JWS.  The JWS Signature value is not
valid if the &quot;alg&quot; value does not represent a supported algorithm or
if there is not a key for use with that algorithm associated with the
party that digitally signed or MACed the content.  &quot;alg&quot; values
should either be registered in the IANA &quot;JSON Web Signature and
Encryption Algorithms&quot; registry established by <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> or be a value
that contains a Collision-Resistant Name.  The &quot;alg&quot; value is a case-
sensitive ASCII string containing a StringOrURI value.  This Header
Parameter <bcp14>MUST</bcp14> be present and <bcp14>MUST</bcp14> be understood and processed by
implementations.</t>
          <t indent="0" pn="section-4.1.1-2">A list of defined &quot;alg&quot; values for this use can be found in the IANA
&quot;JSON Web Signature and Encryption Algorithms&quot; registry established
by <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>; the initial contents of this registry are the values
defined in Section 3.1 of <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>.</t>
        </section>
        <section anchor="&quot;jku&quot;-(jwk-set-url)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.2">
          <name slugifiedName="name-&quot;jku&quot;-(jwk-set-url)-header-parameter">&quot;jku&quot; (JWK Set URL) Header Parameter</name>
          <t indent="0" pn="section-4.1.2-1">The &quot;jku&quot; (JWK Set URL) Header Parameter is a URI <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/> that
refers to a resource for a set of JSON-encoded public keys, one of
which corresponds to the key used to digitally sign the JWS.  The
keys <bcp14>MUST</bcp14> be encoded as a JWK Set <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>.  The protocol used to
acquire the resource <bcp14>MUST</bcp14> provide integrity protection; an HTTP GET
request to retrieve the JWK Set <bcp14>MUST</bcp14> use Transport Layer Security</t>
          <t indent="0" pn="section-4.1.2-2">(TLS) <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/> <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>; and the identity of the server <bcp14>MUST</bcp14> be
validated, as per Section 6 of RFC 6125 <xref target="RFC6125" format="default" sectionFormat="of" derivedContent="RFC6125"/>.  Also, see
Section 8 on TLS requirements.  Use of this Header Parameter is
<bcp14>OPTIONAL</bcp14>.</t>
        </section>
        <section anchor="&quot;jwk&quot;-(json-web-key)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.3">
          <name slugifiedName="name-&quot;jwk&quot;-(json-web-key)-header-parameter">&quot;jwk&quot; (JSON Web Key) Header Parameter</name>
          <t indent="0" pn="section-4.1.3-1">The &quot;jwk&quot; (JSON Web Key) Header Parameter is the public key that
corresponds to the key used to digitally sign the JWS.  This key is
represented as a JSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>.  Use of this Header Parameter is
<bcp14>OPTIONAL</bcp14>.</t>
        </section>
        <section anchor="&quot;kid&quot;-(key-id)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.4">
          <name slugifiedName="name-&quot;kid&quot;-(key-id)-header-parameter">&quot;kid&quot; (Key ID) Header Parameter</name>
          <t indent="0" pn="section-4.1.4-1">The &quot;kid&quot; (key ID) Header Parameter is a hint indicating which key
was used to secure the JWS.  This parameter allows originators to
explicitly signal a change of key to recipients.  The structure of
the &quot;kid&quot; value is unspecified.  Its value <bcp14>MUST</bcp14> be a case-sensitive
string.  Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.</t>
          <t indent="0" pn="section-4.1.4-2">When used with a JWK, the &quot;kid&quot; value is used to match a JWK &quot;kid&quot;
parameter value.</t>
        </section>
        <section anchor="&quot;x5u&quot;-(x.509-url)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.5">
          <name slugifiedName="name-&quot;x5u&quot;-(x.509-url)-header-parameter">&quot;x5u&quot; (X.509 URL) Header Parameter</name>
          <t indent="0" pn="section-4.1.5-1">The &quot;x5u&quot; (X.509 URL) Header Parameter is a URI <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/> that refers
to a resource for the X.509 public key certificate or certificate
chain <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> corresponding to the key used to digitally sign the
JWS.  The identified resource <bcp14>MUST</bcp14> provide a representation of the
certificate or certificate chain that conforms to RFC 5280 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>
in PEM-encoded form, with each certificate delimited as specified in
Section 6.1 of RFC 4945 <xref target="RFC4945" format="default" sectionFormat="of" derivedContent="RFC4945"/>.  The certificate containing the
public key corresponding to the key used to digitally sign the JWS
<bcp14>MUST</bcp14> be the first certificate.  This <bcp14>MAY</bcp14> be followed by additional
certificates, with each subsequent certificate being the one used to
certify the previous one.  The protocol used to acquire the resource
<bcp14>MUST</bcp14> provide integrity protection; an HTTP GET request to retrieve
the certificate <bcp14>MUST</bcp14> use TLS <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/> <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>; and the identity of
the server <bcp14>MUST</bcp14> be validated, as per Section 6 of RFC 6125 <xref target="RFC6125" format="default" sectionFormat="of" derivedContent="RFC6125"/>.
Also, see Section 8 on TLS requirements.  Use of this Header
Parameter is <bcp14>OPTIONAL</bcp14>.</t>
        </section>
        <section anchor="&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.6">
          <name slugifiedName="name-&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter">&quot;x5c&quot; (X.509 Certificate Chain) Header Parameter</name>
          <t indent="0" pn="section-4.1.6-1">The &quot;x5c&quot; (X.509 certificate chain) Header Parameter contains the
X.509 public key certificate or certificate chain <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>
corresponding to the key used to digitally sign the JWS.  The
certificate or certificate chain is represented as a JSON array of
certificate value strings.  Each string in the array is a
base64-encoded (<xref target="RFC4648" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc4648#section-4" derivedContent="RFC4648"/> -- not base64url-encoded) DER
<xref target="ITU.X690.2008" format="default" sectionFormat="of" derivedContent="ITU.X690.2008"/> PKIX certificate value.  The certificate containing
the public key corresponding to the key used to digitally sign the
JWS <bcp14>MUST</bcp14> be the first certificate.  This <bcp14>MAY</bcp14> be followed by
additional certificates, with each subsequent certificate being the
one used to certify the previous one.  The recipient <bcp14>MUST</bcp14> validate
the certificate chain according to RFC 5280 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> and consider
the certificate or certificate chain to be invalid if any validation
failure occurs.  Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.</t>
          <t indent="0" pn="section-4.1.6-2">See Appendix B for an example &quot;x5c&quot; value.</t>
        </section>
        <section anchor="&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.7">
          <name slugifiedName="name-&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter">&quot;x5t&quot; (X.509 Certificate SHA-1 Thumbprint) Header Parameter</name>
          <t indent="0" pn="section-4.1.7-1">The &quot;x5t&quot; (X.509 certificate SHA-1 thumbprint) Header Parameter is a
base64url-encoded SHA-1 thumbprint (a.k.a. digest) of the DER
encoding of the X.509 certificate <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> corresponding to the key
used to digitally sign the JWS.  Note that certificate thumbprints
are also sometimes known as certificate fingerprints.  Use of this
Header Parameter is <bcp14>OPTIONAL</bcp14>.</t>
        </section>
        <section anchor="&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.8">
          <name slugifiedName="name-&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header">&quot;x5t#S256&quot; (X.509 Certificate SHA-256 Thumbprint) Header</name>
          <t indent="0" pn="section-4.1.8-1"><artwork name="" type="" align="left" alt=""><![CDATA[
   Parameter
]]></artwork>
</t>
          <t indent="0" pn="section-4.1.8-2">The &quot;x5t#S256&quot; (X.509 certificate SHA-256 thumbprint) Header
Parameter is a base64url-encoded SHA-256 thumbprint (a.k.a. digest)
of the DER encoding of the X.509 certificate <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> corresponding
to the key used to digitally sign the JWS.  Note that certificate
thumbprints are also sometimes known as certificate fingerprints.
Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.</t>
        </section>
        <section anchor="&quot;typ&quot;-(type)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.9">
          <name slugifiedName="name-&quot;typ&quot;-(type)-header-parameter">&quot;typ&quot; (Type) Header Parameter</name>
          <t indent="0" pn="section-4.1.9-1">The &quot;typ&quot; (type) Header Parameter is used by JWS applications to
declare the media type <xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/> of this complete JWS.  This
is intended for use by the application when more than one kind of
object could be present in an application data structure that can
contain a JWS; the application can use this value to disambiguate
among the different kinds of objects that might be present.  It will
typically not be used by applications when the kind of object is
already known.  This parameter is ignored by JWS implementations; any
processing of this parameter is performed by the JWS application.
Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.</t>
          <t indent="0" pn="section-4.1.9-2">Per RFC 2045 <xref target="RFC2045" format="default" sectionFormat="of" derivedContent="RFC2045"/>, all media type values, subtype values, and
parameter names are case insensitive.  However, parameter values are
case sensitive unless otherwise specified for the specific parameter.</t>
          <t indent="0" pn="section-4.1.9-3">To keep messages compact in common situations, it is <bcp14>RECOMMENDED</bcp14> that
producers omit an &quot;application/&quot; prefix of a media type value in a
&quot;typ&quot; Header Parameter when no other '/' appears in the media type
value.  A recipient using the media type value <bcp14>MUST</bcp14> treat it as if
&quot;application/&quot; were prepended to any &quot;typ&quot; value not containing a
'/'.  For instance, a &quot;typ&quot; value of &quot;example&quot; <bcp14>SHOULD</bcp14> be used to
represent the &quot;application/example&quot; media type, whereas the media
type &quot;application/example;part=&quot;1/2&quot;&quot; cannot be shortened to
&quot;example;part=&quot;1/2&quot;&quot;.</t>
          <t indent="0" pn="section-4.1.9-4">The &quot;typ&quot; value &quot;JOSE&quot; can be used by applications to indicate that
this object is a JWS or JWE using the JWS Compact Serialization or
the JWE Compact Serialization.  The &quot;typ&quot; value &quot;JOSE+JSON&quot; can be
used by applications to indicate that this object is a JWS or JWE
using the JWS JSON Serialization or the JWE JSON Serialization.
Other type values can also be used by applications.</t>
        </section>
        <section anchor="&quot;cty&quot;-(content-type)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.10">
          <name slugifiedName="name-&quot;cty&quot;-(content-type)-header-parameter">&quot;cty&quot; (Content Type) Header Parameter</name>
          <t indent="0" pn="section-4.1.10-1">The &quot;cty&quot; (content type) Header Parameter is used by JWS applications
to declare the media type <xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/> of the secured content
(the payload).  This is intended for use by the application when more
than one kind of object could be present in the JWS Payload; the
application can use this value to disambiguate among the different
kinds of objects that might be present.  It will typically not be
used by applications when the kind of object is already known.  This
parameter is ignored by JWS implementations; any processing of this
parameter is performed by the JWS application.  Use of this Header
Parameter is <bcp14>OPTIONAL</bcp14>.</t>
          <t indent="0" pn="section-4.1.10-2">Per RFC 2045 <xref target="RFC2045" format="default" sectionFormat="of" derivedContent="RFC2045"/>, all media type values, subtype values, and
parameter names are case insensitive.  However, parameter values are
case sensitive unless otherwise specified for the specific parameter.</t>
          <t indent="0" pn="section-4.1.10-3">To keep messages compact in common situations, it is <bcp14>RECOMMENDED</bcp14> that
producers omit an &quot;application/&quot; prefix of a media type value in a
&quot;cty&quot; Header Parameter when no other '/' appears in the media type
value.  A recipient using the media type value <bcp14>MUST</bcp14> treat it as if
&quot;application/&quot; were prepended to any &quot;cty&quot; value not containing a
'/'.  For instance, a &quot;cty&quot; value of &quot;example&quot; <bcp14>SHOULD</bcp14> be used to
represent the &quot;application/example&quot; media type, whereas the media
type &quot;application/example;part=&quot;1/2&quot;&quot; cannot be shortened to
&quot;example;part=&quot;1/2&quot;&quot;.</t>
        </section>
        <section anchor="&quot;crit&quot;-(critical)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.11">
          <name slugifiedName="name-&quot;crit&quot;-(critical)-header-parameter">&quot;crit&quot; (Critical) Header Parameter</name>
          <t indent="0" pn="section-4.1.11-1">The &quot;crit&quot; (critical) Header Parameter indicates that extensions to
this specification and/or <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> are being used that <bcp14>MUST</bcp14> be
understood and processed.  Its value is an array listing the Header
Parameter names present in the JOSE Header that use those extensions.
If any of the listed extension Header Parameters are not understood
and supported by the recipient, then the JWS is invalid.  Producers
<bcp14>MUST NOT</bcp14> include Header Parameter names defined by this specification
or <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> for use with JWS, duplicate names, or names that do not
occur as Header Parameter names within the JOSE Header in the &quot;crit&quot;
list.  Producers <bcp14>MUST NOT</bcp14> use the empty list &quot;[]&quot; as the &quot;crit&quot;
value.  Recipients <bcp14>MAY</bcp14> consider the JWS to be invalid if the critical
list contains any Header Parameter names defined by this
specification or <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> for use with JWS or if any other constraints
on its use are violated.  When used, this Header Parameter <bcp14>MUST</bcp14> be
integrity protected; therefore, it <bcp14>MUST</bcp14> occur only within the JWS
Protected Header.  Use of this Header Parameter is <bcp14>OPTIONAL</bcp14>.  This
Header Parameter <bcp14>MUST</bcp14> be understood and processed by implementations.</t>
          <t indent="0" pn="section-4.1.11-2">An example use, along with a hypothetical &quot;exp&quot; (expiration time)
field is:</t>
          <t indent="0" pn="section-4.1.11-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256",
   "crit":["exp"],
   "exp":1363284000
  }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="public-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-public-header-parameter-names">Public Header Parameter Names</name>
        <t indent="0" pn="section-4.2-1">Additional Header Parameter names can be defined by those using JWSs.
However, in order to prevent collisions, any new Header Parameter
name should either be registered in the IANA &quot;JSON Web Signature and
Encryption Header Parameters&quot; registry established by Section 9.1 or
be a Public Name (a value that contains a Collision-Resistant Name).
In each case, the definer of the name or value needs to take
reasonable precautions to make sure they are in control of the part
of the namespace they use to define the Header Parameter name.</t>
        <t indent="0" pn="section-4.2-2">New Header Parameters should be introduced sparingly, as they can
result in non-interoperable JWSs.</t>
      </section>
      <section anchor="private-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-private-header-parameter-names">Private Header Parameter Names</name>
        <t indent="0" pn="section-4.3-1">A producer and consumer of a JWS may agree to use Header Parameter
names that are Private Names (names that are not Registered Header
Parameter names (Section 4.1)) or Public Header Parameter names</t>
        <t indent="0" pn="section-4.3-2">(Section 4.2).  Unlike Public Header Parameter names, Private Header
Parameter names are subject to collision and should be used with
caution.</t>
      </section>
    </section>
    <section anchor="producing-and-consuming-jwss" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-producing-and-consuming-jwss">Producing and Consuming JWSs</name>
      <section anchor="message-signature-or-mac-computation" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-message-signature-or-mac-computation">Message Signature or MAC Computation</name>
        <t indent="0" pn="section-5.1-1">To create a JWS, the following steps are performed.  The order of the
steps is not significant in cases where there are no dependencies
between the inputs and outputs of the steps.</t>
        <t indent="0" pn="section-5.1-2">1.  Create the content to be used as the JWS Payload.</t>
        <t indent="0" pn="section-5.1-3">2.  Compute the encoded payload value BASE64URL(JWS Payload).</t>
        <t indent="0" pn="section-5.1-4">3.  Create the JSON object(s) containing the desired set of Header
    Parameters, which together comprise the JOSE Header (the JWS
    Protected Header and/or the JWS Unprotected Header).</t>
        <t indent="0" pn="section-5.1-5">4.  Compute the encoded header value BASE64URL(UTF8(JWS Protected
    Header)).  If the JWS Protected Header is not present (which can
    only happen when using the JWS JSON Serialization and no
    &quot;protected&quot; member is present), let this value be the empty
    string.</t>
        <t indent="0" pn="section-5.1-6">5.  Compute the JWS Signature in the manner defined for the
    particular algorithm being used over the JWS Signing Input
    ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||
    BASE64URL(JWS Payload)).  The &quot;alg&quot; (algorithm) Header Parameter
    <bcp14>MUST</bcp14> be present in the JOSE Header, with the algorithm value
    accurately representing the algorithm used to construct the JWS
    Signature.</t>
        <t indent="0" pn="section-5.1-7">6.  Compute the encoded signature value BASE64URL(JWS Signature).</t>
        <t indent="0" pn="section-5.1-8">7.  If the JWS JSON Serialization is being used, repeat this process
    (steps 3-6) for each digital signature or MAC operation being
    performed.</t>
        <t indent="0" pn="section-5.1-9">8.  Create the desired serialized output.  The JWS Compact
    Serialization of this result is BASE64URL(UTF8(JWS Protected
    Header)) || '.' || BASE64URL(JWS Payload) || '.' || BASE64URL(JWS
    Signature).  The JWS JSON Serialization is described in
    Section 7.2.</t>
      </section>
      <section anchor="message-signature-or-mac-validation" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-message-signature-or-mac-validation">Message Signature or MAC Validation</name>
        <t indent="0" pn="section-5.2-1">When validating a JWS, the following steps are performed.  The order
of the steps is not significant in cases where there are no
dependencies between the inputs and outputs of the steps.  If any of
the listed steps fails, then the signature or MAC cannot be
validated.</t>
        <t indent="0" pn="section-5.2-2">When there are multiple JWS Signature values, it is an application
decision which of the JWS Signature values must successfully validate
for the JWS to be accepted.  In some cases, all must successfully
validate, or the JWS will be considered invalid.  In other cases,
only a specific JWS Signature value needs to be successfully
validated.  However, in all cases, at least one JWS Signature value
<bcp14>MUST</bcp14> successfully validate, or the JWS <bcp14>MUST</bcp14> be considered invalid.</t>
        <t indent="0" pn="section-5.2-3">1.  Parse the JWS representation to extract the serialized values for
    the components of the JWS.  When using the JWS Compact
    Serialization, these components are the base64url-encoded
    representations of the JWS Protected Header, the JWS Payload, and
    the JWS Signature, and when using the JWS JSON Serialization,
    these components also include the unencoded JWS Unprotected
    Header value.  When using the JWS Compact Serialization, the JWS
    Protected Header, the JWS Payload, and the JWS Signature are
    represented as base64url-encoded values in that order, with each
    value being separated from the next by a single period ('.')
    character, resulting in exactly two delimiting period characters
    being used.  The JWS JSON Serialization is described in
    Section 7.2.</t>
        <t indent="0" pn="section-5.2-4">2.  Base64url-decode the encoded representation of the JWS Protected
    Header, following the restriction that no line breaks,
    whitespace, or other additional characters have been used.</t>
        <t indent="0" pn="section-5.2-5">3.  Verify that the resulting octet sequence is a UTF-8-encoded
    representation of a completely valid JSON object conforming to
    RFC 7159 <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>; let the JWS Protected Header be this JSON
    object.</t>
        <t indent="0" pn="section-5.2-6">4.  If using the JWS Compact Serialization, let the JOSE Header be
    the JWS Protected Header.  Otherwise, when using the JWS JSON
    Serialization, let the JOSE Header be the union of the members of
    the corresponding JWS Protected Header and JWS Unprotected
    Header, all of which must be completely valid JSON objects.
    During this step, verify that the resulting JOSE Header does not
    contain duplicate Header Parameter names.  When using the JWS
    JSON Serialization, this restriction includes that the same
    Header Parameter name also <bcp14>MUST NOT</bcp14> occur in distinct JSON object
    values that together comprise the JOSE Header.</t>
        <t indent="0" pn="section-5.2-7">5.  Verify that the implementation understands and can process all
    fields that it is required to support, whether required by this
    specification, by the algorithm being used, or by the &quot;crit&quot;
    Header Parameter value, and that the values of those parameters
    are also understood and supported.</t>
        <t indent="0" pn="section-5.2-8">6.  Base64url-decode the encoded representation of the JWS Payload,
    following the restriction that no line breaks, whitespace, or
    other additional characters have been used.</t>
        <t indent="0" pn="section-5.2-9">7.  Base64url-decode the encoded representation of the JWS Signature,
    following the restriction that no line breaks, whitespace, or
    other additional characters have been used.</t>
        <t indent="0" pn="section-5.2-10">8.  Validate the JWS Signature against the JWS Signing Input
    ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' ||
    BASE64URL(JWS Payload)) in the manner defined for the algorithm
    being used, which <bcp14>MUST</bcp14> be accurately represented by the value of
    the &quot;alg&quot; (algorithm) Header Parameter, which <bcp14>MUST</bcp14> be present.
    See Section 10.6 for security considerations on algorithm
    validation.  Record whether the validation succeeded or not.</t>
        <t indent="0" pn="section-5.2-11">9.  If the JWS JSON Serialization is being used, repeat this process
    (steps 4-8) for each digital signature or MAC value contained in
    the representation.</t>
        <t indent="0" pn="section-5.2-12">10. If none of the validations in step 9 succeeded, then the JWS <bcp14>MUST</bcp14>
    be considered invalid.  Otherwise, in the JWS JSON Serialization
    case, return a result to the application indicating which of the
    validations succeeded and failed.  In the JWS Compact
    Serialization case, the result can simply indicate whether or not
    the JWS was successfully validated.</t>
        <t indent="0" pn="section-5.2-13">Finally, note that it is an application decision which algorithms may
be used in a given context.  Even if a JWS can be successfully
validated, unless the algorithm(s) used in the JWS are acceptable to
the application, it <bcp14>SHOULD</bcp14> consider the JWS to be invalid.</t>
      </section>
      <section anchor="string-comparison-rules" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-string-comparison-rules">String Comparison Rules</name>
        <t indent="0" pn="section-5.3-1">Processing a JWS inevitably requires comparing known strings to
members and values in JSON objects.  For example, in checking what
the algorithm is, the Unicode string &quot;alg&quot; will be checked against
the member names in the JOSE Header to see if there is a matching
Header Parameter name.  The same process is then used to determine if
the value of the &quot;alg&quot; Header Parameter represents a supported
algorithm.</t>
        <t indent="0" pn="section-5.3-2">The JSON rules for doing member name comparison are described in
Section 8.3 of RFC 7159 <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>.  Since the only string comparison
operations that are performed are equality and inequality, the same
rules can be used for comparing both member names and member values
against known strings.</t>
        <t indent="0" pn="section-5.3-3">These comparison rules <bcp14>MUST</bcp14> be used for all JSON string comparisons
except in cases where the definition of the member explicitly calls
out that a different comparison rule is to be used for that member
value.  Only the &quot;typ&quot; and &quot;cty&quot; member values defined in this
specification do not use these comparison rules.</t>
        <t indent="0" pn="section-5.3-4">Some applications may include case-insensitive information in a case-
sensitive value, such as including a DNS name as part of a &quot;kid&quot; (key
ID) value.  In those cases, the application may need to define a
convention for the canonical case to use for representing the case-
insensitive portions, such as lowercasing them, if more than one
party might need to produce the same value so that they can be
compared.  (However, if all other parties consume whatever value the
producing party emitted verbatim without attempting to compare it to
an independently produced value, then the case used by the producer
will not matter.)</t>
        <t indent="0" pn="section-5.3-5">Also, see the JSON security considerations in Section 10.12 and the
Unicode security considerations in Section 10.13.</t>
      </section>
    </section>
    <section anchor="key-identification" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-key-identification">Key Identification</name>
      <t indent="0" pn="section-6-1">It is necessary for the recipient of a JWS to be able to determine
the key that was employed for the digital signature or MAC operation.
The key employed can be identified using the Header Parameter methods
described in Section 4.1 or can be identified using methods that are
outside the scope of this specification.  Specifically, the Header
Parameters &quot;jku&quot;, &quot;jwk&quot;, &quot;kid&quot;, &quot;x5u&quot;, &quot;x5c&quot;, &quot;x5t&quot;, and &quot;x5t#S256&quot;
can be used to identify the key used.  These Header Parameters <bcp14>MUST</bcp14>
be integrity protected if the information that they convey is to be
utilized in a trust decision; however, if the only information used
in the trust decision is a key, these parameters need not be
integrity protected, since changing them in a way that causes a
different key to be used will cause the validation to fail.</t>
      <t indent="0" pn="section-6-2">The producer <bcp14>SHOULD</bcp14> include sufficient information in the Header
Parameters to identify the key used, unless the application uses
another means or convention to determine the key used.  Validation of
the signature or MAC fails when the algorithm used requires a key
(which is true of all algorithms except for &quot;none&quot;) and the key used
cannot be determined.</t>
      <t indent="0" pn="section-6-3">The means of exchanging any shared symmetric keys used is outside the
scope of this specification.</t>
      <t indent="0" pn="section-6-4">Also, see Appendix D for notes on possible key selection algorithms.</t>
    </section>
    <section anchor="serializations" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-serializations">Serializations</name>
      <t indent="0" pn="section-7-1">JWSs use one of two serializations: the JWS Compact Serialization or
the JWS JSON Serialization.  Applications using this specification
need to specify what serialization and serialization features are
used for that application.  For instance, applications might specify
that only the JWS JSON Serialization is used, that only JWS JSON
Serialization support for a single signature or MAC value is used, or
that support for multiple signatures and/or MAC values is used.  JWS
implementations only need to implement the features needed for the
applications they are designed to support.</t>
      <section anchor="jws-compact-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-jws-compact-serialization">JWS Compact Serialization</name>
        <t indent="0" pn="section-7.1-1">The JWS Compact Serialization represents digitally signed or MACed
content as a compact, URL-safe string.  This string is:</t>
        <t indent="0" pn="section-7.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   BASE64URL(UTF8(JWS Protected Header)) || '.' ||
   BASE64URL(JWS Payload) || '.' ||
   BASE64URL(JWS Signature)
]]></artwork>
</t>
        <t indent="0" pn="section-7.1-3">Only one signature/MAC is supported by the JWS Compact Serialization
and it provides no syntax to represent a JWS Unprotected Header
value.</t>
      </section>
      <section anchor="jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-7.2">
        <name slugifiedName="name-jws-json-serialization">JWS JSON Serialization</name>
        <t indent="0" pn="section-7.2-1">The JWS JSON Serialization represents digitally signed or MACed
content as a JSON object.  This representation is neither optimized
for compactness nor URL-safe.</t>
        <t indent="0" pn="section-7.2-2">Two closely related syntaxes are defined for the JWS JSON
Serialization: a fully general syntax, with which content can be
secured with more than one digital signature and/or MAC operation,
and a flattened syntax, which is optimized for the single digital
signature or MAC case.</t>
        <section anchor="general-jws-json-serialization-syntax" numbered="true" removeInRFC="false" toc="include" pn="section-7.2.1">
          <name slugifiedName="name-general-jws-json-serialization-syntax">General JWS JSON Serialization Syntax</name>
          <t indent="0" pn="section-7.2.1-1">The following members are defined for use in top-level JSON objects
used for the fully general JWS JSON Serialization syntax:</t>
          <t indent="0" pn="section-7.2.1-2">payload
   The &quot;payload&quot; member <bcp14>MUST</bcp14> be present and contain the value
   BASE64URL(JWS Payload).</t>
          <t indent="0" pn="section-7.2.1-3">signatures
   The &quot;signatures&quot; member value <bcp14>MUST</bcp14> be an array of JSON objects.
   Each object represents a signature or MAC over the JWS Payload and
   the JWS Protected Header.</t>
          <t indent="0" pn="section-7.2.1-4">The following members are defined for use in the JSON objects that
are elements of the &quot;signatures&quot; array:</t>
          <t indent="0" pn="section-7.2.1-5">protected
   The &quot;protected&quot; member <bcp14>MUST</bcp14> be present and contain the value
   BASE64URL(UTF8(JWS Protected Header)) when the JWS Protected
   Header value is non-empty; otherwise, it <bcp14>MUST</bcp14> be absent.  These
   Header Parameter values are integrity protected.</t>
          <t indent="0" pn="section-7.2.1-6">header
   The &quot;header&quot; member <bcp14>MUST</bcp14> be present and contain the value JWS
   Unprotected Header when the JWS Unprotected Header value is non-
   empty; otherwise, it <bcp14>MUST</bcp14> be absent.  This value is represented as
   an unencoded JSON object, rather than as a string.  These Header
   Parameter values are not integrity protected.</t>
          <t indent="0" pn="section-7.2.1-7">signature
   The &quot;signature&quot; member <bcp14>MUST</bcp14> be present and contain the value
   BASE64URL(JWS Signature).</t>
          <t indent="0" pn="section-7.2.1-8">At least one of the &quot;protected&quot; and &quot;header&quot; members <bcp14>MUST</bcp14> be present
for each signature/MAC computation so that an &quot;alg&quot; Header Parameter
value is conveyed.</t>
          <t indent="0" pn="section-7.2.1-9">Additional members can be present in both the JSON objects defined
above; if not understood by implementations encountering them, they
<bcp14>MUST</bcp14> be ignored.</t>
          <t indent="0" pn="section-7.2.1-10">The Header Parameter values used when creating or validating
individual signature or MAC values are the union of the two sets of
Header Parameter values that may be present: (1) the JWS Protected
Header represented in the &quot;protected&quot; member of the signature/MAC's
array element, and (2) the JWS Unprotected Header in the &quot;header&quot;
member of the signature/MAC's array element.  The union of these sets
of Header Parameters comprises the JOSE Header.  The Header Parameter
names in the two locations <bcp14>MUST</bcp14> be disjoint.</t>
          <t indent="0" pn="section-7.2.1-11">Each JWS Signature value is computed using the parameters of the
corresponding JOSE Header value in the same manner as for the JWS
Compact Serialization.  This has the desirable property that each JWS
Signature value represented in the &quot;signatures&quot; array is identical to
the value that would have been computed for the same parameter in the
JWS Compact Serialization, provided that the JWS Protected Header
value for that signature/MAC computation (which represents the
integrity-protected Header Parameter values) matches that used in the
JWS Compact Serialization.</t>
          <t indent="0" pn="section-7.2.1-12">In summary, the syntax of a JWS using the general JWS JSON
Serialization is as follows:</t>
          <t indent="0" pn="section-7.2.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":"<payload contents>",
   "signatures":[
    {"protected":"<integrity-protected header 1 contents>",
     "header":<non-integrity-protected header 1 contents>,
     "signature":"<signature 1 contents>"},
    ...
    {"protected":"<integrity-protected header N contents>",
     "header":<non-integrity-protected header N contents>,
     "signature":"<signature N contents>"}]
  }
]]></artwork>
</t>
          <t indent="0" pn="section-7.2.1-14">See Appendix A.6 for an example JWS using the general JWS JSON
Serialization syntax.</t>
        </section>
        <section anchor="flattened-jws-json-serialization-syntax" numbered="true" removeInRFC="false" toc="include" pn="section-7.2.2">
          <name slugifiedName="name-flattened-jws-json-serialization-syntax">Flattened JWS JSON Serialization Syntax</name>
          <t indent="0" pn="section-7.2.2-1">The flattened JWS JSON Serialization syntax is based upon the general
syntax but flattens it, optimizing it for the single digital
signature/MAC case.  It flattens it by removing the &quot;signatures&quot;
member and instead placing those members defined for use in the
&quot;signatures&quot; array (the &quot;protected&quot;, &quot;header&quot;, and &quot;signature&quot;
members) in the top-level JSON object (at the same level as the
&quot;payload&quot; member).</t>
          <t indent="0" pn="section-7.2.2-2">The &quot;signatures&quot; member <bcp14>MUST NOT</bcp14> be present when using this syntax.
Other than this syntax difference, JWS JSON Serialization objects
using the flattened syntax are processed identically to those using
the general syntax.</t>
          <t indent="0" pn="section-7.2.2-3">In summary, the syntax of a JWS using the flattened JWS JSON
Serialization is as follows:</t>
          <t indent="0" pn="section-7.2.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":"<payload contents>",
   "protected":"<integrity-protected header contents>",
   "header":<non-integrity-protected header contents>,
   "signature":"<signature contents>"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-7.2.2-5">See Appendix A.7 for an example JWS using the flattened JWS JSON
Serialization syntax.</t>
        </section>
      </section>
    </section>
    <section anchor="tls-requirements" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-tls-requirements">TLS Requirements</name>
      <t indent="0" pn="section-8-1">Implementations supporting the &quot;jku&quot; and/or &quot;x5u&quot; Header Parameters
<bcp14>MUST</bcp14> support TLS.  Which TLS version(s) ought to be implemented will
vary over time and depend on the widespread deployment and known
security vulnerabilities at the time of implementation.  At the time
of this writing, TLS version 1.2 <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/> is the most recent
version.</t>
      <t indent="0" pn="section-8-2">To protect against information disclosure and tampering,
confidentiality protection <bcp14>MUST</bcp14> be applied using TLS with a
ciphersuite that provides confidentiality and integrity protection.
See current publications by the IETF TLS working group, including RFC
6176 <xref target="RFC6176" format="default" sectionFormat="of" derivedContent="RFC6176"/>, for guidance on the ciphersuites currently considered
to be appropriate for use.  Also, see &quot;Recommendations for Secure Use
of Transport Layer Security (TLS) and Datagram Transport Layer
Security (DTLS)&quot; <xref target="RFC7525" format="default" sectionFormat="of" derivedContent="RFC7525"/> for recommendations on improving the
security of software and services using TLS.</t>
      <t indent="0" pn="section-8-3">Whenever TLS is used, the identity of the service provider encoded in
the TLS server certificate <bcp14>MUST</bcp14> be verified using the procedures
described in Section 6 of RFC 6125 <xref target="RFC6125" format="default" sectionFormat="of" derivedContent="RFC6125"/>.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-9-1">The following registration procedure is used for all the registries
established by this specification.</t>
      <t indent="0" pn="section-9-2">Values are registered on a Specification Required <xref target="RFC5226" format="default" sectionFormat="of" derivedContent="RFC5226"/> basis
after a three-week review period on the jose-reg-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Experts may approve registration once they are
satisfied that such a specification will be published.</t>
      <t indent="0" pn="section-9-3">Registration requests sent to the mailing list for review should use
an appropriate subject (e.g., &quot;Request to register header parameter:
example&quot;).</t>
      <t indent="0" pn="section-9-4">Within the review period, the Designated Experts will either approve
or deny the registration request, communicating this decision to the
review list and IANA.  Denials should include an explanation and, if
applicable, suggestions as to how to make the request successful.
Registration requests that are undetermined for a period longer than
21 days can be brought to the IESG's attention (using the
iesg@ietf.org mailing list) for resolution.</t>
      <t indent="0" pn="section-9-5">Criteria that should be applied by the Designated Experts includes
determining whether the proposed registration duplicates existing
functionality, whether it is likely to be of general applicability or
useful only for a single application, and whether the registration
description is clear.</t>
      <t indent="0" pn="section-9-6">IANA must only accept registry updates from the Designated Experts
and should direct all requests for registration to the review mailing
list.</t>
      <t indent="0" pn="section-9-7">It is suggested that multiple Designated Experts be appointed who are
able to represent the perspectives of different applications using
this specification, in order to enable broadly informed review of
registration decisions.  In cases where a registration decision could
be perceived as creating a conflict of interest for a particular
Expert, that Expert should defer to the judgment of the other
Experts.</t>
      <section anchor="json-web-signature-and-encryption-header-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-json-web-signature-and-encryption-header-parameters-registry">JSON Web Signature and Encryption Header Parameters Registry</name>
        <t indent="0" pn="section-9.1-1">This specification establishes the IANA &quot;JSON Web Signature and
Encryption Header Parameters&quot; registry for Header Parameter names.
The registry records the Header Parameter name and a reference to the
specification that defines it.  The same Header Parameter name can be
registered multiple times, provided that the parameter usage is
compatible between the specifications.  Different registrations of
the same Header Parameter name will typically use different Header
Parameter Usage Locations values.</t>
        <section anchor="registration-template" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.1">
          <name slugifiedName="name-registration-template">Registration Template</name>
          <t indent="0" pn="section-9.1.1-1">Header Parameter Name:
   The name requested (e.g., &quot;kid&quot;).  Because a core goal of this
   specification is for the resulting representations to be compact,
   it is <bcp14>RECOMMENDED</bcp14> that the name be short -- not to exceed 8
   characters without a compelling reason to do so.  This name is
   case sensitive.  Names may not match other registered names in a
   case-insensitive manner unless the Designated Experts state that
   there is a compelling reason to allow an exception.</t>
          <t indent="0" pn="section-9.1.1-2">Header Parameter Description:
   Brief description of the Header Parameter (e.g., &quot;Key ID&quot;).</t>
          <t indent="0" pn="section-9.1.1-3">Header Parameter Usage Location(s):
   The Header Parameter usage locations, which should be one or more
   of the values &quot;JWS&quot; or &quot;JWE&quot;.</t>
          <t indent="0" pn="section-9.1.1-4">Change Controller:
   For Standards Track RFCs, list the &quot;IESG&quot;.  For others, give the
   name of the responsible party.  Other details (e.g., postal
   address, email address, home page URI) may also be included.</t>
          <t indent="0" pn="section-9.1.1-5">Specification Document(s):
   Reference to the document or documents that specify the parameter,
   preferably including URIs that can be used to retrieve copies of
   the documents.  An indication of the relevant sections may also be
   included but is not required.</t>
        </section>
        <section anchor="initial-registry-contents" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.2">
          <name slugifiedName="name-initial-registry-contents">Initial Registry Contents</name>
          <t indent="0" pn="section-9.1.2-1">This section registers the Header Parameter names defined in
Section 4.1 in this registry.</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-2">
            <li pn="section-9.1.2-2.1"> Header Parameter Name: &quot;alg&quot;</li>
            <li pn="section-9.1.2-2.2"> Header Parameter Description: Algorithm</li>
            <li pn="section-9.1.2-2.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-2.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-2.5"> Specification Document(s): Section 4.1.1 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-3">
            <li pn="section-9.1.2-3.1"> Header Parameter Name: &quot;jku&quot;</li>
            <li pn="section-9.1.2-3.2"> Header Parameter Description: JWK Set URL</li>
            <li pn="section-9.1.2-3.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-3.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-3.5"> Specification Document(s): Section 4.1.2 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-4">
            <li pn="section-9.1.2-4.1"> Header Parameter Name: &quot;jwk&quot;</li>
            <li pn="section-9.1.2-4.2"> Header Parameter Description: JSON Web Key</li>
            <li pn="section-9.1.2-4.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-4.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-4.5"> Specification Document(s): Section 4.1.3 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-5">
            <li pn="section-9.1.2-5.1"> Header Parameter Name: &quot;kid&quot;</li>
            <li pn="section-9.1.2-5.2"> Header Parameter Description: Key ID</li>
            <li pn="section-9.1.2-5.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-5.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-5.5"> Specification Document(s): Section 4.1.4 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-6">
            <li pn="section-9.1.2-6.1"> Header Parameter Name: &quot;x5u&quot;</li>
            <li pn="section-9.1.2-6.2"> Header Parameter Description: X.509 URL</li>
            <li pn="section-9.1.2-6.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-6.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-6.5"> Specification Document(s): Section 4.1.5 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-7">
            <li pn="section-9.1.2-7.1"> Header Parameter Name: &quot;x5c&quot;</li>
            <li pn="section-9.1.2-7.2"> Header Parameter Description: X.509 Certificate Chain</li>
            <li pn="section-9.1.2-7.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-7.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-7.5"> Specification Document(s): Section 4.1.6 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-8">
            <li pn="section-9.1.2-8.1"> Header Parameter Name: &quot;x5t&quot;</li>
            <li pn="section-9.1.2-8.2"> Header Parameter Description: X.509 Certificate SHA-1 Thumbprint</li>
            <li pn="section-9.1.2-8.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-8.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-8.5"> Specification Document(s): Section 4.1.7 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-9">
            <li pn="section-9.1.2-9.1"> Header Parameter Name: &quot;x5t#S256&quot;</li>
            <li pn="section-9.1.2-9.2"> Header Parameter Description: X.509 Certificate SHA-256 Thumbprint</li>
            <li pn="section-9.1.2-9.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-9.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-9.5"> Specification Document(s): Section 4.1.8 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-10">
            <li pn="section-9.1.2-10.1"> Header Parameter Name: &quot;typ&quot;</li>
            <li pn="section-9.1.2-10.2"> Header Parameter Description: Type</li>
            <li pn="section-9.1.2-10.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-10.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-10.5"> Specification Document(s): Section 4.1.9 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-11">
            <li pn="section-9.1.2-11.1"> Header Parameter Name: &quot;cty&quot;</li>
            <li pn="section-9.1.2-11.2"> Header Parameter Description: Content Type</li>
            <li pn="section-9.1.2-11.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-11.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-11.5"> Specification Document(s): Section 4.1.10 of RFC 7515</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-12">
            <li pn="section-9.1.2-12.1"> Header Parameter Name: &quot;crit&quot;</li>
            <li pn="section-9.1.2-12.2"> Header Parameter Description: Critical</li>
            <li pn="section-9.1.2-12.3"> Header Parameter Usage Location(s): JWS</li>
            <li pn="section-9.1.2-12.4"> Change Controller: IESG</li>
            <li pn="section-9.1.2-12.5"> Specification Document(s): Section 4.1.11 of RFC 7515</li>
          </ul>
        </section>
      </section>
      <section anchor="media-type-registration" numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-media-type-registration">Media Type Registration</name>
        <section anchor="registry-contents" numbered="true" removeInRFC="false" toc="include" pn="section-9.2.1">
          <name slugifiedName="name-registry-contents">Registry Contents</name>
          <t indent="0" pn="section-9.2.1-1">This section registers the &quot;application/jose&quot; media type <xref target="RFC2046" format="default" sectionFormat="of" derivedContent="RFC2046"/> in
the &quot;Media Types&quot; registry <xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/> in the manner described
in RFC 6838 <xref target="RFC6838" format="default" sectionFormat="of" derivedContent="RFC6838"/>, which can be used to indicate that the content
is a JWS or JWE using the JWS Compact Serialization or the JWE
Compact Serialization.  This section also registers the &quot;application/
jose+json&quot; media type in the &quot;Media Types&quot; registry, which can be
used to indicate that the content is a JWS or JWE using the JWS JSON
Serialization or the JWE JSON Serialization.</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-2">
            <li pn="section-9.2.1-2.1"> Type name: application</li>
            <li pn="section-9.2.1-2.2"> Subtype name: jose</li>
            <li pn="section-9.2.1-2.3"> Required parameters: n/a</li>
            <li pn="section-9.2.1-2.4"> Optional parameters: n/a</li>
            <li pn="section-9.2.1-2.5"> Encoding considerations: 8bit; application/jose values are encoded
   as a series of base64url-encoded values (some of which may be the
   empty string), each separated from the next by a single period
   ('.') character.</li>
            <li pn="section-9.2.1-2.6"> Security considerations: See the Security Considerations section
   of RFC 7515.</li>
            <li pn="section-9.2.1-2.7"> Interoperability considerations: n/a</li>
            <li pn="section-9.2.1-2.8"> Published specification: RFC 7515</li>
            <li pn="section-9.2.1-2.9"> Applications that use this media type: OpenID Connect, Mozilla
   Persona, Salesforce, Google, Android, Windows Azure, Xbox One,
   Amazon Web Services, and numerous others that use JWTs</li>
            <li pn="section-9.2.1-2.10"> Fragment identifier considerations: n/a</li>
            <li pn="section-9.2.1-2.11"> Additional information:</li>
          </ul>
          <t indent="0" pn="section-9.2.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
      Magic number(s): n/a
      File extension(s): n/a
      Macintosh file type code(s): n/a
]]></artwork>
</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-4">
            <li pn="section-9.2.1-4.1"> Person &amp; email address to contact for further information:
   Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-4.2"> Intended usage: COMMON</li>
            <li pn="section-9.2.1-4.3"> Restrictions on usage: none</li>
            <li pn="section-9.2.1-4.4"> Author: Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-4.5"> Change Controller: IESG</li>
            <li pn="section-9.2.1-4.6"> Provisional registration?  No</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-5">
            <li pn="section-9.2.1-5.1"> Type name: application</li>
            <li pn="section-9.2.1-5.2"> Subtype name: jose+json</li>
            <li pn="section-9.2.1-5.3"> Required parameters: n/a</li>
            <li pn="section-9.2.1-5.4"> Optional parameters: n/a</li>
            <li pn="section-9.2.1-5.5"> Encoding considerations: 8bit; application/jose+json values are
   represented as a JSON Object; UTF-8 encoding SHOULD be employed
   for the JSON object.</li>
            <li pn="section-9.2.1-5.6"> Security considerations: See the Security Considerations section
   of RFC 7515</li>
            <li pn="section-9.2.1-5.7"> Interoperability considerations: n/a</li>
            <li pn="section-9.2.1-5.8"> Published specification: RFC 7515</li>
            <li pn="section-9.2.1-5.9"> Applications that use this media type: Nimbus JOSE + JWT library</li>
            <li pn="section-9.2.1-5.10"> Fragment identifier considerations: n/a</li>
            <li pn="section-9.2.1-5.11"> Additional information:</li>
          </ul>
          <t indent="0" pn="section-9.2.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
      Magic number(s): n/a
      File extension(s): n/a
      Macintosh file type code(s): n/a
]]></artwork>
</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-7">
            <li pn="section-9.2.1-7.1"> Person &amp; email address to contact for further information:
   Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-7.2"> Intended usage: COMMON</li>
            <li pn="section-9.2.1-7.3"> Restrictions on usage: none</li>
            <li pn="section-9.2.1-7.4"> Author: Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-7.5"> Change Controller: IESG</li>
            <li pn="section-9.2.1-7.6"> Provisional registration?  No</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-10-1">All of the security issues that are pertinent to any cryptographic
application must be addressed by JWS/JWE/JWK agents.  Among these
issues are protecting the user's asymmetric private and symmetric
secret keys and employing countermeasures to various attacks.</t>
      <t indent="0" pn="section-10-2">All the security considerations in &quot;XML Signature Syntax and
Processing Version 2.0&quot; <xref target="W3C.NOTE-xmldsig-core2-20130411" format="default" sectionFormat="of" derivedContent="W3C.NOTE-xmldsig-core2-20130411"/>, also apply
to this specification, other than those that are XML specific.
Likewise, many of the best practices documented in &quot;XML Signature
Best Practices&quot; <xref target="W3C.NOTE-xmldsig-bestpractices-20130411" format="default" sectionFormat="of" derivedContent="W3C.NOTE-xmldsig-bestpractices-20130411"/> also apply
to this specification, other than those that are XML specific.</t>
      <section anchor="key-entropy-and-random-values" numbered="true" removeInRFC="false" toc="include" pn="section-10.1">
        <name slugifiedName="name-key-entropy-and-random-values">Key Entropy and Random Values</name>
        <t indent="0" pn="section-10.1-1">Keys are only as strong as the amount of entropy used to generate
them.  A minimum of 128 bits of entropy should be used for all keys,
and depending upon the application context, more may be required.</t>
        <t indent="0" pn="section-10.1-2">Implementations must randomly generate public/private key pairs, MAC
keys, and padding values.  The use of inadequate pseudorandom number
generators (PRNGs) to generate cryptographic keys can result in
little or no security.  An attacker may find it much easier to
reproduce the PRNG environment that produced the keys, searching the
resulting small set of possibilities rather than brute-force
searching the whole key space.  The generation of quality random
numbers is difficult.  RFC 4086 <xref target="RFC4086" format="default" sectionFormat="of" derivedContent="RFC4086"/> offers important guidance
in this area.</t>
      </section>
      <section anchor="key-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.2">
        <name slugifiedName="name-key-protection">Key Protection</name>
        <t indent="0" pn="section-10.2-1">Implementations must protect the signer's private key.  Compromise of
the signer's private key permits an attacker to masquerade as the
signer.</t>
        <t indent="0" pn="section-10.2-2">Implementations must protect the MAC key.  Compromise of the MAC key
may result in undetectable modification of the authenticated content.</t>
      </section>
      <section anchor="key-origin-authentication" numbered="true" removeInRFC="false" toc="include" pn="section-10.3">
        <name slugifiedName="name-key-origin-authentication">Key Origin Authentication</name>
        <t indent="0" pn="section-10.3-1">The key management technique employed to obtain public keys must
authenticate the origin of the key; otherwise, it is unknown what
party signed the message.</t>
        <t indent="0" pn="section-10.3-2">Likewise, the key management technique employed to distribute MAC
keys must provide data origin authentication; otherwise, the contents
are delivered with integrity from an unknown source.</t>
      </section>
      <section anchor="cryptographic-agility" numbered="true" removeInRFC="false" toc="include" pn="section-10.4">
        <name slugifiedName="name-cryptographic-agility">Cryptographic Agility</name>
        <t indent="0" pn="section-10.4-1">See Section 8.1 of <xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/> for security considerations on cryptographic
agility.</t>
      </section>
      <section anchor="differences-between-digital-signatures-and-macs" numbered="true" removeInRFC="false" toc="include" pn="section-10.5">
        <name slugifiedName="name-differences-between-digital-signatures-and-macs">Differences between Digital Signatures and MACs</name>
        <t indent="0" pn="section-10.5-1">While MACs and digital signatures can both be used for integrity
checking, there are some significant differences between the security
properties that each of them provides.  These need to be taken into
consideration when designing protocols and selecting the algorithms
to be used in protocols.</t>
        <t indent="0" pn="section-10.5-2">Both signatures and MACs provide for integrity checking -- verifying
that the message has not been modified since the integrity value was
computed.  However, MACs provide for origination identification only
under specific circumstances.  It can normally be assumed that a
private key used for a signature is only in the hands of a single
entity (although perhaps a distributed entity, in the case of
replicated servers); however, a MAC key needs to be in the hands of
all the entities that use it for integrity computation and checking.
Validation of a MAC only provides corroboration that the message was
generated by one of the parties that knows the symmetric MAC key.
This means that origination can only be determined if a MAC key is
known only to two entities and the recipient knows that it did not
create the message.  MAC validation cannot be used to prove
origination to a third party.</t>
      </section>
      <section anchor="algorithm-validation" numbered="true" removeInRFC="false" toc="include" pn="section-10.6">
        <name slugifiedName="name-algorithm-validation">Algorithm Validation</name>
        <t indent="0" pn="section-10.6-1">The digital signature representations for some algorithms include
information about the algorithm used inside the signature value.  For
instance, signatures produced with RSASSA-PKCS1-v1_5 <xref target="RFC3447" format="default" sectionFormat="of" derivedContent="RFC3447"/> encode
the hash function used, and many libraries actually use the hash
algorithm specified inside the signature when validating the
signature.  When using such libraries, as part of the algorithm
validation performed, implementations <bcp14>MUST</bcp14> ensure that the algorithm
information encoded in the signature corresponds to that specified
with the &quot;alg&quot; Header Parameter.  If this is not done, an attacker
could claim to have used a strong hash algorithm while actually using
a weak one represented in the signature value.</t>
      </section>
      <section anchor="algorithm-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.7">
        <name slugifiedName="name-algorithm-protection">Algorithm Protection</name>
        <t indent="0" pn="section-10.7-1">In some usages of JWS, there is a risk of algorithm substitution
attacks, in which an attacker can use an existing digital signature
value with a different signature algorithm to make it appear that a
signer has signed something that it has not.  These attacks have been
discussed in detail in the context of Cryptographic Message Syntax
(CMS) <xref target="RFC6211" format="default" sectionFormat="of" derivedContent="RFC6211"/>.  This risk arises when all of the following are
true:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-2">
          <li pn="section-10.7-2.1"> Verifiers of a signature support multiple algorithms.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-3">
          <li pn="section-10.7-3.1"> Given an existing signature, an attacker can find another payload
   that produces the same signature value with a different algorithm.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-4">
          <li pn="section-10.7-4.1"> The payload crafted by the attacker is valid in the application
   context.</li>
        </ul>
        <t indent="0" pn="section-10.7-5">There are several ways for an application to mitigate algorithm
substitution attacks:</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-6">
          <li pn="section-10.7-6.1"> Use only digital signature algorithms that are not vulnerable to
   substitution attacks.  Substitution attacks are only feasible if
   an attacker can compute pre-images for a hash function accepted by
   the recipient.  All JWA-defined signature algorithms use SHA-2
   hashes, for which there are no known pre-image attacks, as of the
   time of this writing.</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-7">
          <li pn="section-10.7-7.1"> Require that the &quot;alg&quot; Header Parameter be carried in the JWS
   Protected Header.  (This is always the case when using the JWS
   Compact Serialization and is the approach taken by CMS [RFC6211].)</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-8">
          <li pn="section-10.7-8.1"> Include a field containing the algorithm in the application
   payload, and require that it be matched with the &quot;alg&quot; Header
   Parameter during verification.  (This is the approach taken by
   PKIX [RFC5280].)</li>
        </ul>
      </section>
      <section anchor="chosen-plaintext-attacks" numbered="true" removeInRFC="false" toc="include" pn="section-10.8">
        <name slugifiedName="name-chosen-plaintext-attacks">Chosen Plaintext Attacks</name>
        <t indent="0" pn="section-10.8-1">Creators of JWSs should not allow third parties to insert arbitrary
content into the message without adding entropy not controlled by the
third party.</t>
      </section>
      <section anchor="timing-attacks" numbered="true" removeInRFC="false" toc="include" pn="section-10.9">
        <name slugifiedName="name-timing-attacks">Timing Attacks</name>
        <t indent="0" pn="section-10.9-1">When cryptographic algorithms are implemented in such a way that
successful operations take a different amount of time than
unsuccessful operations, attackers may be able to use the time
difference to obtain information about the keys employed.  Therefore,
such timing differences must be avoided.</t>
      </section>
      <section anchor="replay-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.10">
        <name slugifiedName="name-replay-protection">Replay Protection</name>
        <t indent="0" pn="section-10.10-1">While not directly in scope for this specification, note that
applications using JWS (or JWE) objects can thwart replay attacks by
including a unique message identifier as integrity-protected content
in the JWS (or JWE) message and having the recipient verify that the
message has not been previously received or acted upon.</t>
      </section>
      <section anchor="sha-1-certificate-thumbprints" numbered="true" removeInRFC="false" toc="include" pn="section-10.11">
        <name slugifiedName="name-sha-1-certificate-thumbprints">SHA-1 Certificate Thumbprints</name>
        <t indent="0" pn="section-10.11-1">A SHA-1 hash is used when computing &quot;x5t&quot; (X.509 certificate SHA-1
thumbprint) values, for compatibility reasons.  Should an effective
means of producing SHA-1 hash collisions be developed and should an
attacker wish to interfere with the use of a known certificate on a
given system, this could be accomplished by creating another
certificate whose SHA-1 hash value is the same and adding it to the
certificate store used by the intended victim.  A prerequisite to
this attack succeeding is the attacker having write access to the
intended victim's certificate store.</t>
        <t indent="0" pn="section-10.11-2">Alternatively, the &quot;x5t#S256&quot; (X.509 certificate SHA-256 thumbprint)
Header Parameter could be used instead of &quot;x5t&quot;.  However, at the
time of this writing, no development platform is known to support
SHA-256 certificate thumbprints.</t>
      </section>
      <section anchor="json-security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.12">
        <name slugifiedName="name-json-security-considerations">JSON Security Considerations</name>
        <t indent="0" pn="section-10.12-1">Strict JSON <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/> validation is a security requirement.  If
malformed JSON is received, then the intent of the producer is
impossible to reliably discern.  Ambiguous and potentially
exploitable situations could arise if the JSON parser used does not
reject malformed JSON syntax.  In particular, any JSON inputs not
conforming to the JSON-text syntax defined in RFC 7159 <bcp14>MUST</bcp14> be
rejected in their entirety by JSON parsers.</t>
        <t indent="0" pn="section-10.12-2">Section 4 of &quot;The JavaScript Object Notation (JSON) Data Interchange
Format&quot; <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/> states, &quot;The names within an object <bcp14>SHOULD</bcp14> be
unique&quot;, whereas this specification states that</t>
        <t indent="0" pn="section-10.12-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   The Header Parameter names within the JOSE Header MUST be unique;
   JWS parsers MUST either reject JWSs with duplicate Header
   Parameter names or use a JSON parser that returns only the
   lexically last duplicate member name, as specified in
   Section 15.12 ("The JSON Object") of ECMAScript 5.1 [ECMAScript].
]]></artwork>
</t>
        <t indent="0" pn="section-10.12-4">Thus, this specification requires that the &quot;<bcp14>SHOULD</bcp14>&quot; in <xref target="RFC7159" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7159#section-4" derivedContent="RFC7159"/> be treated as a &quot;<bcp14>MUST</bcp14>&quot; by producers and that it be either
treated as a &quot;<bcp14>MUST</bcp14>&quot; or treated in the manner specified in ECMAScript
5.1 by consumers.  Ambiguous and potentially exploitable situations
could arise if the JSON parser used does not enforce the uniqueness
of member names or returns an unpredictable value for duplicate
member names.</t>
        <t indent="0" pn="section-10.12-5">Some JSON parsers might not reject input that contains extra
significant characters after a valid input.  For instance, the input
&quot;{&quot;tag&quot;:&quot;value&quot;}ABCD&quot; contains a valid JSON-text object followed by
the extra characters &quot;ABCD&quot;.  Implementations <bcp14>MUST</bcp14> consider JWSs
containing such input to be invalid.</t>
      </section>
      <section anchor="unicode-comparison-security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.13">
        <name slugifiedName="name-unicode-comparison-security-considerations">Unicode Comparison Security Considerations</name>
        <t indent="0" pn="section-10.13-1">Header Parameter names and algorithm names are Unicode strings.  For
security reasons, the representations of these names must be compared
verbatim after performing any escape processing (as per Section 8.3
of RFC 7159 <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>).  This means, for instance, that these JSON
strings must compare as being equal (&quot;sig&quot;, &quot;\u0073ig&quot;), whereas
these must all compare as being not equal to the first set or to each
other (&quot;SIG&quot;, &quot;Sig&quot;, &quot;si\u0047&quot;).</t>
        <t indent="0" pn="section-10.13-2">JSON strings can contain characters outside the Unicode Basic
Multilingual Plane.  For instance, the G clef character (U+1D11E) may
be represented in a JSON string as &quot;\uD834\uDD1E&quot;.  Ideally, JWS
implementations <bcp14>SHOULD</bcp14> ensure that characters outside the Basic
Multilingual Plane are preserved and compared correctly;
alternatively, if this is not possible due to these characters
exercising limitations present in the underlying JSON implementation,
then input containing them <bcp14>MUST</bcp14> be rejected.</t>
      </section>
    </section>
  </middle>
  <back>
    <references pn="section-11">
      <name slugifiedName="name-references">References</name>
      <references pn="section-11.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ ECMA-262.pdf" quoteTitle="true" derivedAnchor="ECMAScript">
          <front>
            <title>ECMAScript Language Specification, 5.1 Edition</title>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="IANA.MediaTypes" target="http://www.iana.org/assignments/media-types" quoteTitle="true" derivedAnchor="IANA.MediaTypes">
          <front>
            <title>Media Types</title>
          </front>
        </reference>
        <reference anchor="ITU.X690.2008" quoteTitle="true" derivedAnchor="ITU.X690.2008">
          <front>
            <title>Information Technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
            <date year="2008"/>
          </front>
          <seriesInfo name="ITU-T Recommendation">X.690</seriesInfo>
        </reference>
        <reference anchor="JWA" target="http://www.rfc-editor.org/info/rfc7518" quoteTitle="true" derivedAnchor="JWA">
          <front>
            <title>JSON Web Algorithms (JWA)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7518</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7518</seriesInfo>
        </reference>
        <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517" quoteTitle="true" derivedAnchor="JWK">
          <front>
            <title>JSON Web Key (JWK)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7517</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7517</seriesInfo>
        </reference>
        <reference anchor="RFC20" target="http://www.rfc-editor.org/info/rfc20" quoteTitle="true" derivedAnchor="RFC20">
          <front>
            <title>ASCII format for Network Interchange</title>
            <date year="1969" month="October"/>
          </front>
          <seriesInfo name="STD">80</seriesInfo>
          <seriesInfo name="RFC">20</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC0020</seriesInfo>
        </reference>
        <reference anchor="RFC2045" target="http://www.rfc-editor.org/info/rfc2045" quoteTitle="true" derivedAnchor="RFC2045">
          <front>
            <title>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
            <date year="1996" month="November"/>
          </front>
          <seriesInfo name="RFC">2045</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2045</seriesInfo>
        </reference>
        <reference anchor="RFC2046" target="http://www.rfc-editor.org/info/rfc2046" quoteTitle="true" derivedAnchor="RFC2046">
          <front>
            <title>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
            <date year="1996" month="November"/>
          </front>
          <seriesInfo name="RFC">2046</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2046</seriesInfo>
        </reference>
        <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <date year="1997" month="March"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">2119</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2119</seriesInfo>
        </reference>
        <reference anchor="RFC2818" target="http://www.rfc-editor.org/info/rfc2818" quoteTitle="true" derivedAnchor="RFC2818">
          <front>
            <title>HTTP Over TLS</title>
            <date year="2000" month="May"/>
          </front>
          <seriesInfo name="RFC">2818</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2818</seriesInfo>
        </reference>
        <reference anchor="RFC3629" target="http://www.rfc-editor.org/info/rfc3629" quoteTitle="true" derivedAnchor="RFC3629">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <date year="2003" month="November"/>
          </front>
          <seriesInfo name="STD">63</seriesInfo>
          <seriesInfo name="RFC">3629</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3629</seriesInfo>
        </reference>
        <reference anchor="RFC3986" target="http://www.rfc-editor.org/info/rfc3986" quoteTitle="true" derivedAnchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <date year="2005" month="January"/>
          </front>
          <seriesInfo name="STD">66</seriesInfo>
          <seriesInfo name="RFC">3986</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3986</seriesInfo>
        </reference>
        <reference anchor="RFC4648" target="http://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <date year="2006" month="October"/>
          </front>
          <seriesInfo name="RFC">4648</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4648</seriesInfo>
        </reference>
        <reference anchor="RFC4945" target="http://www.rfc-editor.org/info/rfc4945" quoteTitle="true" derivedAnchor="RFC4945">
          <front>
            <title>The Internet IP Security PKI Profile of IKEv1/ISAKMP, IKEv2, and PKIX</title>
            <date year="2007" month="August"/>
          </front>
          <seriesInfo name="RFC">4945</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4945</seriesInfo>
        </reference>
        <reference anchor="RFC4949" target="http://www.rfc-editor.org/info/rfc4949" quoteTitle="true" derivedAnchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <date year="2007" month="August"/>
          </front>
          <seriesInfo name="RFC">4949</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4949</seriesInfo>
        </reference>
        <reference anchor="RFC5246" target="http://www.rfc-editor.org/info/rfc5246" quoteTitle="true" derivedAnchor="RFC5246">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
            <date year="2008" month="August"/>
          </front>
          <seriesInfo name="RFC">5246</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5246</seriesInfo>
        </reference>
        <reference anchor="RFC5280" target="http://www.rfc-editor.org/info/rfc5280" quoteTitle="true" derivedAnchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <date year="2008" month="May"/>
          </front>
          <seriesInfo name="RFC">5280</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5280</seriesInfo>
        </reference>
        <reference anchor="RFC6125" target="http://www.rfc-editor.org/info/rfc6125" quoteTitle="true" derivedAnchor="RFC6125">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <date year="2011" month="March"/>
          </front>
          <seriesInfo name="RFC">6125</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6125</seriesInfo>
        </reference>
        <reference anchor="RFC6176" target="http://www.rfc-editor.org/info/rfc6176" quoteTitle="true" derivedAnchor="RFC6176">
          <front>
            <title>Prohibiting Secure Sockets Layer (SSL) Version 2.0</title>
            <date year="2011" month="March"/>
          </front>
          <seriesInfo name="RFC">6176</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6176</seriesInfo>
        </reference>
        <reference anchor="RFC7159" target="http://www.rfc-editor.org/info/rfc7159" quoteTitle="true" derivedAnchor="RFC7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <date year="2014" month="March"/>
          </front>
          <seriesInfo name="RFC">7159</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7159</seriesInfo>
        </reference>
        <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/" quoteTitle="true" derivedAnchor="UNICODE">
          <front>
            <title>The Unicode Standard</title>
          </front>
        </reference>
      </references>
      <references pn="section-11.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="CanvasApp" target="http://developers.facebook.com/docs/authentication/ canvas" quoteTitle="true" derivedAnchor="CanvasApp">
          <front>
            <title>Canvas Applications</title>
          </front>
        </reference>
        <reference anchor="JSS" target="http://jsonenc.info/jss/1.0/" quoteTitle="true" derivedAnchor="JSS">
          <front>
            <title>JSON Simple Sign</title>
            <date year="2010" month="September"/>
          </front>
        </reference>
        <reference anchor="JWE" target="http://www.rfc-editor.org/info/rfc7516" quoteTitle="true" derivedAnchor="JWE">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7516</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7516</seriesInfo>
        </reference>
        <reference anchor="JWT" target="http://www.rfc-editor.org/info/rfc7519" quoteTitle="true" derivedAnchor="JWT">
          <front>
            <title>JSON Web Token (JWT)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7519</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7519</seriesInfo>
        </reference>
        <reference anchor="MagicSignatures" target="http://salmon-protocol.googlecode.com/svn/trunk/ draft-panzer-magicsig-01.html" quoteTitle="true" derivedAnchor="MagicSignatures">
          <front>
            <title>Magic Signatures</title>
            <date year="2011" month="January"/>
          </front>
        </reference>
        <reference anchor="RFC2104" target="http://www.rfc-editor.org/info/rfc2104" quoteTitle="true" derivedAnchor="RFC2104">
          <front>
            <title>HMAC: Keyed-Hashing for Message Authentication</title>
            <date year="1997" month="February"/>
          </front>
          <seriesInfo name="RFC">2104</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2104</seriesInfo>
        </reference>
        <reference anchor="RFC3447" target="http://www.rfc-editor.org/info/rfc3447" quoteTitle="true" derivedAnchor="RFC3447">
          <front>
            <title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
            <date year="2003" month="February"/>
          </front>
          <seriesInfo name="RFC">3447</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3447</seriesInfo>
        </reference>
        <reference anchor="RFC4086" target="http://www.rfc-editor.org/info/rfc4086" quoteTitle="true" derivedAnchor="RFC4086">
          <front>
            <title>Randomness Requirements for Security</title>
            <date year="2005" month="June"/>
          </front>
          <seriesInfo name="BCP">106</seriesInfo>
          <seriesInfo name="RFC">4086</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4086</seriesInfo>
        </reference>
        <reference anchor="RFC4122" target="http://www.rfc-editor.org/info/rfc4122" quoteTitle="true" derivedAnchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <date year="2005" month="July"/>
          </front>
          <seriesInfo name="RFC">4122</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4122</seriesInfo>
        </reference>
        <reference anchor="RFC5226" target="http://www.rfc-editor.org/info/rfc5226" quoteTitle="true" derivedAnchor="RFC5226">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <date year="2008" month="May"/>
          </front>
          <seriesInfo name="BCP">26</seriesInfo>
          <seriesInfo name="RFC">5226</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5226</seriesInfo>
        </reference>
        <reference anchor="RFC6211" target="http://www.rfc-editor.org/info/rfc6211" quoteTitle="true" derivedAnchor="RFC6211">
          <front>
            <title>Cryptographic Message Syntax (CMS) Algorithm Identifier Protection Attribute</title>
            <date year="2011" month="April"/>
          </front>
          <seriesInfo name="RFC">6211</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6211</seriesInfo>
        </reference>
        <reference anchor="RFC6838" target="http://www.rfc-editor.org/info/rfc6838" quoteTitle="true" derivedAnchor="RFC6838">
          <front>
            <title>Media Type Specifications and Registration Procedures</title>
            <date year="2013" month="January"/>
          </front>
          <seriesInfo name="BCP">13</seriesInfo>
          <seriesInfo name="RFC">6838</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6838</seriesInfo>
        </reference>
        <reference anchor="RFC7525" target="http://www.rfc-editor.org/info/rfc7525" quoteTitle="true" derivedAnchor="RFC7525">
          <front>
            <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="BCP">195</seriesInfo>
          <seriesInfo name="RFC">7525</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7525</seriesInfo>
        </reference>
        <reference anchor="SHS" target="http://csrc.nist.gov/publications/fips/fips180-4/ fips-180-4.pdf" quoteTitle="true" derivedAnchor="SHS">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <date year="2012" month="March"/>
          </front>
          <seriesInfo name="FIPS PUB">180-4</seriesInfo>
        </reference>
        <reference anchor="W3C.NOTE-xmldsig-bestpractices-20130411" target="http://www.w3.org/TR/2013/ NOTE-xmldsig-bestpractices-20130411/" quoteTitle="true" derivedAnchor="W3C.NOTE-xmldsig-bestpractices-20130411">
          <front>
            <title>XML Signature Best Practices</title>
            <date year="2013" month="April"/>
          </front>
        </reference>
        <reference anchor="W3C.NOTE-xmldsig-core2-20130411" target="http://www.w3.org/TR/2013/NOTE-xmldsig-core2-20130411/" quoteTitle="true" derivedAnchor="W3C.NOTE-xmldsig-core2-20130411">
          <front>
            <title>XML Signature Syntax and Processing Version 2.0</title>
            <date year="2013" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="jws-examples" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-jws-examples">JWS Examples</name>
      <t indent="0" pn="section-appendix.a-1">This section provides several examples of JWSs.  While the first
three examples all represent JSON Web Tokens (JWTs) <xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/>, the
payload can be any octet sequence, as shown in Appendix A.4.</t>
      <section anchor="example-jws-using-hmac-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.1">
        <name slugifiedName="name-example-jws-using-hmac-sha-256">Example JWS Using HMAC SHA-256</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.1.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.1.1-1">The following example JWS Protected Header declares that the data
structure is a JWT <xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/> and the JWS Signing Input is secured using
the HMAC SHA-256 algorithm.</t>
          <t indent="0" pn="section-a.1.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"typ":"JWT",
   "alg":"HS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-3">To remove potential ambiguities in the representation of the JSON
object above, the actual octet sequence representing UTF8(JWS
Protected Header) used in this example is also included below.  (Note
that ambiguities can arise due to differing platform representations
of line breaks (CRLF versus LF), differing spacing at the beginning
and ends of lines, whether the last line has a terminating line break
or not, and other causes.  In the representation used in this
example, the first line has no leading or trailing spaces, a CRLF
line break (13, 10) occurs between the first and second lines, the
second line has one leading space (32) and no trailing spaces, and
the last line does not have a terminating line break.)  The octets
representing UTF8(JWS Protected Header) in this example (using JSON
array notation) are:</t>
          <t indent="0" pn="section-a.1.1-4">[123, 34, 116, 121, 112, 34, 58, 34, 74, 87, 84, 34, 44, 13, 10, 32,
34, 97, 108, 103, 34, 58, 34, 72, 83, 50, 53, 54, 34, 125]</t>
          <t indent="0" pn="section-a.1.1-5">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
          <t indent="0" pn="section-a.1.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-7">The JWS Payload used in this example is the octets of the UTF-8
representation of the JSON object below.  (Note that the payload can
be any base64url-encoded octet sequence and need not be a base64url-
encoded JSON object.)</t>
          <t indent="0" pn="section-a.1.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
The following octet sequence, which is the UTF-8 representation used
in this example for the JSON object above, is the JWS Payload:
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-9">[123, 34, 105, 115, 115, 34, 58, 34, 106, 111, 101, 34, 44, 13, 10,
32, 34, 101, 120, 112, 34, 58, 49, 51, 48, 48, 56, 49, 57, 51, 56,
48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,
109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,
111, 116, 34, 58, 116, 114, 117, 101, 125]</t>
          <t indent="0" pn="section-a.1.1-10">Encoding this JWS Payload as BASE64URL(UTF8(JWS Payload)) gives this
value (with line breaks for display purposes only):</t>
          <t indent="0" pn="section-a.1.1-11"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-12">Combining these as BASE64URL(UTF8(JWS Protected Header)) || '.' ||
BASE64URL(JWS Payload) gives this string (with line breaks for
display purposes only):</t>
          <t indent="0" pn="section-a.1.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-14">The resulting JWS Signing Input value, which is the ASCII
representation of above string, is the following octet sequence
(using JSON array notation):</t>
          <t indent="0" pn="section-a.1.1-15">[101, 121, 74, 48, 101, 88, 65, 105, 79, 105, 74, 75, 86, 49, 81,
105, 76, 65, 48, 75, 73, 67, 74, 104, 98, 71, 99, 105, 79, 105, 74,
73, 85, 122, 73, 49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51,
77, 105, 79, 105, 74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67,
74, 108, 101, 72, 65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84,
107, 122, 79, 68, 65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100,
72, 65, 54, 76, 121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76,
109, 78, 118, 98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73,
106, 112, 48, 99, 110, 86, 108, 102, 81]</t>
          <t indent="0" pn="section-a.1.1-16">HMACs are generated using keys.  This example uses the symmetric key
represented in JSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/> format below (with line breaks
within values for display purposes only):</t>
          <t indent="0" pn="section-a.1.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"oct",
   "k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75
        aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  }
Running the HMAC SHA-256 algorithm on the JWS Signing Input with this
key yields this JWS Signature octet sequence:
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-18">[116, 24, 223, 180, 151, 153, 224, 37, 79, 250, 96, 125, 216, 173,
187, 186, 22, 212, 37, 77, 105, 214, 191, 240, 91, 88, 5, 88, 83,
132, 141, 121]</t>
          <t indent="0" pn="section-a.1.1-19">Encoding this JWS Signature as BASE64URL(JWS Signature) gives this
value:</t>
          <t indent="0" pn="section-a.1.1-20"><artwork name="" type="" align="left" alt=""><![CDATA[
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-21">Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):</t>
          <t indent="0" pn="section-a.1.1-22"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.1.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.1.2-1">Since the &quot;alg&quot; Header Parameter is &quot;HS256&quot;, we validate the HMAC
SHA-256 value contained in the JWS Signature.</t>
          <t indent="0" pn="section-a.1.2-2">To validate the HMAC value, we repeat the previous process of using
the correct key and the JWS Signing Input (which is the initial
substring of the JWS Compact Serialization representation up until
but not including the second period character) as input to the HMAC
SHA-256 function and then taking the output and determining if it
matches the JWS Signature (which is base64url decoded from the value
encoded in the JWS representation).  If it matches exactly, the HMAC
has been validated.</t>
        </section>
      </section>
      <section anchor="example-jws-using-rsassa-pkcs1-v1_5-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.2">
        <name slugifiedName="name-example-jws-using-rsassa-pkcs1-v1_5-sha-256">Example JWS Using RSASSA-PKCS1-v1_5 SHA-256</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.2.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.2.1-1">The JWS Protected Header in this example is different from the
previous example in two ways.  First, because a different algorithm
is being used, the &quot;alg&quot; value is different.  Second, for
illustration purposes only, the optional &quot;typ&quot; (type) Header
Parameter is not used.  (This difference is not related to the
algorithm employed.)  The JWS Protected Header used is:</t>
          <t indent="0" pn="section-a.2.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-3">The octets representing UTF8(JWS Protected Header) in this example
(using JSON array notation) are:</t>
          <t indent="0" pn="section-a.2.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 82, 83, 50, 53, 54, 34, 125]</t>
          <t indent="0" pn="section-a.2.1-5">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
          <t indent="0" pn="section-a.2.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-7">The JWS Payload used in this example, which follows, is the same as
in the previous example.  Since the BASE64URL(JWS Payload) value will
therefore be the same, its computation is not repeated here.</t>
          <t indent="0" pn="section-a.2.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-9">Combining these as BASE64URL(UTF8(JWS Protected Header)) || '.' ||
BASE64URL(JWS Payload) gives this string (with line breaks for
display purposes only):</t>
          <t indent="0" pn="section-a.2.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-11">The resulting JWS Signing Input value, which is the ASCII
representation of above string, is the following octet sequence:</t>
          <t indent="0" pn="section-a.2.1-12">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73,
49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
99, 110, 86, 108, 102, 81]
This example uses the RSA key represented in JSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>
format below (with line breaks within values for display purposes
only):</t>
          <t indent="0" pn="section-a.2.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"RSA",
   "n":"ofgWCuLjybRlzo0tZWJjNiuSfb4p4fAkd_wWJcyQoTbji9k0l8W26mPddx
        HmfHQp-Vaw-4qPCJrcS2mJPMEzP1Pt0Bm4d4QlL-yRT-SFd2lZS-pCgNMs
        D1W_YpRPEwOWvG6b32690r2jZ47soMZo9wGzjb_7OMg0LOL-bSf63kpaSH
        SXndS5z5rexMdbBYUsLA9e-KXBdQOS-UTo7WTBEMa2R2CapHg665xsmtdV
        MTBQY4uDZlxvb3qCo5ZwKh9kG4LT6_I5IhlJH7aGhyxXFvUK-DWNmoudF8
        NAco9_h9iaGNj8q2ethFkMLs91kzk2PAcDTW9gb54h4FRWyuXpoQ",
   "e":"AQAB",
   "d":"Eq5xpGnNCivDflJsRQBXHx1hdR1k6Ulwe2JZD50LpXyWPEAeP88vLNO97I
        jlA7_GQ5sLKMgvfTeXZx9SE-7YwVol2NXOoAJe46sui395IW_GO-pWJ1O0
        BkTGoVEn2bKVRUCgu-GjBVaYLU6f3l9kJfFNS3E0QbVdxzubSu3Mkqzjkn
        439X0M_V51gfpRLI9JYanrC4D4qAdGcopV_0ZHHzQlBjudU2QvXt4ehNYT
        CBr6XCLQUShb1juUO1ZdiYoFaFQT5Tw8bGUl_x_jTj3ccPDVZFD9pIuhLh
        BOneufuBiB4cS98l2SR_RQyGWSeWjnczT0QU91p1DhOVRuOopznQ",
   "p":"4BzEEOtIpmVdVEZNCqS7baC4crd0pqnRH_5IB3jw3bcxGn6QLvnEtfdUdi
        YrqBdss1l58BQ3KhooKeQTa9AB0Hw_Py5PJdTJNPY8cQn7ouZ2KKDcmnPG
        BY5t7yLc1QlQ5xHdwW1VhvKn-nXqhJTBgIPgtldC-KDV5z-y2XDwGUc",
   "q":"uQPEfgmVtjL0Uyyx88GZFF1fOunH3-7cepKmtH4pxhtCoHqpWmT8YAmZxa
        ewHgHAjLYsp1ZSe7zFYHj7C6ul7TjeLQeZD_YwD66t62wDmpe_HlB-TnBA
        -njbglfIsRLtXlnDzQkv5dTltRJ11BKBBypeeF6689rjcJIDEz9RWdc",
   "dp":"BwKfV3Akq5_MFZDFZCnW-wzl-CCo83WoZvnLQwCTeDv8uzluRSnm71I3Q
        CLdhrqE2e9YkxvuxdBfpT_PI7Yz-FOKnu1R6HsJeDCjn12Sk3vmAktV2zb
        34MCdy7cpdTh_YVr7tss2u6vneTwrA86rZtu5Mbr1C1XsmvkxHQAdYo0",
   "dq":"h_96-mK1R_7glhsum81dZxjTnYynPbZpHziZjeeHcXYsXaaMwkOlODsWa
        7I9xXDoRwbKgB719rrmI2oKr6N3Do9U0ajaHF-NKJnwgjMd2w9cjz3_-ky
        NlxAr2v4IKhGNpmM5iIgOS1VZnOZ68m6_pbLBSp3nssTdlqvd0tIiTHU",
   "qi":"IYd7DHOhrWvxkwPQsRM2tOgrjbcrfvtQJipd-DlcxyVuuM9sQLdgjVk2o
        y26F0EmpScGLq2MowX7fhd_QJQ3ydy5cY7YIBi87w93IKLEdfnbJtoOPLU
        W0ITrJReOgo1cq9SbsxYawBgfp_gh6A5603k2-ZQwVK0JKSHuLFkuQ3U"
  }
The RSA private key is then passed to the RSA signing function, which
also takes the hash type, SHA-256, and the JWS Signing Input as
inputs.  The result of the digital signature is an octet sequence,
which represents a big-endian integer.  In this example, it is:
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-14">[112, 46, 33, 137, 67, 232, 143, 209, 30, 181, 216, 45, 191, 120, 69,
243, 65, 6, 174, 27, 129, 255, 247, 115, 17, 22, 173, 209, 113, 125,
131, 101, 109, 66, 10, 253, 60, 150, 238, 221, 115, 162, 102, 62, 81,
102, 104, 123, 0, 11, 135, 34, 110, 1, 135, 237, 16, 115, 249, 69,
229, 130, 173, 252, 239, 22, 216, 90, 121, 142, 232, 198, 109, 219,
61, 184, 151, 91, 23, 208, 148, 2, 190, 237, 213, 217, 217, 112, 7,
16, 141, 178, 129, 96, 213, 248, 4, 12, 167, 68, 87, 98, 184, 31,
190, 127, 249, 217, 46, 10, 231, 111, 36, 242, 91, 51, 187, 230, 244,
74, 230, 30, 177, 4, 10, 203, 32, 4, 77, 62, 249, 18, 142, 212, 1,
48, 121, 91, 212, 189, 59, 65, 238, 202, 208, 102, 171, 101, 25, 129,
253, 228, 141, 247, 127, 55, 45, 195, 139, 159, 175, 221, 59, 239,
177, 139, 93, 163, 204, 60, 46, 176, 47, 158, 58, 65, 214, 18, 202,
173, 21, 145, 18, 115, 160, 95, 35, 185, 232, 56, 250, 175, 132, 157,
105, 132, 41, 239, 90, 30, 136, 121, 130, 54, 195, 212, 14, 96, 69,
34, 165, 68, 200, 242, 122, 122, 45, 184, 6, 99, 209, 108, 247, 202,
234, 86, 222, 64, 92, 178, 33, 90, 69, 178, 194, 85, 102, 181, 90,
193, 167, 72, 160, 112, 223, 200, 163, 42, 70, 149, 67, 208, 25, 238,
251, 71]</t>
          <t indent="0" pn="section-a.2.1-15">Encoding the signature as BASE64URL(JWS Signature) produces this
value (with line breaks for display purposes only):</t>
          <t indent="0" pn="section-a.2.1-16"><artwork name="" type="" align="left" alt=""><![CDATA[
  cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZmh7
  AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjbKBYNX4
  BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHlb1L07Qe7K
  0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZESc6BfI7noOPqv
  hJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AXLIhWkWywlVmtVrB
  p0igcN_IoypGlUPQGe77Rw
Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZmh7
  AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjbKBYNX4
  BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHlb1L07Qe7K
  0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZESc6BfI7noOPqv
  hJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AXLIhWkWywlVmtVrB
  p0igcN_IoypGlUPQGe77Rw
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.2.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.2.2-1">Since the &quot;alg&quot; Header Parameter is &quot;RS256&quot;, we validate the RSASSA-
PKCS1-v1_5 SHA-256 digital signature contained in the JWS Signature.</t>
          <t indent="0" pn="section-a.2.2-2">Validating the JWS Signature is a bit different from the previous
example.  We pass the public key (n, e), the JWS Signature (which is
base64url decoded from the value encoded in the JWS representation),
and the JWS Signing Input (which is the initial substring of the JWS
Compact Serialization representation up until but not including the
second period character) to an RSASSA-PKCS1-v1_5 signature verifier
that has been configured to use the SHA-256 hash function.</t>
        </section>
      </section>
      <section anchor="example-jws-using-ecdsa-p-256-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.3">
        <name slugifiedName="name-example-jws-using-ecdsa-p-256-sha-256">Example JWS Using ECDSA P-256 SHA-256</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.3.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.3.1-1">The JWS Protected Header for this example differs from the previous
example because a different algorithm is being used.  The JWS
Protected Header used is:</t>
          <t indent="0" pn="section-a.3.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-3">The octets representing UTF8(JWS Protected Header) in this example
(using JSON array notation) are:</t>
          <t indent="0" pn="section-a.3.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 69, 83, 50, 53, 54, 34, 125]
Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
          <t indent="0" pn="section-a.3.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-6">The JWS Payload used in this example, which follows, is the same as
in the previous examples.  Since the BASE64URL(JWS Payload) value
will therefore be the same, its computation is not repeated here.</t>
          <t indent="0" pn="section-a.3.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-8">Combining these as BASE64URL(UTF8(JWS Protected Header)) || '.' ||
BASE64URL(JWS Payload) gives this string (with line breaks for
display purposes only):</t>
          <t indent="0" pn="section-a.3.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-10">The resulting JWS Signing Input value, which is the ASCII
representation of above string, is the following octet sequence:</t>
          <t indent="0" pn="section-a.3.1-11">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 70, 85, 122, 73,
49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
99, 110, 86, 108, 102, 81]</t>
          <t indent="0" pn="section-a.3.1-12">This example uses the Elliptic Curve key represented in JSON Web Key
<xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/> format below:</t>
          <t indent="0" pn="section-a.3.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
   "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
   "d":"jpsQnnGQmL-YBIffH1136cspYG6-0iY7X1fCE9-E9LI"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-14">The Elliptic Curve Digital Signature Algorithm (ECDSA) private part d
is then passed to an ECDSA signing function, which also takes the
curve type, P-256, the hash type, SHA-256, and the JWS Signing Input
as inputs.  The result of the digital signature is the Elliptic Curve</t>
          <t indent="0" pn="section-a.3.1-15">(EC) point (R, S), where R and S are unsigned integers.  In this
example, the R and S values, given as octet sequences representing
big-endian integers are:</t>
          <t indent="0" pn="section-a.3.1-16"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Result  Name</td>
<td align="left">Value                                                    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> R  </td>
<td align="left">[14, 209, 33, 83, 121, 99, 108, 72, 60, 47, 127, 21, 88,  7, 212, 2, 163, 178, 40, 3, 58, 249, 124, 126, 23, 129,   154, 195, 22, 158, 166, 101]                             </td>
</tr>
<tr>
<td align="left"> S  </td>
<td align="left">[197, 10, 7, 211, 140, 60, 112, 229, 216, 241, 45, 175,   8, 74, 84, 128, 166, 101, 144, 197, 242, 147, 80, 154,    143, 63, 127, 138, 131, 163, 84, 213]                    </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-a.3.1-17">The JWS Signature is the value R || S.  Encoding the signature as
BASE64URL(JWS Signature) produces this value (with line breaks for
display purposes only):</t>
          <t indent="0" pn="section-a.3.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
  DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8ISlSA
  pmWQxfKTUJqPP3-Kg6NU1Q
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-19">Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):</t>
          <t indent="0" pn="section-a.3.1-20"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8ISlSA
  pmWQxfKTUJqPP3-Kg6NU1Q
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.3.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.3.2-1">Since the &quot;alg&quot; Header Parameter is &quot;ES256&quot;, we validate the ECDSA
P-256 SHA-256 digital signature contained in the JWS Signature.</t>
          <t indent="0" pn="section-a.3.2-2">Validating the JWS Signature is a bit different from the previous
examples.  We need to split the 64 member octet sequence of the JWS
Signature (which is base64url decoded from the value encoded in the
JWS representation) into two 32 octet sequences, the first
representing R and the second S.  We then pass the public key (x, y),
the signature (R, S), and the JWS Signing Input (which is the initial
substring of the JWS Compact Serialization representation up until
but not including the second period character) to an ECDSA signature
verifier that has been configured to use the P-256 curve with the
SHA-256 hash function.</t>
        </section>
      </section>
      <section anchor="example-jws-using-ecdsa-p-521-sha-512" numbered="true" removeInRFC="false" toc="include" pn="section-a.4">
        <name slugifiedName="name-example-jws-using-ecdsa-p-521-sha-512">Example JWS Using ECDSA P-521 SHA-512</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.4.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.4.1-1">The JWS Protected Header for this example differs from the previous
example because different ECDSA curves and hash functions are used.
The JWS Protected Header used is:</t>
          <t indent="0" pn="section-a.4.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES512"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-3">The octets representing UTF8(JWS Protected Header) in this example
(using JSON array notation) are:</t>
          <t indent="0" pn="section-a.4.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 69, 83, 53, 49, 50, 34, 125]</t>
          <t indent="0" pn="section-a.4.1-5">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
          <t indent="0" pn="section-a.4.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-7">The JWS Payload used in this example is the ASCII string &quot;Payload&quot;.
The representation of this string is the following octet sequence:</t>
          <t indent="0" pn="section-a.4.1-8">[80, 97, 121, 108, 111, 97, 100]</t>
          <t indent="0" pn="section-a.4.1-9">Encoding this JWS Payload as BASE64URL(JWS Payload) gives this value:</t>
          <t indent="0" pn="section-a.4.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
  UGF5bG9hZA
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-11">Combining these as BASE64URL(UTF8(JWS Protected Header)) || '.' ||
BASE64URL(JWS Payload) gives this string:</t>
          <t indent="0" pn="section-a.4.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9.UGF5bG9hZA
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-13">The resulting JWS Signing Input value, which is the ASCII
representation of above string, is the following octet sequence:</t>
          <t indent="0" pn="section-a.4.1-14">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 70, 85, 122, 85,
120, 77, 105, 74, 57, 46, 85, 71, 70, 53, 98, 71, 57, 104, 90, 65]
This example uses the Elliptic Curve key represented in JSON Web Key
<xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/> format below (with line breaks within values for display
purposes only):</t>
          <t indent="0" pn="section-a.4.1-15"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-521",
   "x":"AekpBQ8ST8a8VcfVOTNl353vSrDCLLJXmPk06wTjxrrjcBpXp5EOnYG_
        NjFZ6OvLFV1jSfS9tsz4qUxcWceqwQGk",
   "y":"ADSmRA43Z1DSNx_RvcLI87cdL07l6jQyyBXMoxVg_l2Th-x3S1WDhjDl
        y79ajL4Kkd0AZMaZmh9ubmf63e3kyMj2",
   "d":"AY5pb7A0UFiB3RELSD64fTLOSV_jazdF7fLYyuTw8lOfRhWg6Y6rUrPA
        xerEzgdRhajnu0ferB0d53vM9mE15j2C"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-16">The ECDSA private part d is then passed to an ECDSA signing function,
which also takes the curve type, P-521, the hash type, SHA-512, and
the JWS Signing Input as inputs.  The result of the digital signature
is the EC point (R, S), where R and S are unsigned integers.  In this
example, the R and S values, given as octet sequences representing
big-endian integers are:</t>
          <t indent="0" pn="section-a.4.1-17"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Result  Name</td>
<td align="left">Value                                                    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> R     </td>
<td align="left">[1, 220, 12, 129, 231, 171, 194, 209, 232, 135, 233,      117, 247, 105, 122, 210, 26, 125, 192, 1, 217, 21, 82,    91, 45, 240, 255, 83, 19, 34, 239, 71, 48, 157, 147,      152, 105, 18, 53, 108, 163, 214, 68, 231, 62, 153, 150,   106, 194, 164, 246, 72, 143, 138, 24, 50, 129, 223, 133,  206, 209, 172, 63, 237, 119, 109]                        </td>
</tr>
<tr>
<td align="left"> S     </td>
<td align="left">[0, 111, 6, 105, 44, 5, 41, 208, 128, 61, 152, 40, 92,    61, 152, 4, 150, 66, 60, 69, 247, 196, 170, 81, 193,      199, 78, 59, 194, 169, 16, 124, 9, 143, 42, 142, 131,     48, 206, 238, 34, 175, 83, 203, 220, 159, 3, 107, 155,    22, 27, 73, 111, 68, 68, 21, 238, 144, 229, 232, 148,     188, 222, 59, 242, 103]                                  </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-a.4.1-18">The JWS Signature is the value R || S.  Encoding the signature as
BASE64URL(JWS Signature) produces this value (with line breaks for
display purposes only):</t>
          <t indent="0" pn="section-a.4.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
  AdwMgeerwtHoh-l192l60hp9wAHZFVJbLfD_UxMi70cwnZOYaRI1bKPWROc-mZZq
  wqT2SI-KGDKB34XO0aw_7XdtAG8GaSwFKdCAPZgoXD2YBJZCPEX3xKpRwcdOO8Kp
  EHwJjyqOgzDO7iKvU8vcnwNrmxYbSW9ERBXukOXolLzeO_Jn
Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-20"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9
  .
  UGF5bG9hZA
  .
  AdwMgeerwtHoh-l192l60hp9wAHZFVJbLfD_UxMi70cwnZOYaRI1bKPWROc-mZZq
  wqT2SI-KGDKB34XO0aw_7XdtAG8GaSwFKdCAPZgoXD2YBJZCPEX3xKpRwcdOO8Kp
  EHwJjyqOgzDO7iKvU8vcnwNrmxYbSW9ERBXukOXolLzeO_Jn
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.4.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.4.2-1">Since the &quot;alg&quot; Header Parameter is &quot;ES512&quot;, we validate the ECDSA
P-521 SHA-512 digital signature contained in the JWS Signature.</t>
          <t indent="0" pn="section-a.4.2-2">Validating this JWS Signature is very similar to the previous
example.  We need to split the 132-member octet sequence of the JWS
Signature into two 66-octet sequences, the first representing R and
the second S.  We then pass the public key (x, y), the signature (R,
S), and the JWS Signing Input to an ECDSA signature verifier that has
been configured to use the P-521 curve with the SHA-512 hash
function.</t>
        </section>
      </section>
      <section anchor="example-unsecured-jws" numbered="true" removeInRFC="false" toc="include" pn="section-a.5">
        <name slugifiedName="name-example-unsecured-jws">Example Unsecured JWS</name>
        <t indent="0" pn="section-a.5-1">The following example JWS Protected Header declares that the encoded
object is an Unsecured JWS:</t>
        <t indent="0" pn="section-a.5-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"none"}
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-3">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
        <t indent="0" pn="section-a.5-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIn0
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-5">The JWS Payload used in this example, which follows, is the same as
in the previous examples.  Since the BASE64URL(JWS Payload) value
will therefore be the same, its computation is not repeated here.</t>
        <t indent="0" pn="section-a.5-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-7">The JWS Signature is the empty octet string and BASE64URL(JWS
Signature) is the empty string.</t>
        <t indent="0" pn="section-a.5-8">Concatenating these values in the order Header.Payload.Signature with
period ('.') characters between the parts yields this complete JWS
representation using the JWS Compact Serialization (with line breaks
for display purposes only):</t>
        <t indent="0" pn="section-a.5-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIn0
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
]]></artwork>
</t>
      </section>
      <section anchor="example-jws-using-general-jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-a.6">
        <name slugifiedName="name-example-jws-using-general-jws-json-serialization">Example JWS Using General JWS JSON Serialization</name>
        <t indent="0" pn="section-a.6-1">This section contains an example using the general JWS JSON
Serialization syntax.  This example demonstrates the capability for
conveying multiple digital signatures and/or MACs for the same
payload.</t>
        <t indent="0" pn="section-a.6-2">The JWS Payload used in this example is the same as that used in the
examples in Appendix A.2 and Appendix A.3 (with line breaks for
display purposes only):</t>
        <t indent="0" pn="section-a.6-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
        <t indent="0" pn="section-a.6-4">Two digital signatures are used in this example: the first using
RSASSA-PKCS1-v1_5 SHA-256 and the second using ECDSA P-256 SHA-256.
For the first, the JWS Protected Header and key are the same as in
Appendix A.2, resulting in the same JWS Signature value; therefore,
its computation is not repeated here.  For the second, the JWS
Protected Header and key are the same as in Appendix A.3, resulting
in the same JWS Signature value; therefore, its computation is not
repeated here.</t>
        <section anchor="jws-per-signature-protected-headers" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.1">
          <name slugifiedName="name-jws-per-signature-protected-headers">JWS Per-Signature Protected Headers</name>
          <t indent="0" pn="section-a.6.1-1">The JWS Protected Header value used for the first signature is:</t>
          <t indent="0" pn="section-a.6.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-3">Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:</t>
          <t indent="0" pn="section-a.6.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-5">The JWS Protected Header value used for the second signature is:</t>
          <t indent="0" pn="section-a.6.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256"}
Encoding this JWS Protected Header as BASE64URL(UTF8(JWS Protected
Header)) gives this value:
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
]]></artwork>
</t>
        </section>
        <section anchor="jws-per-signature-unprotected-headers" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.2">
          <name slugifiedName="name-jws-per-signature-unprotected-headers">JWS Per-Signature Unprotected Headers</name>
          <t indent="0" pn="section-a.6.2-1">Key ID values are supplied for both keys using per-signature Header
Parameters.  The two JWS Unprotected Header values used to represent
these key IDs are:</t>
          <t indent="0" pn="section-a.6.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kid":"2010-12-29"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.2-3">and</t>
          <t indent="0" pn="section-a.6.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"}
]]></artwork>
</t>
        </section>
        <section anchor="complete-jose-header-values" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.3">
          <name slugifiedName="name-complete-jose-header-values">Complete JOSE Header Values</name>
          <t indent="0" pn="section-a.6.3-1">Combining the JWS Protected Header and JWS Unprotected Header values
supplied, the JOSE Header values used for the first and second
signatures, respectively, are:</t>
          <t indent="0" pn="section-a.6.3-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256",
   "kid":"2010-12-29"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.3-3">and</t>
          <t indent="0" pn="section-a.6.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256",
   "kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"}
]]></artwork>
</t>
        </section>
        <section anchor="complete-jws-json-serialization-representation" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.4">
          <name slugifiedName="name-complete-jws-json-serialization-representation">Complete JWS JSON Serialization Representation</name>
          <t indent="0" pn="section-a.6.4-1">The complete JWS JSON Serialization for these values is as follows
(with line breaks within values for display purposes only):</t>
          <t indent="0" pn="section-a.6.4-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":
    "eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF
     tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ",
   "signatures":[
    {"protected":"eyJhbGciOiJSUzI1NiJ9",
     "header":
      {"kid":"2010-12-29"},
     "signature":
      "cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZ
       mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb
       KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl
       b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES
       c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX
       LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw"},
    {"protected":"eyJhbGciOiJFUzI1NiJ9",
     "header":
      {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"},
     "signature":
      "DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8IS
       lSApmWQxfKTUJqPP3-Kg6NU1Q"}]
  }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="example-jws-using-flattened-jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-a.7">
        <name slugifiedName="name-example-jws-using-flattened-jws-json-serialization">Example JWS Using Flattened JWS JSON Serialization</name>
        <t indent="0" pn="section-a.7-1">This section contains an example using the flattened JWS JSON
Serialization syntax.  This example demonstrates the capability for
conveying a single digital signature or MAC in a flattened JSON
structure.</t>
        <t indent="0" pn="section-a.7-2">The values in this example are the same as those in the second
signature of the previous example in Appendix A.6.</t>
        <t indent="0" pn="section-a.7-3">The complete JWS JSON Serialization for these values is as follows
(with line breaks within values for display purposes only):</t>
        <t indent="0" pn="section-a.7-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":
    "eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF
     tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ",
   "protected":"eyJhbGciOiJFUzI1NiJ9",
   "header":
    {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"},
   "signature":
    "DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8IS
     lSApmWQxfKTUJqPP3-Kg6NU1Q"
  }
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="&quot;x5c&quot;-(x.509-certificate-chain)-example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-&quot;x5c&quot;-(x.509-certificate-chain)-example">&quot;x5c&quot; (X.509 Certificate Chain) Example</name>
      <t indent="0" pn="section-appendix.b-1">The JSON array below is an example of a certificate chain that could
be used as the value of an &quot;x5c&quot; (X.509 certificate chain) Header
Parameter, per Section 4.1.6 (with line breaks within values for
display purposes only):</t>
      <t indent="0" pn="section-appendix.b-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  ["MIIE3jCCA8agAwIBAgICAwEwDQYJKoZIhvcNAQEFBQAwYzELMAkGA1UEBhMCVVM
    xITAfBgNVBAoTGFRoZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR2
    8gRGFkZHkgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjExM
    TYwMTU0MzdaFw0yNjExMTYwMTU0MzdaMIHKMQswCQYDVQQGEwJVUzEQMA4GA1UE
    CBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTEaMBgGA1UEChMRR29EYWR
    keS5jb20sIEluYy4xMzAxBgNVBAsTKmh0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYW
    RkeS5jb20vcmVwb3NpdG9yeTEwMC4GA1UEAxMnR28gRGFkZHkgU2VjdXJlIENlc
    nRpZmljYXRpb24gQXV0aG9yaXR5MREwDwYDVQQFEwgwNzk2OTI4NzCCASIwDQYJ
    KoZIhvcNAQEBBQADggEPADCCAQoCggEBAMQt1RWMnCZM7DI161+4WQFapmGBWTt
    wY6vj3D3HKrjJM9N55DrtPDAjhI6zMBS2sofDPZVUBJ7fmd0LJR4h3mUpfjWoqV
    Tr9vcyOdQmVZWt7/v+WIbXnvQAjYwqDL1CBM6nPwT27oDyqu9SoWlm2r4arV3aL
    GbqGmu75RpRSgAvSMeYddi5Kcju+GZtCpyz8/x4fKL4o/K1w/O5epHBp+YlLpyo
    7RJlbmr2EkRTcDCVw5wrWCs9CHRK8r5RsL+H0EwnWGu1NcWdrxcx+AuP7q2BNgW
    JCJjPOq8lh8BJ6qf9Z/dFjpfMFDniNoW1fho3/Rb2cRGadDAW/hOUoz+EDU8CAw
    EAAaOCATIwggEuMB0GA1UdDgQWBBT9rGEyk2xF1uLuhV+auud2mWjM5zAfBgNVH
    SMEGDAWgBTSxLDSkdRMEXGzYcs9of7dqGrU4zASBgNVHRMBAf8ECDAGAQH/AgEA
    MDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovL29jc3AuZ29kYWR
    keS5jb20wRgYDVR0fBD8wPTA7oDmgN4Y1aHR0cDovL2NlcnRpZmljYXRlcy5nb2
    RhZGR5LmNvbS9yZXBvc2l0b3J5L2dkcm9vdC5jcmwwSwYDVR0gBEQwQjBABgRVH
    SAAMDgwNgYIKwYBBQUHAgEWKmh0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5j
    b20vcmVwb3NpdG9yeTAOBgNVHQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggE
    BANKGwOy9+aG2Z+5mC6IGOgRQjhVyrEp0lVPLN8tESe8HkGsz2ZbwlFalEzAFPI
    UyIXvJxwqoJKSQ3kbTJSMUA2fCENZvD117esyfxVgqwcSeIaha86ykRvOe5GPLL
    5CkKSkB2XIsKd83ASe8T+5o0yGPwLPk9Qnt0hCqU7S+8MxZC9Y7lhyVJEnfzuz9
    p0iRFEUOOjZv2kWzRaJBydTXRE4+uXR21aITVSzGh6O1mawGhId/dQb8vxRMDsx
    uxN89txJx9OjxUUAiKEngHUuHqDTMBqLdElrRhjZkAzVvb3du6/KFUJheqwNTrZ
    EjYx8WnM25sgVjOuH0aBsXBTWVU+4=",
   "MIIE+zCCBGSgAwIBAgICAQ0wDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1Z
    hbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIE
    luYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb
    24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8x
    IDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTA0MDYyOTE3MDY
    yMFoXDTI0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRoZS
    BHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3MgM
    iBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN
    ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XC
    APVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux
    6wwdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLO
    tXiEqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWo
    riMYavx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZ
    Eewo+YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjggHhMIIB3TAdBgNVHQ
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.b-3"><artwork name="" type="" align="left" alt=""><![CDATA[
    4EFgQU0sSw0pHUTBFxs2HLPaH+3ahq1OMwgdIGA1UdIwSByjCBx6GBwaSBvjCBu
    zEkMCIGA1UEBxMbVmFsaUNlcnQgVmFsaWRhdGlvbiBOZXR3b3JrMRcwFQYDVQQK
    Ew5WYWxpQ2VydCwgSW5jLjE1MDMGA1UECxMsVmFsaUNlcnQgQ2xhc3MgMiBQb2x
    pY3kgVmFsaWRhdGlvbiBBdXRob3JpdHkxITAfBgNVBAMTGGh0dHA6Ly93d3cudm
    FsaWNlcnQuY29tLzEgMB4GCSqGSIb3DQEJARYRaW5mb0B2YWxpY2VydC5jb22CA
    QEwDwYDVR0TAQH/BAUwAwEB/zAzBggrBgEFBQcBAQQnMCUwIwYIKwYBBQUHMAGG
    F2h0dHA6Ly9vY3NwLmdvZGFkZHkuY29tMEQGA1UdHwQ9MDswOaA3oDWGM2h0dHA
    6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS9yb290LmNybD
    BLBgNVHSAERDBCMEAGBFUdIAAwODA2BggrBgEFBQcCARYqaHR0cDovL2NlcnRpZ
    mljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5MA4GA1UdDwEB/wQEAwIBBjAN
    BgkqhkiG9w0BAQUFAAOBgQC1QPmnHfbq/qQaQlpE9xXUhUaJwL6e4+PrxeNYiY+
    Sn1eocSxI0YGyeR+sBjUZsE4OWBsUs5iB0QQeyAfJg594RAoYC5jcdnplDQ1tgM
    QLARzLrUc+cb53S8wGd9D0VmsfSxOaFIqII6hR8INMqzW/Rn453HWkrugp++85j
    09VZw==",
   "MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ
    0IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNT
    AzBgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0a
    G9yaXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkq
    hkiG9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE
    5MDYyNjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTm
    V0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZ
    XJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQD
    ExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9
    AdmFsaWNlcnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5a
    vIWZJV16vYdA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zf
    N1SLUzm1NZ9WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwb
    P7RfZHM047QSv4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQU
    AA4GBADt/UG9vUJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQ
    C1u+mNr0HZDzTuIYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMM
    j4QssxsodyamEwCW/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd"]
]]></artwork>
</t>
    </section>
    <section anchor="notes-on-implementing-base64url-encoding-without-padding" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-notes-on-implementing-base64url-encoding-without-padding">Notes on Implementing base64url Encoding without Padding</name>
      <t indent="0" pn="section-appendix.c-1">This appendix describes how to implement base64url encoding and
decoding functions without padding based upon standard base64
encoding and decoding functions that do use padding.</t>
      <t indent="0" pn="section-appendix.c-2">To be concrete, example C# code implementing these functions is shown
below.  Similar code could be used in other languages.</t>
      <t indent="0" pn="section-appendix.c-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  static string base64urlencode(byte [] arg)
  {
    string s = Convert.ToBase64String(arg); // Regular base64 encoder
    s = s.Split('=')[0]; // Remove any trailing '='s
    s = s.Replace('+', '-'); // 62nd char of encoding
    s = s.Replace('/', '_'); // 63rd char of encoding
    return s;
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  static byte [] base64urldecode(string arg)
  {
    string s = arg;
    s = s.Replace('-', '+'); // 62nd char of encoding
    s = s.Replace('_', '/'); // 63rd char of encoding
    switch (s.Length % 4) // Pad with trailing '='s
    {
      case 0: break; // No pad chars in this case
      case 2: s += "=="; break; // Two pad chars
      case 3: s += "="; break; // One pad char
      default: throw new System.Exception(
        "Illegal base64url string!");
    }
    return Convert.FromBase64String(s); // Standard base64 decoder
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-5">As per the example code above, the number of '=' padding characters
that needs to be added to the end of a base64url-encoded string
without padding to turn it into one with padding is a deterministic
function of the length of the encoded string.  Specifically, if the
length mod 4 is 0, no padding is added; if the length mod 4 is 2, two
'=' padding characters are added; if the length mod 4 is 3, one '='
padding character is added; if the length mod 4 is 1, the input is
malformed.</t>
      <t indent="0" pn="section-appendix.c-6">An example correspondence between unencoded and encoded values
follows.  The octet sequence below encodes into the string below,
which when decoded, reproduces the octet sequence.</t>
      <t indent="0" pn="section-appendix.c-7">3 236 255 224 193
A-z_4ME</t>
    </section>
    <section anchor="notes-on-key-selection" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-notes-on-key-selection">Notes on Key Selection</name>
      <t indent="0" pn="section-appendix.d-1">This appendix describes a set of possible algorithms for selecting
the key to be used to validate the digital signature or MAC of a JWS
or for selecting the key to be used to decrypt a JWE.  This guidance
describes a family of possible algorithms rather than a single
algorithm, because in different contexts, not all the sources of keys
will be used, they can be tried in different orders, and sometimes
not all the collected keys will be tried; hence, different algorithms
will be used in different application contexts.</t>
      <t indent="0" pn="section-appendix.d-2">The steps below are described for illustration purposes only;
specific applications can and are likely to use different algorithms
or perform some of the steps in different orders.  Specific
applications will frequently have a much simpler method of
determining the keys to use, as there may be one or two key selection
methods that are profiled for the application's use.  This appendix
supplements the normative information on key location in Section 6.</t>
      <t indent="0" pn="section-appendix.d-3">These algorithms include the following steps.  Note that the steps
can be performed in any order and do not need to be treated as
distinct.  For example, keys can be tried as soon as they are found,
rather than collecting all the keys before trying any.</t>
      <t indent="0" pn="section-appendix.d-4">1.  Collect the set of potentially applicable keys.  Sources of keys
    may include:</t>
      <t indent="0" pn="section-appendix.d-5"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  Keys supplied by the application protocol being used.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-6"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  Keys referenced by the "jku" (JWK Set URL) Header Parameter.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-7"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  The key provided by the "jwk" (JSON Web Key) Header Parameter.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-8"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  The key referenced by the "x5u" (X.509 URL) Header Parameter.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-9"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  The key provided by the "x5c" (X.509 certificate chain) Header
       Parameter.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-10"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  Other applicable keys available to the application.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-11"><artwork name="" type="" align="left" alt=""><![CDATA[
    The order for collecting and trying keys from different key
    sources is typically application dependent.  For example,
    frequently, all keys from a one set of locations, such as local
    caches, will be tried before collecting and trying keys from
    other locations.
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-12">2.  Filter the set of collected keys.  For instance, some
    applications will use only keys referenced by &quot;kid&quot; (key ID) or
    &quot;x5t&quot; (X.509 certificate SHA-1 thumbprint) parameters.  If the
    application uses the JWK &quot;alg&quot; (algorithm), &quot;use&quot; (public key
    use), or &quot;key_ops&quot; (key operations) parameters, keys with
    inappropriate values of those parameters would be excluded.
    Additionally, keys might be filtered to include or exclude keys
    with certain other member values in an application-specific
    manner.  For some applications, no filtering will be applied.</t>
      <t indent="0" pn="section-appendix.d-13">3.  Order the set of collected keys.  For instance, keys referenced
    by &quot;kid&quot; (key ID) or &quot;x5t&quot; (X.509 certificate SHA-1 thumbprint)
    parameters might be tried before keys with neither of these
    values.  Likewise, keys with certain member values might be
    ordered before keys with other member values.  For some
    applications, no ordering will be applied.</t>
      <t indent="0" pn="section-appendix.d-14">4.  Make trust decisions about the keys.  Signatures made with keys
    not meeting the application's trust criteria would not be
    accepted.  Such criteria might include, but is not limited to,
    the source of the key, whether the TLS certificate validates for
    keys retrieved from URLs, whether a key in an X.509 certificate
    is backed by a valid certificate chain, and other information
    known by the application.</t>
      <t indent="0" pn="section-appendix.d-15">5.  Attempt signature or MAC validation for a JWS or decryption of a
    JWE with some or all of the collected and possibly filtered and/
    or ordered keys.  A limit on the number of keys to be tried might
    be applied.  This process will normally terminate following a
    successful validation or decryption.</t>
      <t indent="0" pn="section-appendix.d-16">Note that it is reasonable for some applications to perform signature
or MAC validation prior to making a trust decision about a key, since
keys for which the validation fails need no trust decision.</t>
    </section>
    <section anchor="negative-test-case-for-&quot;crit&quot;-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-negative-test-case-for-&quot;crit&quot;-header-parameter">Negative Test Case for &quot;crit&quot; Header Parameter</name>
      <t indent="0" pn="section-appendix.e-1">Conforming implementations must reject input containing critical
extensions that are not understood or cannot be processed.  The
following JWS must be rejected by all implementations, because it
uses an extension Header Parameter name &quot;http://example.invalid/
UNDEFINED&quot; that they do not understand.  Any other similar input, in
which the use of the value &quot;http://example.invalid/UNDEFINED&quot; is
substituted for any other Header Parameter name not understood by the
implementation, must also be rejected.</t>
      <t indent="0" pn="section-appendix.e-2">The JWS Protected Header value for this JWS is:</t>
      <t indent="0" pn="section-appendix.e-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"none",
   "crit":["http://example.invalid/UNDEFINED"],
   "http://example.invalid/UNDEFINED":true
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-4">The complete JWS that must be rejected is as follows (with line
breaks for display purposes only):</t>
      <t indent="0" pn="section-appendix.e-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIiwNCiAiY3JpdCI6WyJodHRwOi8vZXhhbXBsZS5jb20vVU5ERU
  ZJTkVEIl0sDQogImh0dHA6Ly9leGFtcGxlLmNvbS9VTkRFRklORUQiOnRydWUNCn0.
  RkFJTA.
]]></artwork>
</t>
    </section>
    <section anchor="detached-content" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-detached-content">Detached Content</name>
      <t indent="0" pn="section-appendix.f-1">In some contexts, it is useful to integrity-protect content that is
not itself contained in a JWS.  One way to do this is to create a JWS
in the normal fashion using a representation of the content as the
payload but then delete the payload representation from the JWS and
send this modified object to the recipient rather than the JWS.  When
using the JWS Compact Serialization, the deletion is accomplished by
replacing the second field (which contains BASE64URL(JWS Payload))
value with the empty string; when using the JWS JSON Serialization,
the deletion is accomplished by deleting the &quot;payload&quot; member.  This
method assumes that the recipient can reconstruct the exact payload
used in the JWS.  To use the modified object, the recipient
reconstructs the JWS by re-inserting the payload representation into
the modified object and uses the resulting JWS in the usual manner.
Note that this method needs no support from JWS libraries, as
applications can use this method by modifying the inputs and outputs
of standard JWS libraries.</t>
    </section>
    <section anchor="acknowledgements" numbered="false" removeInRFC="false" toc="exclude" pn="section-appendix.g">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
        <t indent="0" pn="section-appendix.g-1">Solutions for signing JSON content were previously explored by Magic
Signatures <xref target="MagicSignatures" format="default" sectionFormat="of" derivedContent="MagicSignatures"/>, JSON Simple Sign <xref target="JSS" format="default" sectionFormat="of" derivedContent="JSS"/>, and Canvas
Applications <xref target="CanvasApp" format="default" sectionFormat="of" derivedContent="CanvasApp"/>, all of which influenced this document.</t>
        <t indent="0" pn="section-appendix.g-2">Thanks to Axel Nennker for his early implementation and feedback on
the JWS and JWE specifications.</t>
        <t indent="0" pn="section-appendix.g-3">This specification is the work of the JOSE working group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that influenced this specification:</t>
        <t indent="0" pn="section-appendix.g-4">Dirk Balfanz, Richard Barnes, Brian Campbell, Alissa Cooper, Breno de
Medeiros, Stephen Farrell, Yaron Y. Goland, Dick Hardt, Joe
Hildebrand, Jeff Hodges, Russ Housley, Edmund Jay, Tero Kivinen, Ben
Laurie, Ted Lemon, James Manger, Matt Miller, Kathleen Moriarty, Tony
Nadalin, Hideki Nara, Axel Nennker, John Panzer, Ray Polk, Emmanuel
Raviart, Eric Rescorla, Pete Resnick, Jim Schaad, Paul Tarjan, Hannes
Tschofenig, and Sean Turner.</t>
        <t indent="0" pn="section-appendix.g-5">Jim Schaad and Karen O'Donoghue chaired the JOSE working group and
Sean Turner, Stephen Farrell, and Kathleen Moriarty served as
Security Area Directors during the creation of this specification.</t>
      </section>
  </back>
</rfc>
