<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="std" consensus="true" submissionType="IETF" docName="draft-ietf-netconf-tls-client-server-41" number="9645" ipr="trust200902" tocInclude="true" symRefs="true" sortRefs="true" updates="" obsoletes="" xml:lang="en" prepTime="2024-10-10T16:34:18" indexInclude="true" scripts="Common,Latin" tocDepth="3">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-netconf-tls-client-server-41" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9645" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="Groupings for TLS Clients and Servers">YANG Groupings for TLS Clients and TLS Servers</title>
    <seriesInfo name="RFC" value="9645" stream="IETF"/>
    <author fullname="Kent Watsen" initials="K." surname="Watsen">
      <organization showOnFrontPage="true">Watsen Networks</organization>
      <address>
        <email>kent+ietf@watsen.net</email>
      </address>
    </author>
    <date month="10" year="2024"/>
    <area>OPS</area>
    <workgroup>netconf</workgroup>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document presents four YANG 1.1 modules -- three IETF modules
        and one supporting IANA module.</t>
      <t indent="0" pn="section-abstract-2">The three IETF modules are "ietf-tls-common", "ietf-tls-client", and 
        "ietf-tls-server".  The "ietf-tls-client" and "ietf-tls-server" modules
        are the primary productions of this work, supporting the configuration
        and monitoring of TLS clients and servers.</t>
      <t indent="0" pn="section-abstract-3">The IANA module is "iana-tls-cipher-suite-algs".  This module 
        defines YANG enumerations that provide support for an IANA-maintained
        algorithm registry.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9645" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2024 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-regarding-the-three-ietf-mo">Regarding the Three IETF Modules</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-relation-to-other-rfcs">Relation to Other RFCs</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-specification-language">Specification Language</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.4">
                <t indent="0" pn="section-toc.1-1.1.2.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-adherence-to-the-nmda">Adherence to the NMDA</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.5">
                <t indent="0" pn="section-toc.1-1.1.2.5.1"><xref derivedContent="1.5" format="counter" sectionFormat="of" target="section-1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-conventions">Conventions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-ietf-tls-common-module">The "ietf-tls-common" Module</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-model-overview">Data Model Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-usage">Example Usage</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-yang-module">YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-ietf-tls-client-module">The "ietf-tls-client" Module</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-model-overview-2">Data Model Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-usage-2">Example Usage</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-yang-module-2">YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-ietf-tls-server-module">The "ietf-tls-server" Module</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-model-overview-3">Data Model Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-usage-3">Example Usage</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-yang-module-3">YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considerations-for-the-iana">Considerations for the "iana-tls-cipher-suite-algs" YANG Module</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considerations-for-the-ietf">Considerations for the "ietf-tls-common" YANG Module</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considerations-for-the-ietf-">Considerations for the "ietf-tls-client" YANG Module</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considerations-for-the-ietf-t">Considerations for the "ietf-tls-server" YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-ietf-xml-registry">The IETF XML Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-yang-module-names-regis">The YANG Module Names Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-considerations-for-the-iana-">Considerations for the "iana-tls-cipher-suite-algs" YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-script-to-generate-iana-mai">Script to Generate IANA-Maintained YANG Modules</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-contributors">Contributors</xref></t>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.d"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-address">Author's Address</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">This document presents four YANG 1.1 <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950"/>
          modules -- three IETF modules and one IANA module.</t>
      <t indent="0" pn="section-1-2">The three IETF modules are "ietf-tls-common" (<xref target="tls-common-model" format="default" sectionFormat="of" derivedContent="Section 2"/>),
        "ietf-tls-client" (<xref target="tls-client-model" format="default" sectionFormat="of" derivedContent="Section 3"/>), and "ietf-tls-server"
        (<xref target="tls-server-model" format="default" sectionFormat="of" derivedContent="Section 4"/>).  The "ietf-tls-client" and
        "ietf-tls-server" modules are the primary productions of this work,
        supporting the configuration and monitoring of TLS clients and servers.</t>
      <t indent="0" pn="section-1-3">The groupings defined in this document are expected to be used in
        conjunction with the groupings defined in an underlying transport-level
	      module, such as the groupings defined in <xref target="RFC9643" format="default" sectionFormat="of" derivedContent="RFC9643"/>.
        The transport-level data model enables the configuration of transport-level
        values such as a remote address, a remote port, a local address, and a
        local port.</t>
      <t indent="0" pn="section-1-4">The IANA module is "iana-tls-cipher-suite-algs".
        This module defines YANG enumerations that provide support for an IANA-maintained
        algorithm registry.</t>
      <t indent="0" pn="section-1-5">IANA used the script in <xref target="iana-script" format="default" sectionFormat="of" derivedContent="Appendix A"/> to generate the "iana-tls-cipher-suite-algs" YANG module.  This document does not
        publish the initial version of the module; it is published and maintained by IANA.</t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-regarding-the-three-ietf-mo">Regarding the Three IETF Modules</name>
        <t indent="0" pn="section-1.1-1">The three IETF modules define features and groupings to model "generic" TLS
          clients and TLS servers, where "generic" should be interpreted as "least
          common denominator" rather than "complete."  Basic TLS protocol support
          is afforded by these modules, leaving configuration of advance features
          to augmentations made by consuming modules.</t>
        <t indent="0" pn="section-1.1-2">It is intended that the YANG groupings will be used by applications needing
          to configure TLS client and server protocol stacks.  For instance, these
          groupings are used to help define the data model for HTTPS <xref target="RFC9110" format="default" sectionFormat="of" derivedContent="RFC9110"/>
          and clients and servers based on the Network Configuration Protocol (NETCONF) over TLS <xref target="RFC7589" format="default" sectionFormat="of" derivedContent="RFC7589"/> in <xref target="I-D.ietf-netconf-http-client-server" format="default" sectionFormat="of" derivedContent="HTTP-CLIENT-SERVER"/> and <xref target="I-D.ietf-netconf-netconf-client-server" format="default" sectionFormat="of" derivedContent="NETCONF-CLIENT-SERVER"/>, respectively.</t>
        <t indent="0" pn="section-1.1-3">The "ietf-tls-client" and "ietf-tls-server" YANG modules each define one
          grouping, which is focused on just TLS-specific configuration, and
          specifically avoid any transport-level configuration, such as what
          ports to listen on or connect to. This affords applications the
          opportunity to define their own strategy for how the underlying TCP
          connection is established. For instance, applications supporting NETCONF
          Call Home <xref target="RFC8071" format="default" sectionFormat="of" derivedContent="RFC8071"/> could use the "tls-server-grouping"
          grouping for the TLS parts it provides, while adding data nodes for the
          TCP-level call-home configuration.</t>
        <t indent="0" pn="section-1.1-4">Both TLS 1.2 and TLS 1.3 may be configured.  TLS 1.2
          <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/> is obsoleted by TLS 1.3 <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>
          but is still in common use, and hence its "feature" statement is marked
          "status deprecated".</t>
      </section>
      <section anchor="collective-effort" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-relation-to-other-rfcs">Relation to Other RFCs</name>
        <t indent="0" pn="section-1.2-1">This document presents four YANG modules <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950"/>
            that are part of a collection of RFCs that work together
            to ultimately support the configuration of both the clients
            and servers of the NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and
            RESTCONF <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/> protocols.</t>
        <t indent="0" pn="section-1.2-2"> The dependency relationship between the primary YANG groupings
            defined in the various RFCs is presented in the diagram below.
            In some cases, a document may define secondary groupings that
            introduce dependencies not illustrated in the diagram.
            The labels in the diagram are shorthand names for the defining
            RFCs.  The citation references for the shorthand names are provided below
            the diagram.</t>
        <t indent="0" pn="section-1.2-3">Please note that the arrows in the diagram point from referencer
            to referenced.  For example, the "crypto-types" RFC does not
            have any dependencies, whilst the "keystore" RFC depends on the
            "crypto-types" RFC.</t>
        <artwork align="left" pn="section-1.2-4">
                               crypto-types
                                 ^      ^
                                /        \
                               /          \
                      truststore         keystore
                       ^     ^             ^  ^
                       |     +---------+   |  |
                       |               |   |  |
                       |      +------------+  |
tcp-client-server      |     /         |      |
   ^    ^        ssh-client-server     |      |
   |    |           ^            tls-client-server
   |    |           |              ^     ^        http-client-server
   |    |           |              |     |                 ^
   |    |           |        +-----+     +---------+       |
   |    |           |        |                     |       |
   |    +-----------|--------|--------------+      |       |
   |                |        |              |      |       |
   +-----------+    |        |              |      |       |
               |    |        |              |      |       |
               |    |        |              |      |       |
            netconf-client-server       restconf-client-server
</artwork>
        <table align="left" pn="table-1">
          <name slugifiedName="name-labels-in-diagram-to-rfc-ma">Labels in Diagram to RFC Mapping</name>
          <tbody>
            <tr>
              <th align="left" colspan="1" rowspan="1">Label in Diagram</th>
              <th align="left" colspan="1" rowspan="1">Originating RFC</th>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">crypto-types</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">truststore</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9641" format="default" sectionFormat="of" derivedContent="RFC9641"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">keystore</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9642" format="default" sectionFormat="of" derivedContent="RFC9642"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">tcp-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9643" format="default" sectionFormat="of" derivedContent="RFC9643"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">ssh-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9644" format="default" sectionFormat="of" derivedContent="RFC9644"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">tls-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                RFC 9645</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">http-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="I-D.ietf-netconf-http-client-server" format="default" sectionFormat="of" derivedContent="HTTP-CLIENT-SERVER"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">netconf-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="I-D.ietf-netconf-netconf-client-server" format="default" sectionFormat="of" derivedContent="NETCONF-CLIENT-SERVER"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">restconf-client-server</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="I-D.ietf-netconf-restconf-client-server" format="default" sectionFormat="of" derivedContent="RESTCONF-CLIENT-SERVER"/></td>
            </tr>
          </tbody>
        </table>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-specification-language">Specification Language</name>
        <t indent="0" pn="section-1.3-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.4">
        <name slugifiedName="name-adherence-to-the-nmda">Adherence to the NMDA</name>
        <t indent="0" pn="section-1.4-1">This document is compliant with the Network Management Datastore 
          Architecture (NMDA) <xref target="RFC8342" format="default" sectionFormat="of" derivedContent="RFC8342"/>.  For instance, as 
          described in <xref target="RFC9641" format="default" sectionFormat="of" derivedContent="RFC9641"/> and
          <xref target="RFC9642" format="default" sectionFormat="of" derivedContent="RFC9642"/>, trust anchors and keys
          installed during manufacturing are expected to appear
          in &lt;operational&gt; (<xref section="5.3" target="RFC8342" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8342#section-5.3" derivedContent="RFC8342"/>) and &lt;system&gt;
          <xref target="I-D.ietf-netmod-system-config" format="default" sectionFormat="of" derivedContent="SYSTEM-CONFIG"/> if implemented.</t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.5">
        <name slugifiedName="name-conventions">Conventions</name>
        <t indent="0" pn="section-1.5-1">Various examples in this document use "BASE64VALUE=" as a
            placeholder value for binary data that has been base64 encoded
            (per <xref section="9.8" target="RFC7950" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7950#section-9.8" derivedContent="RFC7950"/>).  This
            placeholder value is used because real base64-encoded structures
            are often many lines long and hence distracting to the example
        being presented.</t>
        <t indent="0" pn="section-1.5-2">
  Various examples in this document use the XML <xref target="W3C.REC-xml-20081126" format="default" sectionFormat="of" derivedContent="W3C.REC-xml-20081126"/> encoding. Other encodings, such as
  JSON <xref target="RFC8259" format="default" sectionFormat="of" derivedContent="RFC8259"/>, could alternatively be used.
        </t>
        <t indent="0" pn="section-1.5-3">
  Various examples in this document contain long lines that may be folded,
  as described in [RFC8792].
        </t>
      </section>
    </section>
    <section anchor="tls-common-model" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-the-ietf-tls-common-module">The "ietf-tls-common" Module</name>
      <t indent="0" pn="section-2-1">The TLS common model presented in this section contains features
      and groupings common to both TLS clients and TLS servers. The
      "hello-params-grouping" grouping can be used to configure the list of TLS
      algorithms permitted by the TLS client or TLS server. The lists of
      algorithms are ordered such that, if multiple algorithms are permitted
      by the client, the algorithm that appears first in its list and that is also
      permitted by the server is used for the TLS transport layer connection.
      The ability to restrict the algorithms allowed is provided in this
      grouping for TLS clients and TLS servers that are capable of doing so
      and that may serve to make TLS clients and TLS servers compliant with local
      security policies. This model supports both TLS 1.2 <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/> and TLS 1.3 <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>.</t>
      <t indent="0" pn="section-2-2">Thus, in order to support both TLS 1.2 and TLS 1.3, the cipher suites
      part of the "hello-params-grouping" grouping should include the following three parameters for
      configuring its permitted TLS algorithms: TLS Cipher Suites,
      TLS SignatureScheme, and TLS Supported Groups.</t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-data-model-overview">Data Model Overview</name>
        <t indent="0" pn="section-2.1-1">This section provides an overview of the "ietf-tls-common" module
          in terms of its features, identities, and groupings.</t>
        <section anchor="common-features" toc="exclude" numbered="true" removeInRFC="false" pn="section-2.1.1">
          <name slugifiedName="name-features">Features</name>
          <t indent="0" pn="section-2.1.1-1">The following diagram lists all the "feature" statements
          defined in the "ietf-tls-common" module:</t>
          <sourcecode type="yangtree" markers="false" pn="section-2.1.1-2">
Features:
  +-- tls12
  +-- tls13
  +-- hello-params
  +-- asymmetric-key-pair-generation
  +-- supported-algorithms
</sourcecode>
          <t indent="0" pn="section-2.1.1-3">The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/>.</t>
          <t indent="0" pn="section-2.1.1-4">Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section anchor="identities" toc="exclude" numbered="true" removeInRFC="false" pn="section-2.1.2">
          <name slugifiedName="name-identities">Identities</name>
          <t indent="0" pn="section-2.1.2-1">The following diagram illustrates the relationship amongst the
            "identity" statements defined in the "ietf-tls-common" module:</t>
          <sourcecode type="yangtree" markers="false" pn="section-2.1.2-2">
Identities:
  +-- tls-version-base
     +-- tls12
     +-- tls13
</sourcecode>
          <t indent="0" pn="section-2.1.2-3">The diagram above uses syntax that is similar to but not
              defined in <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/>.</t>
          <t indent="0" pn="section-2.1.2-4">Comments:</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-2.1.2-5">
            <li pn="section-2.1.2-5.1">The diagram shows that there are two base identities.</li>
            <li pn="section-2.1.2-5.2">One base identity is used to specify TLS versions.  This base identity is "abstract" in the object-oriented programming sense because it defines a "class" of things rather than a specific thing.
</li>
            <li pn="section-2.1.2-5.3">These base identities are "abstract" in the object-oriented
              programming sense because they only define a "class" of things
              rather than a specific thing.</li>
          </ul>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-2.1.3">
          <name slugifiedName="name-groupings">Groupings</name>
          <t indent="0" pn="section-2.1.3-1">The "ietf-tls-common" module defines the following "grouping" statement:</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-2.1.3-2">
            <li pn="section-2.1.3-2.1">hello-params-grouping</li>
          </ul>
          <t indent="0" pn="section-2.1.3-3">This grouping is presented in the following subsection.</t>
          <section anchor="hello-params-grouping" numbered="true" removeInRFC="false" toc="exclude" pn="section-2.1.3.1">
            <name slugifiedName="name-the-hello-params-grouping-g">The "hello-params-grouping" Grouping</name>
            <t indent="0" pn="section-2.1.3.1-1">The following tree diagram <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/> illustrates the
              "hello-params-grouping" grouping:</t>
            <sourcecode type="yangtree" markers="false" pn="section-2.1.3.1-2">
  grouping hello-params-grouping:
    +-- tls-versions
    |  +-- min?   identityref
    |  +-- max?   identityref
    +-- cipher-suites
       +-- cipher-suite*   tlscsa:tls-cipher-suite-algorithm
</sourcecode>
            <t indent="0" pn="section-2.1.3.1-3">Comments:</t>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2.1.3.1-4">
              <li pn="section-2.1.3.1-4.1">This grouping is used by both the "tls-client-grouping" and the
                "tls-server-grouping" groupings defined in Sections <xref target="tls-client-grouping" format="counter" sectionFormat="of" derivedContent="3.1.2.1"/> 
                and <xref target="tls-server-grouping" format="counter" sectionFormat="of" derivedContent="4.1.2.1"/>, respectively.</li>
              <li pn="section-2.1.3.1-4.2">This grouping enables client and server configurations to
                specify the TLS versions and cipher suites that are to be used
                when establishing TLS sessions.</li>
              <li pn="section-2.1.3.1-4.3">The "cipher-suites" list is "ordered-by user".</li>
            </ul>
          </section>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-2.1.4">
          <name slugifiedName="name-protocol-accessible-nodes">Protocol-Accessible Nodes</name>
          <t indent="0" pn="section-2.1.4-1">The following tree diagram <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/> lists all the
            protocol-accessible nodes defined in the "ietf-tls-common" module,
            without expanding the "grouping" statements:</t>
          <sourcecode type="yangtree" markers="false" pn="section-2.1.4-2">
module: ietf-tls-common
  +--ro supported-algorithms {algorithm-discovery}?
     +--ro supported-algorithm*   tlscsa:tls-cipher-suite-algorithm

  rpcs:
    +---x generate-asymmetric-key-pair
            {asymmetric-key-pair-generation}?
       +---w input
       |  +---w algorithm
       |  |       tlscsa:tls-cipher-suite-algorithm
       |  +---w num-bits?               uint16
       |  +---w private-key-encoding
       |     +---w (private-key-encoding)
       |        +--:(cleartext) {ct:cleartext-private-keys}?
       |        |  +---w cleartext?   empty
       |        +--:(encrypted) {ct:encrypted-private-keys}?
       |        |  +---w encrypted
       |        |     +---w ks:encrypted-by-grouping
       |        +--:(hidden) {ct:hidden-private-keys}?
       |           +---w hidden?      empty
       +--ro output
          +--ro (key-or-hidden)?
             +--:(key)
             |  +---u ct:asymmetric-key-pair-grouping
             +--:(hidden)
                +--ro location?
                        instance-identifier
</sourcecode>
          <t indent="0" pn="section-2.1.4-3">Comments:</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-2.1.4-4">
            <li pn="section-2.1.4-4.1">Protocol-accessible nodes are nodes that are accessible
              when the module is "implemented", as described in <xref section="5.6.5" target="RFC7950" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7950#section-5.6.5" derivedContent="RFC7950"/>.</li>
            <li pn="section-2.1.4-4.2">The protocol-accessible nodes for the "ietf-tls-common" module
              are limited to the "supported-algorithms" container, which is constrained
              by the "algorithm-discovery" feature, and the "generate-asymmetric-key-pair" RPC,
              which is constrained by the "asymmetric-key-pair-generation" feature.</li>
            <li pn="section-2.1.4-4.3">The "encrypted-by-grouping" grouping is discussed in
              <xref section="2.1.3.1" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.1" derivedContent="RFC9642"/>.</li>
            <li pn="section-2.1.4-4.4">The "asymmetric-key-pair-grouping" grouping is discussed in
              <xref section="2.1.4.6" target="RFC9640" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9640#section-2.1.4.6" derivedContent="RFC9640"/>.</li>
          </ul>
        </section>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-2.2">
        <name slugifiedName="name-example-usage">Example Usage</name>
        <t indent="0" pn="section-2.2-1">The following example illustrates the "hello-params-grouping"
        grouping when populated with some data.</t>
        <sourcecode type="xml" markers="false" pn="section-2.2-2">
&lt;!-- The outermost element below doesn't exist in the data model. --&gt;
&lt;!--  It simulates if the "grouping" were a "container" instead.  --&gt;

&lt;hello-params
   xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-common"
   xmlns:tlscmn="urn:ietf:params:xml:ns:yang:ietf-tls-common"&gt;
  &lt;tls-versions&gt;
    &lt;min&gt;tlscmn:tls12&lt;/min&gt;
    &lt;max&gt;tlscmn:tls13&lt;/max&gt;
  &lt;/tls-versions&gt;
  &lt;cipher-suites&gt;
    &lt;cipher-suite&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/cipher-suite&gt;
    &lt;cipher-suite&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;/cipher-suite&gt;
    &lt;cipher-suite&gt;TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;/cipher-suite&gt;
  &lt;/cipher-suites&gt;
&lt;/hello-params&gt;
</sourcecode>
        <t indent="0" pn="section-2.2-3">The following example illustrates operational state data indicating
        the TLS algorithms supported by the server.</t>
        <sourcecode type="xml" markers="false" pn="section-2.2-4">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;supported-algorithms
  xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-common"&gt;
  &lt;supported-algorithm&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA&lt;/support\
ed-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384&lt;/supp\
orted-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_DHE_RSA_WITH_AES_128_CBC_SHA256&lt;/supporte\
d-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_RSA_WITH_3DES_EDE_CBC_SHA&lt;/supported-algo\
rithm&gt;
  &lt;supported-algorithm&gt;TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384&lt;/suppor\
ted-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256&lt;/su\
pported-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_ECCPWD_WITH_AES_256_GCM_SHA384&lt;/supported\
-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_PSK_WITH_AES_256_CCM&lt;/supported-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_PSK_WITH_AES_256_CCM_8&lt;/supported-algorit\
hm&gt;
  &lt;supported-algorithm&gt;TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384&lt;/sup\
ported-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384&lt;/support\
ed-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA&lt;/supported\
-algorithm&gt;
  &lt;supported-algorithm&gt;TLS_DH_DSS_WITH_AES_128_GCM_SHA256&lt;/supported\
-algorithm&gt;
&lt;/supported-algorithms&gt;
</sourcecode>
        <t indent="0" pn="section-2.2-5">The following example illustrates the "generate-asymmetric-key-pair" RPC.</t>
        <t keepWithNext="true" indent="0" pn="section-2.2-6">REQUEST</t>
        <sourcecode type="xml" markers="false" pn="section-2.2-7">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;rpc message-id="101"
  xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"&gt;
  &lt;generate-asymmetric-key-pair
    xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-common"&gt;
    &lt;algorithm&gt;TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256&lt;/algorithm&gt;
    &lt;num-bits&gt;521&lt;/num-bits&gt;
    &lt;private-key-encoding&gt;
      &lt;encrypted&gt;
        &lt;asymmetric-key-ref&gt;hidden-asymmetric-key&lt;/asymmetric-key-re\
f&gt;
      &lt;/encrypted&gt;
    &lt;/private-key-encoding&gt;
  &lt;/generate-asymmetric-key-pair&gt;
&lt;/rpc&gt;
</sourcecode>
        <t keepWithNext="true" indent="0" pn="section-2.2-8">RESPONSE</t>
        <sourcecode type="xml" markers="false" pn="section-2.2-9">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;rpc-reply message-id="101"
  xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"
  xmlns:tlscmn="urn:ietf:params:xml:ns:yang:ietf-tls-common"&gt;
  &lt;tlscmn:public-key-format&gt;ct:subject-public-key-info-format&lt;/tlscm\
n:public-key-format&gt;
  &lt;tlscmn:public-key&gt;BASE64VALUE=&lt;/tlscmn:public-key&gt;
  &lt;tlscmn:private-key-format&gt;ct:ec-private-key-format&lt;/tlscmn:privat\
e-key-format&gt;
  &lt;tlscmn:cleartext-private-key&gt;BASE64VALUE=&lt;/tlscmn:cleartext-priva\
te-key&gt;
&lt;/rpc-reply&gt;
</sourcecode>
      </section>
      <section anchor="tls-common-yang-module" numbered="true" removeInRFC="false" toc="include" pn="section-2.3">
        <name slugifiedName="name-yang-module">YANG Module</name>
        <t indent="0" pn="section-2.3-1">This YANG module has normative references to 
          <xref target="RFC5288" format="default" sectionFormat="of" derivedContent="RFC5288"/>, <xref target="RFC5289" format="default" sectionFormat="of" derivedContent="RFC5289"/>, <xref target="RFC8422" format="default" sectionFormat="of" derivedContent="RFC8422"/>, <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/>, <xref target="RFC9642" format="default" sectionFormat="of" derivedContent="RFC9642"/>, <xref target="FIPS180-4" format="default" sectionFormat="of" derivedContent="FIPS180-4"/>, and 
          <xref target="FIPS186-5" format="default" sectionFormat="of" derivedContent="FIPS186-5"/>.</t>
        <t indent="0" pn="section-2.3-2">This YANG module has informative references to
          <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/> and <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>.</t>
        <sourcecode name="ietf-tls-common@2024-10-10.yang" type="yang" markers="true" pn="section-2.3-3">
module ietf-tls-common {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-tls-common";
  prefix tlscmn;

  import iana-tls-cipher-suite-algs {
    prefix tlscsa;
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }

  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";

  contact
    "WG List:  NETCONF WG list &lt;mailto:netconf@ietf.org&gt;
     WG Web:   https://datatracker.ietf.org/wg/netconf
     Author:   Kent Watsen &lt;mailto:kent+ietf@watsen.net&gt;
     Author:   Jeff Hartley &lt;mailto:intensifysecurity@gmail.com&gt;
     Author:   Gary Wu &lt;mailto:garywu@cisco.com&gt;";

   description
    "This module defines common features and groupings for
     Transport Layer Security (TLS).

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9645
     (https://www.rfc-editor.org/info/rfc9645); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  // Features

  feature tls12 {
    description
      "TLS Protocol Version 1.2 is supported. TLS 1.2 is obsolete,
       and thus it is NOT RECOMMENDED to enable this feature.";
    reference
      "RFC 5246: The Transport Layer Security (TLS) Protocol
                 Version 1.2";
  }

  feature tls13 {
    description
      "TLS Protocol Version 1.3 is supported.";
    reference
      "RFC 8446: The Transport Layer Security (TLS)
                 Protocol Version 1.3";
  }

  feature hello-params {
    description
      "TLS hello message parameters are configurable.";
  }

  feature algorithm-discovery {
    description
      "Indicates that the server implements the
       'supported-algorithms' container.";
  }

  feature asymmetric-key-pair-generation {
    description
      "Indicates that the server implements the
       'generate-asymmetric-key-pair' RPC.";
  }

  // Identities

  identity tls-version-base {
    description
      "Base identity used to identify TLS protocol versions.";
  }

  identity tls12 {
    if-feature "tls12";
    base tls-version-base;
    description
      "TLS Protocol Version 1.2.";
    reference
      "RFC 5246: The Transport Layer Security (TLS) Protocol
                 Version 1.2";
  }

  identity tls13 {
    if-feature "tls13";
    base tls-version-base;
    description
      "TLS Protocol Version 1.3.";
    reference
      "RFC 8446: The Transport Layer Security (TLS)
                 Protocol Version 1.3";
  }

  // Typedefs

  typedef epsk-supported-hash {
    type enumeration {
      enum sha-256 {
        description
          "The SHA-256 hash.";
      }
      enum sha-384 {
        description
          "The SHA-384 hash.";
      }
    }
    description
      "As per Section 4.2.11 of RFC 8446, the hash algorithm
       supported by an instance of an External Pre-Shared
       Key (EPSK).";
    reference
      "RFC 8446: The Transport Layer Security (TLS)
                 Protocol Version 1.3";
  }


  // Groupings

  grouping hello-params-grouping {
    description
      "A reusable grouping for TLS hello message parameters.";
    reference
      "RFC 5246: The Transport Layer Security (TLS) Protocol
                 Version 1.2
       RFC 8446: The Transport Layer Security (TLS) Protocol
                 Version 1.3";
    container tls-versions {
      description
        "Parameters limiting which TLS versions, amongst
         those enabled by 'features', are presented during
         the TLS handshake.";
      leaf min {
        type identityref {
          base tls-version-base;
        }
        description
          "If not specified, then there is no configured
           minimum version.";
      }
      leaf max {
        type identityref {
          base tls-version-base;
        }
        description
          "If not specified, then there is no configured
           maximum version.";
      }
    }
    container cipher-suites {
      description
        "Parameters regarding cipher suites.";
      leaf-list cipher-suite {
        type tlscsa:tls-cipher-suite-algorithm;
        ordered-by user;
        description
          "Acceptable cipher suites in order of descending
           preference.  The configured host key algorithms should
           be compatible with the algorithm used by the configured
           private key.  Please see Section 5 of RFC 9645 for
           valid combinations.

           If this leaf-list is not configured (has zero elements),
           the acceptable cipher suites are implementation-
           defined.";
        reference
          "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
      }
    }
  } // hello-params-grouping


  // Protocol-accessible Nodes

  container supported-algorithms {
    if-feature "algorithm-discovery";
    config false;
    description
      "A container for a list of cipher suite algorithms supported
       by the server.";
    leaf-list supported-algorithm {
      type tlscsa:tls-cipher-suite-algorithm;
      description
        "A cipher suite algorithm supported by the server.";
    }
  }

  rpc generate-asymmetric-key-pair {
    if-feature "asymmetric-key-pair-generation";
    description
      "Requests the device to generate an 'asymmetric-key-pair'
       key using the specified key algorithm.";
    input {
      leaf algorithm {
        type tlscsa:tls-cipher-suite-algorithm;
        mandatory true;
        description
          "The cipher suite algorithm that the generated key
           works with.  Implementations derive the public key
           algorithm from the cipher suite algorithm.  For
           example, cipher suite
           'tls-rsa-with-aes-256-cbc-sha256' maps to the RSA
           public key.";
      }
      leaf num-bits {
        type uint16;
        description
          "Specifies the number of bits to create in the key.
           For RSA keys, the minimum size is 1024 bits, and
           the default is 3072 bits.  Generally, 3072 bits is
           considered sufficient.  DSA keys must be exactly
           1024 bits as specified by FIPS 186-2.  For
           elliptical keys, the 'num-bits' value determines
           the key length of the curve (e.g., 256, 384, or 521),
           where valid values supported by the server are
           conveyed via an unspecified mechanism.  For some
           public algorithms, the keys have a fixed length, and
           thus the 'num-bits' value is not specified.";
      }
      container private-key-encoding {
        description
          "Indicates how the private key is to be encoded.";
        choice private-key-encoding {
          mandatory true;
          description
            "A choice amongst optional private key handling.";
          case cleartext {
            if-feature "ct:cleartext-private-keys";
            leaf cleartext {
              type empty;
              description
                "Indicates that the private key is to be returned
                 as a cleartext value.";
            }
          }
          case encrypted {
            if-feature "ct:encrypted-private-keys";
            container encrypted {
              description
                "Indicates that the key is to be encrypted using
                 the specified symmetric or asymmetric key.";
              uses ks:encrypted-by-grouping;
            }
          }
          case hidden {
            if-feature "ct:hidden-private-keys";
            leaf hidden {
              type empty;
              description
                "Indicates that the private key is to be hidden.

                 Unlike the 'cleartext' and 'encrypt' options, the
                 key returned is a placeholder for an internally
                 stored key.  See Section 3 of RFC 9642 ('Support
                 for Built-In Keys') for information about hidden
                 keys.";
            }
          }
        }
      }
    }
    output {
      choice key-or-hidden {
        case key {
          uses ct:asymmetric-key-pair-grouping;
        }
        case hidden {
          leaf location {
            type instance-identifier;
            description
              "The location to where a hidden key was created.";
          }
        }
        description
          "The output can be either a key (for cleartext and
           encrypted keys) or the location to where the key
           was created (for hidden keys).";
      }
    }
  } // end generate-asymmetric-key-pair

}
</sourcecode>
      </section>
    </section>
    <section anchor="tls-client-model" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-the-ietf-tls-client-module">The "ietf-tls-client" Module</name>
      <t indent="0" pn="section-3-1">This section defines a YANG 1.1 <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950"/> module called
        "ietf-tls-client".  A high-level overview of the module is provided in
        <xref target="client-overview" format="default" sectionFormat="of" derivedContent="Section 3.1"/>. Examples illustrating the module's use
        are provided in <xref target="client-examples" format="default" sectionFormat="of" derivedContent="Section 3.2"/> ("Example Usage"). The YANG
        module itself is defined in <xref target="client-yang-module" format="default" sectionFormat="of" derivedContent="Section 3.3"/>.</t>
      <section anchor="client-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-data-model-overview-2">Data Model Overview</name>
        <t indent="0" pn="section-3.1-1">This section provides an overview of the "ietf-tls-client" module
          in terms of its features and groupings.</t>
        <section anchor="client-features" toc="exclude" numbered="true" removeInRFC="false" pn="section-3.1.1">
          <name slugifiedName="name-features-2">Features</name>
          <t indent="0" pn="section-3.1.1-1">The following diagram lists all the "feature" statements
            defined in the "ietf-tls-client" module:</t>
          <sourcecode type="yangtree" markers="false" pn="section-3.1.1-2">
Features:
  +-- tls-client-keepalives
  +-- client-ident-x509-cert
  +-- client-ident-raw-public-key
  +-- client-ident-psk
  +-- server-auth-x509-cert
  +-- server-auth-raw-public-key
  +-- server-auth-psk
</sourcecode>
          <t indent="0" pn="section-3.1.1-3">The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/>.</t>
          <t indent="0" pn="section-3.1.1-4">Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-3.1.2">
          <name slugifiedName="name-groupings-2">Groupings</name>
          <t indent="0" pn="section-3.1.2-1">The "ietf-tls-client" module defines the following "grouping" statement:</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-3.1.2-2">
            <li pn="section-3.1.2-2.1">tls-client-grouping</li>
          </ul>
          <t indent="0" pn="section-3.1.2-3">This grouping is presented in the following subsection.</t>
          <section anchor="tls-client-grouping" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.1.2.1">
            <name slugifiedName="name-the-tls-client-grouping-gro">The "tls-client-grouping" Grouping</name>
            <t indent="0" pn="section-3.1.2.1-1">The following tree diagram <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/> illustrates the
              "tls-client-grouping" grouping:</t>
            <sourcecode type="yangtree" markers="false" pn="section-3.1.2.1-2">
=============== NOTE: '\' line wrapping per RFC 8792 ================

  grouping tls-client-grouping:
    +-- client-identity!
    |  +-- (auth-type)
    |     +--:(certificate) {client-ident-x509-cert}?
    |     |  +-- certificate
    |     |     +---u ks:inline-or-keystore-end-entity-cert-with-key\
-grouping
    |     +--:(raw-public-key) {client-ident-raw-public-key}?
    |     |  +-- raw-private-key
    |     |     +---u ks:inline-or-keystore-asymmetric-key-grouping
    |     +--:(tls12-psk) {client-ident-tls12-psk}?
    |     |  +-- tls12-psk
    |     |     +---u ks:inline-or-keystore-symmetric-key-grouping
    |     |     +-- id?
    |     |             string
    |     +--:(tls13-epsk) {client-ident-tls13-epsk}?
    |        +-- tls13-epsk
    |           +---u ks:inline-or-keystore-symmetric-key-grouping
    |           +-- external-identity
    |           |       string
    |           +-- hash?
    |           |       tlscmn:epsk-supported-hash
    |           +-- context?
    |           |       string
    |           +-- target-protocol?
    |           |       uint16
    |           +-- target-kdf?
    |                   uint16
    +-- server-authentication
    |  +-- ca-certs! {server-auth-x509-cert}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- ee-certs! {server-auth-x509-cert}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- raw-public-keys! {server-auth-raw-public-key}?
    |  |  +---u ts:inline-or-truststore-public-keys-grouping
    |  +-- tls12-psks?        empty {server-auth-tls12-psk}?
    |  +-- tls13-epsks?       empty {server-auth-tls13-epsk}?
    +-- hello-params {tlscmn:hello-params}?
    |  +---u tlscmn:hello-params-grouping
    +-- keepalives {tls-client-keepalives}?
       +-- peer-allowed-to-send?   empty
       +-- test-peer-aliveness!
          +-- max-wait?       uint16
          +-- max-attempts?   uint8
</sourcecode>
            <t indent="0" pn="section-3.1.2.1-3">Comments:</t>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.1.2.1-4">
              <li pn="section-3.1.2.1-4.1">The "client-identity" node, which is optionally configured (as client
                authentication <bcp14>MAY</bcp14> occur at a higher protocol layer), configures
                identity credentials, each enabled by a "feature" statement defined in
                <xref target="client-features" format="default" sectionFormat="of" derivedContent="Section 3.1.1"/>.</li>
              <li pn="section-3.1.2.1-4.2">The "server-authentication" node configures trust anchors for
                authenticating the TLS server, with each option enabled by a "feature" statement.</li>
              <li pn="section-3.1.2.1-4.3">The "hello-params" node, which must be enabled by a feature, configures
                parameters for the TLS sessions established by this configuration.</li>
              <li pn="section-3.1.2.1-4.4">The "keepalives" node, which must be enabled by a feature, configures
              a "presence" container to test the aliveness of the TLS server. The
                aliveness-test occurs at the TLS protocol layer.</li>
              <li pn="section-3.1.2.1-4.5">
                <t indent="0" pn="section-3.1.2.1-4.5.1">For the referenced grouping statement(s):
                </t>
                <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-3.1.2.1-4.5.2">
                  <li pn="section-3.1.2.1-4.5.2.1">The "inline-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <xref section="2.1.3.6" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.6" derivedContent="RFC9642"/>.</li>
                  <li pn="section-3.1.2.1-4.5.2.2">The "inline-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.4" derivedContent="RFC9642"/>.</li>
                  <li pn="section-3.1.2.1-4.5.2.3">The "inline-or-keystore-symmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.3" derivedContent="RFC9642"/>.</li>
                  <li pn="section-3.1.2.1-4.5.2.4">The "inline-or-truststore-certs-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.1.3.3" derivedContent="RFC9641"/>.</li>
                  <li pn="section-3.1.2.1-4.5.2.5">The "inline-or-truststore-public-keys-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.1.3.4" derivedContent="RFC9641"/>.</li>
                  <li pn="section-3.1.2.1-4.5.2.6">The "hello-params-grouping" grouping is discussed in 
                  <xref target="hello-params-grouping" format="default" sectionFormat="of" derivedContent="Section 2.1.3.1"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-3.1.3">
          <name slugifiedName="name-protocol-accessible-nodes-2">Protocol-Accessible Nodes</name>
          <t indent="0" pn="section-3.1.3-1">The "ietf-tls-client" module defines only "grouping" statements that are
          used by other modules to instantiate protocol-accessible nodes.  Thus, this module does not itself define any protocol-accessible nodes when implemented.</t>
        </section>
      </section>
      <section anchor="client-examples" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-example-usage-2">Example Usage</name>
        <t indent="0" pn="section-3.2-1">This section presents two examples showing the "tls-client-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the client identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in
        <xref section="2.2.1" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.2.1" derivedContent="RFC9641"/> and
        <xref section="2.2.1" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.2.1" derivedContent="RFC9642"/>.</t>
        <t indent="0" pn="section-3.2-2">The following configuration example uses inline-definitions for the
          client identity and server authentication:
        </t>
        <sourcecode type="xml" markers="false" pn="section-3.2-3">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;!-- The outermost element below doesn't exist in the data model. --&gt;
&lt;!--  It simulates if the "grouping" were a "container" instead.  --&gt;

&lt;tls-client
  xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-client"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"&gt;

    &lt;!-- how this client will authenticate itself to the server  --&gt;
    &lt;client-identity&gt;
        &lt;certificate&gt;
            &lt;inline-definition&gt;
                &lt;private-key-format&gt;ct:rsa-private-key-format&lt;/priva\
te-key-format&gt;
                &lt;cleartext-private-key&gt;BASE64VALUE=&lt;/cleartext-priva\
te-key&gt;
                &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
            &lt;/inline-definition&gt;
        &lt;/certificate&gt;
    &lt;/client-identity&gt;

    &lt;!-- which certificates will this client trust --&gt;
    &lt;server-authentication&gt;
        &lt;ca-certs&gt;
            &lt;inline-definition&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Server Cert Issuer #1&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Server Cert Issuer #2&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
            &lt;/inline-definition&gt;
        &lt;/ca-certs&gt;
        &lt;ee-certs&gt;
            &lt;inline-definition&gt;
                &lt;certificate&gt;
                    &lt;name&gt;My Application #1&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
                &lt;certificate&gt;
                    &lt;name&gt;My Application #2&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
            &lt;/inline-definition&gt;
        &lt;/ee-certs&gt;
        &lt;raw-public-keys&gt;
            &lt;inline-definition&gt;
                &lt;public-key&gt;
                    &lt;name&gt;corp-fw1&lt;/name&gt;
                    &lt;public-key-format&gt;ct:subject-public-key-info-fo\
rmat&lt;/public-key-format&gt;
                    &lt;public-key&gt;BASE64VALUE=&lt;/public-key&gt;
                &lt;/public-key&gt;
                &lt;public-key&gt;
                    &lt;name&gt;corp-fw2&lt;/name&gt;
                    &lt;public-key-format&gt;ct:subject-public-key-info-fo\
rmat&lt;/public-key-format&gt;
                    &lt;public-key&gt;BASE64VALUE=&lt;/public-key&gt;
                &lt;/public-key&gt;
            &lt;/inline-definition&gt;
        &lt;/raw-public-keys&gt;
        &lt;tls12-psks/&gt;
        &lt;tls13-epsks/&gt;
    &lt;/server-authentication&gt;

    &lt;keepalives&gt;
        &lt;test-peer-aliveness&gt;
            &lt;max-wait&gt;30&lt;/max-wait&gt;
            &lt;max-attempts&gt;3&lt;/max-attempts&gt;
        &lt;/test-peer-aliveness&gt;
    &lt;/keepalives&gt;

&lt;/tls-client&gt;
</sourcecode>
        <t indent="0" pn="section-3.2-4">The following configuration example uses central-keystore-references for the
          client identity and central-truststore-references for server authentication
          from the keystore:
        </t>
        <sourcecode type="xml" markers="false" pn="section-3.2-5">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;!-- The outermost element below doesn't exist in the data model. --&gt;
&lt;!--  It simulates if the "grouping" were a "container" instead.  --&gt;

&lt;tls-client xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-client"&gt;

    &lt;!-- how this client will authenticate itself to the server --&gt;
    &lt;client-identity&gt;
        &lt;certificate&gt;
            &lt;central-keystore-reference&gt;
                &lt;asymmetric-key&gt;rsa-asymmetric-key&lt;/asymmetric-key&gt;
                &lt;certificate&gt;ex-rsa-cert&lt;/certificate&gt;
            &lt;/central-keystore-reference&gt;
        &lt;/certificate&gt;
    &lt;/client-identity&gt;

    &lt;!-- which certificates will this client trust --&gt;
    &lt;server-authentication&gt;
        &lt;ca-certs&gt;
            &lt;central-truststore-reference&gt;trusted-server-ca-certs&lt;/c\
entral-truststore-reference&gt;
        &lt;/ca-certs&gt;
        &lt;ee-certs&gt;
            &lt;central-truststore-reference&gt;trusted-server-ee-certs&lt;/c\
entral-truststore-reference&gt;
        &lt;/ee-certs&gt;
        &lt;raw-public-keys&gt;
            &lt;central-truststore-reference&gt;Raw Public Keys for TLS Se\
rvers&lt;/central-truststore-reference&gt;
        &lt;/raw-public-keys&gt;
        &lt;tls12-psks/&gt;
        &lt;tls13-epsks/&gt;
    &lt;/server-authentication&gt;

    &lt;keepalives&gt;
        &lt;test-peer-aliveness&gt;
            &lt;max-wait&gt;30&lt;/max-wait&gt;
            &lt;max-attempts&gt;3&lt;/max-attempts&gt;
        &lt;/test-peer-aliveness&gt;
    &lt;/keepalives&gt;

&lt;/tls-client&gt;
</sourcecode>
      </section>
      <section anchor="client-yang-module" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-yang-module-2">YANG Module</name>
        <t indent="0" pn="section-3.3-1">This YANG module has normative references to <xref target="RFC4279" format="default" sectionFormat="of" derivedContent="RFC4279"/>,  <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>,  <xref target="RFC6520" format="default" sectionFormat="of" derivedContent="RFC6520"/>,  <xref target="RFC7250" format="default" sectionFormat="of" derivedContent="RFC7250"/>, <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/>, <xref target="RFC9641" format="default" sectionFormat="of" derivedContent="RFC9641"/>,  and <xref target="RFC9642" format="default" sectionFormat="of" derivedContent="RFC9642"/> and informative references to <xref target="RFC5056" format="default" sectionFormat="of" derivedContent="RFC5056"/>,
          <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>, <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, <xref target="RFC9258" format="default" sectionFormat="of" derivedContent="RFC9258"/>, and
          <xref target="RFC9257" format="default" sectionFormat="of" derivedContent="RFC9257"/>.</t>
        <sourcecode name="ietf-tls-client@2024-10-10.yang" type="yang" markers="true" pn="section-3.3-2">module ietf-tls-client {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-tls-client";
  prefix tlsc;

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }
  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }
  import ietf-truststore {
    prefix ts;
    reference
      "RFC 9641: A YANG Data Model for a Truststore";
  }
  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }
  import ietf-tls-common {
    prefix tlscmn;
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG List:  NETCONF WG list &lt;mailto:netconf@ietf.org&gt;
     WG Web:   https://datatracker.ietf.org/wg/netconf
     Author:   Kent Watsen &lt;mailto:kent+ietf@watsen.net&gt;
     Author:   Jeff Hartley &lt;mailto:intensifysecurity@gmail.com&gt;";
  description
    "This module defines reusable groupings for TLS clients that
     can be used as a basis for specific TLS client instances.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9645
     (https://www.rfc-editor.org/info/rfc9645); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version";
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  // Features

  feature tls-client-keepalives {
    description
      "Per-socket TLS keepalive parameters are configurable for
       TLS clients on the server implementing this feature.";
  }

  feature client-ident-x509-cert {
    description
      "Indicates that the client supports identifying itself
       using X.509 certificates.";
    reference
      "RFC 5280:
         Internet X.509 Public Key Infrastructure Certificate
         and Certificate Revocation List (CRL) Profile";
  }

  feature client-ident-raw-public-key {
    description
      "Indicates that the client supports identifying itself
       using raw public keys.";
    reference
      "RFC 7250:
         Using Raw Public Keys in Transport Layer Security (TLS)
         and Datagram Transport Layer Security (DTLS)";
  }

  feature client-ident-tls12-psk {
    if-feature "tlscmn:tls12";
    description
      "Indicates that the client supports identifying itself
       using TLS 1.2 PSKs (pre-shared or pairwise symmetric keys).";
    reference
      "RFC 4279:
         Pre-Shared Key Ciphersuites for Transport Layer Security
         (TLS)";
  }

  feature client-ident-tls13-epsk {
    if-feature "tlscmn:tls13";
    description
      "Indicates that the client supports identifying itself
       using TLS 1.3 External PSKs (pre-shared keys).";
    reference
      "RFC 8446:
         The Transport Layer Security (TLS) Protocol Version 1.3";
  }

  feature server-auth-x509-cert {
    description
      "Indicates that the client supports authenticating servers
       using X.509 certificates.";
    reference
      "RFC 5280:
         Internet X.509 Public Key Infrastructure Certificate
         and Certificate Revocation List (CRL) Profile";
  }

  feature server-auth-raw-public-key {
    description
      "Indicates that the client supports authenticating servers
       using raw public keys.";
    reference
      "RFC 7250:
         Using Raw Public Keys in Transport Layer Security (TLS)
         and Datagram Transport Layer Security (DTLS)";
  }

  feature server-auth-tls12-psk {
    description
      "Indicates that the client supports authenticating servers
       using PSKs (pre-shared or pairwise symmetric keys).";
    reference
      "RFC 4279:
         Pre-Shared Key Ciphersuites for Transport Layer Security
         (TLS)";
  }

  feature server-auth-tls13-epsk {
    description
      "Indicates that the client supports authenticating servers
       using TLS 1.3 External PSKs (pre-shared keys).";
    reference
      "RFC 8446:
         The Transport Layer Security (TLS) Protocol Version 1.3";
  }

  // Groupings

  grouping tls-client-grouping {
    description
      "A reusable grouping for configuring a TLS client without
       any consideration for how an underlying TCP session is
       established.

       Note that this grouping uses fairly typical descendant
       node names such that a stack of 'uses' statements will
       have name conflicts.  It is intended that the consuming
       data model will resolve the issue (e.g., by wrapping
       the 'uses' statement in a container called
       'tls-client-parameters').  This model purposely does
       not do this itself so as to provide maximum flexibility
       to consuming models.";
    container client-identity {
      nacm:default-deny-write;
      presence "Indicates that a TLS-level client identity has been
                configured.  This statement is present so the
                mandatory descendant nodes do not imply that this
                node must be configured.";
      description
        "Identity credentials the TLS client MAY present when
         establishing a connection to a TLS server.  If not
         configured, then client authentication is presumed to
         occur in a protocol layer above TLS.  When configured,
         and requested by the TLS server when establishing a
         TLS session, these credentials are passed in the
         Certificate message defined in Section 7.4.2 of
         RFC 5246 and Section 4.4.2 of RFC 8446.";
      reference
        "RFC 5246: The Transport Layer Security (TLS)
                   Protocol Version 1.2
         RFC 8446: The Transport Layer Security (TLS)
                   Protocol Version 1.3
         RFC 9642: A YANG Data Model for a Keystore";
      choice auth-type {
        mandatory true;
        description
          "A choice amongst authentication types, of which one must
           be enabled (via its associated 'feature') and selected.";
        case certificate {
          if-feature "client-ident-x509-cert";
          container certificate {
            description
              "Specifies the client identity using a certificate.";
            uses "ks:inline-or-keystore-end-entity-cert-with-key-"
               + "grouping" {
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                   + '(public-key-format, "ct:subject-public-key-'
                   + 'info-format")';
              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference/asymmetric-key" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-'
                   + 'key-format, "ct:subject-public-key-info-'
                   + 'format")';
              }
            }
          }
        }
        case raw-public-key {
          if-feature "client-ident-raw-public-key";
          container raw-private-key {
            description
              "Specifies the client identity using a raw
               private key.";
            uses ks:inline-or-keystore-asymmetric-key-grouping {
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                   + '(public-key-format, "ct:subject-public-key-'
                   + 'info-format")';
              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-'
                   + 'key-format, "ct:subject-public-key-info-'
                   + 'format")';
              }
            }
          }
        }
        case tls12-psk {
          if-feature "client-ident-tls12-psk";
          container tls12-psk {
            description
              "Specifies the client identity using a PSK (pre-shared
               or pairwise symmetric key).";
            uses ks:inline-or-keystore-symmetric-key-grouping;
            leaf id {
              type string;
              description
                "The key 'psk_identity' value used in the TLS
                 'ClientKeyExchange' message.";
              reference
                "RFC 4279: Pre-Shared Key Ciphersuites for
                           Transport Layer Security (TLS)";
            }
          }
        }
        case tls13-epsk {
          if-feature "client-ident-tls13-epsk";
          container tls13-epsk {
            description
              "An External Pre-Shared Key (EPSK) is established
               or provisioned out of band, i.e., not from a TLS
               connection.  An EPSK is a tuple of (Base Key,
               External Identity, Hash).  EPSKs MUST NOT be
               imported for (D)TLS 1.2 or prior versions.  When
               PSKs are provisioned out of band, the PSK identity
               and the Key Derivation Function (KDF) hash algorithm
               to be used with the PSK MUST also be provisioned.

               The structure of this container is designed to satisfy
               the requirements in Section 4.2.11 of RFC 8446, the
               recommendations from Section 6 of RFC 9257, and the
               EPSK input fields detailed in Section 5.1 of RFC 9258.
               The base-key is based upon
               'ks:inline-or-keystore-symmetric-key-grouping' in
               order to provide users with flexible and secure
               storage options.";
            reference
              "RFC 8446: The Transport Layer Security (TLS)
                         Protocol Version 1.3
               RFC 9257: Guidance for External Pre-Shared Key
                         (PSK) Usage in TLS
               RFC 9258: Importing External Pre-Shared Keys
                         (PSKs) for TLS 1.3";
            uses ks:inline-or-keystore-symmetric-key-grouping;
            leaf external-identity {
              type string;
              mandatory true;
              description
                "As per Section 4.2.11 of RFC 8446 and Section 4.1
                 of RFC 9257, a sequence of bytes used to identify
                 an EPSK.  A label for a pre-shared key established
                 externally.";
              reference
                "RFC 8446: The Transport Layer Security (TLS)
                           Protocol Version 1.3
                 RFC 9257: Guidance for External Pre-Shared Key
                           (PSK) Usage in TLS";
            }
            leaf hash {
              type tlscmn:epsk-supported-hash;
              default "sha-256";
              description
                "As per Section 4.2.11 of RFC 8446, for EPSKs,
                 the hash algorithm MUST be set when the PSK is
                 established; otherwise, default to SHA-256 if
                 no such algorithm is defined.  The server MUST
                 ensure that it selects a compatible PSK (if any)
                 and cipher suite.  Each PSK MUST only be used
                 with a single hash function.";
              reference
                "RFC 8446: The Transport Layer Security (TLS)
                           Protocol Version 1.3";
            }
            leaf context {
              type string;
              description
                "As per Section 5.1 of RFC 9258, context MUST
                 include the context used to determine the EPSK,
                 if any exists.  For example, context may include
                 information about peer roles or identities
                 to mitigate Selfie-style reflection attacks.
                 Since the EPSK is a key derived from an external
                 protocol or a sequence of protocols, context MUST
                 include a channel binding for the deriving
                 protocols (see RFC 5056).  The details of this
                 binding are protocol specific and out of scope
                 for this document.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
            leaf target-protocol {
              type uint16;
              description
                "As per Section 3 of RFC 9258, the protocol
                 for which a PSK is imported for use.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
            leaf target-kdf {
              type uint16;
              description
                "As per Section 3 of RFC 9258, the Key Derivation
                 Function (KDF) for which a PSK is imported for
                 use.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
          }
        }
      }
    } // container client-identity
    container server-authentication {
      nacm:default-deny-write;
      must "ca-certs or ee-certs or raw-public-keys or tls12-psks
                    or tls13-epsks";
      description
        "Specifies how the TLS client can authenticate TLS servers.
         Any combination of credentials is additive and unordered.

         Note that no configuration is required for authentication
         based on PSK (pre-shared or pairwise symmetric key) as
         the key is necessarily the same as configured in the
         '../client-identity' node.";
      container ca-certs {
        if-feature "server-auth-x509-cert";
        presence "Indicates that Certification Authority (CA)
                  certificates have been configured.  This
                  statement is present so the mandatory
                  descendant nodes do not imply that this
                  node must be configured.";
        description
          "A set of CA certificates used by the TLS client to
           authenticate TLS server certificates.  A server
           certificate is authenticated if it has a valid chain of
           trust to a configured CA certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container ee-certs {
        if-feature "server-auth-x509-cert";
        presence "Indicates that End-Entity (EE) certificates have
                  been configured.  This statement is present so
                  the mandatory descendant nodes do not imply
                  that this node must be configured.";
        description
          "A set of server certificates (i.e., EE certificates) used
           by the TLS client to authenticate certificates presented
           by TLS servers.  A server certificate is authenticated if
           it is an exact match to a configured server certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container raw-public-keys {
        if-feature "server-auth-raw-public-key";
        presence "Indicates that raw public keys have been
                  configured.  This statement is present so
                  the mandatory descendant nodes do not imply
                  that this node must be configured.";
        description
          "A set of raw public keys used by the TLS client to
           authenticate raw public keys presented by the TLS
           server.  A raw public key is authenticated if it
           is an exact match to a configured raw public key.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-public-keys-grouping {
          refine "inline-or-truststore/inline/inline-definition/"
               + "public-key" {
            must 'derived-from-or-self(public-key-format,'
               + ' "ct:subject-public-key-info-format")';
          }
          refine "inline-or-truststore/central-truststore/"
               + "central-truststore-reference" {
            must 'not(deref(.)/../ts:public-key/ts:public-key-'
               + 'format[not(derived-from-or-self(., "ct:subject-'
               + 'public-key-info-format"))])';
          }
        }
      }
      leaf tls12-psks {
        if-feature "server-auth-tls12-psk";
        type empty;
        description
          "Indicates that the TLS client can authenticate TLS servers
           using configured PSKs (pre-shared or pairwise symmetric
           keys).

           No configuration is required since the PSK value is the
           same as the PSK value configured in the 'client-identity'
           node.";
      }
      leaf tls13-epsks {
        if-feature "server-auth-tls13-epsk";
        type empty;
        description
          "Indicates that the TLS client can authenticate TLS servers
           using configured External PSKs (pre-shared keys).

           No configuration is required since the PSK value is the
           same as the PSK value configured in the 'client-identity'
           node.";
      }
    } // container server-authentication
    container hello-params {
      nacm:default-deny-write;
      if-feature "tlscmn:hello-params";
      uses tlscmn:hello-params-grouping;
      description
        "Configurable parameters for the TLS hello message.";
    } // container hello-params
    container keepalives {
      nacm:default-deny-write;
      if-feature "tls-client-keepalives";
      description
        "Configures the keepalive policy for the TLS client.";
      leaf peer-allowed-to-send {
        type empty;
        description
          "Indicates that the remote TLS server is allowed to send
           HeartbeatRequest messages, as defined by RFC 6520,
           to this TLS client.";
        reference
          "RFC 6520: Transport Layer Security (TLS) and Datagram
           Transport Layer Security (DTLS) Heartbeat Extension";
      }
      container test-peer-aliveness {
        presence "Indicates that the TLS client proactively tests the
                  aliveness of the remote TLS server.";
        description
          "Configures the keepalive policy to proactively test
           the aliveness of the TLS server.  An unresponsive
           TLS server is dropped after approximately max-wait
           * max-attempts seconds.  The TLS client MUST send
           HeartbeatRequest messages, as defined in RFC 6520.";
        reference
          "RFC 6520: Transport Layer Security (TLS) and Datagram
           Transport Layer Security (DTLS) Heartbeat Extension";
        leaf max-wait {
          type uint16 {
            range "1..max";
          }
          units "seconds";
          default "30";
          description
            "Sets the amount of time in seconds, after which a
             TLS-level message will be sent to test the
             aliveness of the TLS server if no data has been
             received from the TLS server.";
        }
        leaf max-attempts {
          type uint8;
          default "3";
          description
            "Sets the maximum number of sequential keepalive
             messages that can fail to obtain a response from
             the TLS server before assuming the TLS server is
             no longer alive.";
        }
      }
    }
  } // grouping tls-client-grouping

}

</sourcecode>
      </section>
    </section>
    <section anchor="tls-server-model" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-the-ietf-tls-server-module">The "ietf-tls-server" Module</name>
      <t indent="0" pn="section-4-1">This section defines a YANG 1.1 module called
        "ietf-tls-server".  A high-level overview of the module is provided in
        <xref target="server-overview" format="default" sectionFormat="of" derivedContent="Section 4.1"/>. Examples illustrating the module's use
        are provided in <xref target="server-examples" format="default" sectionFormat="of" derivedContent="Section 4.2"/> ("Example Usage"). The YANG
        module itself is defined in <xref target="server-yang-module" format="default" sectionFormat="of" derivedContent="Section 4.3"/>.</t>
      <section anchor="server-overview" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-data-model-overview-3">Data Model Overview</name>
        <t indent="0" pn="section-4.1-1">This section provides an overview of the "ietf-tls-server" module
          in terms of its features and groupings.</t>
        <section anchor="server-features" toc="exclude" numbered="true" removeInRFC="false" pn="section-4.1.1">
          <name slugifiedName="name-features-3">Features</name>
          <t indent="0" pn="section-4.1.1-1">The following diagram lists all the "feature" statements
            defined in the "ietf-tls-server" module:</t>
          <sourcecode type="yangtree" markers="false" pn="section-4.1.1-2">
Features:
  +-- tls-server-keepalives
  +-- server-ident-x509-cert
  +-- server-ident-raw-public-key
  +-- server-ident-psk
  +-- client-auth-supported
  +-- client-auth-x509-cert
  +-- client-auth-raw-public-key
  +-- client-auth-psk
</sourcecode>
          <t indent="0" pn="section-4.1.1-3">The diagram above uses syntax that is similar to but not
            defined in <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/>.</t>
          <t indent="0" pn="section-4.1.1-4">Please refer to the YANG module for a description of each feature.</t>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-4.1.2">
          <name slugifiedName="name-groupings-3">Groupings</name>
          <t indent="0" pn="section-4.1.2-1">The "ietf-tls-server" module defines the following "grouping" statement:</t>
          <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1.2-2">
            <li pn="section-4.1.2-2.1">tls-server-grouping</li>
          </ul>
          <t indent="0" pn="section-4.1.2-3">This grouping is presented in the following subsection.</t>
          <section anchor="tls-server-grouping" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.2.1">
            <name slugifiedName="name-the-tls-server-grouping-gro">The "tls-server-grouping" Grouping</name>
            <t indent="0" pn="section-4.1.2.1-1">The following tree diagram <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/> illustrates the
              "tls-server-grouping" grouping:</t>
            <sourcecode type="yangtree" markers="false" pn="section-4.1.2.1-2">
=============== NOTE: '\' line wrapping per RFC 8792 ================

  grouping tls-server-grouping:
    +-- server-identity
    |  +-- (auth-type)
    |     +--:(certificate) {server-ident-x509-cert}?
    |     |  +-- certificate
    |     |     +---u ks:inline-or-keystore-end-entity-cert-with-key\
-grouping
    |     +--:(raw-private-key) {server-ident-raw-public-key}?
    |     |  +-- raw-private-key
    |     |     +---u ks:inline-or-keystore-asymmetric-key-grouping
    |     +--:(tls12-psk) {server-ident-tls12-psk}?
    |     |  +-- tls12-psk
    |     |     +---u ks:inline-or-keystore-symmetric-key-grouping
    |     |     +-- id-hint?
    |     |             string
    |     +--:(tls13-epsk) {server-ident-tls13-epsk}?
    |        +-- tls13-epsk
    |           +---u ks:inline-or-keystore-symmetric-key-grouping
    |           +-- external-identity
    |           |       string
    |           +-- hash?
    |           |       tlscmn:epsk-supported-hash
    |           +-- context?
    |           |       string
    |           +-- target-protocol?
    |           |       uint16
    |           +-- target-kdf?
    |                   uint16
    +-- client-authentication! {client-auth-supported}?
    |  +-- ca-certs! {client-auth-x509-cert}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- ee-certs! {client-auth-x509-cert}?
    |  |  +---u ts:inline-or-truststore-certs-grouping
    |  +-- raw-public-keys! {client-auth-raw-public-key}?
    |  |  +---u ts:inline-or-truststore-public-keys-grouping
    |  +-- tls12-psks?        empty {client-auth-tls12-psk}?
    |  +-- tls13-epsks?       empty {client-auth-tls13-epsk}?
    +-- hello-params {tlscmn:hello-params}?
    |  +---u tlscmn:hello-params-grouping
    +-- keepalives {tls-server-keepalives}?
       +-- peer-allowed-to-send?   empty
       +-- test-peer-aliveness!
          +-- max-wait?       uint16
          +-- max-attempts?   uint8
</sourcecode>
            <t indent="0" pn="section-4.1.2.1-3">Comments:</t>
            <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-4.1.2.1-4">
              <li pn="section-4.1.2.1-4.1">The "server-identity" node configures identity credentials, each of
                which is enabled by a "feature".</li>
              <li pn="section-4.1.2.1-4.2">The "client-authentication" node, which is optionally configured (as client
                authentication <bcp14>MAY</bcp14> occur at a higher protocol layer), configures trust
                anchors for authenticating the TLS client, with each option enabled
                by a "feature" statement.</li>
              <li pn="section-4.1.2.1-4.3">The "hello-params" node, which must be enabled by a feature, configures
                parameters for the TLS sessions established by this configuration.</li>
              <li pn="section-4.1.2.1-4.4">The "keepalives" node, which must be enabled by a feature, configures
                a flag enabling the TLS client to test the aliveness of the TLS server
                as well as a "presence" container to test the aliveness of the TLS
                client.  The aliveness-tests occur at the TLS protocol layer.</li>
              <li pn="section-4.1.2.1-4.5">
                <t indent="0" pn="section-4.1.2.1-4.5.1">For the referenced grouping statement(s):
                </t>
                <ul spacing="compact" bare="false" empty="false" indent="3" pn="section-4.1.2.1-4.5.2">
                  <li pn="section-4.1.2.1-4.5.2.1">The "inline-or-keystore-end-entity-cert-with-key-grouping" grouping is
                    discussed in <xref section="2.1.3.6" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.6" derivedContent="RFC9642"/>.</li>
                  <li pn="section-4.1.2.1-4.5.2.2">The "inline-or-keystore-asymmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.4" derivedContent="RFC9642"/>.</li>
                  <li pn="section-4.1.2.1-4.5.2.3">The "inline-or-keystore-symmetric-key-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.1.3.3" derivedContent="RFC9642"/>.</li>
                  <li pn="section-4.1.2.1-4.5.2.4">The "inline-or-truststore-public-keys-grouping" grouping is
                    discussed in <xref section="2.1.3.4" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.1.3.4" derivedContent="RFC9641"/>.</li>
                  <li pn="section-4.1.2.1-4.5.2.5">The "inline-or-truststore-certs-grouping" grouping is
                    discussed in <xref section="2.1.3.3" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.1.3.3" derivedContent="RFC9641"/>.</li>
                  <li pn="section-4.1.2.1-4.5.2.6">The "hello-params-grouping" grouping is discussed in
                  <xref target="hello-params-grouping" format="default" sectionFormat="of" derivedContent="Section 2.1.3.1"/> in this document.</li>
                </ul>
              </li>
            </ul>
          </section>
        </section>
        <section toc="exclude" numbered="true" removeInRFC="false" pn="section-4.1.3">
          <name slugifiedName="name-protocol-accessible-nodes-3">Protocol-Accessible Nodes</name>
          <t indent="0" pn="section-4.1.3-1">The "ietf-tls-server" module defines only "grouping" statements that are
          used by other modules to instantiate protocol-accessible nodes.  Thus, this
          module does not itself define any protocol-accessible nodes when implemented.</t>
        </section>
      </section>
      <section anchor="server-examples" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-example-usage-3">Example Usage</name>
        <t indent="0" pn="section-4.2-1">This section presents two examples showing the "tls-server-grouping"
        grouping populated with some data. These examples are effectively the same
        except the first configures the server identity using a local key
        while the second uses a key configured in a keystore. Both examples
        are consistent with the examples presented in
        <xref section="2.2.1" target="RFC9641" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9641#section-2.2.1" derivedContent="RFC9641"/> and
        <xref section="2.2.1" target="RFC9642" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9642#section-2.2.1" derivedContent="RFC9642"/>.</t>
        <t indent="0" pn="section-4.2-2">The following configuration example uses inline-definitions for the
          server identity and client authentication:
        </t>
        <sourcecode type="xml" markers="false" pn="section-4.2-3">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;!-- The outermost element below doesn't exist in the data model. --&gt;
&lt;!--  It simulates if the "grouping" were a "container" instead.  --&gt;

&lt;tls-server
  xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-server"
  xmlns:ct="urn:ietf:params:xml:ns:yang:ietf-crypto-types"&gt;

    &lt;!-- how this server will authenticate itself to the client --&gt;
    &lt;server-identity&gt;
        &lt;certificate&gt;
          &lt;inline-definition&gt;
              &lt;private-key-format&gt;ct:rsa-private-key-format&lt;/private\
-key-format&gt;
              &lt;cleartext-private-key&gt;BASE64VALUE=&lt;/cleartext-private\
-key&gt;
              &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
            &lt;/inline-definition&gt;
        &lt;/certificate&gt;
    &lt;/server-identity&gt;

    &lt;!-- which certificates will this server trust --&gt;
    &lt;client-authentication&gt;
        &lt;ca-certs&gt;
            &lt;inline-definition&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Identity Cert Issuer #1&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Identity Cert Issuer #2&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
            &lt;/inline-definition&gt;
        &lt;/ca-certs&gt;
        &lt;ee-certs&gt;
            &lt;inline-definition&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Application #1&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
                &lt;certificate&gt;
                    &lt;name&gt;Application #2&lt;/name&gt;
                    &lt;cert-data&gt;BASE64VALUE=&lt;/cert-data&gt;
                &lt;/certificate&gt;
            &lt;/inline-definition&gt;
        &lt;/ee-certs&gt;
        &lt;raw-public-keys&gt;
            &lt;inline-definition&gt;
                &lt;public-key&gt;
                    &lt;name&gt;User A&lt;/name&gt;
                    &lt;public-key-format&gt;ct:subject-public-key-info-fo\
rmat&lt;/public-key-format&gt;
                    &lt;public-key&gt;BASE64VALUE=&lt;/public-key&gt;
                &lt;/public-key&gt;
                &lt;public-key&gt;
                    &lt;name&gt;User B&lt;/name&gt;
                    &lt;public-key-format&gt;ct:subject-public-key-info-fo\
rmat&lt;/public-key-format&gt;
                    &lt;public-key&gt;BASE64VALUE=&lt;/public-key&gt;
                &lt;/public-key&gt;
            &lt;/inline-definition&gt;
        &lt;/raw-public-keys&gt;
        &lt;tls12-psks/&gt;
        &lt;tls13-epsks/&gt;
    &lt;/client-authentication&gt;

    &lt;keepalives&gt;
        &lt;peer-allowed-to-send/&gt;
    &lt;/keepalives&gt;

&lt;/tls-server&gt;
</sourcecode>
        <t indent="0" pn="section-4.2-4">The following configuration example uses central-keystore-references for the
          server identity and central-truststore-references for client authentication
          from the keystore:
        </t>
        <sourcecode type="xml" markers="false" pn="section-4.2-5">
=============== NOTE: '\' line wrapping per RFC 8792 ================

&lt;!-- The outermost element below doesn't exist in the data model. --&gt;
&lt;!--  It simulates if the "grouping" were a "container" instead.  --&gt;

&lt;tls-server xmlns="urn:ietf:params:xml:ns:yang:ietf-tls-server"&gt;

    &lt;!-- how this server will authenticate itself to the client --&gt;
    &lt;server-identity&gt;
        &lt;certificate&gt;
            &lt;central-keystore-reference&gt;
                &lt;asymmetric-key&gt;rsa-asymmetric-key&lt;/asymmetric-key&gt;
                &lt;certificate&gt;ex-rsa-cert&lt;/certificate&gt;
            &lt;/central-keystore-reference&gt;
        &lt;/certificate&gt;
    &lt;/server-identity&gt;

    &lt;!-- which certificates will this server trust --&gt;
    &lt;client-authentication&gt;
        &lt;ca-certs&gt;
            &lt;central-truststore-reference&gt;trusted-client-ca-certs&lt;/c\
entral-truststore-reference&gt;
        &lt;/ca-certs&gt;
        &lt;ee-certs&gt;
            &lt;central-truststore-reference&gt;trusted-client-ee-certs&lt;/c\
entral-truststore-reference&gt;
        &lt;/ee-certs&gt;
        &lt;raw-public-keys&gt;
            &lt;central-truststore-reference&gt;Raw Public Keys for TLS Cl\
ients&lt;/central-truststore-reference&gt;
        &lt;/raw-public-keys&gt;
        &lt;tls12-psks/&gt;
        &lt;tls13-epsks/&gt;
    &lt;/client-authentication&gt;

    &lt;keepalives&gt;
        &lt;peer-allowed-to-send/&gt;
    &lt;/keepalives&gt;

&lt;/tls-server&gt;
</sourcecode>
      </section>
      <section anchor="server-yang-module" numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-yang-module-3">YANG Module</name>
        <t indent="0" pn="section-4.3-1">This YANG module has normative references to <xref target="RFC4279" format="default" sectionFormat="of" derivedContent="RFC4279"/>, <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>, <xref target="RFC6520" format="default" sectionFormat="of" derivedContent="RFC6520"/>, <xref target="RFC7250" format="default" sectionFormat="of" derivedContent="RFC7250"/>, <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/>, <xref target="RFC9641" format="default" sectionFormat="of" derivedContent="RFC9641"/>, 
          and <xref target="RFC9642" format="default" sectionFormat="of" derivedContent="RFC9642"/> and informative references to <xref target="RFC5056" format="default" sectionFormat="of" derivedContent="RFC5056"/>,
          <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>, <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, <xref target="RFC9258" format="default" sectionFormat="of" derivedContent="RFC9258"/>, and
        <xref target="RFC9257" format="default" sectionFormat="of" derivedContent="RFC9257"/>.</t>
        <sourcecode name="ietf-tls-server@2024-10-10.yang" type="yang" markers="true" pn="section-4.3-2">
module ietf-tls-server {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-tls-server";
  prefix tlss;

  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }
  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings for Cryptography";
  }
  import ietf-truststore {
    prefix ts;
    reference
      "RFC 9641: A YANG Data Model for a Truststore";
  }
  import ietf-keystore {
    prefix ks;
    reference
      "RFC 9642: A YANG Data Model for a Keystore";
  }
  import ietf-tls-common {
    prefix tlscmn;
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  organization
    "IETF NETCONF (Network Configuration) Working Group";
  contact
    "WG List:  NETCONF WG list &lt;mailto:netconf@ietf.org&gt;
     WG Web:   https://datatracker.ietf.org/wg/netconf
     Author:   Kent Watsen &lt;mailto:kent+ietf@watsen.net&gt;
     Author:   Jeff Hartley &lt;mailto:intensifysecurity@gmail.com&gt;";
  description
    "This module defines reusable groupings for TLS servers that
     can be used as a basis for specific TLS server instances.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL',
     'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED',
     'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document
     are to be interpreted as described in BCP 14 (RFC 2119)
     (RFC 8174) when, and only when, they appear in all
     capitals, as shown here.

     Copyright (c) 2024 IETF Trust and the persons identified
     as authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9645
     (https://www.rfc-editor.org/info/rfc9645); see the RFC
     itself for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  // Features

  feature tls-server-keepalives {
    description
      "Per-socket TLS keepalive parameters are configurable for
       TLS servers on the server implementing this feature.";
  }

  feature server-ident-x509-cert {
    description
      "Indicates that the server supports identifying itself
       using X.509 certificates.";
    reference
      "RFC 5280:
         Internet X.509 Public Key Infrastructure Certificate
         and Certificate Revocation List (CRL) Profile";
  }

  feature server-ident-raw-public-key {
    description
      "Indicates that the server supports identifying itself
       using raw public keys.";
    reference
      "RFC 7250:
         Using Raw Public Keys in Transport Layer Security (TLS)
         and Datagram Transport Layer Security (DTLS)";
  }

  feature server-ident-tls12-psk {
    if-feature "tlscmn:tls12";
    description
      "Indicates that the server supports identifying itself
       using TLS 1.2 PSKs (pre-shared or pairwise symmetric keys).";
    reference
      "RFC 4279:
         Pre-Shared Key Ciphersuites for Transport Layer Security
         (TLS)";
  }

  feature server-ident-tls13-epsk {
    if-feature "tlscmn:tls13";
    description
      "Indicates that the server supports identifying itself
       using TLS 1.3 External PSKs (pre-shared keys).";
    reference
      "RFC 8446:
         The Transport Layer Security (TLS) Protocol Version 1.3";
  }

  feature client-auth-supported {
    description
      "Indicates that the configuration for how to authenticate
       clients can be configured herein.  TLS-level client
       authentication may not be needed when client authentication
       is expected to occur only at another protocol layer.";
  }

  feature client-auth-x509-cert {
    description
      "Indicates that the server supports authenticating clients
       using X.509 certificates.";
    reference
      "RFC 5280:
         Internet X.509 Public Key Infrastructure Certificate
         and Certificate Revocation List (CRL) Profile";
  }

  feature client-auth-raw-public-key {
    description
      "Indicates that the server supports authenticating clients
       using raw public keys.";
    reference
      "RFC 7250:
         Using Raw Public Keys in Transport Layer Security (TLS)
         and Datagram Transport Layer Security (DTLS)";
  }

  feature client-auth-tls12-psk {
    description
      "Indicates that the server supports authenticating clients
       using PSKs (pre-shared or pairwise symmetric keys).";
    reference
      "RFC 4279:
         Pre-Shared Key Ciphersuites for Transport Layer Security
         (TLS)";
  }

  feature client-auth-tls13-epsk {
    description
      "Indicates that the server supports authenticating clients
       using TLS 1.3 External PSKs (pre-shared keys).";
    reference
      "RFC 8446:
         The Transport Layer Security (TLS) Protocol Version 1.3";
  }

  // Groupings

  grouping tls-server-grouping {
    description
      "A reusable grouping for configuring a TLS server without
       any consideration for how underlying TCP sessions are
       established.

       Note that this grouping uses fairly typical descendant
       node names such that a stack of 'uses' statements will
       have name conflicts.  It is intended that the consuming
       data model will resolve the issue (e.g., by wrapping
       the 'uses' statement in a container called
       'tls-server-parameters').  This model purposely does
       not do this itself so as to provide maximum flexibility
       to consuming models.";
    container server-identity {
      nacm:default-deny-write;
      description
        "A locally defined or referenced End-Entity (EE) certificate,
         including any configured intermediate certificates, that
         the TLS server will present when establishing a TLS
         connection in its Certificate message, as defined in
         Section 7.4.2 of RFC 5246 and Section 4.4.2 of RFC 8446.";
      reference
        "RFC 5246: The Transport Layer Security (TLS) Protocol
                   Version 1.2
         RFC 8446: The Transport Layer Security (TLS) Protocol
                   Version 1.3
         RFC 9642: A YANG Data Model for a Keystore";
      choice auth-type {
        mandatory true;
        description
          "A choice amongst authentication types, of which one must
           be enabled (via its associated 'feature') and selected.";
        case certificate {
          if-feature "server-ident-x509-cert";
          container certificate {
            description
              "Specifies the server identity using a certificate.";
            uses "ks:inline-or-keystore-end-entity-cert-with-key-"
               + "grouping" {
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                   + '(public-key-format,'
                   + ' "ct:subject-public-'
                   + 'key-info-format")';
              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference/asymmetric-key" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-key'
                   + '-format, "ct:subject-public-key-info-format")';
              }
            }
          }
        }
        case raw-private-key {
          if-feature "server-ident-raw-public-key";
          container raw-private-key {
            description
              "Specifies the server identity using a raw
               private key.";
            uses ks:inline-or-keystore-asymmetric-key-grouping {
              refine "inline-or-keystore/inline/inline-definition" {
                must 'not(public-key-format) or derived-from-or-self'
                   + '(public-key-format,'
                   + ' "ct:subject-public-'
                   + 'key-info-format")';
              }
              refine "inline-or-keystore/central-keystore/"
                   + "central-keystore-reference" {
                must 'not(deref(.)/../ks:public-key-format) or '
                   + 'derived-from-or-self(deref(.)/../ks:public-key'
                   + '-format, "ct:subject-public-key-info-format")';
              }
            }
          }
        }
        case tls12-psk {
          if-feature "server-ident-tls12-psk";
          container tls12-psk {
            description
              "Specifies the server identity using a PSK (pre-shared
               or pairwise symmetric key).";
            uses ks:inline-or-keystore-symmetric-key-grouping;
            leaf id-hint {
              type string;
              description
                "The key 'psk_identity_hint' value used in the TLS
                 'ServerKeyExchange' message.";
              reference
                "RFC 4279: Pre-Shared Key Ciphersuites for
                           Transport Layer Security (TLS)";
            }
          }
        }
        case tls13-epsk {
          if-feature "server-ident-tls13-epsk";
          container tls13-epsk {
            description
              "An External Pre-Shared Key (EPSK) is established
               or provisioned out of band, i.e., not from a TLS
               connection.  An EPSK is a tuple of (Base Key,
               External Identity, Hash).  EPSKs MUST NOT be
               imported for (D)TLS 1.2 or prior versions.
               When PSKs are provisioned out of band, the PSK
               identity and the KDF hash algorithm to be used
               with the PSK MUST also be provisioned.

               The structure of this container is designed to
               satisfy the requirements in Section 4.2.11 of
               RFC 8446, the recommendations from Section 6 of
               RFC 9257, and the EPSK input fields detailed in
               Section 5.1 of RFC 9258.  The base-key is based
               upon 'ks:inline-or-keystore-symmetric-key-grouping'
               in order to provide users with flexible and
               secure storage options.";
            reference
              "RFC 8446: The Transport Layer Security (TLS)
                         Protocol Version 1.3
               RFC 9257: Guidance for External Pre-Shared Key
                         (PSK) Usage in TLS
               RFC 9258: Importing External Pre-Shared Keys
                         (PSKs) for TLS 1.3";
            uses ks:inline-or-keystore-symmetric-key-grouping;
            leaf external-identity {
              type string;
              mandatory true;
              description
                "As per Section 4.2.11 of RFC 8446 and Section 4.1
                 of RFC 9257, a sequence of bytes used to identify
                 an EPSK.  A label for a pre-shared key established
                 externally.";
              reference
                "RFC 8446: The Transport Layer Security (TLS)
                           Protocol Version 1.3
                 RFC 9257: Guidance for External Pre-Shared Key
                           (PSK) Usage in TLS";
            }
            leaf hash {
              type tlscmn:epsk-supported-hash;
              default "sha-256";
              description
                "As per Section 4.2.11 of RFC 8446, for EPSKs,
                 the hash algorithm MUST be set when the PSK is
                 established; otherwise, default to SHA-256 if
                 no such algorithm is defined.  The server MUST
                 ensure that it selects a compatible PSK (if any)
                 and cipher suite.  Each PSK MUST only be used
                 with a single hash function.";
              reference
                "RFC 8446: The Transport Layer Security (TLS)
                           Protocol Version 1.3";
            }
            leaf context {
              type string;
              description
                "As per Section 5.1 of RFC 9258, context MUST
                 include the context used to determine the EPSK,
                 if any exists.  For example, context may include
                 information about peer roles or identities
                 to mitigate Selfie-style reflection attacks.
                 Since the EPSK is a key derived from an external
                 protocol or sequence of protocols, context MUST
                 include a channel binding for the deriving
                 protocols (see RFC 5056).  The details of this
                 binding are protocol specific and out of scope
                 for this document.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
            leaf target-protocol {
              type uint16;
              description
                "As per Section 3.1 of RFC 9258, the protocol
                 for which a PSK is imported for use.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
            leaf target-kdf {
              type uint16;
              description
                "As per Section 3 of RFC 9258, the KDF for
                 which a PSK is imported for use.";
              reference
                "RFC 9258: Importing External Pre-Shared Keys
                           (PSKs) for TLS 1.3";
            }
          }
        }
      }
    } // container server-identity
    container client-authentication {
      if-feature "client-auth-supported";
      nacm:default-deny-write;
      must "ca-certs or ee-certs or raw-public-keys or tls12-psks
                    or tls13-epsks";
      presence "Indicates that client authentication is supported
                (i.e., that the server will request clients send
                certificates).  If not configured, the TLS server
                SHOULD NOT request that TLS clients provide
                authentication credentials.";
      description
        "Specifies how the TLS server can authenticate TLS clients.
         Any combination of credentials is additive and unordered.

         Note that no configuration is required for authentication
         based on PSK (pre-shared or pairwise symmetric key) as the
         the key is necessarily the same as configured in the
         '../server-identity' node.";
      container ca-certs {
        if-feature "client-auth-x509-cert";
        presence "Indicates that Certification Authority (CA)
                  certificates have been configured.  This
                  statement is present so the mandatory
                  descendant nodes do not imply that this node
                  must be configured.";
        description
          "A set of CA certificates used by the TLS server to
           authenticate TLS client certificates.  A client
           certificate is authenticated if it has a valid chain
           of trust to a configured CA certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container ee-certs {
        if-feature "client-auth-x509-cert";
        presence "Indicates that EE certificates have been
                  configured.  This statement is present so the
                  mandatory descendant nodes do not imply that
                  this node must be configured.";
        description
          "A set of client certificates (i.e., EE certificates)
           used by the TLS server to authenticate
           certificates presented by TLS clients.  A client
           certificate is authenticated if it is an exact
           match to a configured client certificate.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-certs-grouping;
      }
      container raw-public-keys {
        if-feature "client-auth-raw-public-key";
        presence "Indicates that raw public keys have been
                  configured.  This statement is present so
                  the mandatory descendant nodes do not imply
                  that this node must be configured.";
        description
          "A set of raw public keys used by the TLS server to
           authenticate raw public keys presented by the TLS
           client.  A raw public key is authenticated if it
           is an exact match to a configured raw public key.";
        reference
          "RFC 9641: A YANG Data Model for a Truststore";
        uses ts:inline-or-truststore-public-keys-grouping {
          refine "inline-or-truststore/inline/inline-definition/"
               + "public-key" {
            must 'derived-from-or-self(public-key-format,'
               + ' "ct:subject-public-key-info-format")';
          }
          refine "inline-or-truststore/central-truststore/"
               + "central-truststore-reference" {
            must 'not(deref(.)/../ts:public-key/ts:public-key-'
               + 'format[not(derived-from-or-self(., "ct:subject-'
               + 'public-key-info-format"))])';
          }
        }
      }
      leaf tls12-psks {
        if-feature "client-auth-tls12-psk";
        type empty;
        description
          "Indicates that the TLS server can authenticate TLS clients
           using configured PSKs (pre-shared or pairwise symmetric
           keys).

           No configuration is required since the PSK value is the
           same as PSK value configured in the 'server-identity'
           node.";
      }
      leaf tls13-epsks {
        if-feature "client-auth-tls13-epsk";
        type empty;
        description
          "Indicates that the TLS 1.3 server can authenticate TLS
           clients using configured External PSKs (pre-shared keys).

           No configuration is required since the PSK value is the
           same as PSK value configured in the 'server-identity'
           node.";
      }
    } // container client-authentication
    container hello-params {
      nacm:default-deny-write;
      if-feature "tlscmn:hello-params";
      uses tlscmn:hello-params-grouping;
      description
        "Configurable parameters for the TLS hello message.";
    } // container hello-params
    container keepalives {
      nacm:default-deny-write;
      if-feature "tls-server-keepalives";
      description
        "Configures the keepalive policy for the TLS server.";
      leaf peer-allowed-to-send {
        type empty;
        description
          "Indicates that the remote TLS client is allowed to send
           HeartbeatRequest messages, as defined by RFC 6520,
           to this TLS server.";
        reference
          "RFC 6520: Transport Layer Security (TLS) and Datagram
           Transport Layer Security (DTLS) Heartbeat Extension";
      }
      container test-peer-aliveness {
        presence "Indicates that the TLS server proactively tests the
                  aliveness of the remote TLS client.";
        description
          "Configures the keepalive policy to proactively test
           the aliveness of the TLS client.  An unresponsive
           TLS client is dropped after approximately max-wait
           * max-attempts seconds.";
        leaf max-wait {
          type uint16 {
            range "1..max";
          }
          units "seconds";
          default "30";
          description
            "Sets the amount of time in seconds, after which a
             TLS-level message will be sent to test the
             aliveness of the TLS client if no data has been
             received from the TLS client.";
        }
        leaf max-attempts {
          type uint8;
          default "3";
          description
            "Sets the maximum number of sequential keepalive
             messages that can fail to obtain a response from
             the TLS client before assuming the TLS client is
             no longer alive.";
        }
      }
    } // container keepalives
  } // grouping tls-server-grouping

}


</sourcecode>
      </section>
    </section>
    <section numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-5-1">The three IETF YANG modules in this document define groupings and will
        not be deployed as standalone modules. Their security implications
        may be context dependent based on their use in other modules.  The
        designers of modules that import these grouping must conduct their
        own analysis of the security considerations.</t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-considerations-for-the-iana">Considerations for the "iana-tls-cipher-suite-algs" YANG Module</name>
        <t indent="0" pn="section-5.1-1">This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8407#section-3.7.1" derivedContent="RFC8407"/>.</t>
        <t indent="0" pn="section-5.1-2">The "iana-tls-cipher-suite-algs" YANG module defines a
  	data model that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and RESTCONF
          <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>. These
   protocols have mandatory-to-implement secure transport layers (e.g., Secure Shell (SSH) <xref target="RFC4252" format="default" sectionFormat="of" derivedContent="RFC4252"/>, TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, and QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>) and mandatory-to-implement mutual authentication. 
        </t>
        <t indent="0" pn="section-5.1-3">The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
        content.</t>
        <t indent="0" pn="section-5.1-4">This YANG module defines YANG enumerations, for a public IANA-maintained
          registry.</t>
        <t indent="0" pn="section-5.1-5">YANG enumerations are not security-sensitive, as they are statically
          defined in the publicly accessible YANG module.  IANA <bcp14>MAY</bcp14> deprecate
          and/or obsolete enumerations over time as needed to address security
          issues found in the algorithms.</t>
        <t indent="0" pn="section-5.1-6">This module does not define any writable nodes, RPCs, actions,
          or notifications, and thus the security considerations for such
        are not provided here.</t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-considerations-for-the-ietf">Considerations for the "ietf-tls-common" YANG Module</name>
        <t indent="0" pn="section-5.2-1">This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8407#section-3.7.1" derivedContent="RFC8407"/>.</t>
        <t indent="0" pn="section-5.2-2">The "ietf-tls-common" YANG module defines a data model that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and RESTCONF
          <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>. These
   protocols have mandatory-to-implement secure transport layers (e.g., Secure Shell (SSH) <xref target="RFC4252" format="default" sectionFormat="of" derivedContent="RFC4252"/>, TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, and QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>) and mandatory-to-implement mutual authentication. 
        </t>
        <t indent="0" pn="section-5.2-3">The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
        content.</t>
        <t indent="0" pn="section-5.2-4">Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the Security Considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t indent="0" pn="section-5.2-5">None of the readable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for
          any data nodes defined in this module.</t>
        <t indent="0" pn="section-5.2-6">None of the writable data nodes defined in this YANG module are
          considered sensitive or vulnerable in network environments.
          The NACM "default-deny-write" extension has not been set for
          any data nodes defined in this module.</t>
        <t indent="0" pn="section-5.2-7">This module defines the "generate-asymmetric-key-pair" RPC that may, if
          the "ct:cleartext-private-keys" feature is enabled and the client
          requests it, return the private clear in cleartext form.  It is
          <bcp14>NOT RECOMMENDED</bcp14> for private keys to pass the server's security
          perimeter.</t>
        <t indent="0" pn="section-5.2-8">This module does not define any actions or notifications,
        and thus the security considerations for such are not provided here.</t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-considerations-for-the-ietf-">Considerations for the "ietf-tls-client" YANG Module</name>
        <t indent="0" pn="section-5.3-1">This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8407#section-3.7.1" derivedContent="RFC8407"/>.</t>
        <t indent="0" pn="section-5.3-2">The "ietf-tls-client" YANG module defines a data model that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and RESTCONF
          <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>. These
   protocols have mandatory-to-implement secure transport layers (e.g., Secure Shell (SSH) <xref target="RFC4252" format="default" sectionFormat="of" derivedContent="RFC4252"/>, TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, and QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>) and mandatory-to-implement mutual authentication. 
        </t>
        <t indent="0" pn="section-5.3-3">The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
        content.</t>
        <t indent="0" pn="section-5.3-4">Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the Security Considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t indent="0" pn="section-5.3-5">None of the readable data nodes defined in this YANG module
          are considered sensitive or vulnerable in network environments.
          The NACM "default-deny-all" extension has not been set for any
          data nodes defined in this module.</t>
        <t indent="0" pn="section-5.3-6">All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>
        <t indent="0" pn="section-5.3-7">This module does not define any RPCs, actions, or notifications,
        and thus the security considerations for such are not provided here.</t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.4">
        <name slugifiedName="name-considerations-for-the-ietf-t">Considerations for the "ietf-tls-server" YANG Module</name>
        <t indent="0" pn="section-5.4-1">This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8407#section-3.7.1" derivedContent="RFC8407"/>.</t>
        <t indent="0" pn="section-5.4-2">The "ietf-tls-server" YANG module defines a data model that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and RESTCONF
          <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>. These
   protocols have mandatory-to-implement secure transport layers (e.g., Secure Shell (SSH) <xref target="RFC4252" format="default" sectionFormat="of" derivedContent="RFC4252"/>, TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, and QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>) and mandatory-to-implement mutual authentication. 
        </t>
        <t indent="0" pn="section-5.4-3">The Network Configuration Access Control Model (NACM) <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/>
          provides the means to restrict access for particular users to a
          preconfigured subset of all available protocol operations and
        content.</t>
        <t indent="0" pn="section-5.4-4">Please be aware that this YANG module uses groupings from
          other YANG modules that define nodes that may be considered
          sensitive or vulnerable in network environments.  Please
          review the Security Considerations for dependent YANG modules
          for information as to which nodes may be considered sensitive
          or vulnerable in network environments.</t>
        <t indent="0" pn="section-5.4-5">None of the readable data nodes defined in this YANG module are considered sensitive
          or vulnerable in network environments. The NACM "default-deny-all" extension
          has not been set for any data nodes defined in this module.</t>
        <t indent="0" pn="section-5.4-6">Please be aware that this module uses the "key" and "private-key"
            nodes from the "ietf-crypto-types" module <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/>,
            where said nodes have the NACM extension "default-deny-all" set, thus
            preventing unrestricted read access to the cleartext key values.</t>
        <t indent="0" pn="section-5.4-7">All the writable data nodes defined by this module may be
          considered sensitive or vulnerable in some network environments.
          For instance, any modification to a key or reference to a key
          may dramatically alter the implemented security policy.  For
          this reason, the NACM extension "default-deny-write" has been
          set for all data nodes defined in this module.</t>
        <t indent="0" pn="section-5.4-8">This module does not define any RPCs, actions, or notifications,
        and thus the security considerations for such are not provided here.</t>
      </section>
    </section>
    <section numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-6.1">
        <name slugifiedName="name-the-ietf-xml-registry">The IETF XML Registry</name>
        <t indent="0" pn="section-6.1-1">IANA has registered the following four URIs in the "ns" registry of the
        "IETF XML Registry" <xref target="RFC3688" format="default" sectionFormat="of" derivedContent="RFC3688"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.1-2">
          <dt pn="section-6.1-2.1">URI:</dt>
          <dd pn="section-6.1-2.2"> urn:ietf:params:xml:ns:yang:iana-tls-cipher-suite-algs</dd>
          <dt pn="section-6.1-2.3">Registrant Contact:</dt>
          <dd pn="section-6.1-2.4">The IESG</dd>
          <dt pn="section-6.1-2.5">XML:</dt>
          <dd pn="section-6.1-2.6"> N/A; the requested URI is an XML namespace.</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.1-3">
          <dt pn="section-6.1-3.1">URI:</dt>
          <dd pn="section-6.1-3.2"> urn:ietf:params:xml:ns:yang:ietf-tls-common</dd>
          <dt pn="section-6.1-3.3">Registrant Contact:</dt>
          <dd pn="section-6.1-3.4"> The IESG</dd>
          <dt pn="section-6.1-3.5">XML:</dt>
          <dd pn="section-6.1-3.6"> N/A; the requested URI is an XML namespace.</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.1-4">
          <dt pn="section-6.1-4.1">URI:</dt>
          <dd pn="section-6.1-4.2"> urn:ietf:params:xml:ns:yang:ietf-tls-client</dd>
          <dt pn="section-6.1-4.3">Registrant Contact:</dt>
          <dd pn="section-6.1-4.4"> The IESG</dd>
          <dt pn="section-6.1-4.5">XML:</dt>
          <dd pn="section-6.1-4.6"> N/A; the requested URI is an XML namespace.</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.1-5">
          <dt pn="section-6.1-5.1">URI:</dt>
          <dd pn="section-6.1-5.2"> urn:ietf:params:xml:ns:yang:ietf-tls-server</dd>
          <dt pn="section-6.1-5.3">Registrant Contact:</dt>
          <dd pn="section-6.1-5.4"> The IESG</dd>
          <dt pn="section-6.1-5.5">XML:</dt>
          <dd pn="section-6.1-5.6"> N/A; the requested URI is an XML namespace.</dd>
        </dl>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-6.2">
        <name slugifiedName="name-the-yang-module-names-regis">The YANG Module Names Registry</name>
        <t indent="0" pn="section-6.2-1">IANA has registered the following four YANG modules in the "YANG Module Names"
        registry <xref target="RFC6020" format="default" sectionFormat="of" derivedContent="RFC6020"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.2-2">
          <dt pn="section-6.2-2.1">name:</dt>
          <dd pn="section-6.2-2.2">         iana-tls-cipher-suite-algs</dd>
          <dt pn="section-6.2-2.3">Maintained by IANA:</dt>
          <dd pn="section-6.2-2.4">Y</dd>
          <dt pn="section-6.2-2.5">namespace:</dt>
          <dd pn="section-6.2-2.6">    urn:ietf:params:xml:ns:yang:iana-tls-cipher-suite-algs</dd>
          <dt pn="section-6.2-2.7">prefix:</dt>
          <dd pn="section-6.2-2.8">       tlscsa</dd>
          <dt pn="section-6.2-2.9">reference:</dt>
          <dd pn="section-6.2-2.10">    RFC 9645</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.2-3">
          <dt pn="section-6.2-3.1">name: </dt>
          <dd pn="section-6.2-3.2">        ietf-tls-common</dd>
          <dt pn="section-6.2-3.3">Maintained by IANA:</dt>
          <dd pn="section-6.2-3.4">N</dd>
          <dt pn="section-6.2-3.5">namespace: </dt>
          <dd pn="section-6.2-3.6">   urn:ietf:params:xml:ns:yang:ietf-tls-common</dd>
          <dt pn="section-6.2-3.7">prefix: </dt>
          <dd pn="section-6.2-3.8">      tlscmn</dd>
          <dt pn="section-6.2-3.9">reference: </dt>
          <dd pn="section-6.2-3.10">   RFC 9645</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.2-4">
          <dt pn="section-6.2-4.1">name: </dt>
          <dd pn="section-6.2-4.2">        ietf-tls-client </dd>
          <dt pn="section-6.2-4.3">Maintained by IANA:</dt>
          <dd pn="section-6.2-4.4">N</dd>
          <dt pn="section-6.2-4.5">namespace: </dt>
          <dd pn="section-6.2-4.6">   urn:ietf:params:xml:ns:yang:ietf-tls-client </dd>
          <dt pn="section-6.2-4.7">prefix: </dt>
          <dd pn="section-6.2-4.8">      tlsc </dd>
          <dt pn="section-6.2-4.9">reference: </dt>
          <dd pn="section-6.2-4.10">   RFC 9645</dd>
        </dl>
        <dl spacing="compact" indent="3" newline="false" pn="section-6.2-5">
          <dt pn="section-6.2-5.1">name: </dt>
          <dd pn="section-6.2-5.2">        ietf-tls-server </dd>
          <dt pn="section-6.2-5.3">Maintained by IANA:</dt>
          <dd pn="section-6.2-5.4">N</dd>
          <dt pn="section-6.2-5.5">namespace: </dt>
          <dd pn="section-6.2-5.6">   urn:ietf:params:xml:ns:yang:ietf-tls-server </dd>
          <dt pn="section-6.2-5.7">prefix:  </dt>
          <dd pn="section-6.2-5.8">     tlss </dd>
          <dt pn="section-6.2-5.9">reference:  </dt>
          <dd pn="section-6.2-5.10">  RFC 9645</dd>
        </dl>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-6.3">
        <name slugifiedName="name-considerations-for-the-iana-">Considerations for the "iana-tls-cipher-suite-algs" YANG Module</name>
        <t indent="0" pn="section-6.3-1">This section follows the template defined in <xref section="4.30.3.1" target="I-D.ietf-netmod-rfc8407bis" format="default" sectionFormat="of" derivedLink="https://datatracker.ietf.org/doc/html/draft-ietf-netmod-rfc8407bis-17#section-4.30.3.1" derivedContent="RFC8407BIS"/>.</t>
        <t indent="0" pn="section-6.3-2">IANA used the script in <xref target="iana-script" format="default" sectionFormat="of" derivedContent="Appendix A"/> to generate the
          IANA-maintained "iana-tls-cipher-suite-algs" YANG module.
          The YANG module is available from the "YANG Parameters"
          registry <xref target="IANA-YANG-PARAMETERS" format="default" sectionFormat="of" derivedContent="IANA-YANG-PARAMETERS"/>.</t>
        <t indent="0" pn="section-6.3-3">IANA has added the following note to the registry:</t>
        <blockquote pn="section-6.3-4">
	  New values must not be directly added to the "iana-tls-cipher-suite-algs"
          YANG module.  They must instead be added to the "TLS Cipher Suites" registry in 
          the "Transport Layer Security (TLS) Parameters" registry group <xref target="IANA-CIPHER-ALGS" format="default" sectionFormat="of" derivedContent="IANA-CIPHER-ALGS"/>.
	</blockquote>
        <t indent="0" pn="section-6.3-5">When a value is added to the "TLS Cipher Suites" registry, a new "enum"
         statement must be added to the "iana-tls-cipher-suite-algs" YANG module.  The
        "enum" statement, and substatements thereof, should be defined as follows:</t>
        <dl newline="true" indent="3" spacing="normal" pn="section-6.3-6">
          <dt pn="section-6.3-6.1">enum</dt>
          <dd pn="section-6.3-6.2">Replicates a name from the registry.</dd>
          <dt pn="section-6.3-6.3">value</dt>
          <dd pn="section-6.3-6.4">Contains the decimal value of the IANA-assigned value.</dd>
          <dt pn="section-6.3-6.5">status</dt>
          <dd pn="section-6.3-6.6">Include only if a registration has been deprecated or obsoleted.
            An IANA "Recommended" value "N" maps to YANG status "deprecated".  Since the registry
            is unable to express a logical "<bcp14>MUST NOT</bcp14>" recommendation, there is no
            mapping to YANG status "obsolete", which is unfortunate given the moving of single-DES and International Data
      Encryption Algorithm (IDEA) TLS cipher suites to Historic <xref target="RFC8996" format="default" sectionFormat="of" derivedContent="RFC8996"/>.</dd>
          <dt pn="section-6.3-6.7">description</dt>
          <dd pn="section-6.3-6.8">Contains "Enumeration for the 'TLS_FOO' algorithm", where "TLS_FOO" is
            a placeholder for the algorithm's name (e.g., "TLS_PSK_WITH_AES_256_CBC_SHA").</dd>
          <dt pn="section-6.3-6.9">reference</dt>
          <dd pn="section-6.3-6.10">Replicates the reference(s) from the registry with the title of the
            document(s) added.</dd>
        </dl>
        <t indent="0" pn="section-6.3-7">Unassigned or reserved values are not present in the module.</t>
        <t indent="0" pn="section-6.3-8">When the "iana-tls-cipher-suite-algs" YANG module is updated, a
          new "revision" statement with a unique revision date must be added
          in front of the existing revision statements. The "revision"
          must have a "description" statement explaining why the the update
          occurred and must have a "reference" substatement that points to the
          document defining the registry update that resulted in this change.
          For instance:</t>
        <sourcecode type="yang" markers="false" pn="section-6.3-9">
revision 2024-10-10 {
    description
        "This update reflects the update made to the underlying
         'Foo Bar' registry per RFC XXXX.";
    reference
        "RFC XXXX: Extend the Foo Bar Registry
                   to Support Something Important";
}</sourcecode>
        <t indent="0" pn="section-6.3-10">IANA has added the following note to the "TLS Cipher Suites"
          registry under the "Transport Layer Security (TLS) Parameters"
          registry group <xref target="IANA-CIPHER-ALGS" format="default" sectionFormat="of" derivedContent="IANA-CIPHER-ALGS"/>.</t>
        <blockquote pn="section-6.3-11">When this registry is modified, the YANG module "iana-tls-cipher-suite-algs"
        <xref target="IANA-YANG-PARAMETERS" format="default" sectionFormat="of" derivedContent="IANA-YANG-PARAMETERS"/> must be updated as defined in RFC 9645.</blockquote>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-netmod-system-config" to="SYSTEM-CONFIG"/>
    <displayreference target="I-D.ietf-netmod-rfc8407bis" to="RFC8407BIS"/>
    <displayreference target="I-D.ietf-netconf-http-client-server" to="HTTP-CLIENT-SERVER"/>
    <displayreference target="I-D.ietf-netconf-netconf-client-server" to="NETCONF-CLIENT-SERVER"/>
    <displayreference target="I-D.ietf-netconf-restconf-client-server" to="RESTCONF-CLIENT-SERVER"/>
    <references pn="section-7">
      <name slugifiedName="name-references">References</name>
      <references pn="section-7.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="FIPS180-4" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf" quoteTitle="true" derivedAnchor="FIPS180-4">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date year="2015" month="August"/>
          </front>
          <seriesInfo name="FIPS PUB" value="180-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
        </reference>
        <reference anchor="FIPS186-5" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-5.pdf" quoteTitle="true" derivedAnchor="FIPS186-5">
          <front>
            <title>Digital Signature Standard (DSS)</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date year="2023" month="February"/>
          </front>
          <seriesInfo name="FIPS" value="186-5"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.186-5"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC4252" target="https://www.rfc-editor.org/info/rfc4252" quoteTitle="true" derivedAnchor="RFC4252">
          <front>
            <title>The Secure Shell (SSH) Authentication Protocol</title>
            <author fullname="T. Ylonen" initials="T." surname="Ylonen"/>
            <author fullname="C. Lonvick" initials="C." role="editor" surname="Lonvick"/>
            <date month="January" year="2006"/>
            <abstract>
              <t indent="0">The Secure Shell Protocol (SSH) is a protocol for secure remote login and other secure network services over an insecure network. This document describes the SSH authentication protocol framework and public key, password, and host-based client authentication methods. Additional authentication methods are described in separate documents. The SSH authentication protocol runs on top of the SSH transport layer protocol and provides a single authenticated tunnel for the SSH connection protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4252"/>
          <seriesInfo name="DOI" value="10.17487/RFC4252"/>
        </reference>
        <reference anchor="RFC4279" target="https://www.rfc-editor.org/info/rfc4279" quoteTitle="true" derivedAnchor="RFC4279">
          <front>
            <title>Pre-Shared Key Ciphersuites for Transport Layer Security (TLS)</title>
            <author fullname="P. Eronen" initials="P." role="editor" surname="Eronen"/>
            <author fullname="H. Tschofenig" initials="H." role="editor" surname="Tschofenig"/>
            <date month="December" year="2005"/>
            <abstract>
              <t indent="0">This document specifies three sets of new ciphersuites for the Transport Layer Security (TLS) protocol to support authentication based on pre-shared keys (PSKs). These pre-shared keys are symmetric keys, shared in advance among the communicating parties. The first set of ciphersuites uses only symmetric key operations for authentication. The second set uses a Diffie-Hellman exchange authenticated with a pre-shared key, and the third set combines public key authentication of the server with pre-shared key authentication of the client. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4279"/>
          <seriesInfo name="DOI" value="10.17487/RFC4279"/>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" quoteTitle="true" derivedAnchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="D. Cooper" initials="D." surname="Cooper"/>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <date month="May" year="2008"/>
            <abstract>
              <t indent="0">This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5280"/>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
        </reference>
        <reference anchor="RFC5288" target="https://www.rfc-editor.org/info/rfc5288" quoteTitle="true" derivedAnchor="RFC5288">
          <front>
            <title>AES Galois Counter Mode (GCM) Cipher Suites for TLS</title>
            <author fullname="J. Salowey" initials="J." surname="Salowey"/>
            <author fullname="A. Choudhury" initials="A." surname="Choudhury"/>
            <author fullname="D. McGrew" initials="D." surname="McGrew"/>
            <date month="August" year="2008"/>
            <abstract>
              <t indent="0">This memo describes the use of the Advanced Encryption Standard (AES) in Galois/Counter Mode (GCM) as a Transport Layer Security (TLS) authenticated encryption operation. GCM provides both confidentiality and data origin authentication, can be efficiently implemented in hardware for speeds of 10 gigabits per second and above, and is also well-suited to software implementations. This memo defines TLS cipher suites that use AES-GCM with RSA, DSA, and Diffie-Hellman-based key exchange mechanisms. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5288"/>
          <seriesInfo name="DOI" value="10.17487/RFC5288"/>
        </reference>
        <reference anchor="RFC5289" target="https://www.rfc-editor.org/info/rfc5289" quoteTitle="true" derivedAnchor="RFC5289">
          <front>
            <title>TLS Elliptic Curve Cipher Suites with SHA-256/384 and AES Galois Counter Mode (GCM)</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2008"/>
            <abstract>
              <t indent="0">RFC 4492 describes elliptic curve cipher suites for Transport Layer Security (TLS). However, all those cipher suites use HMAC-SHA-1 as their Message Authentication Code (MAC) algorithm. This document describes sixteen new cipher suites for TLS that specify stronger MAC algorithms. Eight use Hashed Message Authentication Code (HMAC) with SHA-256 or SHA-384, and eight use AES in Galois Counter Mode (GCM). This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5289"/>
          <seriesInfo name="DOI" value="10.17487/RFC5289"/>
        </reference>
        <reference anchor="RFC6020" target="https://www.rfc-editor.org/info/rfc6020" quoteTitle="true" derivedAnchor="RFC6020">
          <front>
            <title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <date month="October" year="2010"/>
            <abstract>
              <t indent="0">YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF), NETCONF remote procedure calls, and NETCONF notifications. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6020"/>
          <seriesInfo name="DOI" value="10.17487/RFC6020"/>
        </reference>
        <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241" quoteTitle="true" derivedAnchor="RFC6241">
          <front>
            <title>Network Configuration Protocol (NETCONF)</title>
            <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
            <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
            <date month="June" year="2011"/>
            <abstract>
              <t indent="0">The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6241"/>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
        </reference>
        <reference anchor="RFC6520" target="https://www.rfc-editor.org/info/rfc6520" quoteTitle="true" derivedAnchor="RFC6520">
          <front>
            <title>Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) Heartbeat Extension</title>
            <author fullname="R. Seggelmann" initials="R." surname="Seggelmann"/>
            <author fullname="M. Tuexen" initials="M." surname="Tuexen"/>
            <author fullname="M. Williams" initials="M." surname="Williams"/>
            <date month="February" year="2012"/>
            <abstract>
              <t indent="0">This document describes the Heartbeat Extension for the Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS) protocols.</t>
              <t indent="0">The Heartbeat Extension provides a new protocol for TLS/DTLS allowing the usage of keep-alive functionality without performing a renegotiation and a basis for path MTU (PMTU) discovery for DTLS. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6520"/>
          <seriesInfo name="DOI" value="10.17487/RFC6520"/>
        </reference>
        <reference anchor="RFC7250" target="https://www.rfc-editor.org/info/rfc7250" quoteTitle="true" derivedAnchor="RFC7250">
          <front>
            <title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
            <author fullname="P. Wouters" initials="P." role="editor" surname="Wouters"/>
            <author fullname="H. Tschofenig" initials="H." role="editor" surname="Tschofenig"/>
            <author fullname="J. Gilmore" initials="J." surname="Gilmore"/>
            <author fullname="S. Weiler" initials="S." surname="Weiler"/>
            <author fullname="T. Kivinen" initials="T." surname="Kivinen"/>
            <date month="June" year="2014"/>
            <abstract>
              <t indent="0">This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS). The new certificate type allows raw public keys to be used for authentication.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7250"/>
          <seriesInfo name="DOI" value="10.17487/RFC7250"/>
        </reference>
        <reference anchor="RFC7589" target="https://www.rfc-editor.org/info/rfc7589" quoteTitle="true" derivedAnchor="RFC7589">
          <front>
            <title>Using the NETCONF Protocol over Transport Layer Security (TLS) with Mutual X.509 Authentication</title>
            <author fullname="M. Badra" initials="M." surname="Badra"/>
            <author fullname="A. Luchuk" initials="A." surname="Luchuk"/>
            <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
            <date month="June" year="2015"/>
            <abstract>
              <t indent="0">The Network Configuration Protocol (NETCONF) provides mechanisms to install, manipulate, and delete the configuration of network devices. This document describes how to use the Transport Layer Security (TLS) protocol with mutual X.509 authentication to secure the exchange of NETCONF messages. This revision of RFC 5539 documents the new message framing used by NETCONF 1.1 and it obsoletes RFC 5539.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7589"/>
          <seriesInfo name="DOI" value="10.17487/RFC7589"/>
        </reference>
        <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950" quoteTitle="true" derivedAnchor="RFC7950">
          <front>
            <title>The YANG 1.1 Data Modeling Language</title>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <date month="August" year="2016"/>
            <abstract>
              <t indent="0">YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols. This document describes the syntax and semantics of version 1.1 of the YANG language. YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification. There are a small number of backward incompatibilities from YANG version 1. This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7950"/>
          <seriesInfo name="DOI" value="10.17487/RFC7950"/>
        </reference>
        <reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040" quoteTitle="true" derivedAnchor="RFC8040">
          <front>
            <title>RESTCONF Protocol</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <date month="January" year="2017"/>
            <abstract>
              <t indent="0">This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8040"/>
          <seriesInfo name="DOI" value="10.17487/RFC8040"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341" quoteTitle="true" derivedAnchor="RFC8341">
          <front>
            <title>Network Configuration Access Control Model</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability. There is a need for standard mechanisms to restrict NETCONF or RESTCONF protocol access for particular users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content. This document defines such an access control model.</t>
              <t indent="0">This document obsoletes RFC 6536.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="91"/>
          <seriesInfo name="RFC" value="8341"/>
          <seriesInfo name="DOI" value="10.17487/RFC8341"/>
        </reference>
        <reference anchor="RFC8422" target="https://www.rfc-editor.org/info/rfc8422" quoteTitle="true" derivedAnchor="RFC8422">
          <front>
            <title>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS) Versions 1.2 and Earlier</title>
            <author fullname="Y. Nir" initials="Y." surname="Nir"/>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <author fullname="M. Pegourie-Gonnard" initials="M." surname="Pegourie-Gonnard"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document describes key exchange algorithms based on Elliptic Curve Cryptography (ECC) for the Transport Layer Security (TLS) protocol. In particular, it specifies the use of Ephemeral Elliptic Curve Diffie-Hellman (ECDHE) key agreement in a TLS handshake and the use of the Elliptic Curve Digital Signature Algorithm (ECDSA) and Edwards-curve Digital Signature Algorithm (EdDSA) as authentication mechanisms.</t>
              <t indent="0">This document obsoletes RFC 4492.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8422"/>
          <seriesInfo name="DOI" value="10.17487/RFC8422"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" quoteTitle="true" derivedAnchor="RFC9000">
          <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <date month="May" year="2021"/>
            <abstract>
              <t indent="0">This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9000"/>
          <seriesInfo name="DOI" value="10.17487/RFC9000"/>
        </reference>
        <reference anchor="RFC9640" target="https://www.rfc-editor.org/info/rfc9640" quoteTitle="true" derivedAnchor="RFC9640">
          <front>
            <title>YANG Data Types and Groupings for Cryptography</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9640"/>
          <seriesInfo name="DOI" value="10.17487/RFC9640"/>
        </reference>
        <reference anchor="RFC9641" target="https://www.rfc-editor.org/info/rfc9641" quoteTitle="true" derivedAnchor="RFC9641">
          <front>
            <title>A YANG Data Model for a Truststore</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9641"/>
          <seriesInfo name="DOI" value="10.17487/RFC9641"/>
        </reference>
        <reference anchor="RFC9642" target="https://www.rfc-editor.org/info/rfc9642" quoteTitle="true" derivedAnchor="RFC9642">
          <front>
            <title>A YANG Data Model for a Keystore</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9642"/>
          <seriesInfo name="DOI" value="10.17487/RFC9642"/>
        </reference>
      </references>
      <references pn="section-7.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="I-D.ietf-netconf-http-client-server" target="https://datatracker.ietf.org/doc/html/draft-ietf-netconf-http-client-server-23" quoteTitle="true" derivedAnchor="HTTP-CLIENT-SERVER">
          <front>
            <title>YANG Groupings for HTTP Clients and HTTP Servers</title>
            <author fullname="Kent Watsen" initials="K." surname="Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date day="15" month="August" year="2024"/>
            <abstract>
              <t indent="0">This document presents two YANG modules: the first defines a minimal grouping for configuring an HTTP client, and the second defines a minimal grouping for configuring an HTTP server. It is intended that these groupings will be used to help define the configuration for simple HTTP-based protocols (not for complete web servers or browsers). Support is provided for HTTP/1.1, HTTP/2, and HTTP/3.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-http-client-server-23"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="IANA-CIPHER-ALGS" target="https://www.iana.org/assignments/tls-parameters/" quoteTitle="true" derivedAnchor="IANA-CIPHER-ALGS">
          <front>
            <title>TLS Cipher Suites</title>
            <author>
              <organization showOnFrontPage="true">IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA-YANG-PARAMETERS" target="https://www.iana.org/assignments/yang-parameters" quoteTitle="true" derivedAnchor="IANA-YANG-PARAMETERS">
          <front>
            <title>YANG Parameters</title>
            <author>
              <organization showOnFrontPage="true">IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="I-D.ietf-netconf-netconf-client-server" target="https://datatracker.ietf.org/doc/html/draft-ietf-netconf-netconf-client-server-37" quoteTitle="true" derivedAnchor="NETCONF-CLIENT-SERVER">
          <front>
            <title>NETCONF Client and Server Models</title>
            <author fullname="Kent Watsen" initials="K." surname="Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date day="14" month="August" year="2024"/>
            <abstract>
              <t indent="0">This document presents two YANG modules, one module to configure a NETCONF client and the other module to configure a NETCONF server. Both modules support both the SSH and TLS transport protocols, and support both standard NETCONF and NETCONF Call Home connections. Editorial Note (To be removed by RFC Editor) This draft contains placeholder values that need to be replaced with finalized values at the time of publication. This note summarizes all of the substitutions that are needed. No other RFC Editor instructions are specified elsewhere in this document. Artwork in this document contains shorthand references to drafts in progress. Please apply the following replacements (note: not all may be present): * AAAA --&gt; the assigned RFC value for draft-ietf-netconf-crypto- types * BBBB --&gt; the assigned RFC value for draft-ietf-netconf-trust- anchors * CCCC --&gt; the assigned RFC value for draft-ietf-netconf-keystore * DDDD --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client- server * EEEE --&gt; the assigned RFC value for draft-ietf-netconf-ssh-client- server * FFFF --&gt; the assigned RFC value for draft-ietf-netconf-tls-client- server * GGGG --&gt; the assigned RFC value for draft-ietf-netconf-http- client-server * HHHH --&gt; the assigned RFC value for this draft Artwork in this document contains placeholder values for the date of publication of this draft. Please apply the following replacement: * 2024-08-14 --&gt; the publication date of this draft The "Relation to other RFCs" section Section 1.1 contains the text "one or more YANG modules" and, later, "modules". This text is sourced from a file in a context where it is unknown how many modules a draft defines. The text is not wrong as is, but it may be improved by stating more directly how many modules are defined. The "Relation to other RFCs" section Section 1.1 contains a self- reference to this draft, along with a corresponding reference in the Appendix. Please replace the self-reference in this section with "This RFC" (or similar) and remove the self-reference in the "Normative/Informative References" section, whichever it is in. Tree-diagrams in this draft may use the '\' line-folding mode defined in RFC 8792. However, nicer-to-the-eye is when the '\\' line-folding mode is used. The AD suggested suggested putting a request here for the RFC Editor to help convert "ugly" '\' folded examples to use the '\\' folding mode. "Help convert" may be interpreted as, identify what looks ugly and ask the authors to make the adjustment. The following Appendix section is to be removed prior to publication: * Appendix A. Change Log</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-netconf-client-server-37"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="I-D.ietf-netconf-restconf-client-server" target="https://datatracker.ietf.org/doc/html/draft-ietf-netconf-restconf-client-server-38" quoteTitle="true" derivedAnchor="RESTCONF-CLIENT-SERVER">
          <front>
            <title>RESTCONF Client and Server Models</title>
            <author fullname="Kent Watsen" initials="K." surname="Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date day="14" month="August" year="2024"/>
            <abstract>
              <t indent="0">This document presents two YANG modules, one module to configure a RESTCONF client and the other module to configure a RESTCONF server. Both modules support the TLS transport protocol with both standard RESTCONF and RESTCONF Call Home connections. Editorial Note (To be removed by RFC Editor) This draft contains placeholder values that need to be replaced with finalized values at the time of publication. This note summarizes all of the substitutions that are needed. No other RFC Editor instructions are specified elsewhere in this document. Artwork in this document contains shorthand references to drafts in progress. Please apply the following replacements (note: not all may be present): * AAAA --&gt; the assigned RFC value for draft-ietf-netconf-crypto- types * BBBB --&gt; the assigned RFC value for draft-ietf-netconf-trust- anchors * CCCC --&gt; the assigned RFC value for draft-ietf-netconf-keystore * DDDD --&gt; the assigned RFC value for draft-ietf-netconf-tcp-client- server * EEEE --&gt; the assigned RFC value for draft-ietf-netconf-ssh-client- server * FFFF --&gt; the assigned RFC value for draft-ietf-netconf-tls-client- server * GGGG --&gt; the assigned RFC value for draft-ietf-netconf-http- client-server * HHHH --&gt; the assigned RFC value for draft-ietf-netconf-netconf- client-server * IIII --&gt; the assigned RFC value for this draft Artwork in this document contains placeholder values for the date of publication of this draft. Please apply the following replacement: * 2024-08-14 --&gt; the publication date of this draft The "Relation to other RFCs" section Section 1.1 contains the text "one or more YANG modules" and, later, "modules". This text is sourced from a file in a context where it is unknown how many modules a draft defines. The text is not wrong as is, but it may be improved by stating more directly how many modules are defined. The "Relation to other RFCs" section Section 1.1 contains a self- reference to this draft, along with a corresponding reference in the Appendix. Please replace the self-reference in this section with "This RFC" (or similar) and remove the self-reference in the "Normative/Informative References" section, whichever it is in. Tree-diagrams in this draft may use the '\' line-folding mode defined in RFC 8792. However, nicer-to-the-eye is when the '\\' line-folding mode is used. The AD suggested suggested putting a request here for the RFC Editor to help convert "ugly" '\' folded examples to use the '\\' folding mode. "Help convert" may be interpreted as, identify what looks ugly and ask the authors to make the adjustment. The following Appendix section is to be removed prior to publication: * Appendix A. Change Log</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-restconf-client-server-38"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="RFC3688" target="https://www.rfc-editor.org/info/rfc3688" quoteTitle="true" derivedAnchor="RFC3688">
          <front>
            <title>The IETF XML Registry</title>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <date month="January" year="2004"/>
            <abstract>
              <t indent="0">This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="81"/>
          <seriesInfo name="RFC" value="3688"/>
          <seriesInfo name="DOI" value="10.17487/RFC3688"/>
        </reference>
        <reference anchor="RFC5056" target="https://www.rfc-editor.org/info/rfc5056" quoteTitle="true" derivedAnchor="RFC5056">
          <front>
            <title>On the Use of Channel Bindings to Secure Channels</title>
            <author fullname="N. Williams" initials="N." surname="Williams"/>
            <date month="November" year="2007"/>
            <abstract>
              <t indent="0">The concept of channel binding allows applications to establish that the two end-points of a secure channel at one network layer are the same as at a higher layer by binding authentication at the higher layer to the channel at the lower layer. This allows applications to delegate session protection to lower layers, which has various performance benefits.</t>
              <t indent="0">This document discusses and formalizes the concept of channel binding to secure channels. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5056"/>
          <seriesInfo name="DOI" value="10.17487/RFC5056"/>
        </reference>
        <reference anchor="RFC5246" target="https://www.rfc-editor.org/info/rfc5246" quoteTitle="true" derivedAnchor="RFC5246">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
            <author fullname="T. Dierks" initials="T." surname="Dierks"/>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2008"/>
            <abstract>
              <t indent="0">This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol. The TLS protocol provides communications security over the Internet. The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5246"/>
          <seriesInfo name="DOI" value="10.17487/RFC5246"/>
        </reference>
        <reference anchor="RFC8071" target="https://www.rfc-editor.org/info/rfc8071" quoteTitle="true" derivedAnchor="RFC8071">
          <front>
            <title>NETCONF Call Home and RESTCONF Call Home</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <date month="February" year="2017"/>
            <abstract>
              <t indent="0">This RFC presents NETCONF Call Home and RESTCONF Call Home, which enable a NETCONF or RESTCONF server to initiate a secure connection to a NETCONF or RESTCONF client, respectively.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8071"/>
          <seriesInfo name="DOI" value="10.17487/RFC8071"/>
        </reference>
        <reference anchor="RFC8259" target="https://www.rfc-editor.org/info/rfc8259" quoteTitle="true" derivedAnchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t indent="0">JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t indent="0">This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8340" target="https://www.rfc-editor.org/info/rfc8340" quoteTitle="true" derivedAnchor="RFC8340">
          <front>
            <title>YANG Tree Diagrams</title>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="L. Berger" initials="L." role="editor" surname="Berger"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">This document captures the current syntax used in YANG module tree diagrams. The purpose of this document is to provide a single location for this definition. This syntax may be updated from time to time based on the evolution of the YANG language.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="215"/>
          <seriesInfo name="RFC" value="8340"/>
          <seriesInfo name="DOI" value="10.17487/RFC8340"/>
        </reference>
        <reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342" quoteTitle="true" derivedAnchor="RFC8342">
          <front>
            <title>Network Management Datastore Architecture (NMDA)</title>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
            <author fullname="P. Shafer" initials="P." surname="Shafer"/>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="R. Wilton" initials="R." surname="Wilton"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">Datastores are a fundamental concept binding the data models written in the YANG data modeling language to network management protocols such as the Network Configuration Protocol (NETCONF) and RESTCONF. This document defines an architectural framework for datastores based on the experience gained with the initial simpler model, addressing requirements that were not well supported in the initial model. This document updates RFC 7950.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8342"/>
          <seriesInfo name="DOI" value="10.17487/RFC8342"/>
        </reference>
        <reference anchor="RFC8407" target="https://www.rfc-editor.org/info/rfc8407" quoteTitle="true" derivedAnchor="RFC8407">
          <front>
            <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <date month="October" year="2018"/>
            <abstract>
              <t indent="0">This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="216"/>
          <seriesInfo name="RFC" value="8407"/>
          <seriesInfo name="DOI" value="10.17487/RFC8407"/>
        </reference>
        <reference anchor="I-D.ietf-netmod-rfc8407bis" target="https://datatracker.ietf.org/doc/html/draft-ietf-netmod-rfc8407bis-17" quoteTitle="true" derivedAnchor="RFC8407BIS">
          <front>
            <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
            <author fullname="Andy Bierman" initials="A." surname="Bierman">
              <organization showOnFrontPage="true">YumaWorks</organization>
            </author>
            <author fullname="Mohamed Boucadair" initials="M." surname="Boucadair">
              <organization showOnFrontPage="true">Orange</organization>
            </author>
            <author fullname="Qin Wu" initials="Q." surname="Wu">
              <organization showOnFrontPage="true">Huawei</organization>
            </author>
            <date day="27" month="September" year="2024"/>
            <abstract>
              <t indent="0">This memo provides guidelines for authors and reviewers of specifications containing YANG modules, including IANA-maintained modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 8407. Also, this document updates RFC 8126 by providing additional guidelines for writing the IANA considerations for RFCs that specify IANA-maintained modules. The document also updates RFC 6020 by clarifying how modules and their revisions are handled by IANA.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-netmod-rfc8407bis-17"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="RFC8996" target="https://www.rfc-editor.org/info/rfc8996" quoteTitle="true" derivedAnchor="RFC8996">
          <front>
            <title>Deprecating TLS 1.0 and TLS 1.1</title>
            <author fullname="K. Moriarty" initials="K." surname="Moriarty"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <date month="March" year="2021"/>
            <abstract>
              <t indent="0">This document formally deprecates Transport Layer Security (TLS) versions 1.0 (RFC 2246) and 1.1 (RFC 4346). Accordingly, those documents have been moved to Historic status. These versions lack support for current and recommended cryptographic algorithms and mechanisms, and various government and industry profiles of applications using TLS now mandate avoiding these old TLS versions. TLS version 1.2 became the recommended version for IETF protocols in 2008 (subsequently being obsoleted by TLS version 1.3 in 2018), providing sufficient time to transition away from older versions. Removing support for older versions from implementations reduces the attack surface, reduces opportunity for misconfiguration, and streamlines library and product maintenance.</t>
              <t indent="0">This document also deprecates Datagram TLS (DTLS) version 1.0 (RFC 4347) but not DTLS version 1.2, and there is no DTLS version 1.1.</t>
              <t indent="0">This document updates many RFCs that normatively refer to TLS version 1.0 or TLS version 1.1, as described herein. This document also updates the best practices for TLS usage in RFC 7525; hence, it is part of BCP 195.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="195"/>
          <seriesInfo name="RFC" value="8996"/>
          <seriesInfo name="DOI" value="10.17487/RFC8996"/>
        </reference>
        <reference anchor="RFC9110" target="https://www.rfc-editor.org/info/rfc9110" quoteTitle="true" derivedAnchor="RFC9110">
          <front>
            <title>HTTP Semantics</title>
            <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
            <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
            <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
            <date month="June" year="2022"/>
            <abstract>
              <t indent="0">The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
              <t indent="0">This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="97"/>
          <seriesInfo name="RFC" value="9110"/>
          <seriesInfo name="DOI" value="10.17487/RFC9110"/>
        </reference>
        <reference anchor="RFC9257" target="https://www.rfc-editor.org/info/rfc9257" quoteTitle="true" derivedAnchor="RFC9257">
          <front>
            <title>Guidance for External Pre-Shared Key (PSK) Usage in TLS</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="J. Hoyland" initials="J." surname="Hoyland"/>
            <author fullname="M. Sethi" initials="M." surname="Sethi"/>
            <author fullname="C. A. Wood" initials="C. A." surname="Wood"/>
            <date month="July" year="2022"/>
            <abstract>
              <t indent="0">This document provides usage guidance for external Pre-Shared Keys (PSKs) in Transport Layer Security (TLS) 1.3 as defined in RFC 8446. It lists TLS security properties provided by PSKs under certain assumptions, then it demonstrates how violations of these assumptions lead to attacks. Advice for applications to help meet these assumptions is provided. This document also discusses PSK use cases and provisioning processes. Finally, it lists the privacy and security properties that are not provided by TLS 1.3 when external PSKs are used.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9257"/>
          <seriesInfo name="DOI" value="10.17487/RFC9257"/>
        </reference>
        <reference anchor="RFC9258" target="https://www.rfc-editor.org/info/rfc9258" quoteTitle="true" derivedAnchor="RFC9258">
          <front>
            <title>Importing External Pre-Shared Keys (PSKs) for TLS 1.3</title>
            <author fullname="D. Benjamin" initials="D." surname="Benjamin"/>
            <author fullname="C. A. Wood" initials="C. A." surname="Wood"/>
            <date month="July" year="2022"/>
            <abstract>
              <t indent="0">This document describes an interface for importing external Pre-Shared Keys (PSKs) into TLS 1.3.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9258"/>
          <seriesInfo name="DOI" value="10.17487/RFC9258"/>
        </reference>
        <reference anchor="RFC9643" target="https://www.rfc-editor.org/info/rfc9643" quoteTitle="true" derivedAnchor="RFC9643">
          <front>
            <title>YANG Groupings for TCP Clients and TCP Servers</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <author initials="M." surname="Scharf" fullname="Michael Scharf">
              <organization showOnFrontPage="true">Hochschule Esslingen - University of Applied Sciences</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9643"/>
          <seriesInfo name="DOI" value="10.17487/RFC9643"/>
        </reference>
        <reference anchor="RFC9644" target="https://www.rfc-editor.org/info/rfc9644" quoteTitle="true" derivedAnchor="RFC9644">
          <front>
            <title>YANG Groupings for SSH Clients and SSH Servers</title>
            <author initials="K." surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true">Watsen Networks</organization>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9644"/>
          <seriesInfo name="DOI" value="10.17487/RFC9644"/>
        </reference>
        <reference anchor="I-D.ietf-netmod-system-config" target="https://datatracker.ietf.org/doc/html/draft-ietf-netmod-system-config-09" quoteTitle="true" derivedAnchor="SYSTEM-CONFIG">
          <front>
            <title>System-defined Configuration</title>
            <author fullname="Qiufang Ma" initials="Q." surname="Ma">
              <organization showOnFrontPage="true">Huawei</organization>
            </author>
            <author fullname="Qin Wu" initials="Q." surname="Wu">
              <organization showOnFrontPage="true">Huawei</organization>
            </author>
            <author fullname="Chong Feng" initials="C." surname="Feng"/>
            <date day="29" month="September" year="2024"/>
            <abstract>
              <t indent="0">The Network Management Datastore Architecture (NMDA) in RFC 8342 defines several configuration datastores holding configuration. The contents of these configuration datastores are controlled by clients. This document introduces the concept of system configuration datastore holding configuration controlled by the system on which a server is running. The system configuration can be referenced (e.g., leafref) by configuration explicitly created by clients. This document updates RFC 8342.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-netmod-system-config-09"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="https://www.w3.org/TR/xml/" quoteTitle="true" derivedAnchor="W3C.REC-xml-20081126">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <author initials="T." surname="Bray"/>
            <author initials="J." surname="Paoli"/>
            <author initials="C. M." surname="Sperberg-McQueen"/>
            <author initials="E." surname="Maler"/>
            <author initials="F." surname="Yergeau"/>
            <date month="November" year="2008"/>
          </front>
          <refcontent>W3C Recommendation REC-xml-20081126</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="iana-script" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-script-to-generate-iana-mai">Script to Generate IANA-Maintained YANG Modules</name>
      <t indent="0" pn="section-appendix.a-1">This section is not normative.</t>
      <t indent="0" pn="section-appendix.a-2">The Python <eref target="https://www.python.org" brackets="angle"/> script contained in this
        section was used to create the initial IANA-maintained "iana-tls-cipher-suite-algs" YANG   module maintained at <xref target="IANA-YANG-PARAMETERS" format="default" sectionFormat="of" derivedContent="IANA-YANG-PARAMETERS"/>.</t>
      <t indent="0" pn="section-appendix.a-3">Run the script using the command 'python gen-yang-modules.py' to produce the
        YANG module file in the current directory.</t>
      <t indent="0" pn="section-appendix.a-4">Be aware that the script does not attempt to copy the "revision" statements
        from the previous/current YANG module.  Copying the revision statements must
      be done manually.</t>
      <sourcecode type="python" markers="true" pn="section-appendix.a-5">
=============== NOTE: '\\' line wrapping per RFC 8792 ===============

import re
import csv
import requests
import textwrap
import requests_cache
from io import StringIO
from datetime import datetime

# Metadata for the one YANG module produced by this script
MODULES = [
    {
        "csv_url": "https://www.iana.org/assignments/tls-parameters/\
\tls-parameters-4.csv",
        "spaced_name": "cipher-suite",
        "hyphenated_name": "cipher-suite",
        "prefix": "tlscsa",
    }
]


def create_module_begin(module, f):

    # Define template for all four modules
    PREAMBLE_TEMPLATE="""
module iana-tls-HNAME-algs {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:iana-tls-HNAME-algs";
  prefix PREFIX;

  organization
    "Internet Assigned Numbers Authority (IANA)";

  contact
    "Postal: ICANN
             12025 Waterfront Drive, Suite 300
             Los Angeles, CA  90094-2536
             United States of America
     Tel:    +1 310 301 5800
     Email:  &lt;iana@iana.org&gt;";

  description
    "This module defines enumerations for the cipher suite
     algorithms defined in the 'TLS Cipher Suites' registry
     under the 'Transport Layer Security (TLS) Parameters'
     registry group maintained by IANA.

     Copyright (c) 2024 IETF Trust and the persons identified as
     authors of the code. All rights reserved.

     Redistribution and use in source and binary forms, with
     or without modification, is permitted pursuant to, and
     subject to the license terms contained in, the Revised
     BSD License set forth in Section 4.c of the IETF Trust's
     Legal Provisions Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     The initial version of this YANG module is part of RFC 9645
     (https://www.rfc-editor.org/info/rfc9645); see the RFC
     itself for full legal notices.

     All versions of this module are published by IANA
     (https://www.iana.org/assignments/yang-parameters).";

  revision DATE {
    description
      "This initial version of the module was created using
       the script defined in RFC 9645 to reflect the contents
       of the SNAME algorithms registry maintained by IANA.";
    reference
      "RFC 9645: YANG Groupings for TLS Clients and TLS Servers";
  }

  typedef tls-HNAME-algorithm {
    type enumeration {
"""
    # Replacements
    rep = {
      "DATE": datetime.today().strftime('%Y-%m-%d'),
      "YEAR": datetime.today().strftime('%Y'),
      "SNAME": module["spaced_name"],
      "HNAME": module["hyphenated_name"],
      "PREFIX": module["prefix"]
    }

    # Do the replacement
    rep = dict((re.escape(k), v) for k, v in rep.items())
    pattern = re.compile("|".join(rep.keys()))
    text = pattern.sub(lambda m: rep[re.escape(m.group(0))], PREAMBL\
\E_TEMPLATE)

    # Write preamble into the file
    f.write(text)


def create_module_body(module, f):

    # Fetch the current CSV file from IANA
    r = requests.get(module["csv_url"])
    assert r.status_code == 200, "Could not get " + module["csv_url"]

    # Parse each CSV line
    with StringIO(r.text) as csv_file:
        csv_reader = csv.DictReader(csv_file)
        for row in csv_reader:

            # Skip reserved algs
            if row["Description"].startswith("Unassigned"):
                continue

            # Skip unassigned algs
            if row["Description"].startswith("Reserved"):
                continue

            # Ensure this is the TLS line
            assert row["Description"].startswith("TLS_"), "Unrecogni\
\zed description: '" + row["Description"] + "'"

            # Set the 'refs' and 'titles' lists
            if row["Reference"] == "":
                pass # skip when the Reference field is empty

            else:

                # There may be more than one ref
                refs = row["Reference"][1:-1]  # remove the '[' and \
\']' chars
                refs = refs.split("][")
                titles = []
                for ref in refs:

                    # Ascertain the ref's title
                    if ref.startswith("RFC"):

                        # Fetch the current BIBTEX entry
                        bibtex_url="https://datatracker.ietf.org/doc\
\/"+ ref.lower() + "/bibtex/"
                        r = requests.get(bibtex_url)
                        assert r.status_code == 200, "Could not GET \
\" + bibtex_url

                        # Append to 'titles' value from the "title" \
\line
                        for item in r.text.split("\n"):
                            if "title =" in item:
                                title = re.sub('.*{{(.*)}}.*', r'\g&lt;\
\1&gt;', item)
                                if title.startswith("ECDHE\_PSK"):
                                    title = re.sub("ECDHE\\\\_PSK", \
\"ECDHE_PSK", title)
                                titles.append(re.sub('.*{{(.*)}}.*',\
\ r'\g&lt;1&gt;', title))
                                break
                        else:
                            raise Exception("RFC title not found")


                        # Insert a space: "RFC9645" --&gt; "RFC 9645"
                        index = refs.index(ref)
                        refs[index] = "RFC " + ref[3:]

                    elif ref == "IESG Action 2018-08-16":

                        # Rewrite the ref value
                        index = refs.index(ref)
                        refs[index] = "IESG Action"

                        # Let title be something descriptive
                        titles.append("IESG Action 2018-08-16")

                    elif ref == "draft-irtf-cfrg-aegis-aead-08":

                        # Manually set the document's title
                        titles.append("The AEGIS Family of Authentic\
\ated Encryption Algorithms")

                    elif ref:
                        raise Exception(f'ref "{ref}" not found')

                    else:
                        raise Exception(f'ref missing: {row}')

            # Write out the enum
            f.write(f'      enum {row["Description"]} {{\n');
            if row["Recommended"] == 'N':
                f.write(f'        status deprecated;\n')
            f.write(f'        description\n')
            description = f'          "Enumeration for the \'{row["D\
\escription"]}\' algorithm.";'
            description = textwrap.fill(description, width=69, subse\
\quent_indent="           ")
            f.write(f'{description}\n')
            f.write('        reference\n')
            f.write('          "')
            if row["Reference"] == "":
                f.write('Missing in IANA registry.')
            else:
                ref_len = len(refs)
                for i in range(ref_len):
                    ref = refs[i]
                    f.write(f'{ref}:\n')
                    title = "             " + titles[i]
                    if i == ref_len - 1:
                        title += '";'
                    title = textwrap.fill(title, width=69, subsequen\
\t_indent="             ")
                    f.write(f'{title}')
                    if i != ref_len - 1:
                        f.write('\n           ')
            f.write('\n')
            f.write('      }\n')



def create_module_end(module, f):

    # Close out the enumeration, typedef, and module
    f.write("    }\n")
    f.write("    description\n")
    f.write(f'      "An enumeration for TLS {module["spaced_name"]} \
\algorithms.";\n')
    f.write("  }\n")
    f.write('\n')
    f.write('}\n')


def create_module(module):

    # Install cache for 8x speedup
    requests_cache.install_cache()

    # Ascertain the yang module's name
    yang_module_name = "iana-tls-" + module["hyphenated_name"] + "-a\
\lgs.yang"

    # Create yang module file
    with open(yang_module_name, "w") as f:
        create_module_begin(module, f)
        create_module_body(module, f)
        create_module_end(module, f)


def main():
    for module in MODULES:
        create_module(module)


if __name__ == "__main__":
    main()
</sourcecode>
    </section>
    <section numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.b-1">The authors would like to thank the following for lively discussions
        on list and in the halls (ordered by first name):
        <contact fullname="Alan Luchuk"/>,
        <contact fullname="Andy Bierman"/>,
        <contact fullname="Balázs Kovács"/>,
        <contact fullname="Benoit Claise"/>,
        <contact fullname="Bert Wijnen"/>,
        <contact fullname="David Lamparter"/>,
        <contact fullname="Dhruv Dhody"/>,
        <contact fullname="Éric Vyncke"/>,
        <contact fullname="Gary Wu"/>,
        <contact fullname="Henk Birkholz"/>,
        <contact fullname="Jeff Hartley"/>,
        <contact fullname="Jürgen Schönwälder"/>,
        <contact fullname="Ladislav Lhotka"/>,
        <contact fullname="Liang Xia"/>,
        <contact fullname="Martin Björklund"/>,
        <contact fullname="Martin Thomson"/>,
        <contact fullname="Mehmet Ersue"/>,
        <contact fullname="Michal Vaško"/>,
        <contact fullname="Murray Kucherawy"/>,
        <contact fullname="Paul Wouters"/>,
        <contact fullname="Phil Shafer"/>,
        <contact fullname="Qin Wu"/>,
        <contact fullname="Radek Krejci"/>,
        <contact fullname="Rob Wilton"/>,
        <contact fullname="Roman Danyliw"/>,
        <contact fullname="Russ Housley"/>,
        <contact fullname="Sean Turner"/>,
	<contact fullname="Thomas Martin"/>, and 
        <contact fullname="Tom Petch"/>.</t>
    </section>
    <section numbered="false" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-contributors">Contributors</name>
      <t indent="0" pn="section-appendix.c-1">Special acknowledgement goes to <contact fullname="Gary Wu"/> who contributed the
        "ietf-tls-common" module and <contact fullname="Tom Petch"/> who carefully ensured
        that references were set correctly throughout.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-authors-address">Author's Address</name>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
        <organization showOnFrontPage="true">Watsen Networks</organization>
        <address>
          <email>kent+ietf@watsen.net</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
