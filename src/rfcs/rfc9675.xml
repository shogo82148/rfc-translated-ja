<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" category="info" ipr="trust200902" docName="draft-ietf-dtn-dtnma-14" number="9675" consensus="true" submissionType="IETF" xml:lang="en" obsoletes="" updates="" tocInclude="true" symRefs="true" sortRefs="true" prepTime="2024-11-07T05:49:53" indexInclude="true" scripts="Common,Latin" tocDepth="3">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-dtn-dtnma-14" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9675" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="DTNMA">Delay-Tolerant Networking Management Architecture (DTNMA)</title>
    <seriesInfo name="RFC" value="9675" stream="IETF"/>
    <author fullname="Edward J. Birrane, III" initials="E." surname="Birrane, III">
      <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
      <address>
        <email>Edward.Birrane@jhuapl.edu</email>
      </address>
    </author>
    <author fullname="Sarah Heiner" initials="S." surname="Heiner">
      <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
      <address>
        <email>Sarah.Heiner@jhuapl.edu</email>
      </address>
    </author>
    <author fullname="Emery Annis" initials="E." surname="Annis">
      <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
      <address>
        <email>Emery.Annis@jhuapl.edu</email>
      </address>
    </author>
    <date month="11" year="2024"/>
    <area>INT</area>
    <workgroup>dtn</workgroup>
    <keyword>DTN</keyword>
    <keyword>Network Management</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">
        The Delay-Tolerant Networking (DTN) architecture describes a type of
        challenged network in which communications may be significantly
        affected by long signal propagation delays, frequent link disruptions, 
        or both. The unique characteristics of this environment require a 
        unique approach to network management that supports asynchronous
        transport, autonomous local control, and a small footprint (in both
        resources and dependencies) so as to deploy on constrained devices. 
      </t>
      <t indent="0" pn="section-abstract-2">
        This document describes a DTN Management Architecture (DTNMA) suitable
        for managing devices in any challenged environment but, in
        particular, those communicating using the DTN Bundle Protocol (BP). 
        Operating over BP requires an architecture that neither presumes
        synchronized transport behavior nor relies on query-response mechanisms. 
        Implementations compliant with this DTNMA should expect to successfully
        operate in extremely challenging conditions, such as over unidirectional 
        links and other places where BP is the preferred transport.
      </t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This document is not an Internet Standards Track specification; it is
            published for informational purposes.  
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by the
            Internet Engineering Steering Group (IESG).  Not all documents
            approved by the IESG are candidates for any level of Internet
            Standard; see Section 2 of RFC 7841. 
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9675" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2024 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-purpose">Purpose</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-scope">Scope</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-organization">Organization</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-challenged-network-overview">Challenged Network Overview</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-challenged-network-constrai">Challenged Network Constraints</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-topology-and-service-implic">Topology and Service Implications</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2.2.2">
                  <li pn="section-toc.1-1.3.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.3.2.2.2.1.1"><xref derivedContent="3.2.1" format="counter" sectionFormat="of" target="section-3.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tiered-management">Tiered Management</xref></t>
                  </li>
                  <li pn="section-toc.1-1.3.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.3.2.2.2.2.1"><xref derivedContent="3.2.2" format="counter" sectionFormat="of" target="section-3.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-remote-and-local-manager-as">Remote and Local Manager Associations</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-management-special-cases">Management Special Cases</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-desirable-design-properties">Desirable Design Properties</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dynamic-architectures">Dynamic Architectures</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-hierarchically-modeled-info"> Hierarchically Modeled Information</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.3">
                <t indent="0" pn="section-toc.1-1.4.2.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-adaptive-push-of-informatio">Adaptive Push of Information</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.4">
                <t indent="0" pn="section-toc.1-1.4.2.4.1"><xref derivedContent="4.4" format="counter" sectionFormat="of" target="section-4.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-efficient-data-encoding">Efficient Data Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.5">
                <t indent="0" pn="section-toc.1-1.4.2.5.1"><xref derivedContent="4.5" format="counter" sectionFormat="of" target="section-4.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-universal-unique-data-ident">Universal, Unique Data Identification</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.6">
                <t indent="0" pn="section-toc.1-1.4.2.6.1"><xref derivedContent="4.6" format="counter" sectionFormat="of" target="section-4.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-runtime-data-definitions">Runtime Data Definitions</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.7">
                <t indent="0" pn="section-toc.1-1.4.2.7.1"><xref derivedContent="4.7" format="counter" sectionFormat="of" target="section-4.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-autonomous-operation">Autonomous Operation</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-current-remote-management-a">Current Remote Management Approaches</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-snmp-and-smi-models">SNMP and SMI Models</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.1.2">
                  <li pn="section-toc.1-1.5.2.1.2.1">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.1.1"><xref derivedContent="5.1.1" format="counter" sectionFormat="of" target="section-5.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-smi-modeling-language">The SMI Modeling Language</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.1.2.2">
                    <t indent="0" pn="section-toc.1-1.5.2.1.2.2.1"><xref derivedContent="5.1.2" format="counter" sectionFormat="of" target="section-5.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-snmp-and-transport">SNMP and Transport</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-xml-infoset-based-protocols">XML-Infoset-Based Protocols and YANG Data Models</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.2.2">
                  <li pn="section-toc.1-1.5.2.2.2.1">
                    <t indent="0" pn="section-toc.1-1.5.2.2.2.1.1"><xref derivedContent="5.2.1" format="counter" sectionFormat="of" target="section-5.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-yang-modeling-language">The YANG Modeling Language</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.2.2.2">
                    <t indent="0" pn="section-toc.1-1.5.2.2.2.2.1"><xref derivedContent="5.2.2" format="counter" sectionFormat="of" target="section-5.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-netconf-protocol-and-transp">NETCONF Protocol and Transport</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.2.2.3">
                    <t indent="0" pn="section-toc.1-1.5.2.2.2.3.1"><xref derivedContent="5.2.3" format="counter" sectionFormat="of" target="section-5.2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-restconf-protocol-and-trans">RESTCONF Protocol and Transport</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.2.2.4">
                    <t indent="0" pn="section-toc.1-1.5.2.2.2.4.1"><xref derivedContent="5.2.4" format="counter" sectionFormat="of" target="section-5.2.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-coreconf-protocol-and-trans">CORECONF Protocol and Transport</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-grpc-network-management-int">gRPC Network Management Interface (gNMI)</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2.3.2">
                  <li pn="section-toc.1-1.5.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.5.2.3.2.1.1"><xref derivedContent="5.3.1" format="counter" sectionFormat="of" target="section-5.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-the-protobuf-modeling-langu">The Protobuf Modeling Language</xref></t>
                  </li>
                  <li pn="section-toc.1-1.5.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.5.2.3.2.2.1"><xref derivedContent="5.3.2" format="counter" sectionFormat="of" target="section-5.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-grpc-protocol-and-transport">gRPC Protocol and Transport</xref></t>
                  </li>
                </ul>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-intelligent-platform-manage">Intelligent Platform Management Interface (IPMI)</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.5">
                <t indent="0" pn="section-toc.1-1.5.2.5.1"><xref derivedContent="5.5" format="counter" sectionFormat="of" target="section-5.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-autonomic-networking">Autonomic Networking</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.6">
                <t indent="0" pn="section-toc.1-1.5.2.6.1"><xref derivedContent="5.6" format="counter" sectionFormat="of" target="section-5.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-deep-space-autonomy">Deep Space Autonomy</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-motivation-for-new-features">Motivation for New Features</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-reference-model">Reference Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-important-concepts">Important Concepts</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-model-overview">Model Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.3">
                <t indent="0" pn="section-toc.1-1.7.2.3.1"><xref derivedContent="7.3" format="counter" sectionFormat="of" target="section-7.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-functional-elements">Functional Elements</xref></t>
                <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.3.2">
                  <li pn="section-toc.1-1.7.2.3.2.1">
                    <t indent="0" pn="section-toc.1-1.7.2.3.2.1.1"><xref derivedContent="7.3.1" format="counter" sectionFormat="of" target="section-7.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-managed-applications-and-se">Managed Applications and Services</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.3.2.2">
                    <t indent="0" pn="section-toc.1-1.7.2.3.2.2.1"><xref derivedContent="7.3.2" format="counter" sectionFormat="of" target="section-7.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dtnma-agent-da">DTNMA Agent (DA)</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.3.2.3">
                    <t indent="0" pn="section-toc.1-1.7.2.3.2.3.1"><xref derivedContent="7.3.3" format="counter" sectionFormat="of" target="section-7.3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-managing-applications-and-s">Managing Applications and Services</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.3.2.4">
                    <t indent="0" pn="section-toc.1-1.7.2.3.2.4.1"><xref derivedContent="7.3.4" format="counter" sectionFormat="of" target="section-7.3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-dtnma-manager-dm">DTNMA Manager (DM)</xref></t>
                  </li>
                  <li pn="section-toc.1-1.7.2.3.2.5">
                    <t indent="0" pn="section-toc.1-1.7.2.3.2.5.1"><xref derivedContent="7.3.5" format="counter" sectionFormat="of" target="section-7.3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-pre-shared-definitions">Pre-Shared Definitions</xref></t>
                  </li>
                </ul>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-desired-services">Desired Services</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.8.2">
              <li pn="section-toc.1-1.8.2.1">
                <t indent="0" pn="section-toc.1-1.8.2.1.1"><xref derivedContent="8.1" format="counter" sectionFormat="of" target="section-8.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-local-monitoring-and-contro">Local Monitoring and Control</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.2">
                <t indent="0" pn="section-toc.1-1.8.2.2.1"><xref derivedContent="8.2" format="counter" sectionFormat="of" target="section-8.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-local-data-fusion">Local Data Fusion</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.3">
                <t indent="0" pn="section-toc.1-1.8.2.3.1"><xref derivedContent="8.3" format="counter" sectionFormat="of" target="section-8.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-remote-configuration">Remote Configuration</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.4">
                <t indent="0" pn="section-toc.1-1.8.2.4.1"><xref derivedContent="8.4" format="counter" sectionFormat="of" target="section-8.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-remote-reporting">Remote Reporting</xref></t>
              </li>
              <li pn="section-toc.1-1.8.2.5">
                <t indent="0" pn="section-toc.1-1.8.2.5.1"><xref derivedContent="8.5" format="counter" sectionFormat="of" target="section-8.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authorization">Authorization</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-logical-autonomy-model">Logical Autonomy Model</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-overview">Overview</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-model-characteristics">Model Characteristics</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.3">
                <t indent="0" pn="section-toc.1-1.9.2.3.1"><xref derivedContent="9.3" format="counter" sectionFormat="of" target="section-9.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-value-representation">Data Value Representation</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.4">
                <t indent="0" pn="section-toc.1-1.9.2.4.1"><xref derivedContent="9.4" format="counter" sectionFormat="of" target="section-9.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-data-reporting">Data Reporting</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.5">
                <t indent="0" pn="section-toc.1-1.9.2.5.1"><xref derivedContent="9.5" format="counter" sectionFormat="of" target="section-9.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-command-execution">Command Execution</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.6">
                <t indent="0" pn="section-toc.1-1.9.2.6.1"><xref derivedContent="9.6" format="counter" sectionFormat="of" target="section-9.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-predicate-autonomy-rules">Predicate Autonomy Rules</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-use-cases">Use Cases</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notation">Notation</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serialized-management">Serialized Management</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.3">
                <t indent="0" pn="section-toc.1-1.10.2.3.1"><xref derivedContent="10.3" format="counter" sectionFormat="of" target="section-10.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-intermittent-connectivity">Intermittent Connectivity</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.4">
                <t indent="0" pn="section-toc.1-1.10.2.4.1"><xref derivedContent="10.4" format="counter" sectionFormat="of" target="section-10.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-open-loop-reporting">Open-Loop Reporting</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.5">
                <t indent="0" pn="section-toc.1-1.10.2.5.1"><xref derivedContent="10.5" format="counter" sectionFormat="of" target="section-10.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-multiple-administrative-dom">Multiple Administrative Domains</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.6">
                <t indent="0" pn="section-toc.1-1.10.2.6.1"><xref derivedContent="10.6" format="counter" sectionFormat="of" target="section-10.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cascading-management">Cascading Management</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="12" format="counter" sectionFormat="of" target="section-12"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="13" format="counter" sectionFormat="of" target="section-13"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
          </li>
          <li pn="section-toc.1-1.14">
            <t indent="0" pn="section-toc.1-1.14.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.a"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.15">
            <t indent="0" pn="section-toc.1-1.15.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">
        This document describes a logical, informational Delay-Tolerant Networking Management Architecture (DTNMA) suitable for operating devices in a 
        challenged architecture, such as those communicating 
        using the DTN Bundle Protocol version 7 (BPv7) <xref target="RFC9171" format="default" sectionFormat="of" derivedContent="RFC9171"/>. 
      </t>
      <t indent="0" pn="section-1-2">
        Challenged networks have certain properties that differentiate them
        from other kinds of networks. These properties, outlined in 
        <xref target="RFC7228" sectionFormat="of" section="2.2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7228#section-2.2.1" derivedContent="RFC7228"/>,
        include lacking 
        end-to-end IP connectivity, having "serious interruptions"
        to end-to-end connectivity, and exhibiting delays longer than can be
        tolerated by end-to-end synchronization mechanisms (such as TCP).
      </t>
      <t indent="0" pn="section-1-3">
        These challenged network properties can be caused by a variety of factors 
        such as physical constraints (e.g., long signal propagation delays 
        and frequent link disruptions), administrative policies (e.g., 
        quality-of-service prioritization, service-level agreements, and 
        traffic management and scheduling), and off-nominal behaviors 
        (e.g., active attackers and misconfigurations). Since these 
        challenges are not solely caused by sparseness, instances of 
        challenged networks will persist even in increasingly connected 
        environments. 
      </t>
      <t indent="0" pn="section-1-4">
        The DTN architecture, described in 
        <xref target="RFC4838" format="default" sectionFormat="of" derivedContent="RFC4838"/>, has been designed for data exchange 
        in challenged networks. Just as the DTN architecture requires new 
        capabilities for transport and transport security, special consideration 
        is needed for the operation of devices in a challenged network.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-purpose">Purpose</name>
        <t indent="0" pn="section-1.1-1">
          This document describes how challenged network properties 
          affect the operation of devices in such networks. This 
          description is presented as a logical architecture
          formed from a union of best practices for operating 
          devices deployed in challenged environments. 
        </t>
        <t indent="0" pn="section-1.1-2">
          One important practice captured in this document is the concept of self-operation.  Self-operation involves operating 
          a device without human interactivity, without system-in-the-loop 
          synchronous functions, and without a synchronous underlying 
          transport layer. This means that devices determine 
          their own schedules for data reporting, determine their own 
          operational configuration, and perform their own error 
          discovery and mitigation.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-scope">Scope</name>
        <t indent="0" pn="section-1.2-1">
          This document includes the information necessary to document 
          existing practices for operating devices in a challenged network in
          the context of a logical architecture. A logical architecture 
          describes the logical operation of a system by identifying 
          components of the system (such as in a reference model), 
          the behaviors they enable, and use cases describing how 
          those behaviors result in the desired operation of the system. 
        </t>
        <t indent="0" pn="section-1.2-2">
          Logical architectures are not functional architectures. Therefore,
          any functional design for achieving desired behaviors is out of 
          scope for this document. The set of architectural principles presented here is not meant to completely specify interfaces between components.
        </t>
        <t indent="0" pn="section-1.2-3">
          The selection of any particular transport or network layer is outside 
          of the scope of this document. The DTNMA does not require the use of
          any specific protocol such as IP, BP, TCP, or UDP. In particular, the 
          DTNMA design does not presume the use of BPv7, IPv4, or IPv6. 
        </t>
        <aside pn="section-1.2-4">
          <t indent="0" pn="section-1.2-4.1">
            NOTE: As BPv7 is the preferred transport for networks conforming to the DTN architecture, the DTNMA should be considered for any BPv7 network deployment. However, the DTNMA may also be used in other networks that have similar needs for this particular style of self-operation. For this reason, the DTNMA does not require the use of BPv7 to transport management information.
          </t>
        </aside>
        <t indent="0" pn="section-1.2-5">
          Network features such as naming, addressing, routing, and 
          communications security are out of scope for the DTNMA. It is 
          presumed that any operational network communicating DTNMA 
          messages would implement these services for any payloads carried 
          by that network. 
        </t>
        <t indent="0" pn="section-1.2-6">
          The interactions between and amongst the DTNMA and other management
          approaches are outside of the scope of this document. 
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-organization">Organization</name>
        <t indent="0" pn="section-1.3-1">
            The following nine sections provide details regarding the DTNMA.

        </t>
        <dl indent="3" newline="false" spacing="normal" pn="section-1.3-2">
          <dt pn="section-1.3-2.1">Terminology:</dt>
          <dd pn="section-1.3-2.2">
            <xref target="terms" format="default" sectionFormat="of" derivedContent="Section 2"/> identifies terms fundamental to 
              understanding DTNMA concepts. Whenever possible, these terms 
              align in both word selection and meaning with their use in
              other management protocols.
            </dd>
          <dt pn="section-1.3-2.3">Challenged Network Overview:</dt>
          <dd pn="section-1.3-2.4">
            <xref target="challenged-net-overview" format="default" sectionFormat="of" derivedContent="Section 3"/> describes important 
              aspects of challenged networks and necessary approaches for their 
              management. 
            </dd>
          <dt pn="section-1.3-2.5">Desirable Design Properties:</dt>
          <dd pn="section-1.3-2.6">
            <xref target="desired-name-properties" format="default" sectionFormat="of" derivedContent="Section 4"/> defines those properties of the DTNMA needed to operate within the constraints
              of a challenged network. These properties are similar to the
              specification of system-level requirements of a DTN management
              solution.
            </dd>
          <dt pn="section-1.3-2.7">Current Remote Management Approaches:</dt>
          <dd pn="section-1.3-2.8">
            <xref target="current-remote-mgmt" format="default" sectionFormat="of" derivedContent="Section 5"/> provides a brief 
              overview of existing remote management approaches. Where possible, 
              the DTNMA adopts concepts from these approaches. 
            </dd>
          <dt pn="section-1.3-2.9">Motivation for New Features:</dt>
          <dd pn="section-1.3-2.10">
            <xref target="motivation-for-new-features" format="default" sectionFormat="of" derivedContent="Section 6"/> provides an overall 
              motivation for this work. It also explains why a management 
              architecture for challenged networks is useful and necessary.
            </dd>
          <dt pn="section-1.3-2.11">Reference Model:</dt>
          <dd pn="section-1.3-2.12">
            <xref target="reference-model" format="default" sectionFormat="of" derivedContent="Section 7"/> defines a reference model that can
              be used to analyze the DTNMA independently of an 
              implementation or implementation architecture. 
              This model identifies the logical components of the system and 
              the high-level relationships and behaviors amongst those 
              components.
            </dd>
          <dt pn="section-1.3-2.13">Desired Services:</dt>
          <dd pn="section-1.3-2.14">
            <xref target="desired-services" format="default" sectionFormat="of" derivedContent="Section 8"/> identifies and defines the 
              DTNMA services provided to network and mission operators. 
            </dd>
          <dt pn="section-1.3-2.15">Logical Autonomy Model:</dt>
          <dd pn="section-1.3-2.16">
            <xref target="autonomy_model" format="default" sectionFormat="of" derivedContent="Section 9"/> provides an example data 
              model that can be used to analyze DTNMA control and data flows. 
              This model is based on the DTNMA reference model.
            </dd>
          <dt pn="section-1.3-2.17">Use Cases:</dt>
          <dd pn="section-1.3-2.18">
            <xref target="use-cases" format="default" sectionFormat="of" derivedContent="Section 10"/> presents multiple use cases accommodated
              by the DTNMA. Each use case is presented as a 
              set of control and data flows referencing the DTNMA reference model 
              and logical autonomy model. 
           </dd>
        </dl>
      </section>
    </section>
    <section anchor="terms" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-terminology">Terminology</name>
      <t indent="0" pn="section-2-1">
        This section defines terminology that is either unique to the DTNMA or
        necessary for understanding the concepts defined in this specification.
      </t>
      <dl indent="3" newline="false" spacing="normal" pn="section-2-2">
        <dt pn="section-2-2.1">Timely Data Exchange:</dt>
        <dd pn="section-2-2.2">
          The ability to communicate information between two (or more)
          entities within a required period of time. In some cases, a 1-second exchange may not 
          be timely; in other cases, a 1-hour exchange may be timely. 
        </dd>
        <dt pn="section-2-2.3">Local Operation:</dt>
        <dd pn="section-2-2.4">
          The operation of a device by an application co-resident on that device. 
          Local operators are applications running on a device, and there 
          might be one or more of these applications working independently or as one
          to perform the local operations function. Absent error conditions, local
          operators are always expected to be available to the devices they manage.
        </dd>
        <dt pn="section-2-2.5">Remote Operation:</dt>
        <dd pn="section-2-2.6">
          The operation of a device by an application running on a separate
          device. Remote operators communicate with operated devices over a network. 
          Remote operators are not always expected to be available to the devices they 
          operate.
        </dd>
        <dt pn="section-2-2.7">DTN Management:</dt>
        <dd pn="section-2-2.8">
          The management, monitoring, and control of a device that does not depend on stateful connections, timely data exchange of management messages, 
          or system-in-the-loop synchronous functions. DTN management is accomplished as
          a fusion of local operation and remote operation techniques; remote operators manage the configuration of local operators who
          provide monitoring and control of their co-resident devices. 
        </dd>
        <dt pn="section-2-2.9">DTNMA Agent (DA):</dt>
        <dd pn="section-2-2.10">
          A role associated with a managed device
          responsible for reporting performance data, accepting policy
          directives, performing autonomous local control, error handling, and
          data validation. DAs exchange information with DTNMA Managers (DMs) operating
          on the same device and/or on remote devices in the network. A DA is
          a type of local operator.
        </dd>
        <dt pn="section-2-2.11">DTNMA Manager (DM):</dt>
        <dd pn="section-2-2.12">
          A role associated with a managing device 
          responsible for configuring the behavior of, and eventually receiving 
          information from, DAs. DMs interact with one or more DAs located on 
          the same device and/or on remote devices in the network. A DM is a
          type of remote operator.
        </dd>
        <dt pn="section-2-2.13">Controls:</dt>
        <dd pn="section-2-2.14">
          Procedures run by a DA to change the behavior, 
          configuration, or state of an application or protocol managed by 
          that DA. These include procedures to manage the DA itself, such as
          having the DA produce performance reports or applying new
          management policies.
        </dd>
        <dt pn="section-2-2.15">Externally Defined Data (EDD):</dt>
        <dd pn="section-2-2.16">
          Typed information made available to a 
          DA by its hosting device but not computed directly by the 
          DA itself. 
        </dd>
        <dt pn="section-2-2.17">Data Report:</dt>
        <dd pn="section-2-2.18">
          A typed, ordered collection of data values gathered 
          by one or more DAs and provided to one or more DMs. Reports comply
          with the format of a given data report schema.
        </dd>
        <dt pn="section-2-2.19">Data Report Schema:</dt>
        <dd pn="section-2-2.20">
          A named, ordered collection of data elements
          that represent the schema of a data report.
        </dd>
        <dt pn="section-2-2.21">Rule:</dt>
        <dd pn="section-2-2.22">
          Unit of autonomous specification that provides a
          stimulus-response relationship between time or state on a DA 
          and the actions or operations to be run as a result of that time or 
          state. 
        </dd>
      </dl>
    </section>
    <section anchor="challenged-net-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-challenged-network-overview">Challenged Network Overview</name>
      <t indent="0" pn="section-3-1">
        The DTNMA provides network management services able to operate in
        challenged network environments for which the DTN 
        architecture was created. This section describes what is meant by the term 
        "challenged network", the important properties of such a network, and 
        observations on impacts to management approaches.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-challenged-network-constrai">Challenged Network Constraints</name>
        <t indent="0" pn="section-3.1-1">
          Constrained networks are defined as networks where "some of the 
          characteristics pretty much taken for granted with link layers in 
          common use in the Internet at the time of writing are not attainable"
          <xref target="RFC7228" format="default" sectionFormat="of" derivedContent="RFC7228"/>. This broad definition captures a variety of 
          potential issues relating to physical, technical, and regulatory 
          constraints on message transmission. Constrained networks 
          typically include nodes that regularly reboot or are otherwise turned 
          off for long periods of time, transmit at low or asynchronous bitrates, 
          and/or have very limited computational resources.
        </t>
        <t indent="0" pn="section-3.1-2">  
          Separately, a challenged network is defined as one that "has serious 
          trouble maintaining what an application would today expect of the 
          end-to-end IP model" <xref target="RFC7228" format="default" sectionFormat="of" derivedContent="RFC7228"/>. Links in such networks may 
          be impacted by attenuation, propagation delays, mobility, 
          occultation, and other limitations imposed by energy and 
          mass considerations. Therefore, systems relying on such links cannot 
          guarantee timely end-to-end data exchange.
        </t>
        <aside pn="section-3.1-3">
          <t indent="0" pn="section-3.1-3.1">
            NOTE: Because challenged networks might not provide services expected of 
            the end-to-end IP model, devices in such networks might not implement
            networking stacks associated with the end-to-end IP model. This
            means that devices might not include support for certain
            transport protocols (TCP/QUIC/UDP), web protocols (HTTP), or  
            internetworking protocols (IPv4/IPv6). 
          </t>
        </aside>
        <t indent="0" pn="section-3.1-4">
          By these definitions, a "challenged" network is a special type of
          "constrained" network, where constraints prevent timely end-to-end
          data exchange. As such, "All challenged networks are 
          constrained networks ... but not all constrained networks are 
          challenged networks ... Delay-Tolerant Networking (DTN) has been 
          designed to cope with challenged networks" <xref target="RFC7228" format="default" sectionFormat="of" derivedContent="RFC7228"/>.
        </t>
        <t indent="0" pn="section-3.1-5">
          Solutions that work in constrained networks might not be solutions
          that work in challenged networks. In particular, challenged networks 
          exhibit the following properties that impact the way in which the 
          function of network management is considered. 
        </t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.1-6">
          <li pn="section-3.1-6.1">
            Timely end-to-end data exchange cannot be guaranteed to exist at any given time 
            between any two nodes.
          </li>
          <li pn="section-3.1-6.2">
            Latencies on the order of seconds, hours, or days must be tolerated.
          </li>
          <li pn="section-3.1-6.3">
            Managed devices cannot be guaranteed to always be powered so as to receive ad hoc management requests (even requests with artificially extended timeout values).
          </li>
          <li pn="section-3.1-6.4">
            Individual links may be unidirectional.
          </li>
          <li pn="section-3.1-6.5">
            Bidirectional links may have asymmetric data rates.
          </li>
          <li pn="section-3.1-6.6">
            The existence of external infrastructure, services, systems, 
            or processes such as a Domain Name System (DNS) or a Certificate
            Authority (CA) cannot be guaranteed.
          </li>
        </ul>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-topology-and-service-implic">Topology and Service Implications</name>
        <t indent="0" pn="section-3.2-1">
          The set of constraints that might be present in a challenged network
          impacts both the topology of the network and the services active 
          within that network.
        </t>
        <t indent="0" pn="section-3.2-2">
          Operational networks handle cases where nodes join and leave the 
          network over time. These topology changes may or may not be planned, they
          may or may not represent errors, and they may or may not impact network 
          services. Challenged networks differ from other networks not in
          the presence of topological change but in the likelihood that impacts
          to topology result in impacts to network services. 
        </t>
        <t indent="0" pn="section-3.2-3">
          The difference between topology impacts and service impacts can be
          expressed in terms of connectivity. Topological connectivity usually 
          refers to the existence of a path between an application message 
          source and destination. Service connectivity, alternatively, refers 
          to the existence of a path between a node and one or more services 
          needed to process -- often just in time -- application messaging. 
          Examples of service connectivity include access to infrastructure 
          services such as a Domain Name System (DNS) or a CA.
        </t>
        <t indent="0" pn="section-3.2-4">
          In networks that might be partitioned most of the time, it is less
          likely that a node would concurrently access both an application 
          endpoint and one or more network service endpoints. For this reason, 
          network services in a challenged network should be designed to allow
          for asynchronous operation. Accommodating this use case often 
          involves the use of local caching, pre-placing information, and
          not hard-coding message information at a source that might change when a
          message reaches its destination.
        </t>
        <aside pn="section-3.2-5">
          <t indent="0" pn="section-3.2-5.1">
            NOTE: One example of rethinking services in a challenged network
            is the securing of BPv7 bundles. The Bundle Protocol Security (BPSec) <xref target="RFC9172" format="default" sectionFormat="of" derivedContent="RFC9172"/> security extensions to BPv7
            do not encode security destinations when 
            applying security. Instead, BPSec requires nodes in a network to 
            identify themselves as security verifiers or acceptors when receiving 
            and processing secured messages.
          </t>
        </aside>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-3.2.1">
          <name slugifiedName="name-tiered-management">Tiered Management</name>
          <t indent="0" pn="section-3.2.1-1">
            Network operations and management approaches need to adapt to the 
            topology and service impacts encountered in challenged networks. 
            In particular, the roles and responsibilities of "managers" and 
            "agents" need to be different than what would be expected of
            unchallenged networks.
          </t>
          <t indent="0" pn="section-3.2.1-2">
            When connectivity to a manager cannot be guaranteed, agents will need to rely 
            on locally available information and local autonomy to react to
            changes at the node. When an agent uses local autonomy for self-operation, 
            it acts as a local operator serving as a proxy for an absent remote operator. 
          </t>
          <t indent="0" pn="section-3.2.1-3">
            Therefore, the role of a "manager" must become one of a remote operator generating configurations and other essential updates for
            the local operator "agents" that are co-resident on a managed device. 
          </t>
          <t indent="0" pn="section-3.2.1-4">
            This approach creates a two-tiered management architecture. The 
            first tier is the management of the local operator configuration
            using any one of a variety of standard mechanisms, models, and 
            protocols. The second tier is the operation of the local device 
            through the local operator.
          </t>
          <t indent="0" pn="section-3.2.1-5">
            The DTNMA defines the DTNMA Manager (DM) as a remote operator application and the
            DTNMA Agent (DA) as an agent acting as a local operator application.
            In this model, which is illustrated in <xref target="two_tiered_model" format="default" sectionFormat="of" derivedContent="Figure 1"/>, the 
            DM and DA can be viewed as applications, with the DM producing new configurations
            and the DA receiving those configurations from an underlying management mechanism. 
          </t>
          <figure anchor="two_tiered_model" align="left" suppress-title="false" pn="figure-1">
            <name slugifiedName="name-two-tiered-management-archi">Two-Tiered Management Architecture</name>
            <artwork align="center" name="" type="" alt="" pn="section-3.2.1-6.1">
        _
       /
      / +------------+           +-----------+    Local    +---------+
TIER /  | DM (Remote |           | DA (Local |  Operation  | Managed |
 2   \  |  Operator) |           | Operator) | &lt;---------&gt; |   Apps  |
MGMT  \ +------------+           +-----------+             +---------+
       \_      ^                        ^  
               | configs                | configs
        _      |                        |
       /       V                        V
      / +------------+    Remote    +------------+ 
TIER /  | Management |  Management  | Management |
 1   \  |   Client   | &lt;----------&gt; |   Server   |
MGMT  \ +------------+              +------------+
       \_
</artwork>
          </figure>
          <t indent="0" pn="section-3.2.1-7">
            In this approach, the configurations produced by the DM are
            based on the DA features and associated data model.  How those
            configurations are transported between the DM and the DA, and
            how results are communicated back from the DA to the DM, can
            be accomplished using whatever mechanism is most appropriate
            for the network and the device platforms -- for example, the
            use of a  Network Configuration Protocol (NETCONF), RESTCONF, or Simple Network Management Protocol (SNMP) server on the managed device 
            to provide configurations to a DA.
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-3.2.2">
          <name slugifiedName="name-remote-and-local-manager-as">Remote and Local Manager Associations</name>
          <t indent="0" pn="section-3.2.2-1">
            In addition to disconnectivity, topological change can alter the
            associations amongst managed and managing devices. Different managing
            devices might be active in a network at different times or in 
            different partitions. Managed devices might communicate with some, all,
            or none of these managing devices as a function of their own local
            configuration and policy.
          </t>
          <aside pn="section-3.2.2-2">
            <t indent="0" pn="section-3.2.2-2.1">
              NOTE: These concepts relate to practices in conventional networks. 
              For example, supporting multiple managing devices is similar to 
              deploying multiple instances of a network service such as a DNS 
              server or CA node. Selecting from a set of managing devices is 
              similar to a sensor node's practice of electing cluster heads to act 
              as privileged nodes for data storage and exfiltration.
            </t>
          </aside>
          <t indent="0" pn="section-3.2.2-3">
            Therefore, a network management architecture for challenged networks 
            should:
          </t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-3.2.2-4">
            <li pn="section-3.2.2-4.1" derivedCounter="1.">
              Support a many-to-many association amongst managing and managed 
              devices, and
            </li>
            <li pn="section-3.2.2-4.2" derivedCounter="2.">
              Allow "control from" and "reporting to" managing devices to function 
              independently of one another.
            </li>
          </ol>
        </section>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-management-special-cases">Management Special Cases</name>
        <t indent="0" pn="section-3.3-1">
          The following special cases illustrate some of the operational
          situations that can be encountered in the management of devices in
          a challenged network. 
        </t>
        <dl indent="3" newline="false" spacing="normal" pn="section-3.3-2">
          <dt pn="section-3.3-2.1">One-Way Management:</dt>
          <dd pn="section-3.3-2.2">
            A managed device can only be accessed via a
            unidirectional link or via a link whose duration is shorter
            than a single round-trip propagation time. Results of this management may come back at a different time, over a 
            different path, and/or as observable from out-of-band changes to
            device behavior.
          </dd>
          <dt pn="section-3.3-2.3">Summary Data:</dt>
          <dd pn="section-3.3-2.4">
            A managing device might only receive summary data regarding
            a managed device's state because a link or path is constrained by
            capacity or reliability.
          </dd>
          <dt pn="section-3.3-2.5">Bulk Historical Reporting:</dt>
          <dd pn="section-3.3-2.6">
            A managing device receives a large volume 
            of historical report data for a managed device. This can occur when 
            a managed device rejoins a network or has temporary access to a
            high-capacity link (or path) between itself and the managing device.
          </dd>
          <dt pn="section-3.3-2.7">Multiple Managers:</dt>
          <dd pn="section-3.3-2.8">
            A managed device tracks multiple managers in 
            the network and communicates with them as a function of time,
            local state, or network topology. This scenario would also apply to challenged 
            networks that interconnect two or more unchallenged networks such 
            that managed and managing devices exist in different networks.
          </dd>
        </dl>
        <t indent="0" pn="section-3.3-3">
          These special cases highlight the need for managed devices to operate
          without presupposing a dedicated connection to a single managing
          device. Managing devices in a challenged 
          network might never expect a reply to a command, and communications from
          managed devices may be delivered much later than the events being reported.
        </t>
      </section>
    </section>
    <section anchor="desired-name-properties" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-desirable-design-properties">Desirable Design Properties</name>
      <t indent="0" pn="section-4-1">
        This section describes those design properties that are desirable when 
        defining a management architecture operating across challenged 
        links in a network. These properties ensure that network management 
        capabilities are retained even as delays and disruptions in the 
        network scale. Ultimately, these properties are the driving design 
        principles for the DTNMA.   
      </t>
      <aside pn="section-4-2">
        <t indent="0" pn="section-4-2.1">
          NOTE: These properties may influence the design, construction, and 
          adaptation of existing management tools for use in challenged
          networks. For example, the properties of the DTN architecture 
          <xref target="RFC4838" format="default" sectionFormat="of" derivedContent="RFC4838"/> resulted in the development of BPv7
          <xref target="RFC9171" format="default" sectionFormat="of" derivedContent="RFC9171"/> and BPSec <xref target="RFC9172" format="default" sectionFormat="of" derivedContent="RFC9172"/>.
          Implementing the DTNMA model may result in the construction of new management data models,
          policy expressions, and/or protocols. 
        </t>
      </aside>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-dynamic-architectures">Dynamic Architectures</name>
        <t indent="0" pn="section-4.1-1"> 
          The DTNMA should be agnostic to the underlying physical topology,
          transport protocols, security solutions, and supporting infrastructure
          of a given network. Due to the likelihood of operating in a frequently
          partitioned environment, the topology of a network may change
          over time. Attempts to stabilize an architecture around individual
          nodes can result in a brittle management framework and the creation
          of congestion points during periods of connectivity.
        </t>
        <t indent="0" pn="section-4.1-2">
          The DTNMA should not prescribe any association between a 
          DM and a DA other than those defined in this document. 
          There should be no logical limitation on the number of DMs 
          that can control a DA, the number of DMs that a DA should report to, 
          or any requirement that a DM and DA relationship imply a pair.
        </t>
        <aside pn="section-4.1-3">
          <t indent="0" pn="section-4.1-3.1">
            NOTE: Practical limitations on the relationships between and 
            amongst DMs and DAs will exist as a function of the capabilities of 
            networked devices. These limitations derive from processing and storage 
            constraints, performance requirements, and other engineering factors. 
            Implementors of managed and managing devices must account for these
            limitations in their device designs.

          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-hierarchically-modeled-info"> Hierarchically Modeled Information</name>
        <t indent="0" pn="section-4.2-1">
          The DTNMA should use data models to define the syntactic and
          semantic contracts for data exchange between a DA and a DM. A given
          model should have the ability to "inherit" the contents of other
          models to form hierarchical data relationships. 
        </t>
        <aside pn="section-4.2-2">
          <t indent="0" pn="section-4.2-2.1">
            NOTE: The term "data model" in this context refers to a schema that
            defines a contract between a DA and a DM regarding how information is
            represented and validated. 
          </t>
        </aside>
        <t indent="0" pn="section-4.2-3"> 
          Many network management solutions use data models to specify the 
          semantic and syntactic representation of data exchanged between 
          managed and managing devices. The DTNMA is not different in 
          this regard; information exchanged between DAs and DMs should 
          conform to one or more predefined, normative data models.
        </t>
        <t indent="0" pn="section-4.2-4">
          A common best practice when defining a data model is to make it cohesive.
          A cohesive model is one that includes information related to a single 
          purpose such as managing a single application or protocol. When
          applying this practice, it is not uncommon to develop a large number
          of small data models that, together, describe the information needed
          to manage a device. 
        </t>
        <t indent="0" pn="section-4.2-5">
          Another best practice for data model development is the use of
          inclusion mechanisms to allow one data model to include information
          from another data model. This ability to include a data model avoids
          repeating information in different data models. When one data
          model includes information from another data model, there is an
          implied model hierarchy.
        </t>
        <t indent="0" pn="section-4.2-6">
          Data models in the DTNMA should allow for the construction of both
          cohesive models and hierarchically related models. These data models 
          should be used to define all sources of information that can 
          be retrieved, configured, or executed in the DTNMA. These actions would include
          supporting DA autonomy functions such as parameterization, 
          filtering, and event-driven behaviors. These models will be used to both 
          implement interoperable autonomy engines on DAs and define 
          interoperable report parsing mechanisms on DMs.
        </t>
        <aside pn="section-4.2-7">
          <t indent="0" pn="section-4.2-7.1">
            NOTE: While data model hierarchies can result in a more concise
            data model, arbitrarily complex nesting schemes can also result in
            very verbose encodings. Where possible, data identification 
            schemes should be constructed that allow for both hierarchical
            data and highly compressible data identification. 
          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-adaptive-push-of-informatio">Adaptive Push of Information</name>
        <t indent="0" pn="section-4.3-1">
          DAs in the DTNMA should determine when to push 
          information to DMs as a function of their local state.
        </t>
        <t indent="0" pn="section-4.3-2"> 
          "Pull" management mechanisms require a managing device to send a query 
          to a managed device and then wait for a response to that specific 
          query. This practice implies some knowledge synchronization between 
          entities (which may be as simple as knowing when a managed device might be powered). However, challenged networks 
          cannot guarantee timely round-trip data exchange. For this reason, 
          pull mechanisms should be avoided in the DTNMA.
        </t>
        <t indent="0" pn="section-4.3-3">
          "Push" mechanisms, in this context, indicate the ability of DAs to 
          leverage local autonomy to determine when and what information
          should be sent to which DMs. The push is considered adaptive 
          because a DA determines what information to push (and when) as
          an adaptation to changes to the DA's internal state. Once pushed, 
          information might still be queued, pending connectivity of the DA 
          to the network.
        </t>
        <t indent="0" pn="section-4.3-4">
            Even in cases where a round-trip exchange can occur, pull
            mechanisms increase the overall amount of traffic in the network 
            and preclude the use of autonomy at managed devices. So, even when
            pull mechanisms are feasible, they should not be considered a 
            pragmatic alternative to push mechanisms.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.4">
        <name slugifiedName="name-efficient-data-encoding">Efficient Data Encoding</name>
        <t indent="0" pn="section-4.4-1"> 
          Messages exchanged between a DA and a DM in the DTNMA should be
          defined in a way that allows for efficient on-the-wire encoding. 
          DTNMA design decisions that result in smaller message sizes 
          should be preferred over those that result in larger message sizes.
        </t>
        <t indent="0" pn="section-4.4-2">
          There is a relationship between message encoding and message 
          processing time at a node. Messages with few or no encodings may
          simplify node processing, whereas more compact encodings may require
          additional activities to generate/parse encoded messages. Generally,
          compressing a message takes processing time at the sender and 
          decompressing a message takes processing time at a receiver. 
          Therefore, there is a design trade-off between minimizing message 
          sizes and minimizing node processing. 
        </t>
        <t indent="0" pn="section-4.4-3">
          There is a significant advantage to smaller DTNMA message sizes 
          in a challenged network. Smaller messages require shorter periods of 
          viable transmission for communication, they incur less 
          retransmission cost, and they consume fewer resources when 
          persistently stored en route in the network. 
        </t>
        <aside pn="section-4.4-4">
          <t indent="0" pn="section-4.4-4.1">
            NOTE: Naive approaches to minimizing message size through
            general-purpose compression algorithms do not produce minimal encodings. 
            Data models can, and should, be designed for compact encoding from
            the beginning. Design strategies for compact encodings involve 
            using structured data, hierarchical data models, and common 
            substructures within data models. These strategies allow for 
            compressibility beyond what would otherwise be achieved by 
            computing large hash values over generalized data structures.

          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.5">
        <name slugifiedName="name-universal-unique-data-ident">Universal, Unique Data Identification</name>
        <t indent="0" pn="section-4.5-1">
          Data elements within the DTNMA should be uniquely identifiable so that 
          they can be individually manipulated. Further, these identifiers 
          should be universal -- the identifier for a data element should be the 
          same, regardless of role, implementation, or network instance.
        </t>
        <t indent="0" pn="section-4.5-2">
          Identification schemes that would be relative to a specific DA or 
          specific system configuration might change over time and should be avoided. Relying on relative identification schemes would require resynchronizing relative state when nodes in a challenged network reconnect after periods of partition. This type of resynchronization should be avoided whenever possible.
        </t>
        <aside pn="section-4.5-3">
          <t indent="0" pn="section-4.5-3.1">
            NOTE: Consider a common management technique for approximating an 
            associative array lookup. If a managed device
            tracks the number of bytes passed by multiple named interfaces, 
            then the number of bytes through a specific named interface
            ("int_foo") would be retrieved in the following way:
          </t>
          <ol indent="adaptive" spacing="normal" start="1" type="1" pn="section-4.5-3.2">
              <li pn="section-4.5-3.2.1" derivedCounter="1.">
                  Query a list of ordered interface names from an agent.
              </li>
            <li pn="section-4.5-3.2.2" derivedCounter="2.">
                  Find the name that matches "int_foo", and infer the agent's index of "int_foo" from the ordered interface list. In
                  this instance, assume that "int_foo" is the fourth interface in the list.
              </li>
            <li pn="section-4.5-3.2.3" derivedCounter="3."> 
                  Query the agent (again) to now return the number of bytes passed through the fourth interface. 
              </li>
          </ol>
          <t indent="0" pn="section-4.5-3.3">
            Ignoring the inefficiency of two round-trip exchanges, this 
            mechanism will fail if an agent implementation changes its index 
            mapping between the first and second queries.
          </t>
          <t indent="0" pn="section-4.5-3.4">
            The desired data being queried, "number of bytes through 'int_foo'",
            should be uniquely and universally identifiable and independent
            of how that data exists in any agent's custom implementation.
          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.6">
        <name slugifiedName="name-runtime-data-definitions">Runtime Data Definitions</name>
        <t indent="0" pn="section-4.6-1">
          The DTNMA allows for the addition of new data elements to a
          data model as part of the runtime operation of the management system.
          These definitions may represent custom data definitions that are
          applicable only for a particular device or network. Custom 
          definitions should also be able to be removed from the system during 
          runtime.
        </t>
        <t indent="0" pn="section-4.6-2">
          The goal of this approach is to dynamically add or remove data elements to the local runtime schemas as needed, such as the definition of new counters, new reports, or new rules. 
        </t>
        <t indent="0" pn="section-4.6-3">
          The custom definition of new data from existing data (such as through
          data fusion, averaging, sampling, or other mechanisms) provides the
          ability to communicate desired information in as compact a form as
          possible.
        </t>
        <aside pn="section-4.6-4">
          <t indent="0" pn="section-4.6-4.1">
             NOTE: A DM could, for example, define a custom data report that
             includes only summary information about a specific operational
             event or as part of specific debugging. DAs could then produce
             this smaller report until it is no longer necessary, at which 
             point the custom report could be removed from the management
             system.
          </t>
        </aside>
        <t indent="0" pn="section-4.6-5">
          Custom data elements should be calculated and used both as 
          parameters for DA autonomy and for more efficient reporting
          to DMs. Defining new data elements allows for DAs to perform
          local data fusion, and defining new reporting templates allows
          for DMs to specify desired formats and generally save on link
          capacity, storage, and processing time.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-4.7">
        <name slugifiedName="name-autonomous-operation">Autonomous Operation</name>
        <t indent="0" pn="section-4.7-1">
            The management of applications by a DA should be achievable using 
            only knowledge local to the DA because DAs might need to operate 
            during times when they are disconnected from a DM. 
        </t>
        <t indent="0" pn="section-4.7-2">
            DA autonomy may be used for simple automation of predefined tasks 
            or to support semi-autonomous behavior in determining when to run 
            tasks and how to configure or parameterize tasks when they are run.
        </t>
        <t indent="0" pn="section-4.7-3">
            Important features provided by the DA are listed below. These 
            features work together to accomplish tasks. As such, there is 
            commonality amongst their definitions and nature of their benefits.
        </t>
        <dl indent="3" newline="false" spacing="normal" pn="section-4.7-4">
          <dt pn="section-4.7-4.1">Standalone Operation:</dt>
          <dd pn="section-4.7-4.2">
              Preconfiguration allows DAs to operate 
              without regular contact with other nodes in the network. Updates 
              for configurations remain difficult in a challenged network, but this approach removes the requirement that a DM be in the loop during regular operations. 
              Preconfiguring stimuli and responses on a DA during periods of
              connectivity allows DAs to self-manage during periods of
              disconnectivity.
            </dd>
          <dt pn="section-4.7-4.3">Deterministic Behavior:</dt>
          <dd pn="section-4.7-4.4">
              Operational systems might need to act 
              in a deterministic way, even in the absence of an operator 
              in the loop. Deterministic behavior allows an out-of-contact DM to 
              predict the state of a DA and to determine how a DA got into 
              a particular state. 
            </dd>
          <dt pn="section-4.7-4.5">Engine-Based Behavior:</dt>
          <dd pn="section-4.7-4.6">
              Operational systems might not be able to
              deploy "mobile code" solutions
              <xref target="RFC4949" format="default" sectionFormat="of" derivedContent="RFC4949"/> due to network bandwidth, memory or processor loading, 
              or security concerns. Engine-based approaches provide configurable 
              behavior without incurring these concerns.
            </dd>
          <dt pn="section-4.7-4.7">Authorization and Accounting:</dt>
          <dd pn="section-4.7-4.8">
              The DTNMA does not 
              require a specific underlying transport protocol, a specific network
              infrastructure, or specific network services. Therefore, mechanisms for
              authorization and accounting need to be present in 
              a standard way at DAs and DMs to provide these functions if the
              underlying network does not. This is particularly true in cases
              where multiple DMs may be active concurrently in the network.
            </dd>
        </dl>
        <t indent="0" pn="section-4.7-5">
           To understand the contributions of these features to a common type of
           behavior, consider the example of a managed device coming online 
           with a set of preinstalled configurations. In this case,
           the device's standalone operation comes from the preconfiguration
           of its local autonomy engine. This engine-based behavior allows
           the system to behave in a deterministic way, and any new configurations
           will need to be authorized before being adopted.
        </t>
        <t indent="0" pn="section-4.7-6">
            Features such as deterministic processing and engine-based 
            behavior are separate from (but do not preclude the use of) other 
            Artificial Intelligence (AI) and Machine Learning (ML) approaches 
            for device management.
        </t>
      </section>
    </section>
    <section anchor="current-remote-mgmt" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-current-remote-management-a">Current Remote Management Approaches</name>
      <t indent="0" pn="section-5-1">
        Several remote management solutions have been developed for both local area networks and wide area networks. Their capabilities range from simple configuration and report generation to complex modeling of device settings, state, and behavior.
        All of these approaches are successful in the domains for which they have been built but are not all equally functional when deployed in a challenged network.
      </t>
      <t indent="0" pn="section-5-2">
        This section describes some of the well-known protocols for remote management and contrasts their purposes with the desirable properties of the DTNMA.
        The purpose of this comparison is to identify parts of existing approaches that can be adopted or adapted for use in challenged networks and where new capabilities should be created specifically for such environments. 
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-snmp-and-smi-models">SNMP and SMI Models</name>
        <t indent="0" pn="section-5.1-1">
An early and widely used example of a remote management protocol is SNMP, which is currently at version 3 <xref target="RFC3410" format="default" sectionFormat="of" derivedContent="RFC3410"/>.
SNMP utilizes a request-response model to get and set data values within an arbitrarily deep object hierarchy.
Objects are used to identify data such as host identifiers, link utilization metrics, error rates, and counters between application software on managing and managed devices <xref target="RFC3411" format="default" sectionFormat="of" derivedContent="RFC3411"/>.
Additionally, SNMP supports a model for unidirectional push messages, called event notifications, based on agent-defined triggering events.  
        </t>
        <t indent="0" pn="section-5.1-2">
SNMP relies on logical sessions with predictable round-trip latency to support its pull mechanism, but a single activity is likely to require many round-trip exchanges.
Complex management can be achieved, but only through careful orchestration of real-time, end-to-end, managing-device-generated query-and-response logic.
        </t>
        <t indent="0" pn="section-5.1-3">
          There is existing work that uses the SNMP data model to support 
          some low-fidelity agent-side processing; this work includes using
"<xref target="RFC2982" format="title" sectionFormat="of" derivedContent="Distributed Management Expression MIB"/>" <xref target="RFC2982" format="default" sectionFormat="of" derivedContent="RFC2982"/> and
"<xref target="RFC3165" format="title" sectionFormat="of" derivedContent="Definitions of Managed Objects for the Delegation of Management Scripts"/>" <xref target="RFC3165" format="default" sectionFormat="of" derivedContent="RFC3165"/>.
          However, agent autonomy is not an SNMP 
          mechanism, so support for a local agent response to an initiating 
          event is limited. In a challenged network where the delay between 
          a managing device receiving an alert and sending a response can be 
          significant, SNMP is insufficient for autonomous event handling.
        </t>
        <section anchor="sec-mgmt-snmp-smi" numbered="true" removeInRFC="false" toc="include" pn="section-5.1.1">
          <name slugifiedName="name-the-smi-modeling-language">The SMI Modeling Language</name>
          <t indent="0" pn="section-5.1.1-1">
SNMP separates the representations for managed data models from messaging, sequencing, and encoding between managers and agents.
Each data model is termed a "Management Information Base" (or "MIB") <xref target="RFC3418" format="default" sectionFormat="of" derivedContent="RFC3418"/> and uses the Structure of Management Information (SMI) modeling language <xref target="RFC2578" format="default" sectionFormat="of" derivedContent="RFC2578"/>.
Additionally, the SMI itself is based on the ASN.1 syntax <xref target="ASN.1" format="default" sectionFormat="of" derivedContent="ASN.1"/>, which is used not just for SMI but for other, unrelated data structure specifications such as the Cryptographic Message Syntax (CMS) <xref target="RFC5652" format="default" sectionFormat="of" derivedContent="RFC5652"/>.
Separating data models from messaging and encoding is a best practice in remote management protocols and is also necessary for the DTNMA.
          </t>
          <t indent="0" pn="section-5.1.1-2">
Each SNMP MIB is composed of managed object definitions, each of which is associated with a hierarchical Object Identifier (OID).
Because of the arbitrarily deep nature of MIB object trees, the size of OIDs is not strictly bounded by the protocol (though it may be bounded by implementations).
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.1.2">
          <name slugifiedName="name-snmp-and-transport">SNMP and Transport</name>
          <t indent="0" pn="section-5.1.2-1">
SNMPv2 <xref target="RFC3416" format="default" sectionFormat="of" derivedContent="RFC3416"/> <xref target="RFC3417" format="default" sectionFormat="of" derivedContent="RFC3417"/> and SNMPv3 <xref target="RFC3414" format="default" sectionFormat="of" derivedContent="RFC3414"/> can operate over a variety of transports, including plaintext UDP/IP <xref target="RFC3417" format="default" sectionFormat="of" derivedContent="RFC3417"/>, SSH/TCP/IP <xref target="RFC5592" format="default" sectionFormat="of" derivedContent="RFC5592"/>, and DTLS/UDP/IP or TLS/TCP/IP <xref target="RFC6353" format="default" sectionFormat="of" derivedContent="RFC6353"/>.
          </t>
          <t indent="0" pn="section-5.1.2-2">
SNMP uses an abstracted security model to provide authentication, integrity, and confidentiality.
There are options for the User-based Security Model (USM) <xref target="RFC3414" format="default" sectionFormat="of" derivedContent="RFC3414"/>, which uses in-message security, and the Transport Security Model (TSM) <xref target="RFC5591" format="default" sectionFormat="of" derivedContent="RFC5591"/>, which relies on the transport to provide security functions and interfaces.
          </t>
        </section>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-xml-infoset-based-protocols">XML-Infoset-Based Protocols and YANG Data Models</name>
        <t indent="0" pn="section-5.2-1">
Several network management protocols, including NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/>, RESTCONF <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>, and the Constrained Application Protocol (CoAP) Management Interface (CORECONF) <xref target="CORE-COMI" format="default" sectionFormat="of" derivedContent="CORE-COMI"/>, share the same XML Information Set <xref target="xml-infoset" format="default" sectionFormat="of" derivedContent="xml-infoset"/> for the information set's hierarchical managed information and XPath expressions <xref target="XPath" format="default" sectionFormat="of" derivedContent="XPath"/> to identify nodes of that information model.
Since they share the same information model and the same data manipulation operations, together they will be referred to as "*CONF" protocols.
Each protocol, however, provides a different encoding of that information set and its related operation-specific data.
        </t>
        <t indent="0" pn="section-5.2-2">
The YANG modeling language as defined in <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950"/> is used to define the data model for these management protocols.
Currently, YANG represents the IETF standard for defining managed information models.
        </t>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2.1">
          <name slugifiedName="name-the-yang-modeling-language">The YANG Modeling Language</name>
          <t indent="0" pn="section-5.2.1-1">
The YANG modeling language defines a syntax and modular semantics for organizing and accessing a device's configuration or operational information.
YANG allows subdividing a full managed configuration into separate namespaces defined by separate YANG modules.
Once a module is developed, it is used (directly or indirectly) on both the client and server to serve as a contract between the two.
A YANG module can be complex, describing a deeply nested and interrelated set of data nodes, actions, and notifications.
          </t>
          <t indent="0" pn="section-5.2.1-2">
Unlike the separation between ASN.1 syntax and module semantics from higher-level SMI data model semantics as discussed in <xref target="sec-mgmt-snmp-smi" format="default" sectionFormat="of" derivedContent="Section 5.1.1"/>, YANG defines both a text syntax and module semantics together with data model semantics.
          </t>
          <t indent="0" pn="section-5.2.1-3">
The YANG modeling language provides flexibility in the organization of model objects to the model developer.
YANG supports a broad range of data types as noted in <xref target="RFC6991" format="default" sectionFormat="of" derivedContent="RFC6991"/>.
YANG also supports the definition of parameterized Remote Procedure Calls (RPCs) and actions to be executed on managed devices as well as the definition of event notifications within the model.
          </t>
          <t indent="0" pn="section-5.2.1-4">
Current *CONF notification logic allows a client to subscribe to the delivery of specific containers or data nodes defined in the model, on either a periodic or
"on-change" basis <xref target="RFC8641" format="default" sectionFormat="of" derivedContent="RFC8641"/>.
These notification events can be filtered according to XPath or subtree filtering <xref target="XPath" format="default" sectionFormat="of" derivedContent="XPath"/> <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> as described in <xref section="2.2" target="RFC8639" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8639#section-2.2" derivedContent="RFC8639"/>.
          </t>
          <t indent="0" pn="section-5.2.1-5">
The use of YANG for data modeling necessarily comes with some side effects, some of which are described here.
          </t>
          <dl indent="3" newline="false" spacing="normal" pn="section-5.2.1-6">
            <dt pn="section-5.2.1-6.1">Text Naming:</dt>
            <dd pn="section-5.2.1-6.2">
              <t indent="0" pn="section-5.2.1-6.2.1">
Data nodes, RPCs, and notifications within a YANG data model are named by a namespace-qualified, text-based path of the module, submodule, container, and any data nodes such as lists, leaf-lists, or leaves, without any explicit hierarchical organization based on data or object type.
              </t>
              <t indent="0" pn="section-5.2.1-6.2.2">
Existing efforts to make compressed names for YANG objects, such as the YANG Schema Item iDentifiers (SIDs) as discussed in <xref section="3.2" target="RFC9254" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc9254#section-3.2" derivedContent="RFC9254"/>, allow a node to be named by a globally unique integer value but are still relatively verbose (up to 8 bytes per item) and still must be translated into text form for things like instance identification (see below).
Additionally, when representing a tree of named instances, the child elements can use differential encoding of SID integer values as "delta" integers.
The mechanisms for assigning SIDs and the lifecycle of those SIDs are discussed in <xref target="RFC9595" format="default" sectionFormat="of" derivedContent="RFC9595"/>.
              </t>
            </dd>
            <dt pn="section-5.2.1-6.3">Text Values and Built-In Types:</dt>
            <dd pn="section-5.2.1-6.4">
              <t indent="0" pn="section-5.2.1-6.4.1">
Because the original use of YANG with NETCONF was to model XML Information Sets, the values and built-in types are necessarily text based.
JSON encoding of YANG data <xref target="RFC7951" format="default" sectionFormat="of" derivedContent="RFC7951"/> allows for optimized representations of many built-in types; similarly, Concise Binary Object Representation (CBOR) encoding <xref target="RFC9254" format="default" sectionFormat="of" derivedContent="RFC9254"/> allows for different optimized representations.
              </t>
              <t indent="0" pn="section-5.2.1-6.4.2">
In particular, the YANG built-in types support a fixed range of decimal fractions (<xref section="9.3" target="RFC7950" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7950#section-9.3" derivedContent="RFC7950"/>) but purposefully do not support floating-point numbers.
There are alternatives, such as the type <tt>bandwidth-ieee-float32</tt> <xref target="RFC8294" format="default" sectionFormat="of" derivedContent="RFC8294"/> or using the "binary" type with one of the IEEE-754 encodings.
              </t>
            </dd>
            <dt pn="section-5.2.1-6.5">Deep Hierarchy:</dt>
            <dd pn="section-5.2.1-6.6">
YANG allows for, and current YANG modules take advantage of, the ability to deeply nest a model hierarchy to represent complex combinations and compositions of data nodes.
When a model uses a deep hierarchy of nodes, this necessarily means that the qualified paths to name those nodes and instances are longer than they would be in a flat namespace.
            </dd>
            <dt pn="section-5.2.1-6.7">Instance Identification:</dt>
            <dd pn="section-5.2.1-6.8">
The node instances in a YANG module necessarily use XPath expressions for identification.
Some identification is constrained to be strictly within the YANG domain, such as "must", "when", "augment", or "deviation" statements.
Other identification needs to be processed by a managed device -- for example, via
the "instance-identifier" built-in type.
This means that any implementation of a managed device must include XPath processing and related information model handling per <xref section="6.4" target="RFC7950" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc7950#section-6.4" derivedContent="RFC7950"/> and its referenced documents.
            </dd>
            <dt pn="section-5.2.1-6.9">Protocol Coupling:</dt>
            <dd pn="section-5.2.1-6.10">
              <t indent="0" pn="section-5.2.1-6.10.1">
A significant amount of existing YANG tooling or modeling presumes the use of YANG data within a management protocol with specific operations available.
For example, the access control model defined in <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/> relies on those operations specific to the *CONF protocols for proper behavior.
              </t>
              <t indent="0" pn="section-5.2.1-6.10.2">
The emergence of multiple NETCONF-derived protocols may make these presumptions less problematic in the future.
Work to more consistently identify different types of YANG modules and their use has been undertaken to disambiguate how YANG modules should be treated <xref target="RFC8199" format="default" sectionFormat="of" derivedContent="RFC8199"/>.
              </t>
            </dd>
            <dt pn="section-5.2.1-6.11">Manager-Side Control:</dt>
            <dd pn="section-5.2.1-6.12">
YANG RPCs and actions execute on a managed device and generate an expected, structured response.
RPC execution is strictly limited to those issued by the manager.
Commands are executed immediately and sequentially as they are received by the managed device, and there is no method to autonomously execute RPCs triggered by specific events or conditions.
            </dd>
          </dl>
          <t indent="0" pn="section-5.2.1-7">
The YANG modeling language continues to evolve as new features are needed by adopting management protocols.
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2.2">
          <name slugifiedName="name-netconf-protocol-and-transp">NETCONF Protocol and Transport</name>
          <t indent="0" pn="section-5.2.2-1">
NETCONF is a stateful, XML-encoding-based protocol that provides a syntax to retrieve, edit, copy, or delete any data nodes or exposed functionality on a server.
It requires that underlying transport protocols support long-lived, reliable, low-latency, sequenced data delivery sessions.
A bidirectional NETCONF session needs to be established before any data transfer (or notification) can occur.
          </t>
          <t indent="0" pn="section-5.2.2-2">
The XML exchanged within NETCONF messages is structured according to YANG modules supported by the NETCONF agent, and the data nodes reside within one of possibly many datastores in accordance with the Network Management Datastore Architecture (NMDA) <xref target="RFC8342" format="default" sectionFormat="of" derivedContent="RFC8342"/>.
          </t>
          <t indent="0" pn="section-5.2.2-3">
NETCONF transports are required to provide authentication, data integrity, confidentiality, and replay protection.
Currently, NETCONF can operate over SSH/TCP/IP <xref target="RFC6242" format="default" sectionFormat="of" derivedContent="RFC6242"/> or TLS/TCP/IP <xref target="RFC7589" format="default" sectionFormat="of" derivedContent="RFC7589"/>.
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2.3">
          <name slugifiedName="name-restconf-protocol-and-trans">RESTCONF Protocol and Transport</name>
          <t indent="0" pn="section-5.2.3-1">
RESTCONF is a stateless, JSON-encoding-based protocol that provides the same operations as NETCONF, using the same YANG modules for structure and the same NMDA datastores, but using RESTful exchanges over HTTP.
It uses HTTP methods to express its allowed operations: GET, POST, PUT, PATCH, or DELETE data nodes within a datastore.
          </t>
          <t indent="0" pn="section-5.2.3-2">
Although RESTCONF is a logically stateless protocol, it does rely on state within its transport protocol to achieve behaviors such as authentication and security sessions.
Because RESTCONF uses the same data node semantics as NETCONF, a typical activity can involve the use of several sequential round trips of exchanges to first discover managed device state and then act upon it.
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.2.4">
          <name slugifiedName="name-coreconf-protocol-and-trans">CORECONF Protocol and Transport</name>
          <t indent="0" pn="section-5.2.4-1">
              CORECONF is an emerging stateless protocol built atop CoAP <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/> that
              defines a messaging construct developed to operate specifically 
              on constrained devices and networks by limiting message size and 
              fragmentation. CoAP also implements a request-response system and
              methods for GET, POST, PUT, and DELETE. 
          </t>
        </section>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-grpc-network-management-int">gRPC Network Management Interface (gNMI)</name>
        <t indent="0" pn="section-5.3-1">
Another emerging, but not IETF-affiliated, management protocol is the gRPC Network Management Interface (gNMI) <xref target="gNMI" format="default" sectionFormat="of" derivedContent="gNMI"/>, which is based on gRPC messaging and uses Google protobuf data modeling.
        </t>
        <t indent="0" pn="section-5.3-2">
The same limitations as those listed above for RESTCONF apply to gNMI because of its reliance on synchronous HTTP exchanges and TLS for normal operations, as well as the likely deep nesting of data schemas.  gNMI is capable of transporting JSON-encoded YANG-modeled data, but how to compose such data is not yet fully standardized.
        </t>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.3.1">
          <name slugifiedName="name-the-protobuf-modeling-langu">The Protobuf Modeling Language</name>
          <t indent="0" pn="section-5.3.1-1">
The data managed and exchanged via gNMI is encoded and modeled using Google protobuf, an encoding and modeling syntax not affiliated with the IETF (although an attempt has been made and abandoned <xref target="PROTOCOL-BUFFERS" format="default" sectionFormat="of" derivedContent="PROTOCOL-BUFFERS"/>).
          </t>
          <t indent="0" pn="section-5.3.1-2">
Because the protobuf modeling syntax is a relatively low-level syntax (about the same as ASN.1 or CBOR), there are some efforts as part of the OpenConfig work <xref target="gNMI" format="default" sectionFormat="of" derivedContent="gNMI"/> to translate YANG modules into protobuf schemas (similar to translation to XML or JSON schemas for NETCONF and RESTCONF, respectively), but there is no required interoperability between management via gRPC or any of the *CONF protocols.
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-5.3.2">
          <name slugifiedName="name-grpc-protocol-and-transport">gRPC Protocol and Transport</name>
          <t indent="0" pn="section-5.3.2-1">
The message encoding and exchange for gNMI, as the name implies, is the gRPC protocol <xref target="gRPC" format="default" sectionFormat="of" derivedContent="gRPC"/>.  gRPC exclusively uses HTTP/2 <xref target="RFC9113" format="default" sectionFormat="of" derivedContent="RFC9113"/> for transport and relies on some aspects specific to HTTP/2 for its operations (such as HTTP trailer fields).
While not mandated by gRPC, when used to transport gNMI data, TLS is required for transport security.
          </t>
        </section>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.4">
        <name slugifiedName="name-intelligent-platform-manage">Intelligent Platform Management Interface (IPMI)</name>
        <t indent="0" pn="section-5.4-1">
A lower-level remote management protocol, intended to be used to manage hardware devices and network appliances below the operating system (OS), is the Intelligent Platform Management Interface (IPMI), standardized in <xref target="IPMI" format="default" sectionFormat="of" derivedContent="IPMI"/>.
The IPMI is focused on health monitoring, event logging, firmware management, and Serial over LAN (SOL) remote console access in a "pre-OS or OS-absent" host environment.
The IPMI operates over a companion Remote Management Control Protocol (RMCP) for messaging, which itself can use UDP for transport.
        </t>
        <t indent="0" pn="section-5.4-2">
Because the IPMI and RCMP are tailored to low-level and well-connected devices within a data center, with typical workflows requiring many messaging round trips or low-latency interactive sessions, they are not suitable for operation over a challenged network.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.5">
        <name slugifiedName="name-autonomic-networking">Autonomic Networking</name>
        <t indent="0" pn="section-5.5-1">
          The future of network operations requires more autonomous behavior,
          including self-configuration, self-management, self-healing, and 
          self-optimization. One approach to support this is termed "Autonomic 
          Networking" <xref target="RFC7575" format="default" sectionFormat="of" derivedContent="RFC7575"/>.
        </t>
        <t indent="0" pn="section-5.5-2">
          There is a large and growing set of work within the IETF 
          focused on developing an Autonomic Networking Integrated Model and 
          Approach (ANIMA). The ANIMA work has developed a comprehensive 
          reference model for distributing autonomic functions across multiple 
          nodes in an Autonomic Networking infrastructure <xref target="RFC8993" format="default" sectionFormat="of" derivedContent="RFC8993"/>. 
        </t>
        <t indent="0" pn="section-5.5-3">
          This work, focused on learning the behavior of distributed systems to
          predict future events, is an emerging network management
          capability. This includes the development of signaling protocols
          such as the GeneRic Autonomic Signaling Protocol (GRASP) <xref target="RFC8990" format="default" sectionFormat="of" derivedContent="RFC8990"/> and the Autonomic Control Plane (ACP)
          <xref target="RFC8368" format="default" sectionFormat="of" derivedContent="RFC8368"/>.
        </t>
        <t indent="0" pn="section-5.5-4">
          Both autonomic and challenged networks require similar degrees of
          autonomy. However, challenged networks cannot provide the complex 
          coordination between nodes and distributed supporting infrastructure 
          necessary for the frequent data exchanges for negotiation, learning, 
          and bootstrapping associated with the above capabilities.          
        </t>
        <t indent="0" pn="section-5.5-5">
          There is some emerging work in ANIMA as to how disconnected
          devices might join and leave the ACP over time.
          However, this work is addressing a different problem
          than that encountered by challenged networks.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-5.6">
        <name slugifiedName="name-deep-space-autonomy">Deep Space Autonomy</name>
        <t indent="0" pn="section-5.6-1">
Outside of the terrestrial networking community, there are existing and established remote management systems used for deep space mission operations.
Two examples of such systems are the New Horizons mission to Pluto <xref target="NEW-HORIZONS" format="default" sectionFormat="of" derivedContent="NEW-HORIZONS"/> and the Double Asteroid Redirection Test (DART) mission to the asteroid Dimorphos <xref target="DART" format="default" sectionFormat="of" derivedContent="DART"/>.
        </t>
        <t indent="0" pn="section-5.6-2">
The DTNMA has some heritage in the concepts of deep space autonomy, but each of those mission instantiations uses mission-specific data encoding, messaging, and transport as well as mission-specific (or heavily mission-tailored) modeling concepts and languages.
Part of the goal of the DTNMA is to take the proven concepts from these missions and standardize a messaging syntax as well as a modular data modeling method.
        </t>
      </section>
    </section>
    <section anchor="motivation-for-new-features" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-motivation-for-new-features">Motivation for New Features</name>
      <t indent="0" pn="section-6-1">
        Management mechanisms that provide the complete set of DTNMA desirable 
        properties do not currently exist. This is not surprising, since 
        autonomous management in the context of a challenged networking 
        environment is a new and emerging use case. 
      </t>
      <t indent="0" pn="section-6-2">
        In particular, a management architecture is needed that integrates 
        the following motivating features. 
      </t>
      <dl indent="3" newline="false" spacing="normal" pn="section-6-3">
        <dt pn="section-6-3.1">Open-Loop Control:</dt>
        <dd pn="section-6-3.2">
          Freedom from a request-response architecture, 
          API, or other presumption of timely round-trip communications. This 
          is particularly important when managing networks that are not built
          over an HTTP or TCP/TLS infrastructure. 
        </dd>
        <dt pn="section-6-3.3">Standard Autonomy Model:</dt>
        <dd pn="section-6-3.4">
          An autonomy model that allows for standard
          expressions of policy to guarantee deterministic behavior across 
          devices and vendor implementations.
        </dd>
        <dt pn="section-6-3.5">Compressible Model Structure:</dt>
        <dd pn="section-6-3.6">
          A data model that allows for very 
          compact encodings by defining and exploiting common structures for 
          data schemas. 
        </dd>
      </dl>
      <t indent="0" pn="section-6-4">
        Combining these new features with existing mechanisms for message data
        exchange (such as BP), data representations (such as CBOR), and data 
        modeling languages (such as YANG) will form a pragmatic approach to 
        defining challenged network management. 
      </t>
    </section>
    <section anchor="reference-model" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-reference-model">Reference Model</name>
      <t indent="0" pn="section-7-1">
          This section describes a reference model for analyzing
          network management concepts for challenged networks (generally) and 
          those conforming to the DTN architecture (in particular). The goal 
          of this section is to describe how DTNMA services provide DTNMA 
          desirable properties.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-important-concepts">Important Concepts</name>
        <t indent="0" pn="section-7.1-1">
          Like other network management architectures, the DTNMA draws
          a logical distinction between a managed device and a managing
          device. Managed devices use a DA to manage resident applications. 
          Managing devices use a DM to both monitor and control DAs. 
        </t>
        <t indent="0" pn="section-7.1-2">
            The terms "managing" and "managed" represent logical
            characteristics of a device and are not, themselves, mutually
            exclusive. For example, a managed device might, itself, also manage
            some other device in the network. Therefore, a device may support 
            either or both of these characteristics.
        </t>
        <t indent="0" pn="section-7.1-3">
          The DTNMA differs from some other management architectures in 
          three significant ways, all related to the need for a device to 
          self-manage when disconnected from a managing device.
        </t>
        <dl indent="3" newline="false" spacing="normal" pn="section-7.1-4">
          <dt pn="section-7.1-4.1">Pre-Shared Definitions:</dt>
          <dd pn="section-7.1-4.2">
            Managing and managed devices should operate
            using pre-shared data definitions and models. This implies that
            static definitions should be standardized whenever possible and
            that managing and managed devices may need to negotiate definitions
            during periods of connectivity.
          </dd>
          <dt pn="section-7.1-4.3">Agent Self-Management:</dt>
          <dd pn="section-7.1-4.4">
            A managed device may find itself 
            disconnected from its managing device. In many challenged networking 
            scenarios, a managed device may spend the majority of its time without 
            a regular connection to a managing device. In these cases, DAs manage 
            themselves by applying pre-shared policies received from managing 
            devices.
          </dd>
          <dt pn="section-7.1-4.5">Command-Based Interface:</dt>
          <dd pn="section-7.1-4.6">
            Managing devices communicate with managed
            devices through a command-based interface.  Instead of exchanging
            variables, objects, or documents, a managing device issues commands
            to be run by a managed device. These commands may create or update
            variables, change datastores, or impact the managed device in ways
            similar to other network management approaches. The use of commands
            is, in part, driven by the need for DAs to receive updates from 
            both remote management devices and local autonomy. The use of Controls for the implementation of commands is discussed in more detail in <xref target="ctrl_exec" format="default" sectionFormat="of" derivedContent="Section 9.5"/>.
          </dd>
        </dl>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-7.2">
        <name slugifiedName="name-model-overview">Model Overview</name>
        <t indent="0" pn="section-7.2-1">
        A DTNMA reference model is provided in <xref target="dtnma_ref_model" format="default" sectionFormat="of" derivedContent="Figure 2"/> 
        below. In this reference model, applications and services on a managing 
        device communicate with a DM that uses pre-shared definitions to create 
        a set of policy directives that can be sent to a managed device's DA via
        a command-based interface. The DA provides local monitoring and control 
        (commanding) of the applications and services resident on the managed 
        device. The DA also performs local data fusion as necessary to synthesize data products (such as 
        reports) that can be sent back to the DM when appropriate. 
        </t>
        <figure anchor="dtnma_ref_model" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="name-dtnma-reference-model">DTNMA Reference Model</name>
          <artwork align="center" name="" type="" alt="" pn="section-7.2-2.1">
       Managed Device                            Managing Device 
+----------------------------+           +-----------------------------+
| +------------------------+ |           | +-------------------------+ |
| |Applications &amp; Services | |           | | Applications &amp; Services | |
| +----------^-------------+ |           | +-----------^-------------+ |
|            |               |           |             |               |
| +----------v-------------+ |           | +-----------v-------------+ |
| | DTNMA  +-------------+ | |           | | +-----------+   DTNMA   | |
| | AGENT  | Monitor and | | |Commanding | | |  Policy   |  MANAGER  | |
| |        |   Control   | | |&lt;==========| | | Encoding  |           | |
| | +------+-------------+ | |           | | +-----------+-------+   | |
| | |Admin | Data Fusion | | |==========&gt;| | | Reporting | Admin |   | |
| | +------+-------------+ | | Reporting | | +-----------+-------+   | |
| +------------------------+ |           | +-------------------------+ |
+----------------------------+           +-----------------------------+
           ^                                             ^
           |            Pre-Shared Definitions           |
           |        +---------------------------+        |
           +--------| - Autonomy Model          |--------+
                    | - Application Data Models |
                    | - Runtime Datastores      |
                    +---------------------------+
</artwork>
        </figure>
        <t indent="0" pn="section-7.2-3">
        This model preserves the familiar concept of "managers" resident on
        managing devices and "agents" resident on managed devices. However,
        the DTNMA model is unique in how the DM and DA operate. The DM is
        used to preconfigure DAs in the network with management policies.
        It is expected that the DAs, themselves, perform monitoring and
        control functions on their own. In this way, a properly configured
        DA may operate without a reliable connection back to a DM. 
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3">
        <name slugifiedName="name-functional-elements">Functional Elements</name>
        <t indent="0" pn="section-7.3-1">
          The reference model illustrated in <xref target="dtnma_ref_model" format="default" sectionFormat="of" derivedContent="Figure 2"/>
          implies the existence of certain logical components whose roles and 
          responsibilities are discussed in this section.
        </t>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3.1">
          <name slugifiedName="name-managed-applications-and-se">Managed Applications and Services</name>
          <t indent="0" pn="section-7.3.1-1">
            By definition, managed applications and services reside on a 
            managed device. These software entities can be controlled through
            some interface by the DA, and their state can be sampled as part of
            periodic monitoring. It is presumed that the DA on the managed
            device has the proper data model, control interface, and 
            permissions to alter the configuration and behavior of these
            software applications. 
          </t>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3.2">
          <name slugifiedName="name-dtnma-agent-da">DTNMA Agent (DA)</name>
          <t indent="0" pn="section-7.3.2-1">
            A DA resides on a managed device. As is the case 
            with other network management approaches, this agent is responsible
            for the monitoring and control of the applications local to that
            device. Unlike other network management approaches, the agent 
            accomplishes this task without a regular connection to a DM.
          </t>
          <t indent="0" pn="section-7.3.2-2">
            The DA performs three major functions on a managed 
            device: the monitoring and control of local applications, 
            production of data analytics, and the administrative 
            control of the agent itself. 
          </t>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.2.1">
            <name slugifiedName="name-monitoring-and-control">Monitoring and Control</name>
            <t indent="0" pn="section-7.3.2.1-1">
              DAs monitor the status of applications running on their
              managed device and selectively control those applications as a
              function of that monitoring. The following components are used to 
              perform monitoring and control on an agent. 
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.2.1-2">
              <dt pn="section-7.3.2.1-2.1">Rule Database:</dt>
              <dd pn="section-7.3.2.1-2.2">
                Each DA maintains a database of policy expressions that form
                rules regarding the behavior of the managed device. Within this database,
                each rule regarding behavior is a tuple of a stimulus and a response.
                Within the DTNMA, these rules are the embodiment of
                policy expressions received from DMs and evaluated at
                regular intervals by the autonomy engine. The rule database is
                the collection of active rules known to the DA.
              </dd>
              <dt pn="section-7.3.2.1-2.3">Autonomy Engine:</dt>
              <dd pn="section-7.3.2.1-2.4">              
                The DA autonomy engine monitors the state of the managed device,
                looking for predefined stimuli and, when such stimuli are encountered, issuing a
                predefined response. To the extent that this function is driven
                by the rule database, this engine acts as a policy execution
                engine. This engine may also be directly configured by
                managers during periods of connectivity for actions separate
                from those in the rule database (such as enabling or disabling
                sets of rules). Once configured, the engine may function 
                without other access to any managing device. This engine may 
                also reconfigure itself as a function of policy.
              </dd>
              <dt pn="section-7.3.2.1-2.5">Application Control Interfaces:</dt>
              <dd pn="section-7.3.2.1-2.6">
                DAs support control interfaces for all
                managed applications.  Control interfaces are used to alter
                the configuration and behavior of an application. These 
                interfaces may be custom for each application or as provided 
                through a common framework, protocol, or OS.
              </dd>
            </dl>
          </section>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.2.2">
            <name slugifiedName="name-data-fusion">Data Fusion</name>
            <t indent="0" pn="section-7.3.2.2-1">
              DAs generate new data elements as a function of the
              current state of the managed device and its applications. These
              new data products may take the form of individual data values
              or of new collections of data used for reporting. The logical 
              components responsible for these behaviors are as follows.
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.2.2-2">
              <dt pn="section-7.3.2.2-2.1">Application Data Interfaces:</dt>
              <dd pn="section-7.3.2.2-2.2">
                DAs support mechanisms by which important state is 
                retrieved from various applications resident on the managed
                device. These data interfaces may be custom for each
                application or as provided through a common framework,
                protocol, or OS.
              </dd>
              <dt pn="section-7.3.2.2-2.3">Data Value Generators:</dt>
              <dd pn="section-7.3.2.2-2.4">
                DAs may support the generation of new data values as a 
                function of other values collected from the managed device.
                These data generators may be configured with descriptions of 
                data values, and the data values they generate may be included
                in the overall monitoring and reporting associated with the
                managed device. 
              </dd>
              <dt pn="section-7.3.2.2-2.5">Report Generators:</dt>
              <dd pn="section-7.3.2.2-2.6">
                DAs may, as appropriate, generate collections of data values
                and provide them to whatever local mechanism takes 
                responsibility for their eventual transmission (or expiration 
                and removal).  Reports can be generated as a matter of policy 
                or in response to the handling of critical events (such as 
                errors) or other logging needs. The generation of a report is 
                independent of whether there exists any connectivity between a 
                DA and a DM. 
              </dd>
            </dl>
          </section>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.2.3">
            <name slugifiedName="name-administration">Administration</name>
            <t indent="0" pn="section-7.3.2.3-1">
              DAs perform a variety of administrative services in support of 
              their configuration, such as the following.
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.2.3-2">
              <dt pn="section-7.3.2.3-2.1">Manager Mapping:</dt>
              <dd pn="section-7.3.2.3-2.2">
                <t indent="0" pn="section-7.3.2.3-2.2.1">
                  The DTNMA allows for a many-to-many relationship amongst DAs
                  and DMs. A single DM may configure multiple
                  DAs, and a single DA may be configured by multiple
                  DMs. Multiple managers may exist in a network for at least
                  the following two reasons. First, different managers may exist to control
                  different applications on a device. Second, multiple managers
                  increase the likelihood of an agent encountering a manager when
                  operating in a sparse or challenged environment.
                </t>
                <t indent="0" pn="section-7.3.2.3-2.2.2">
 While multiple managers are needed for proper operation in
 a dynamically partitioned network, conflicting information from
 different managers can result.
                  Implementations of the DTNMA should consider conflict resolution
                  mechanisms. Such mechanisms might include analyzing managed content, 
                  time, agent location, or other relevant information to select
                  one manager input over other manager inputs.
                </t>
              </dd>
              <dt pn="section-7.3.2.3-2.3">Data Verifiers:</dt>
              <dd pn="section-7.3.2.3-2.4">
                DAs might handle large amounts of data produced by various
                sources, to include data from local managed applications, 
                remote managers, and self-calculated values. DAs should 
                ensure, when possible, that externally generated data values
                have the proper syntax and semantic constraints (e.g., data type and ranges) and any required authorization. 
              </dd>
              <dt pn="section-7.3.2.3-2.5">Access Controllers:</dt>
              <dd pn="section-7.3.2.3-2.6">
                DAs support authorized access to the management of 
                individual applications, to include the administrative 
                management of the agent itself. This means that a manager may
                only set policy on the agent pursuant to verifying that the
                manager is authorized to do so.
              </dd>
            </dl>
          </section>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3.3">
          <name slugifiedName="name-managing-applications-and-s">Managing Applications and Services</name>
          <t indent="0" pn="section-7.3.3-1">
               Managing applications and services reside on a managing device and 
               serve as both the source of DA policy statements and the target 
               of DA reporting. They may operate with or without an operator in the 
               loop. 
          </t>
          <t indent="0" pn="section-7.3.3-2">
               Unlike management applications in unchallenged networks, these
               applications cannot exert closed-loop control over any managed
               device application. Instead, they exercise open-loop control by 
               producing policies that can be configured and enforced on 
               managed devices by DAs.
          </t>
          <aside pn="section-7.3.3-3">
            <t indent="0" pn="section-7.3.3-3.1">
                NOTE: Closed-loop control in this context refers to the 
                practice of waiting for a response from a managed device prior 
                to issuing new commands to that device. These "loops" may be 
                closed quickly (in milliseconds) or over much longer periods
                (hours, days, years). The alternative to closed-loop control is 
                open-loop control, where the issuance of new commands is not 
                dependent on receiving responses to previous commands. 
                Additionally, there might not be a one-to-one mapping between commands
                and responses. A DA may, for example, produce a single response
                that represents the end state of applying multiple commands. 
            </t>
          </aside>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3.4">
          <name slugifiedName="name-dtnma-manager-dm">DTNMA Manager (DM)</name>
          <t indent="0" pn="section-7.3.4-1">
              A DM resides on a managing device. This manager
              provides an interface between various managing applications and 
              services and the DAs that enforce their policies. In
              providing this interface, DMs translate between whatever
              innate interface exists to various managing applications and the
              autonomy models used to encode management policy. 
          </t>
          <t indent="0" pn="section-7.3.4-2">
              The DM performs three major functions on a managing
              device: policy encoding, reporting, and administration.
          </t>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.4.1">
            <name slugifiedName="name-policy-encoding">Policy Encoding</name>
            <t indent="0" pn="section-7.3.4.1-1">
                DMs translate policy directives from managing
                applications and services into standardized policy expressions
                that can be recognized by DAs. The following logical
                components are used to perform this policy encoding.
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.4.1-2">
              <dt pn="section-7.3.4.1-2.1">Application Control Interfaces:</dt>
              <dd pn="section-7.3.4.1-2.2">
                  DMs support control interfaces for managing
                  applications. These control interfaces are used to receive
                  desired policy statements from applications. These interfaces
                  may be custom for each application or as provided through 
                  a common framework, protocol, or OS.
                </dd>
              <dt pn="section-7.3.4.1-2.3">Policy Encoders:</dt>
              <dd pn="section-7.3.4.1-2.4">
                  DAs implement a standardized autonomy model 
                  comprising standardized data elements. This allows
                  the open-loop control structures provided by managing 
                  applications to be represented in a common language. Policy 
                  encoders perform this encoding function.
                </dd>
              <dt pn="section-7.3.4.1-2.5">Policy Aggregators:</dt>
              <dd pn="section-7.3.4.1-2.6"> 
                  DMs collect multiple encoded policies into messages that can be 
                  sent to DAs over the network. This implies the proper addressing 
                  of agents and the creation of messages that support 
                  store-and-forward operations. It is recommended that control 
                  messages be packaged using BP bundles when there may be 
                  intermittent connectivity between DMs and DAs.
                </dd>
            </dl>
          </section>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.4.2">
            <name slugifiedName="name-reporting">Reporting</name>
            <t indent="0" pn="section-7.3.4.2-1">
                DMs receive reports on the status of managed devices
                during periods of connectivity with the DAs on those
                devices. The following logical components are needed to 
                implement reporting capabilities on a DM.
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.4.2-2">
              <dt pn="section-7.3.4.2-2.1">Report Collectors:</dt>
              <dd pn="section-7.3.4.2-2.2">
                  DMs receive reports from DAs in an asynchronous manner. This 
                  means that reports may be received out of chronological order 
                  and in ways that are difficult or impossible to associate with 
                  a specific policy from a managing application. DMs collect 
                  these reports and extract their data in support of subsequent 
                  data analytics.
                </dd>
              <dt pn="section-7.3.4.2-2.3">Data Analyzers:</dt>
              <dd pn="section-7.3.4.2-2.4"> 
                  DMs review sets of data reports from DAs with the purpose of 
                  extracting relevant data to communicate with managing 
                  applications. This may include simple data extraction or may 
                  include more complex processing such as data conversion, data 
                  fusion, and appropriate data analytics.
                </dd>
              <dt pn="section-7.3.4.2-2.5">Application Data Interfaces:</dt>
              <dd pn="section-7.3.4.2-2.6">
                  DMs support mechanisms by which data retrieved
                  from DAs may be provided back to managing devices. These 
                  interfaces may be custom for each application or as
                  provided through a common framework, protocol, or OS.
                </dd>
            </dl>
          </section>
          <section numbered="true" removeInRFC="false" toc="exclude" pn="section-7.3.4.3">
            <name slugifiedName="name-administration-2">Administration</name>
            <t indent="0" pn="section-7.3.4.3-1">
                DMs in the DTNMA perform a variety of administrative
                services, such as the following.
            </t>
            <dl newline="true" spacing="normal" indent="3" pn="section-7.3.4.3-2">
              <dt pn="section-7.3.4.3-2.1">Agent Mappings:</dt>
              <dd pn="section-7.3.4.3-2.2">
                  The DTNMA allows DMs to communicate with multiple
                  DAs. However, not every agent in a network is expected
                  to support the same set of application data models or
                  otherwise have the same set of managed applications running.
                  For this reason, DMs determine individual DA
                  capabilities to ensure that only appropriate Controls are
                  sent to a DA.
                </dd>
              <dt pn="section-7.3.4.3-2.3">Data Verifiers:</dt>
              <dd pn="section-7.3.4.3-2.4">
                  DMs handle large amounts of data produced by various 
                  sources, to include data from managing applications and 
                  DAs. DMs should ensure, when possible, that data values
                  received from DAs over a network have the proper 
                  syntax and semantic constraints (e.g., data type and ranges) and any required authorization.
                </dd>
              <dt pn="section-7.3.4.3-2.5">Access Controllers:</dt>
              <dd pn="section-7.3.4.3-2.6">
                  DMs should only send Controls to DAs when the manager
                  is configured with appropriate access to both the agent and
                  the applications being managed. 
                </dd>
            </dl>
          </section>
        </section>
        <section numbered="true" removeInRFC="false" toc="include" pn="section-7.3.5">
          <name slugifiedName="name-pre-shared-definitions">Pre-Shared Definitions</name>
          <t indent="0" pn="section-7.3.5-1">
              A consequence of operating in a challenged environment is the
              potential inability to negotiate information in real time. For 
              this reason, the DTNMA requires that managed and managing devices
              operate using pre-shared definitions rather than relying on data
              definition negotiation. 
          </t>
          <t indent="0" pn="section-7.3.5-2">
              The three types of pre-shared definitions in the DTNMA are the
              DA autonomy model, managed application data models,
              and any runtime data shared by managers and agents.
          </t>
          <dl newline="true" spacing="normal" indent="3" pn="section-7.3.5-3">
            <dt pn="section-7.3.5-3.1">Autonomy Model:</dt>
            <dd pn="section-7.3.5-3.2">
              <t indent="0" pn="section-7.3.5-3.2.1">
                  A DTNMA autonomy model represents the data elements and 
                  associated autonomy structures that define the behavior of 
                  the agent autonomy engine. A standardized autonomy 
                  model allows for individual implementations of DAs and DMs 
                  to interoperate. A standardized model also
                  provides guidance to the design and implementation of both 
                  managed and managing applications.
              </t>
            </dd>
            <dt pn="section-7.3.5-3.3">Application Data Models:</dt>
            <dd pn="section-7.3.5-3.4">
                  As with other network management architectures, the DTNMA 
                  presupposes that managed applications (and services) define
                  their own data models. These data models include the data
                  produced by, and Controls implemented by, the application. 
                  These models are expected to be static for individual 
                  applications and standardized for applications implementing 
                  standard protocols.
               </dd>
            <dt pn="section-7.3.5-3.5">Runtime Datastores:</dt>
            <dd pn="section-7.3.5-3.6">
                  Runtime datastores, by definition, include data that is
                  defined at runtime. As such, the data is not pre-shared prior
                  to the deployment of DMs and DAs. Pre-sharing in this
                  context means that DMs and DAs are able to define and
                  synchronize data elements prior to their operational use in
                  the system. This synchronization happens during periods of
                  connectivity between DMs and DAs. 
               </dd>
          </dl>
        </section>
      </section>
    </section>
    <section anchor="desired-services" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-desired-services">Desired Services</name>
      <t indent="0" pn="section-8-1">   
        This section describes the services provided by DTNMA
        components on both managing and managed devices. Most
        of the services discussed in this section attempt to provide
        continuous operation of a managed device through periods of 
        no connectivity with a managing device.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-8.1">
        <name slugifiedName="name-local-monitoring-and-contro">Local Monitoring and Control</name>
        <t indent="0" pn="section-8.1-1"> 
          DTNMA monitoring is associated with some DA autonomy engine. The 
          term "monitoring" implies regular access to information such that 
          state changes may be acted upon within some response time period.
        </t>
        <t indent="0" pn="section-8.1-2">
          Predicate autonomy on a managed device should collect state 
          associated with the device at regular intervals and evaluate that
          collected state for any changes that require a preventative or 
          corrective action. Similarly, this monitoring may cause the device
          to generate one or more reports destined to a managing device.
        </t>
        <t indent="0" pn="section-8.1-3">
          Like monitoring, DTNMA control results in actions by the
          agent to change the state or behavior of the managed
          device. All control in the DTNMA is local control. In cases where 
          there exists a timely connection to a DM, received Controls 
          are still evaluated and run locally as part of local autonomy. In 
          this case, the autonomy stimulus is the receipt of the Control, and 
          the response is to immediately run the Control. In this way, there 
          is never a dependency on a session or other stateful exchange with 
          any remote entity.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-8.2">
        <name slugifiedName="name-local-data-fusion">Local Data Fusion</name>
        <t indent="0" pn="section-8.2-1"> 
          DTNMA fusion services produce new data products from existing 
          state on the managed device. These fusion products can be anything
          from simple summations of sampled counters to complex calculations 
          of behavior over time. 
        </t>
        <t indent="0" pn="section-8.2-2">
          Fusion is an important service in the DTNMA because fusion 
          products are part of the overall state of a managed device. 
          Complete knowledge of this overall state is important for the 
          management of the device, and the predicates of rules on a DA may 
          refer to fused data.
        </t>
        <t indent="0" pn="section-8.2-3">
          In situ data fusion is an important function, as it allows
          for the construction of intermediate summary data, the reduction
          of stored and transmitted raw data, and possibly fewer predicates in rule
          definitions; this type of data fusion insulates the data source from 
          conclusions drawn from that data. 
        </t>
        <t indent="0" pn="section-8.2-4">
          The DTNMA requires fusion to occur on the managed device itself. If 
          the network is partitioned such that no connection to a managing 
          device is available, then fusion needs to happen locally. Similarly, 
          connections to a managing device might not remain active long enough 
          for round-trip data exchange or may not have the bandwidth to send 
          all sampled data. 
        </t>
        <aside pn="section-8.2-5">
          <t indent="0" pn="section-8.2-5.1">
              NOTE: The DTNMA does not restrict the storage and transmission 
              of raw (pre-fused) data. Such raw data can be useful for 
              debugging managed devices, understanding complex interactions 
              and underlying conditions, and tuning for better performance 
              and/or better outcomes.
          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-8.3">
        <name slugifiedName="name-remote-configuration">Remote Configuration</name>
        <t indent="0" pn="section-8.3-1">
          DTNMA configuration services update the local configuration 
          of a managed device with the intent of impacting the behavior and
          capabilities of that device.
        </t>
        <t indent="0" pn="section-8.3-2">
          The DTNMA configuration service is unique in that the selection of
          managed device configurations occurs as a function of
          the state of the device. This implies that management proxies on
          the device store multiple configuration functions that can be 
          applied as needed without consultation from a managing device.
        </t>
        <t indent="0" pn="section-8.3-3">
            This approach differs from other management concepts of selecting 
            from multiple datastores. DTNMA configuration functions
            can target individual data elements and can calculate new values
            from local device state.
        </t>
        <t indent="0" pn="section-8.3-4">
          When detecting stimuli, the agent autonomy engine supports
          a mechanism for evaluating whether application monitoring data
          or runtime data values are recent enough to indicate a change of
          state. In cases where data has not been updated recently, it may
          be considered stale and therefore not used to reliably indicate that some
          stimulus has occurred. 
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-8.4">
        <name slugifiedName="name-remote-reporting">Remote Reporting</name>
        <t indent="0" pn="section-8.4-1"> 
          DTNMA reporting services collect information known to the managed
          device and prepare it for eventual transmission to one or more
          managing devices. The contents of these reports, and the frequency at
          which they are generated, occur as a function of the state of the 
          managed device, independent of the managing device.
        </t>
        <t indent="0" pn="section-8.4-2">
          Once generated, it is expected that reports might be queued, pending
          a connection back to a managing device. Therefore, reports need to be
          differentiable as a function of the time they were generated.
        </t>
        <aside pn="section-8.4-3">
          <t indent="0" pn="section-8.4-3.1">
            NOTE: When reports are queued pending transmission, the overall 
            storage capacity at the queuing device needs to be considered. 
            There may be cases where queued reports can be considered expired
            because they have been either queued for too long or
            replaced by a newer report. When a report is 
            considered expired, it may be considered for removal and, thus,
            never transmitted. This consideration is expected to be part of
            the implementation of the queuing device and not the responsibility of the reporting function within the DTNMA. 
          </t>
        </aside>
        <t indent="0" pn="section-8.4-4">
          When reports are sent to a managing device over a challenged 
          network, they may arrive out of order due to taking different paths
          through the network or being delayed due to retransmissions. A
          managing device should not infer meaning from the order in which 
          reports are received.
        </t>
        <t indent="0" pn="section-8.4-5"> 
          Reports may or may not be associated with a specific Control. Some
          reports may be annotated with the Control that caused the report to
          be generated. Sometimes, a single report will represent the end
          state of applying multiple Controls. 
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-8.5">
        <name slugifiedName="name-authorization">Authorization</name>
        <t indent="0" pn="section-8.5-1"> 
          Both local and remote services provided by the DTNMA affect the
          behavior of multiple applications on a managed device and may 
          interface with multiple managing devices.
        </t>
        <t indent="0" pn="section-8.5-2">
          Authorization services enforce the potentially complex mapping of
          other DTNMA services amongst managed and managing devices in the
          network. For example, fine-grained access control can determine
          which managing devices receive which reports, and what Controls can
          be used to alter which managed applications. 
        </t>
        <t indent="0" pn="section-8.5-3">
          This is particularly beneficial in networks that deal with either
          multiple administrative entities or overlay networks that cross
          administrative boundaries. Allowlists, blocklists, key-based 
          infrastructures, or other schemes may be used for this purpose.
        </t>
      </section>
    </section>
    <section anchor="autonomy_model" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-logical-autonomy-model">Logical Autonomy Model</name>
      <t indent="0" pn="section-9-1">
          An important characteristic of the DTNMA is the shift in the role
          of a managing device. One way to describe the behavior of the agent 
          autonomy engine is to describe the characteristics of the autonomy 
          model it implements. 
      </t>
      <t indent="0" pn="section-9-2">
          This section describes a logical autonomy model in terms of the
          abstract data elements that would comprise the model. Defining
          abstract data elements allows for an unambiguous discussion of
          the behavior of an autonomy model without mandating a particular
          design, encoding, or transport associated with that model. 
      </t>
      <section anchor="aut_mod_overview" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-overview">Overview</name>
        <t indent="0" pn="section-9.1-1">
            A managing autonomy capability on a potentially disconnected 
            device needs to behave in both an expressive and deterministic way.
            Expressivity
            allows for the model to be configured for a wide range of future
            situations. Determinism allows for the forensic reconstruction of
            device behavior as part of debugging or recovery efforts. It
            also is necessary to ensure predictable behavior.
        </t>
        <aside pn="section-9.1-2">
          <t indent="0" pn="section-9.1-2.1">
              NOTE: The use of predicate logic and a stimulus-response
              system does not conflict with the use of higher-level 
              autonomous functions or the incorporation of Machine Learning (ML). 
              Specifically, the DTNMA deterministic autonomy model can
              coexist with other autonomous functions managing applications
              and network services.
          </t>
          <t indent="0" pn="section-9.1-2.2">
              An example of such coexistence is the use of the DTNMA model
              to ensure that a device stays within safe operating parameters while
              a less deterministic ML model directs other
              behaviors for the device.
          </t>
        </aside>
        <t indent="0" pn="section-9.1-3">
            The DTNMA autonomy model is a rule-based model in which individual 
            rules associate a pre-identified stimulus 
            with a preconfigured response to that stimulus. 
        </t>
        <t indent="0" pn="section-9.1-4">
            Stimuli are identified using one or more predicate logic expressions
            that examine aspects of the state of the managed device. Responses 
            are implemented by running one or more procedures on the managed 
            device.
        </t>
        <t indent="0" pn="section-9.1-5">
            In its simplest form, a stimulus is a single predicate expression
            of a condition that examines some aspect of the state of the 
            managed device. When the condition is met, a predetermined response is
            applied. This behavior can be captured using the construct:
        </t>
        <sourcecode name="" type="pseudocode" markers="false" pn="section-9.1-6">            IF &lt;condition 1&gt; THEN &lt;response 1&gt;
</sourcecode>
        <t indent="0" pn="section-9.1-7">
            In more complex forms, a stimulus may include both a common condition 
            shared by multiple rules and a specific condition for each individual rule.
            If the common condition is not met, the evaluation of the specific 
            condition of each rule sharing the common condition can be skipped. In
            this way, the total number of predicate evaluations can be reduced.
            This behavior can be captured using the construct:
        </t>
        <sourcecode name="" type="pseudocode" markers="false" pn="section-9.1-8">            IF &lt;common condition&gt; THEN
              IF &lt;specific condition 1&gt; THEN &lt;response 1&gt;
              IF &lt;specific condition 2&gt; THEN &lt;response 2&gt;
              IF &lt;specific condition 3&gt; THEN &lt;response 3&gt;
</sourcecode>
        <aside pn="section-9.1-9">
          <t indent="0" pn="section-9.1-9.1">
              NOTE: The DTNMA model remains a stimulus-response system, regardless
              of whether a common condition is part of the stimulus. However,
              it is recommended that implementations incorporate a common
              condition because of the efficiency provided by such a bulk
              evaluation.
          </t>
          <t indent="0" pn="section-9.1-9.2">
              NOTE: One use of a stimulus "common condition" is to associate the
              condition with an onboard event such as the expiring of a timer or 
              the changing of a monitored value. 
          </t>
        </aside>
        <t indent="0" pn="section-9.1-10">
              The DTNMA does not prescribe when to evaluate rule stimuli.
              Implementations may choose to evaluate rule stimuli at periodic
              intervals (such as 1 Hz or 100 Hz). When stimuli include onboard 
              events, implementations may choose to perform an immediate
              evaluation at the time of the event rather than waiting for a
              periodic evaluation.
        </t>
        <t indent="0" pn="section-9.1-11">The flow of data into and out of the agent autonomy engine is
            illustrated in <xref target="dtnma_aut_model" format="default" sectionFormat="of" derivedContent="Figure 3"/>.</t>
        <figure anchor="dtnma_aut_model" align="left" suppress-title="false" pn="figure-3">
          <name slugifiedName="name-dtnma-autonomy-model">DTNMA Autonomy Model</name>
          <artwork align="center" name="" type="" alt="" pn="section-9.1-12.1">
 Managed Applications |           DTNMA Agent          | DTNMA Manager
+---------------------+--------------------------------+--------------+
                      |   +---------+                  |
                      |   |  Local  |                  |   Encoded
                      |   | Rule DB |&lt;-------------------- Policy 
                      |   +---------+                  |   Expressions
                      |        ^                       |
                      |        |                       |
                      |        v                       |
                      |   +----------+    +---------+  |
    Monitoring Data------&gt;|   Agent  |    | Runtime |  | 
                      |   | Autonomy |&lt;--&gt;|  Data-  |&lt;---- Definitions
Application Control&lt;------|  Engine  |    |  store  |  |
                      |   +----------+    +---------+  |
                      |         |                      |
                      |         +-------------------------&gt; Reports
                      |                                |
</artwork>
        </figure>
        <t indent="0" pn="section-9.1-13">
            In the model shown in <xref target="dtnma_aut_model" format="default" sectionFormat="of" derivedContent="Figure 3"/>,
            the autonomy engine stores the combination of stimulus 
            conditions and associated responses as a set of "rules" in a
            rule database. This database is updated through the execution of
            the autonomy engine and as configured from policy statements
            received by DMs.
        </t>
        <t indent="0" pn="section-9.1-14">
            Stimuli are detected by examining the state of applications as
            reported through application monitoring interfaces and through
            any locally derived data. Local data is calculated in accordance
            with definitions also provided by DMs as part of the runtime
            datastore. 
        </t>
        <t indent="0" pn="section-9.1-15">
            Responses to stimuli may include updates to the rule database,
            updates to the runtime datastore, Controls sent to applications,
            and the generation of reports.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-model-characteristics">Model Characteristics</name>
        <t indent="0" pn="section-9.2-1">
            There are several practical challenges to the implementation of a
            distributed rule-based system.  Large numbers of rules may be 
            difficult to understand, deconflict, and debug. Rules whose 
            conditions are given by fused or other dynamic data may require
            data logging and reporting for deterministic offline analysis. Rule differences
            across managed devices may lead to oscillating effects. This section 
            identifies those characteristics of an autonomy model that might 
            help implementations mitigate some of these challenges. 
        </t>
        <t indent="0" pn="section-9.2-2">
            There are a number of ways to represent data values, and many
            data modeling languages exist for this purpose. When 
            considering how to model data in the context of the DTNMA
            autonomy model, there are some modeling features that should be
            present to enable functionality. There are also some modeling
            features that should be prevented to avoid ambiguity.
        </t>
        <t indent="0" pn="section-9.2-3">
            Conventional network management approaches favor flexibility in 
            their data models. The DTNMA stresses deterministic behavior
            that supports forensic analysis of agent activities "after the
            fact". As such, the following statements should be true of all
            data representations relating to DTNMA autonomy. 
        </t>
        <dl indent="3" newline="false" spacing="normal" pn="section-9.2-4">
          <dt pn="section-9.2-4.1">Strong Typing:</dt>
          <dd pn="section-9.2-4.2">
              The predicates and expressions that comprise
              the autonomy services in the DTNMA should require strict data
              typing. This avoids errors associated with implicit data
              conversions and helps detect misconfigurations. 
            </dd>
          <dt pn="section-9.2-4.3">Acyclic Dependency:</dt>
          <dd pn="section-9.2-4.4">
              Many dependencies exist in an autonomy model, 
              particularly when combining individual expressions or
              results to create complex behaviors. Implementations that
              conform to the DTNMA need to prevent circular dependencies. 
            </dd>
          <dt pn="section-9.2-4.5">Fresh Data:</dt>
          <dd pn="section-9.2-4.6">
              Autonomy models operating on data values 
              presume that their data inputs represent the actionable state
              of the managed device. If a data value has failed to be 
              refreshed within a time period, autonomy might incorrectly
              infer an operational state. Regardless of whether a data
              value has changed, DTNMA implementations should provide some
              indicator of whether the data value is "fresh", i.e., meaning that
              it still represents the current state of the device.
            </dd>
          <dt pn="section-9.2-4.7">Pervasive Parameterization:</dt>
          <dd pn="section-9.2-4.8">
              Where possible, autonomy
              model objects should support parameterization to allow for
              flexibility in the specification. Parameterization allows for
              the definition of fewer unique model objects and also can
              support the substitution of local device state when 
              exercising device control or data reporting.
            </dd>
          <dt pn="section-9.2-4.9">Configurable Cardinality:</dt>
          <dd pn="section-9.2-4.10">
              The number of data values that can
              be supported in a given implementation is finite. For devices
              operating in challenged environments, the number of supported 
              objects may be far fewer than the number of objects that can be supported by
              devices in well-resourced environments. DTNMA implementations
              should define limits to the number of supported objects that
              can be active in a system at one time, as a function of the
              resources available to the implementation.
            </dd>
          <dt pn="section-9.2-4.11">Control-Based Updates:</dt>
          <dd pn="section-9.2-4.12">
              The agent autonomy engine changes the
              state of the managed device by running Controls on the device.
              This is different from approaches where the behavior of
              a managed device is influenced by updating configuration
              values, such as in a table or datastore. Altering behavior via
              one or more Controls allows checking all preconditions before
              making changes as well as providing more granularity in the
              way in which the device is updated. Where necessary, Controls
              can be defined to perform bulk updates of configuration data
              so as not to lose that update modality. One important
              update precondition is that the system is not  
              performing an action that would prevent the update (such as 
              currently applying a competing update). 
            </dd>
        </dl>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-9.3">
        <name slugifiedName="name-data-value-representation">Data Value Representation</name>
        <t indent="0" pn="section-9.3-1">
            The expressive representation of simple data values is fundamental to 
            the successful construction and evaluation of predicates in the
            DTNMA autonomy model. When defining such values, there are
            useful distinctions regarding how values are identified
            and whether values are generated in a way that is internal or external to the 
            autonomy model.
        </t>
        <t indent="0" pn="section-9.3-2">
            A DTNMA data value should combine a base type
            (e.g., integer, real, string) representation with relevant semantic
            information. Base types are used for proper storage and encoding. 
            Semantic information allows for additional typing, constraint definitions, 
            and mnemonic naming. This expanded
            definition of data values allows for better predicate construction,
            better evaluation, and early type checking.
        </t>
        <t indent="0" pn="section-9.3-3">
            Data values may further be annotated based on whether their value
            is the result of a DA calculation or the result of some external 
            process on the managed device. For example, operators may wish to
            know which values can be updated by actions on the DA versus which
            values (such as sensor readings) cannot be reliably changed because
            they are calculated in a way that is external to the DA.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-9.4">
        <name slugifiedName="name-data-reporting">Data Reporting</name>
        <t indent="0" pn="section-9.4-1">
          The DTNMA autonomy model should, as required, report on the
          state of its managed device (to include the state of the
          model itself). This reporting should be done as a function of
          the changing state of the managed device, independent of the
          connection to any managing device. Queuing reports allows for
          later forensic analysis of device behavior; this feature is a 
          desirable property of DTNMA management. 
        </t>
        <t indent="0" pn="section-9.4-2">
          DTNMA data reporting consists of the production of some
          data report instance conforming to a data report schema. The use
          of schemas allows a report instance to identify the schema to which
          it conforms instead of carrying the structure in the report itself. 
          This approach can significantly reduce the size of generated reports.
        </t>
        <t indent="0" pn="section-9.4-3">
            The DTNMA data reporting concept is intentionally distinct 
            from the concept of exchanging datastores across a network. It is
            envisioned that a DA might generate a data report instance of a
            data report schema at regular intervals or in response to local
            events. In this model, many report schemas may be defined to capture
            unique, relevant combinations of known data values rather than
            sending bulk datastores off-platform for analysis.
        </t>
        <aside pn="section-9.4-4">
          <t indent="0" pn="section-9.4-4.1">
            NOTE: It is not required that data report schemas be tabular in
            nature. Individual implementations might define tabular
            schemas for table-like data and other report schemas for more 
            heterogeneous reporting.
          </t>
        </aside>
      </section>
      <section numbered="true" anchor="ctrl_exec" removeInRFC="false" toc="include" pn="section-9.5">
        <name slugifiedName="name-command-execution">Command Execution</name>
        <t indent="0" pn="section-9.5-1">
          The agent autonomy engine requires that managed devices issue 
          commands on themselves as if they were otherwise being controlled 
          by a managing device. The DTNMA implements commanding through the
          use of Controls and macros. 
        </t>
        <t indent="0" pn="section-9.5-2">
          Controls represent parameterized, predefined procedures run by the DA
          either as directed by the DM or as part of a rule response from the
          DA autonomy engine. Macros represent ordered sequences of Controls.
        </t>
        <t indent="0" pn="section-9.5-3">
          Controls are conceptually similar to RPCs in 
          that they represent parameterized functions run on the managed 
          device. However, they are conceptually dissimilar to RPCs in that 
          they do not have a concept of a return code because they operate 
          over an asynchronous transport. The concept of a return code in an RPC 
          implies a synchronous relationship between the caller of the 
          procedure and the procedure being called, which might not be 
          possible within the DTNMA. 
        </t>
        <t indent="0" pn="section-9.5-4">
          The success or failure of a Control may be handled locally by the 
          agent autonomy engine. Local error handling is particularly important
          in this architecture, given the potential for long periods of
          disconnectivity between a DA and a DM. The failure
          of one or more Controls is part of the state of the DA and can be used to trigger rules within the DA autonomy engine.
        </t>
        <t indent="0" pn="section-9.5-5">
          The impact of a Control is externally observable via the generation 
          and eventual examination of data reports produced by the managed device.
        </t>
        <t indent="0" pn="section-9.5-6">
          The failure of certain Controls might leave a managed device in an 
          undesirable state. Therefore, it is important
          that there be consideration for Control-specific recovery
          mechanisms (such as a rollback or safing mechanism). When a 
          Control that is part of a macro (such as in an autonomy response)
          fails, there may be a need to implement a safe state for the
          managed device based on the nature of the failure. 
        </t>
        <aside pn="section-9.5-7">
          <t indent="0" pn="section-9.5-7.1">
            NOTE: The use of the term "Control" in the DTNMA is derived in 
            part from the concept of Command and Control (C2), where control 
            implies the operational instructions undertaken to
            implement (or maintain) a commanded objective. The DA
            autonomy engine implements controls on a managed device to allow it to fulfill some commanded objective known by a (possibly disconnected) managing device.
          </t>
          <t indent="0" pn="section-9.5-7.2">
            For example, a device might be commanded to maintain a safe internal thermal environment. Actions taken by a DA to manage heaters, louvers, and other temperature-affecting components are controls taken in service of that commanded objective.
          </t>
        </aside>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-9.6">
        <name slugifiedName="name-predicate-autonomy-rules">Predicate Autonomy Rules</name>
        <t indent="0" pn="section-9.6-1">
          As discussed in <xref target="aut_mod_overview" format="default" sectionFormat="of" derivedContent="Section 9.1"/>, the DTNMA
          rule-based stimulus-response system associates stimulus detection with a
          predetermined response. Rules may be categorized based on whether
          (1) their
          stimuli include generic statements of managed device state or
          (2) they
          are optimized to only consider the passage of time on the device.
        </t>
        <t indent="0" pn="section-9.6-2">
          State-based rules are those whose stimulus is based on the evaluated
          state of the managed device. Time-based rules are a unique subset of
          state-based rules whose stimulus is given only by a time-based event.
          Implementations might create different structures and evaluation
          mechanisms for these two different types of rules to achieve more
          efficient processing on a platform.
        </t>
      </section>
    </section>
    <section anchor="use-cases" numbered="true" removeInRFC="false" toc="include" pn="section-10">
      <name slugifiedName="name-use-cases">Use Cases</name>
      <t indent="0" pn="section-10-1">
        Using the autonomy model defined in <xref target="autonomy_model" format="default" sectionFormat="of" derivedContent="Section 9"/>, 
        this section describes flows through sample configurations conforming to the 
        DTNMA. These use cases illustrate remote configuration, local monitoring and 
        control, support for multiple DMs, and data fusion.
      </t>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-10.1">
        <name slugifiedName="name-notation">Notation</name>
        <t indent="0" pn="section-10.1-1"> 
            The use cases presented in this section are documented with a
            shorthand notation to describe the types of data sent between
            managers and agents. This notation, outlined in 
            <xref target="uc_notation" format="default" sectionFormat="of" derivedContent="Table 1"/>, leverages the definitions 
            of the autonomy model components defined in <xref target="autonomy_model" format="default" sectionFormat="of" derivedContent="Section 9"/>. 
        </t>
        <table anchor="uc_notation" align="center" pn="table-1">
          <name slugifiedName="name-terminology-2">Terminology</name>
          <thead>
            <tr>
              <th align="center" colspan="1" rowspan="1">Term</th>
              <th align="center" colspan="1" rowspan="1">Definition</th>
              <th align="center" colspan="1" rowspan="1">Example</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="center" colspan="1" rowspan="1">EDD#</td>
              <td align="center" colspan="1" rowspan="1">Externally Defined Data -- a data value defined in a way that is external to the DA. </td>
              <td align="center" colspan="1" rowspan="1">EDD1, EDD2</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">V#</td>
              <td align="center" colspan="1" rowspan="1">Variable -- a data value defined in a way that is internal to the DA.</td>
              <td align="center" colspan="1" rowspan="1">V1 = EDD1 + 7</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">EXPR</td>
              <td align="center" colspan="1" rowspan="1">Predicate expression -- used to define a rule stimulus.</td>
              <td align="center" colspan="1" rowspan="1">V1 &gt; 5</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">ID</td>
              <td align="center" colspan="1" rowspan="1">DTNMA Object Identifier.</td>
              <td align="center" colspan="1" rowspan="1">V1, EDD2</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">ACL#</td>
              <td align="center" colspan="1" rowspan="1">Enumerated Access Control List.</td>
              <td align="center" colspan="1" rowspan="1">ACL1</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">DEF(ACL, ID, EXPR)</td>
              <td align="center" colspan="1" rowspan="1">Define "ID" from expression. Allow DMs in ACL to see this ID.</td>
              <td align="center" colspan="1" rowspan="1">DEF(ACL1, V1, EDD1 + EDD2)</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">PROD(P, ID)</td>
              <td align="center" colspan="1" rowspan="1">Produce "ID" according to predicate 
                   P. P may be a time period (1 second, or 1s) or an expression (EDD1 &gt; 10).</td>
              <td align="center" colspan="1" rowspan="1">PROD(1s, EDD1)</td>
            </tr>
            <tr>
              <td align="center" colspan="1" rowspan="1">RPT(ID)</td>
              <td align="center" colspan="1" rowspan="1">A report instance containing data named "ID".</td>
              <td align="center" colspan="1" rowspan="1">RPT(EDD1)</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-10.1-3">
            These notations do not imply any implementation approach. They 
            only provide a succinct syntax for expressing the data flows in
            the use case diagrams in the remainder of this section.
        </t>
      </section>
      <section anchor="serial_mgmt" numbered="true" removeInRFC="false" toc="include" pn="section-10.2">
        <name slugifiedName="name-serialized-management">Serialized Management</name>
        <t indent="0" pn="section-10.2-1">
              This nominal configuration shows a single DM interacting with multiple
              DAs. The control flow for this scenario is outlined in 
              <xref target="serial_mgmt_ctrl_flow" format="default" sectionFormat="of" derivedContent="Figure 4"/>.
        </t>
        <figure anchor="serial_mgmt_ctrl_flow" align="left" suppress-title="false" pn="figure-4">
          <name slugifiedName="name-serialized-management-contr">Serialized Management Control Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-10.2-2.1">+-----------+           +---------+           +---------+
|   DTNMA   |           |  DTNMA  |           |  DTNMA  |
| Manager A |           | Agent A |           | Agent B |
+----+------+           +----+----+           +----+----+
    |                       |                     |
    |-----PROD(1s, EDD1)---&gt;|                     | (1)
    |----------------------------PROD(1s, EDD1)--&gt;|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     | (2)
    |&lt;----------------------------RPT(EDD1)-------|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |&lt;----------------------------RPT(EDD1)-------|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |&lt;----------------------------RPT(EDD1)-------|
    |                       |                     |
</artwork>
        </figure>
        <t keepWithPrevious="true" indent="0" pn="section-10.2-3">
             In a serialized management scenario, a single DM interacts with multiple DAs.
        </t>
        <t indent="0" pn="section-10.2-4">
            In this figure, DM A sends a policy to DAs 
            A and B to report the value of an EDD (EDD1) every second (step 1). 
            Each DA receives this policy and configures their respective 
            autonomy engines for this production. Thereafter (step 2), each 
            DA produces a report containing data element EDD1; each such report is
            then sent back to the DM.
        </t>
        <t indent="0" pn="section-10.2-5">
            This behavior continues without any additional communications
            from the DM.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-10.3">
        <name slugifiedName="name-intermittent-connectivity">Intermittent Connectivity</name>
        <t indent="0" pn="section-10.3-1">
          Building on the nominal configuration discussed in <xref target="serial_mgmt" format="default" sectionFormat="of" derivedContent="Section 10.2"/>, 
          this scenario shows a challenged network in which connectivity between 
          DA B and the DM is temporarily lost. The control flow for this case 
          is outlined in <xref target="challenged_serial_mgmt_ctrl_flow" format="default" sectionFormat="of" derivedContent="Figure 5"/>.
        </t>
        <figure anchor="challenged_serial_mgmt_ctrl_flow" align="left" suppress-title="false" pn="figure-5">
          <name slugifiedName="name-challenged-management-contr">Challenged Management Control Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-10.3-2.1">+-----------+           +---------+           +---------+
|   DTNMA   |           |  DTNMA  |           |  DTNMA  |
| Manager A |           | Agent A |           | Agent B |
+----+------+           +----+----+           +----+----+
    |                       |                     |
    |-----PROD(1s, EDD1)---&gt;|                     | (1)
    |----------------------------PROD(1s, EDD1)--&gt;|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     | (2)
    |&lt;----------------------------RPT(EDD1)-------|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |&lt;----------------------------RPT(EDD1)-------|
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |                       |            RPT(EDD1)| (3)
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |                       |            RPT(EDD1)| (4)
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |&lt;----------------RPT(EDD1), RPT(EDD1)--------| (5)
    |                       |                     |
</artwork>
        </figure>
        <t keepWithPrevious="true" indent="0" pn="section-10.3-3"> 
            In a challenged network, DAs store reports, pending a transmit opportunity.
        </t>
        <t indent="0" pn="section-10.3-4">
            In this figure, DM A sends a policy to DAs A 
            and B to produce an EDD (EDD1) every second (step 1). Each DA 
            receives this policy and configures their respective autonomy 
            engines for this production. Produced reports are transmitted when 
            there is connectivity between the DA and DM (step 2). 
        </t>
        <t indent="0" pn="section-10.3-5">
            At some point, DA B loses the ability to transmit in the 
            network (steps 3 and 4). During this time period, DA B continues 
            to produce reports, but they are queued for transmission. This 
            queuing might be done by the DA itself or by a supporting 
            transport such as BP. Eventually (and before the next scheduled
            production of EDD1), DA B is able to transmit in the 
            network again (step 5), and all queued reports are sent at that 
            time. DA A maintains connectivity with the DM during 
            steps 3-5 and continues to send reports as they are generated.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-10.4">
        <name slugifiedName="name-open-loop-reporting">Open-Loop Reporting</name>
        <t indent="0" pn="section-10.4-1">
          This scenario illustrates the DTNMA open-loop control paradigm, where DAs 
          manage themselves in accordance with policies provided by DMs and provide 
          reports to DMs based on these policies.
        </t>
        <t indent="0" pn="section-10.4-2">
          The control flow shown in <xref target="consolidated_mgmt_ctrl_flow" format="default" sectionFormat="of" derivedContent="Figure 6"/>
          includes an example of data fusion, where multiple policies configured by a 
          DM result in a single report from a DA.
        </t>
        <figure anchor="consolidated_mgmt_ctrl_flow" align="left" suppress-title="false" pn="figure-6">
          <name slugifiedName="name-consolidated-management-con">Consolidated Management Control Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-10.4-3.1">+-----------+           +---------+           +---------+
|   DTNMA   |           |  DTNMA  |           |  DTNMA  |
| Manager A |           | Agent A |           | Agent B |
+----+------+           +----+----+           +----+----+
    |                       |                     |
    |-----PROD(1s, EDD1)---&gt;|                     | (1)
    |----------------------------PROD(1s, EDD1)--&gt;| 
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     | (2)
    |&lt;----------------------------RPT(EDD1)-------| 
    |                       |                     |
    |                       |                     |
    |----------------------------PROD(1s, EDD2)--&gt;| (3)
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     | 
    |&lt;-------------------------RPT(EDD1, EDD2)----| (4)
    |                       |                     |
    |                       |                     |
    |&lt;-------RPT(EDD1)------|                     |
    |&lt;-------------------------RPT(EDD1, EDD2)----|
    |                       |                     |
</artwork>
        </figure>
        <t keepWithPrevious="true" indent="0" pn="section-10.4-4">
          A many-to-one mapping between management policy and device state reporting 
          is supported by the DTNMA.
        </t>
        <t indent="0" pn="section-10.4-5">
          In this figure, DM A sends a policy statement in the form of a 
          rule to DAs A and B, which instructs the DAs to produce a report 
          for EDD1 every second (step 1). Each DA receives this policy, which is 
          stored in its respective rule database, and configures its autonomy engine. 
          Reports are transmitted by each DA when produced (step 2).
        </t>
        <t indent="0" pn="section-10.4-6">
          At a later time, DM A sends an additional policy to
          DA B, requesting the production of a report for EDD2 every second 
          (step 3). This policy is added to DA B's rule database.
        </t>
        <t indent="0" pn="section-10.4-7">
          Following this policy update, DA A will continue to produce EDD1,
          and DA B will produce both EDD1 and EDD2 (step 4). However,
          DA B may provide these values to the DM in a single report rather than as 
          two independent reports. In this way, there is no direct mapping between the 
          consolidated reports sent by DA B (from step 4 onwards) and the two 
          different policies sent to DA B (steps 1 and 3) that produce the information included in those consolidated reports.
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-10.5">
        <name slugifiedName="name-multiple-administrative-dom">Multiple Administrative Domains</name>
        <t indent="0" pn="section-10.5-1">
          The managed applications on a DA may be controlled by different
          administrative entities in a network. The DTNMA allows DAs to
          communicate with multiple DMs in the network, such as in cases
          where there is one DM per administrative domain. 
        </t>
        <t indent="0" pn="section-10.5-2">
          Whenever a DM sends a policy expression to a DA, that policy 
          expression may be associated with authorization information. One 
          method of representing this is an ACL. 
        </t>
        <t indent="0" pn="section-10.5-3">
            The use of an ACL in this use case does not imply that the DTNMA 
            requires ACLs to annotate policy expressions. ACLs and their 
            representation in this context are for example purposes only. 
        </t>
        <t indent="0" pn="section-10.5-4">
          The ability of one DM to access the results of policy 
          expressions configured by some other DM will be limited to the
          authorization annotations of those policy expressions. 
        </t>
        <t indent="0" pn="section-10.5-5">
          An example of multi-manager authorization is illustrated in
          <xref target="multi_mgmt_ctrl_flow" format="default" sectionFormat="of" derivedContent="Figure 7"/>.
        </t>
        <figure anchor="multi_mgmt_ctrl_flow" align="left" suppress-title="false" pn="figure-7">
          <name slugifiedName="name-multiplexed-management-cont">Multiplexed Management Control Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-10.5-6.1">
+-----------+               +---------+                 +-----------+
|   DTNMA   |               |  DTNMA  |                 |   DTNMA   |
| Manager A |               | Agent A |                 | Manager B |
+-----+-----+               +----+----+                 +-----+-----+
    |                          |                            |
    |--DEF(ACL1, V1, EDD1*2)--&gt;|&lt;---DEF(ACL2, V2, EDD2*2)---| (1)
    |                          |                            |
    |---PROD(1s, V1)----------&gt;|&lt;---PROD(1s, V2)------------| (2)
    |                          |                            |
    |&lt;--------RPT(V1)----------|                            | (3)
    |                          |--------RPT(V2)------------&gt;|
    |&lt;--------RPT(V1)----------|                            |
    |                          |--------RPT(V2)------------&gt;|
    |                          |                            |
    |                          |&lt;---PROD(1s, V1)------------| (4)
    |                          |                            |
    |                          |---ERR(V1 not permitted)---&gt;|   
    |                          |                            |
    |--DEF(NULL, V3, EDD3*3)--&gt;|                            | (5)
    |                          |                            |
    |---PROD(1s, V3)----------&gt;|                            | (6)
    |                          |                            |
    |                          |&lt;----PROD(1s, V3)-----------|
    |                          |                            |
    |&lt;--------RPT(V3)----------|--------RPT(V3)------------&gt;| (7)
    |&lt;--------RPT(V1)----------|                            |
    |                          |--------RPT(V2)------------&gt;|
    |&lt;-------RPT(V3)-----------|--------RPT(V3)------------&gt;|
    |&lt;-------RPT(V1)-----------|                            |
    |                          |--------RPT(V2)------------&gt;|
</artwork>
        </figure>
        <t keepWithPrevious="true" indent="0" pn="section-10.5-7">
             Multiple DMs may interface with a single DA, particularly in complex 
             networks.
        </t>
        <t indent="0" pn="section-10.5-8">
            In this figure, both DM A and DM B send policies to 
            DA A (step 1). DM A defines a variable (V1) whose value is given 
            by the mathematical expression (EDD1 * 2) and is associated with an 
            ACL (ACL1) that restricts access to V1 to DM A only. Similarly, DM B 
            defines a variable (V2) whose value is given by the mathematical 
            expression (EDD2 * 2) and is associated with an ACL (ACL2) that restricts 
            access to V2 to DM B only. 
        </t>
        <t indent="0" pn="section-10.5-9">
            Both DM A and DM B also send policies to DA A to 
            report on the values of their variables at 1-second intervals (step 2). 
            Since DM A can access V1 and DM B can access V2, there is 
            no authorization issue with these policies, and they are both
            accepted by the autonomy engine on DA A. DA A produces
            reports as expected, sending them to their respective managers 
            (step 3).
        </t>
        <t indent="0" pn="section-10.5-10">
            Later (step 4), DM B attempts to configure DA A to also
            report to it the value of V1. Since DM B does not have
            authorization to view this variable, DA A does not include this
            in the configuration of its autonomy engine; instead, some
            indication of a permission error is included in any regular
            reporting back to DM B.
        </t>
        <t indent="0" pn="section-10.5-11">
            DM A also sends a policy to DA A (step 5) that defines a 
            variable (V3) whose value is given by the mathematical expression 
            (EDD3 * 3) and is not associated with an ACL, indicating that any 
            DM can access V3. In this instance, both DM A and DM B can
            then send policies to DA A to report the value of V3 (step 6).
            Since there is no authorization restriction on V3, these policies
            are accepted by the autonomy engine on DA A, and reports are
            sent to both DM A and DM B over time (step 7).
        </t>
      </section>
      <section numbered="true" removeInRFC="false" toc="include" pn="section-10.6">
        <name slugifiedName="name-cascading-management">Cascading Management</name>
        <t indent="0" pn="section-10.6-1">
          There are times when a single network device may serve as both
          a DM for other DAs in the network and, itself, as a 
          device managed by someone else. This may be the case on nodes
          serving as gateways or proxies. The DTNMA accommodates this case by 
          allowing a single device to run both a DA and a DM. 
        </t>
        <t indent="0" pn="section-10.6-2">
          An example of this configuration is illustrated in 
          <xref target="fusion_ctrl_flow" format="default" sectionFormat="of" derivedContent="Figure 8"/>.
        </t>
        <figure anchor="fusion_ctrl_flow" align="left" suppress-title="false" pn="figure-8">
          <name slugifiedName="name-cascading-management-contro">Cascading Management Control Flow</name>
          <artwork align="center" name="" type="" alt="" pn="section-10.6-3.1">
               ---------------------------------------
               |                Node B               |
               |                                     |
+-----------+  |   +-----------+       +---------+   |    +---------+
|   DTNMA   |  |   |   DTNMA   |       |  DTNMA  |   |    |  DTNMA  |
| Manager A |  |   | Manager B |       | Agent B |   |    | Agent C |
+---+-------+  |   +-----+-----+       +----+----+   |    +----+----+
    |          |         |                  |        |         |
    |----------DEF(NULL, V0, EDD1 + EDD2)--&gt;|        |         | (1)
    |-------------PROD(1s, V0)-------------&gt;|        |         |
    |          |         |                  |        |         |
    |          |         |-PROD(1s, EDD1)--&gt;|        |         | (2)
    |          |         |--------------------PROD(1s, EDD2)--&gt;| (2)
    |          |         |                  |        |         |
    |          |         |                  |        |         | 
    |          |         |&lt;----RPT(EDD1)----|        |         | (3)
    |          |         |&lt;--------------------RPT(EDD2)-------| (3)
    |          |         |                  |        |         |
    |&lt;-------------RPT(V0)------------------|        |         | (4)
    |          |         |                  |        |         |
    |          |         |                  |        |         |
               |                                     |
               |                                     |
               ---------------------------------------
</artwork>
        </figure>
        <t keepWithPrevious="true" indent="0" pn="section-10.6-4">
          A device can operate as both a DM and a DA.
        </t>
        <t indent="0" pn="section-10.6-5">
          In this example, we presume that DA B is able to sample a
          given EDD (EDD1) and that DA C is able to sample a different
          EDD (EDD2). Node B houses DM B (which controls DA C) and DA B 
          (which is controlled by DM A). DM A must periodically receive 
          some new value that is calculated as a function of both EDD1 
          and EDD2. 
        </t>
        <t indent="0" pn="section-10.6-6">
          First, DM A sends a policy to DA B to define a variable (V0) whose value 
          is given by the mathematical expression (EDD1 + EDD2) without a 
          restricting ACL. Further, DM A sends a policy to DA B to report on 
          the value of V0 every second (step 1).
        </t>
        <t indent="0" pn="section-10.6-7">
          DA B needs the ability to monitor both EDD1 and EDD2 to produce V0.
          DA B is able to sample EDD1, so DM B sends a policy to DA B to report on
          the value of EDD1.
          However, the only way to receive EDD2 values is to have them 
          reported back to Node B by DA C and included in the Node B 
          runtime datastores. Therefore, DM B also sends a policy to DA C to
          report on the value of EDD2 (step 2).
        </t>
        <t indent="0" pn="section-10.6-8">
          DA B receives the policy in its autonomy engine and produces
          reports on the value of EDD2 every second.  Similarly, DA C
          receives the policy in its autonomy engine and produces reports on the
          value of EDD2 every second (step 3).
        </t>
        <t indent="0" pn="section-10.6-9">
          DA B may locally sample EDD1 and EDD2 and uses that to compute
          values of V0 and report on those values at regular intervals to DM A 
          (step 4).
        </t>
        <t indent="0" pn="section-10.6-10">            
          While a trivial example, the mechanism of associating fusion with 
          the DA function rather than the DM function scales with 
          fusion complexity. Within the DTNMA, DAs and DMs are not required to 
          be separate software implementations. There may be a single software 
          application running on Node B implementing both DM B and DA B roles.
        </t>
      </section>
    </section>
    <section anchor="IANA" numbered="true" removeInRFC="false" toc="include" pn="section-11">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-11-1">
        This document has no IANA actions.
      </t>
    </section>
    <section anchor="Security" numbered="true" removeInRFC="false" toc="include" pn="section-12">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-12-1">        
        Security within a DTNMA exists in at least the following two layers: security
        in the data model and security in the messaging and encoding of the
        data model. 
      </t>
      <t indent="0" pn="section-12-2">
        Data model security refers to the validity and accessibility of data 
        elements. For example, a data element might be available to certain DAs or DMs in a system, whereas the same data element may be hidden from other DAs or DMs. Both verification and authorization mechanisms
        at DAs and DMs are important to achieve this type of security. 
      </t>
      <aside pn="section-12-3">
        <t indent="0" pn="section-12-3.1">
          NOTE: One way to provide finer-grained application security is 
          through the use of ACLs that would be defined 
          as part of the configuration of DAs and DMs. It is expected that 
          many common data model tools provide mechanisms for the definition 
          of ACLs and best practices for their operational use.
        </t>
      </aside>
      <t indent="0" pn="section-12-4">
         The exchange of information between and amongst DAs and DMs in the 
         DTNMA is expected to be accomplished through some secured messaging 
         transport.        
      </t>
    </section>
  </middle>
  <back>
    <references pn="section-13">
      <name slugifiedName="name-informative-references">Informative References</name>
      <reference anchor="ASN.1" target="https://www.itu.int/rec/T-REC-X.680" quoteTitle="true" derivedAnchor="ASN.1">
        <front>
          <title>Information technology - Abstract Syntax Notation One (ASN.1): Specification of basic notation</title>
          <author>
            <organization showOnFrontPage="true">ITU-T</organization>
          </author>
          <date month="February" year="2021"/>
        </front>
        <seriesInfo name="ITU-T Recommendation" value="X.680"/>
        <seriesInfo name="ISO/IEC" value="8824-1:2021"/>
      </reference>
      <reference anchor="CORE-COMI" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-ietf-core-comi-19" derivedAnchor="CORE-COMI">
        <front>
          <title>CoAP Management Interface (CORECONF)</title>
          <author initials="M." surname="Veillette" fullname="Michel Veillette" role="editor">
            <organization showOnFrontPage="true">Trilliant Networks Inc.</organization>
          </author>
          <author initials="P." surname="van der Stok" fullname="Peter van der Stok" role="editor">
            <organization showOnFrontPage="true">consultant</organization>
          </author>
          <author initials="A." surname="Pelov" fullname="Alexander Pelov" role="editor">
            <organization showOnFrontPage="true">IMT Atlantique</organization>
          </author>
          <author initials="A." surname="Bierman" fullname="Andy Bierman">
            <organization showOnFrontPage="true">YumaWorks</organization>
          </author>
          <author initials="C." surname="Bormann" fullname="Carsten Bormann" role="editor">
            <organization showOnFrontPage="true">Universität Bremen TZI</organization>
          </author>
          <date month="November" day="3" year="2024"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-core-comi-19"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
      <reference anchor="DART" target="https://ieeexplore.ieee.org/abstract/document/10207457" quoteTitle="true" derivedAnchor="DART">
        <front>
          <title>The DART Autonomy System</title>
          <author fullname="B. Teresa Tropf">
            <organization showOnFrontPage="true">The Johns Hopkins Applied Physics Laboratory</organization>
          </author>
          <author fullname="Musad Haque">
            <organization showOnFrontPage="true">The Johns Hopkins Applied Physics Laboratory</organization>
          </author>
          <author fullname="Neda Behrooz">
            <organization showOnFrontPage="true">The Johns Hopkins Applied Physics Laboratory</organization>
          </author>
          <author fullname="Christopher Krupiarz">
            <organization showOnFrontPage="true">The Johns Hopkins Applied Physics Laboratory</organization>
          </author>
          <date month="August" year="2023"/>
        </front>
        <seriesInfo name="DOI" value="10.1109/SMC-IT56444.2023.00020"/>
      </reference>
      <reference anchor="gNMI" target="https://www.openconfig.net/docs/gnmi/gnmi-specification/" quoteTitle="true" derivedAnchor="gNMI">
        <front>
          <title>gRPC Network Management Interface (gNMI)</title>
          <author initials="P." surname="Borman" fullname="Paul Borman">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="M." surname="Hines" fullname="Marcus Hines">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="C." surname="Lebsack" fullname="Carl Lebsack">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="C." surname="Morrow" fullname="Chris Morrow">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="A." surname="Shaikh" fullname="Anees Shaikh">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="R." surname="Shakir" fullname="Rob Shakir">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="W." surname="Li" fullname="Wen Bo Li,">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="D." surname="Loher" fullname="Darren Loher">
            <organization showOnFrontPage="true"/>
          </author>
          <date month="May" year="2023"/>
        </front>
        <refcontent>Version 10.0</refcontent>
      </reference>
      <reference anchor="gRPC" target="https://grpc.io/docs/" quoteTitle="true" derivedAnchor="gRPC">
        <front>
          <title>gRPC Documentation</title>
          <author>
            <organization showOnFrontPage="true">gRPC Authors</organization>
          </author>
          <date year="2024"/>
        </front>
      </reference>
      <reference anchor="IPMI" target="https://www.intel.la/content/dam/www/public/us/en/documents/specification-updates/ipmi-intelligent-platform-mgt-interface-spec-2nd-gen-v2-0-spec-update.pdf" quoteTitle="true" derivedAnchor="IPMI">
        <front>
          <title>Intelligent Platform Management Interface Specification, Second Generation</title>
          <author>
            <organization showOnFrontPage="true">Intel</organization>
          </author>
          <author>
            <organization showOnFrontPage="true">Hewlett-Packard</organization>
          </author>
          <author>
            <organization showOnFrontPage="true">NEC</organization>
          </author>
          <author>
            <organization showOnFrontPage="true">Dell</organization>
          </author>
          <date month="October" year="2013"/>
        </front>
        <refcontent>Version 2.0</refcontent>
      </reference>
      <reference anchor="NEW-HORIZONS" target="https://www.sciencedirect.com/science/article/pii/S0094576507000604" quoteTitle="true" derivedAnchor="NEW-HORIZONS">
        <front>
          <title>Autonomous safeing and fault protection for the New Horizons mission to Pluto</title>
          <author fullname="Robert C. Moore">
            <organization showOnFrontPage="true">The Johns Hopkins Applied Physics Laboratory</organization>
            <address>
              <email>Robert.Moore@jhuapl.edu</email>
            </address>
          </author>
          <date month="August" year="2007"/>
        </front>
        <refcontent>Acta Astronautica, Volume 61, Issues 1-6, June-August 2007, Pages 398-405</refcontent>
        <seriesInfo name="DOI" value="10.1016/j.actaastro.2007.01.009"/>
      </reference>
      <reference anchor="PROTOCOL-BUFFERS" quoteTitle="true" target="https://datatracker.ietf.org/doc/html/draft-rfernando-protocol-buffers-00" derivedAnchor="PROTOCOL-BUFFERS">
        <front>
          <title>Encoding rules and MIME type for Protocol Buffers</title>
          <author initials="S." surname="Stuart" fullname="Stephen Stuart">
            <organization showOnFrontPage="true">Google</organization>
          </author>
          <author initials="R." surname="Fernando" fullname="Rex Fernando">
            <organization showOnFrontPage="true">Cisco</organization>
          </author>
          <date month="October" day="8" year="2012"/>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-rfernando-protocol-buffers-00"/>
        <refcontent>Work in Progress</refcontent>
      </reference>
      <reference anchor="RFC2578" target="https://www.rfc-editor.org/info/rfc2578" quoteTitle="true" derivedAnchor="RFC2578">
        <front>
          <title>Structure of Management Information Version 2 (SMIv2)</title>
          <author fullname="K. McCloghrie" initials="K." role="editor" surname="McCloghrie"/>
          <author fullname="D. Perkins" initials="D." role="editor" surname="Perkins"/>
          <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
          <date month="April" year="1999"/>
          <abstract>
            <t indent="0">It is the purpose of this document, the Structure of Management Information Version 2 (SMIv2), to define that adapted subset, and to assign a set of associated administrative values. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="58"/>
        <seriesInfo name="RFC" value="2578"/>
        <seriesInfo name="DOI" value="10.17487/RFC2578"/>
      </reference>
      <reference anchor="RFC2982" target="https://www.rfc-editor.org/info/rfc2982" quoteTitle="true" derivedAnchor="RFC2982">
        <front>
          <title>Distributed Management Expression MIB</title>
          <author fullname="R. Kavasseri" initials="R." role="editor" surname="Kavasseri"/>
          <date month="October" year="2000"/>
          <abstract>
            <t indent="0">This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community. In particular, it describes managed objects used for managing expressions of MIB objects. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="2982"/>
        <seriesInfo name="DOI" value="10.17487/RFC2982"/>
      </reference>
      <reference anchor="RFC3165" target="https://www.rfc-editor.org/info/rfc3165" quoteTitle="true" derivedAnchor="RFC3165">
        <front>
          <title>Definitions of Managed Objects for the Delegation of Management Scripts</title>
          <author fullname="D. Levi" initials="D." surname="Levi"/>
          <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
          <date month="August" year="2001"/>
          <abstract>
            <t indent="0">This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in the Internet community. In particular, it describes a set of managed objects that allow the delegation of management scripts to distributed managers. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="3165"/>
        <seriesInfo name="DOI" value="10.17487/RFC3165"/>
      </reference>
      <reference anchor="RFC3410" target="https://www.rfc-editor.org/info/rfc3410" quoteTitle="true" derivedAnchor="RFC3410">
        <front>
          <title>Introduction and Applicability Statements for Internet-Standard Management Framework</title>
          <author fullname="J. Case" initials="J." surname="Case"/>
          <author fullname="R. Mundy" initials="R." surname="Mundy"/>
          <author fullname="D. Partain" initials="D." surname="Partain"/>
          <author fullname="B. Stewart" initials="B." surname="Stewart"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">The purpose of this document is to provide an overview of the third version of the Internet-Standard Management Framework, termed the SNMP version 3 Framework (SNMPv3). This Framework is derived from and builds upon both the original Internet-Standard Management Framework (SNMPv1) and the second Internet-Standard Management Framework (SNMPv2). The architecture is designed to be modular to allow the evolution of the Framework over time. The document explains why using SNMPv3 instead of SNMPv1 or SNMPv2 is strongly recommended. The document also recommends that RFCs 1157, 1441, 1901, 1909 and 1910 be retired by moving them to Historic status. This document obsoletes RFC 2570. This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="3410"/>
        <seriesInfo name="DOI" value="10.17487/RFC3410"/>
      </reference>
      <reference anchor="RFC3411" target="https://www.rfc-editor.org/info/rfc3411" quoteTitle="true" derivedAnchor="RFC3411">
        <front>
          <title>An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks</title>
          <author fullname="D. Harrington" initials="D." surname="Harrington"/>
          <author fullname="R. Presuhn" initials="R." surname="Presuhn"/>
          <author fullname="B. Wijnen" initials="B." surname="Wijnen"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">This document describes an architecture for describing Simple Network Management Protocol (SNMP) Management Frameworks. The architecture is designed to be modular to allow the evolution of the SNMP protocol standards over time. The major portions of the architecture are an SNMP engine containing a Message Processing Subsystem, a Security Subsystem and an Access Control Subsystem, and possibly multiple SNMP applications which provide specific functional processing of management data. This document obsoletes RFC 2571. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3411"/>
        <seriesInfo name="DOI" value="10.17487/RFC3411"/>
      </reference>
      <reference anchor="RFC3414" target="https://www.rfc-editor.org/info/rfc3414" quoteTitle="true" derivedAnchor="RFC3414">
        <front>
          <title>User-based Security Model (USM) for version 3 of the Simple Network Management Protocol (SNMPv3)</title>
          <author fullname="U. Blumenthal" initials="U." surname="Blumenthal"/>
          <author fullname="B. Wijnen" initials="B." surname="Wijnen"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">This document describes the User-based Security Model (USM) for Simple Network Management Protocol (SNMP) version 3 for use in the SNMP architecture. It defines the Elements of Procedure for providing SNMP message level security. This document also includes a Management Information Base (MIB) for remotely monitoring/managing the configuration parameters for this Security Model. This document obsoletes RFC 2574. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3414"/>
        <seriesInfo name="DOI" value="10.17487/RFC3414"/>
      </reference>
      <reference anchor="RFC3416" target="https://www.rfc-editor.org/info/rfc3416" quoteTitle="true" derivedAnchor="RFC3416">
        <front>
          <title>Version 2 of the Protocol Operations for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="R. Presuhn" initials="R." role="editor" surname="Presuhn"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">This document defines version 2 of the protocol operations for the Simple Network Management Protocol (SNMP). It defines the syntax and elements of procedure for sending, receiving, and processing SNMP PDUs. This document obsoletes RFC 1905. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3416"/>
        <seriesInfo name="DOI" value="10.17487/RFC3416"/>
      </reference>
      <reference anchor="RFC3417" target="https://www.rfc-editor.org/info/rfc3417" quoteTitle="true" derivedAnchor="RFC3417">
        <front>
          <title>Transport Mappings for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="R. Presuhn" initials="R." role="editor" surname="Presuhn"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">This document defines the transport of Simple Network Management Protocol (SNMP) messages over various protocols. This document obsoletes RFC 1906. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3417"/>
        <seriesInfo name="DOI" value="10.17487/RFC3417"/>
      </reference>
      <reference anchor="RFC3418" target="https://www.rfc-editor.org/info/rfc3418" quoteTitle="true" derivedAnchor="RFC3418">
        <front>
          <title>Management Information Base (MIB) for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="R. Presuhn" initials="R." role="editor" surname="Presuhn"/>
          <date month="December" year="2002"/>
          <abstract>
            <t indent="0">This document defines managed objects which describe the behavior of a Simple Network Management Protocol (SNMP) entity. This document obsoletes RFC 1907, Management Information Base for Version 2 of the Simple Network Management Protocol (SNMPv2). [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="62"/>
        <seriesInfo name="RFC" value="3418"/>
        <seriesInfo name="DOI" value="10.17487/RFC3418"/>
      </reference>
      <reference anchor="RFC4838" target="https://www.rfc-editor.org/info/rfc4838" quoteTitle="true" derivedAnchor="RFC4838">
        <front>
          <title>Delay-Tolerant Networking Architecture</title>
          <author fullname="V. Cerf" initials="V." surname="Cerf"/>
          <author fullname="S. Burleigh" initials="S." surname="Burleigh"/>
          <author fullname="A. Hooke" initials="A." surname="Hooke"/>
          <author fullname="L. Torgerson" initials="L." surname="Torgerson"/>
          <author fullname="R. Durst" initials="R." surname="Durst"/>
          <author fullname="K. Scott" initials="K." surname="Scott"/>
          <author fullname="K. Fall" initials="K." surname="Fall"/>
          <author fullname="H. Weiss" initials="H." surname="Weiss"/>
          <date month="April" year="2007"/>
          <abstract>
            <t indent="0">This document describes an architecture for delay-tolerant and disruption-tolerant networks, and is an evolution of the architecture originally designed for the Interplanetary Internet, a communication system envisioned to provide Internet-like services across interplanetary distances in support of deep space exploration. This document describes an architecture that addresses a variety of problems with internetworks having operational and performance characteristics that make conventional (Internet-like) networking approaches either unworkable or impractical. We define a message- oriented overlay that exists above the transport (or other) layers of the networks it interconnects. The document presents a motivation for the architecture, an architectural overview, review of state management required for its operation, and a discussion of application design issues. This document represents the consensus of the IRTF DTN research group and has been widely reviewed by that group. This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="4838"/>
        <seriesInfo name="DOI" value="10.17487/RFC4838"/>
      </reference>
      <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" quoteTitle="true" derivedAnchor="RFC4949">
        <front>
          <title>Internet Security Glossary, Version 2</title>
          <author fullname="R. Shirey" initials="R." surname="Shirey"/>
          <date month="August" year="2007"/>
          <abstract>
            <t indent="0">This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
          </abstract>
        </front>
        <seriesInfo name="FYI" value="36"/>
        <seriesInfo name="RFC" value="4949"/>
        <seriesInfo name="DOI" value="10.17487/RFC4949"/>
      </reference>
      <reference anchor="RFC5591" target="https://www.rfc-editor.org/info/rfc5591" quoteTitle="true" derivedAnchor="RFC5591">
        <front>
          <title>Transport Security Model for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="D. Harrington" initials="D." surname="Harrington"/>
          <author fullname="W. Hardaker" initials="W." surname="Hardaker"/>
          <date month="June" year="2009"/>
          <abstract>
            <t indent="0">This memo describes a Transport Security Model for the Simple Network Management Protocol (SNMP).</t>
            <t indent="0">This memo also defines a portion of the Management Information Base (MIB) for monitoring and managing the Transport Security Model for SNMP. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="78"/>
        <seriesInfo name="RFC" value="5591"/>
        <seriesInfo name="DOI" value="10.17487/RFC5591"/>
      </reference>
      <reference anchor="RFC5592" target="https://www.rfc-editor.org/info/rfc5592" quoteTitle="true" derivedAnchor="RFC5592">
        <front>
          <title>Secure Shell Transport Model for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="D. Harrington" initials="D." surname="Harrington"/>
          <author fullname="J. Salowey" initials="J." surname="Salowey"/>
          <author fullname="W. Hardaker" initials="W." surname="Hardaker"/>
          <date month="June" year="2009"/>
          <abstract>
            <t indent="0">This memo describes a Transport Model for the Simple Network Management Protocol (SNMP), using the Secure Shell (SSH) protocol.</t>
            <t indent="0">This memo also defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP-based internets. In particular, it defines objects for monitoring and managing the Secure Shell Transport Model for SNMP. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="5592"/>
        <seriesInfo name="DOI" value="10.17487/RFC5592"/>
      </reference>
      <reference anchor="RFC5652" target="https://www.rfc-editor.org/info/rfc5652" quoteTitle="true" derivedAnchor="RFC5652">
        <front>
          <title>Cryptographic Message Syntax (CMS)</title>
          <author fullname="R. Housley" initials="R." surname="Housley"/>
          <date month="September" year="2009"/>
          <abstract>
            <t indent="0">This document describes the Cryptographic Message Syntax (CMS). This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="70"/>
        <seriesInfo name="RFC" value="5652"/>
        <seriesInfo name="DOI" value="10.17487/RFC5652"/>
      </reference>
      <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241" quoteTitle="true" derivedAnchor="RFC6241">
        <front>
          <title>Network Configuration Protocol (NETCONF)</title>
          <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
          <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
          <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
          <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
          <date month="June" year="2011"/>
          <abstract>
            <t indent="0">The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6241"/>
        <seriesInfo name="DOI" value="10.17487/RFC6241"/>
      </reference>
      <reference anchor="RFC6242" target="https://www.rfc-editor.org/info/rfc6242" quoteTitle="true" derivedAnchor="RFC6242">
        <front>
          <title>Using the NETCONF Protocol over Secure Shell (SSH)</title>
          <author fullname="M. Wasserman" initials="M." surname="Wasserman"/>
          <date month="June" year="2011"/>
          <abstract>
            <t indent="0">This document describes a method for invoking and running the Network Configuration Protocol (NETCONF) within a Secure Shell (SSH) session as an SSH subsystem. This document obsoletes RFC 4742. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6242"/>
        <seriesInfo name="DOI" value="10.17487/RFC6242"/>
      </reference>
      <reference anchor="RFC6353" target="https://www.rfc-editor.org/info/rfc6353" quoteTitle="true" derivedAnchor="RFC6353">
        <front>
          <title>Transport Layer Security (TLS) Transport Model for the Simple Network Management Protocol (SNMP)</title>
          <author fullname="W. Hardaker" initials="W." surname="Hardaker"/>
          <date month="July" year="2011"/>
          <abstract>
            <t indent="0">This document describes a Transport Model for the Simple Network Management Protocol (SNMP), that uses either the Transport Layer Security protocol or the Datagram Transport Layer Security (DTLS) protocol. The TLS and DTLS protocols provide authentication and privacy services for SNMP applications. This document describes how the TLS Transport Model (TLSTM) implements the needed features of an SNMP Transport Subsystem to make this protection possible in an interoperable way.</t>
            <t indent="0">This Transport Model is designed to meet the security and operational needs of network administrators. It supports the sending of SNMP messages over TLS/TCP and DTLS/UDP. The TLS mode can make use of TCP's improved support for larger packet sizes and the DTLS mode provides potentially superior operation in environments where a connectionless (e.g., UDP) transport is preferred. Both TLS and DTLS integrate well into existing public keying infrastructures.</t>
            <t indent="0">This document also defines a portion of the Management Information Base (MIB) for use with network management protocols. In particular, it defines objects for managing the TLS Transport Model for SNMP. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="78"/>
        <seriesInfo name="RFC" value="6353"/>
        <seriesInfo name="DOI" value="10.17487/RFC6353"/>
      </reference>
      <reference anchor="RFC6991" target="https://www.rfc-editor.org/info/rfc6991" quoteTitle="true" derivedAnchor="RFC6991">
        <front>
          <title>Common YANG Data Types</title>
          <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
          <date month="July" year="2013"/>
          <abstract>
            <t indent="0">This document introduces a collection of common data types to be used with the YANG data modeling language. This document obsoletes RFC 6021.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6991"/>
        <seriesInfo name="DOI" value="10.17487/RFC6991"/>
      </reference>
      <reference anchor="RFC7228" target="https://www.rfc-editor.org/info/rfc7228" quoteTitle="true" derivedAnchor="RFC7228">
        <front>
          <title>Terminology for Constrained-Node Networks</title>
          <author fullname="C. Bormann" initials="C." surname="Bormann"/>
          <author fullname="M. Ersue" initials="M." surname="Ersue"/>
          <author fullname="A. Keranen" initials="A." surname="Keranen"/>
          <date month="May" year="2014"/>
          <abstract>
            <t indent="0">The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7228"/>
        <seriesInfo name="DOI" value="10.17487/RFC7228"/>
      </reference>
      <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252" quoteTitle="true" derivedAnchor="RFC7252">
        <front>
          <title>The Constrained Application Protocol (CoAP)</title>
          <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
          <author fullname="K. Hartke" initials="K." surname="Hartke"/>
          <author fullname="C. Bormann" initials="C." surname="Bormann"/>
          <date month="June" year="2014"/>
          <abstract>
            <t indent="0">The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
            <t indent="0">CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7252"/>
        <seriesInfo name="DOI" value="10.17487/RFC7252"/>
      </reference>
      <reference anchor="RFC7575" target="https://www.rfc-editor.org/info/rfc7575" quoteTitle="true" derivedAnchor="RFC7575">
        <front>
          <title>Autonomic Networking: Definitions and Design Goals</title>
          <author fullname="M. Behringer" initials="M." surname="Behringer"/>
          <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
          <author fullname="S. Bjarnason" initials="S." surname="Bjarnason"/>
          <author fullname="A. Clemm" initials="A." surname="Clemm"/>
          <author fullname="B. Carpenter" initials="B." surname="Carpenter"/>
          <author fullname="S. Jiang" initials="S." surname="Jiang"/>
          <author fullname="L. Ciavaglia" initials="L." surname="Ciavaglia"/>
          <date month="June" year="2015"/>
          <abstract>
            <t indent="0">Autonomic systems were first described in 2001. The fundamental goal is self-management, including self-configuration, self-optimization, self-healing, and self-protection. This is achieved by an autonomic function having minimal dependencies on human administrators or centralized management systems. It usually implies distribution across network elements.</t>
            <t indent="0">This document defines common language and outlines design goals (and what are not design goals) for autonomic functions. A high-level reference model illustrates how functional elements in an Autonomic Network interact. This document is a product of the IRTF's Network Management Research Group.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7575"/>
        <seriesInfo name="DOI" value="10.17487/RFC7575"/>
      </reference>
      <reference anchor="RFC7589" target="https://www.rfc-editor.org/info/rfc7589" quoteTitle="true" derivedAnchor="RFC7589">
        <front>
          <title>Using the NETCONF Protocol over Transport Layer Security (TLS) with Mutual X.509 Authentication</title>
          <author fullname="M. Badra" initials="M." surname="Badra"/>
          <author fullname="A. Luchuk" initials="A." surname="Luchuk"/>
          <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
          <date month="June" year="2015"/>
          <abstract>
            <t indent="0">The Network Configuration Protocol (NETCONF) provides mechanisms to install, manipulate, and delete the configuration of network devices. This document describes how to use the Transport Layer Security (TLS) protocol with mutual X.509 authentication to secure the exchange of NETCONF messages. This revision of RFC 5539 documents the new message framing used by NETCONF 1.1 and it obsoletes RFC 5539.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7589"/>
        <seriesInfo name="DOI" value="10.17487/RFC7589"/>
      </reference>
      <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950" quoteTitle="true" derivedAnchor="RFC7950">
        <front>
          <title>The YANG 1.1 Data Modeling Language</title>
          <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
          <date month="August" year="2016"/>
          <abstract>
            <t indent="0">YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols. This document describes the syntax and semantics of version 1.1 of the YANG language. YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification. There are a small number of backward incompatibilities from YANG version 1. This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7950"/>
        <seriesInfo name="DOI" value="10.17487/RFC7950"/>
      </reference>
      <reference anchor="RFC7951" target="https://www.rfc-editor.org/info/rfc7951" quoteTitle="true" derivedAnchor="RFC7951">
        <front>
          <title>JSON Encoding of Data Modeled with YANG</title>
          <author fullname="L. Lhotka" initials="L." surname="Lhotka"/>
          <date month="August" year="2016"/>
          <abstract>
            <t indent="0">This document defines encoding rules for representing configuration data, state data, parameters of Remote Procedure Call (RPC) operations or actions, and notifications defined using YANG as JavaScript Object Notation (JSON) text.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="7951"/>
        <seriesInfo name="DOI" value="10.17487/RFC7951"/>
      </reference>
      <reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040" quoteTitle="true" derivedAnchor="RFC8040">
        <front>
          <title>RESTCONF Protocol</title>
          <author fullname="A. Bierman" initials="A." surname="Bierman"/>
          <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
          <author fullname="K. Watsen" initials="K." surname="Watsen"/>
          <date month="January" year="2017"/>
          <abstract>
            <t indent="0">This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8040"/>
        <seriesInfo name="DOI" value="10.17487/RFC8040"/>
      </reference>
      <reference anchor="RFC8199" target="https://www.rfc-editor.org/info/rfc8199" quoteTitle="true" derivedAnchor="RFC8199">
        <front>
          <title>YANG Module Classification</title>
          <author fullname="D. Bogdanovic" initials="D." surname="Bogdanovic"/>
          <author fullname="B. Claise" initials="B." surname="Claise"/>
          <author fullname="C. Moberg" initials="C." surname="Moberg"/>
          <date month="July" year="2017"/>
          <abstract>
            <t indent="0">The YANG data modeling language is currently being considered for a wide variety of applications throughout the networking industry at large. Many standards development organizations (SDOs), open-source software projects, vendors, and users are using YANG to develop and publish YANG modules for a wide variety of applications. At the same time, there is currently no well-known terminology to categorize various types of YANG modules.</t>
            <t indent="0">A consistent terminology would help with the categorization of YANG modules, assist in the analysis of the YANG data modeling efforts in the IETF and other organizations, and bring clarity to the YANG- related discussions between the different groups.</t>
            <t indent="0">This document describes a set of concepts and associated terms to support consistent classification of YANG modules.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8199"/>
        <seriesInfo name="DOI" value="10.17487/RFC8199"/>
      </reference>
      <reference anchor="RFC8294" target="https://www.rfc-editor.org/info/rfc8294" quoteTitle="true" derivedAnchor="RFC8294">
        <front>
          <title>Common YANG Data Types for the Routing Area</title>
          <author fullname="X. Liu" initials="X." surname="Liu"/>
          <author fullname="Y. Qu" initials="Y." surname="Qu"/>
          <author fullname="A. Lindem" initials="A." surname="Lindem"/>
          <author fullname="C. Hopps" initials="C." surname="Hopps"/>
          <author fullname="L. Berger" initials="L." surname="Berger"/>
          <date month="December" year="2017"/>
          <abstract>
            <t indent="0">This document defines a collection of common data types using the YANG data modeling language. These derived common types are designed to be imported by other modules defined in the routing area.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8294"/>
        <seriesInfo name="DOI" value="10.17487/RFC8294"/>
      </reference>
      <reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341" quoteTitle="true" derivedAnchor="RFC8341">
        <front>
          <title>Network Configuration Access Control Model</title>
          <author fullname="A. Bierman" initials="A." surname="Bierman"/>
          <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
          <date month="March" year="2018"/>
          <abstract>
            <t indent="0">The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability. There is a need for standard mechanisms to restrict NETCONF or RESTCONF protocol access for particular users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content. This document defines such an access control model.</t>
            <t indent="0">This document obsoletes RFC 6536.</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="91"/>
        <seriesInfo name="RFC" value="8341"/>
        <seriesInfo name="DOI" value="10.17487/RFC8341"/>
      </reference>
      <reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342" quoteTitle="true" derivedAnchor="RFC8342">
        <front>
          <title>Network Management Datastore Architecture (NMDA)</title>
          <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
          <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
          <author fullname="P. Shafer" initials="P." surname="Shafer"/>
          <author fullname="K. Watsen" initials="K." surname="Watsen"/>
          <author fullname="R. Wilton" initials="R." surname="Wilton"/>
          <date month="March" year="2018"/>
          <abstract>
            <t indent="0">Datastores are a fundamental concept binding the data models written in the YANG data modeling language to network management protocols such as the Network Configuration Protocol (NETCONF) and RESTCONF. This document defines an architectural framework for datastores based on the experience gained with the initial simpler model, addressing requirements that were not well supported in the initial model. This document updates RFC 7950.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8342"/>
        <seriesInfo name="DOI" value="10.17487/RFC8342"/>
      </reference>
      <reference anchor="RFC8368" target="https://www.rfc-editor.org/info/rfc8368" quoteTitle="true" derivedAnchor="RFC8368">
        <front>
          <title>Using an Autonomic Control Plane for Stable Connectivity of Network Operations, Administration, and Maintenance (OAM)</title>
          <author fullname="T. Eckert" initials="T." role="editor" surname="Eckert"/>
          <author fullname="M. Behringer" initials="M." surname="Behringer"/>
          <date month="May" year="2018"/>
          <abstract>
            <t indent="0">Operations, Administration, and Maintenance (OAM), as per BCP 161, for data networks is often subject to the problem of circular dependencies when relying on connectivity provided by the network to be managed for the OAM purposes.</t>
            <t indent="0">Provisioning while bringing up devices and networks tends to be more difficult to automate than service provisioning later on. Changes in core network functions impacting reachability cannot be automated because of ongoing connectivity requirements for the OAM equipment itself, and widely used OAM protocols are not secure enough to be carried across the network without security concerns.</t>
            <t indent="0">This document describes how to integrate OAM processes with an autonomic control plane in order to provide stable and secure connectivity for those OAM processes. This connectivity is not subject to the aforementioned circular dependencies.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8368"/>
        <seriesInfo name="DOI" value="10.17487/RFC8368"/>
      </reference>
      <reference anchor="RFC8639" target="https://www.rfc-editor.org/info/rfc8639" quoteTitle="true" derivedAnchor="RFC8639">
        <front>
          <title>Subscription to YANG Notifications</title>
          <author fullname="E. Voit" initials="E." surname="Voit"/>
          <author fullname="A. Clemm" initials="A." surname="Clemm"/>
          <author fullname="A. Gonzalez Prieto" initials="A." surname="Gonzalez Prieto"/>
          <author fullname="E. Nilsen-Nygaard" initials="E." surname="Nilsen-Nygaard"/>
          <author fullname="A. Tripathy" initials="A." surname="Tripathy"/>
          <date month="September" year="2019"/>
          <abstract>
            <t indent="0">This document defines a YANG data model and associated mechanisms enabling subscriber-specific subscriptions to a publisher's event streams. Applying these elements allows a subscriber to request and receive a continuous, customized feed of publisher-generated information.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8639"/>
        <seriesInfo name="DOI" value="10.17487/RFC8639"/>
      </reference>
      <reference anchor="RFC8641" target="https://www.rfc-editor.org/info/rfc8641" quoteTitle="true" derivedAnchor="RFC8641">
        <front>
          <title>Subscription to YANG Notifications for Datastore Updates</title>
          <author fullname="A. Clemm" initials="A." surname="Clemm"/>
          <author fullname="E. Voit" initials="E." surname="Voit"/>
          <date month="September" year="2019"/>
          <abstract>
            <t indent="0">This document describes a mechanism that allows subscriber applications to request a continuous and customized stream of updates from a YANG datastore. Providing such visibility into updates enables new capabilities based on the remote mirroring and monitoring of configuration and operational state.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8641"/>
        <seriesInfo name="DOI" value="10.17487/RFC8641"/>
      </reference>
      <reference anchor="RFC8990" target="https://www.rfc-editor.org/info/rfc8990" quoteTitle="true" derivedAnchor="RFC8990">
        <front>
          <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
          <author fullname="C. Bormann" initials="C." surname="Bormann"/>
          <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
          <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
          <date month="May" year="2021"/>
          <abstract>
            <t indent="0">This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8990"/>
        <seriesInfo name="DOI" value="10.17487/RFC8990"/>
      </reference>
      <reference anchor="RFC8993" target="https://www.rfc-editor.org/info/rfc8993" quoteTitle="true" derivedAnchor="RFC8993">
        <front>
          <title>A Reference Model for Autonomic Networking</title>
          <author fullname="M. Behringer" initials="M." role="editor" surname="Behringer"/>
          <author fullname="B. Carpenter" initials="B." surname="Carpenter"/>
          <author fullname="T. Eckert" initials="T." surname="Eckert"/>
          <author fullname="L. Ciavaglia" initials="L." surname="Ciavaglia"/>
          <author fullname="J. Nobre" initials="J." surname="Nobre"/>
          <date month="May" year="2021"/>
          <abstract>
            <t indent="0">This document describes a reference model for Autonomic Networking for managed networks. It defines the behavior of an autonomic node, how the various elements in an autonomic context work together, and how autonomic services can use the infrastructure.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="8993"/>
        <seriesInfo name="DOI" value="10.17487/RFC8993"/>
      </reference>
      <reference anchor="RFC9113" target="https://www.rfc-editor.org/info/rfc9113" quoteTitle="true" derivedAnchor="RFC9113">
        <front>
          <title>HTTP/2</title>
          <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
          <author fullname="C. Benfield" initials="C." role="editor" surname="Benfield"/>
          <date month="June" year="2022"/>
          <abstract>
            <t indent="0">This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2). HTTP/2 enables a more efficient use of network resources and a reduced latency by introducing field compression and allowing multiple concurrent exchanges on the same connection.</t>
            <t indent="0">This document obsoletes RFCs 7540 and 8740.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9113"/>
        <seriesInfo name="DOI" value="10.17487/RFC9113"/>
      </reference>
      <reference anchor="RFC9171" target="https://www.rfc-editor.org/info/rfc9171" quoteTitle="true" derivedAnchor="RFC9171">
        <front>
          <title>Bundle Protocol Version 7</title>
          <author fullname="S. Burleigh" initials="S." surname="Burleigh"/>
          <author fullname="K. Fall" initials="K." surname="Fall"/>
          <author fullname="E. Birrane, III" initials="E." surname="Birrane, III"/>
          <date month="January" year="2022"/>
          <abstract>
            <t indent="0">This document presents a specification for the Bundle Protocol, adapted from the experimental Bundle Protocol specification developed by the Delay-Tolerant Networking Research Group of the Internet Research Task Force and documented in RFC 5050.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9171"/>
        <seriesInfo name="DOI" value="10.17487/RFC9171"/>
      </reference>
      <reference anchor="RFC9172" target="https://www.rfc-editor.org/info/rfc9172" quoteTitle="true" derivedAnchor="RFC9172">
        <front>
          <title>Bundle Protocol Security (BPSec)</title>
          <author fullname="E. Birrane, III" initials="E." surname="Birrane, III"/>
          <author fullname="K. McKeever" initials="K." surname="McKeever"/>
          <date month="January" year="2022"/>
          <abstract>
            <t indent="0">This document defines a security protocol providing data integrity and confidentiality services for the Bundle Protocol (BP).</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9172"/>
        <seriesInfo name="DOI" value="10.17487/RFC9172"/>
      </reference>
      <reference anchor="RFC9254" target="https://www.rfc-editor.org/info/rfc9254" quoteTitle="true" derivedAnchor="RFC9254">
        <front>
          <title>Encoding of Data Modeled with YANG in the Concise Binary Object Representation (CBOR)</title>
          <author fullname="M. Veillette" initials="M." role="editor" surname="Veillette"/>
          <author fullname="I. Petrov" initials="I." role="editor" surname="Petrov"/>
          <author fullname="A. Pelov" initials="A." surname="Pelov"/>
          <author fullname="C. Bormann" initials="C." surname="Bormann"/>
          <author fullname="M. Richardson" initials="M." surname="Richardson"/>
          <date month="July" year="2022"/>
          <abstract>
            <t indent="0">YANG (RFC 7950) is a data modeling language used to model configuration data, state data, parameters and results of Remote Procedure Call (RPC) operations or actions, and notifications.</t>
            <t indent="0">This document defines encoding rules for YANG in the Concise Binary Object Representation (CBOR) (RFC 8949).</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9254"/>
        <seriesInfo name="DOI" value="10.17487/RFC9254"/>
      </reference>
      <reference anchor="RFC9595" target="https://www.rfc-editor.org/info/rfc9595" quoteTitle="true" derivedAnchor="RFC9595">
        <front>
          <title>YANG Schema Item iDentifier (YANG SID)</title>
          <author fullname="M. Veillette" initials="M." role="editor" surname="Veillette"/>
          <author fullname="A. Pelov" initials="A." role="editor" surname="Pelov"/>
          <author fullname="I. Petrov" initials="I." role="editor" surname="Petrov"/>
          <author fullname="C. Bormann" initials="C." surname="Bormann"/>
          <author fullname="M. Richardson" initials="M." surname="Richardson"/>
          <date month="July" year="2024"/>
          <abstract>
            <t indent="0">YANG Schema Item iDentifiers (YANG SIDs) are globally unique 63-bit unsigned integers used to identify YANG items. SIDs provide a more compact method for identifying those YANG items that can be used efficiently, notably in constrained environments (RFC 7228). This document defines the semantics, registration processes, and assignment processes for YANG SIDs for IETF-managed YANG modules. To enable the implementation of these processes, this document also defines a file format used to persist and publish assigned YANG SIDs.</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="9595"/>
        <seriesInfo name="DOI" value="10.17487/RFC9595"/>
      </reference>
      <reference anchor="xml-infoset" target="https://www.w3.org/TR/2004/REC-xml-infoset-20040204/" quoteTitle="true" derivedAnchor="xml-infoset">
        <front>
          <title>XML Information Set (Second Edition)</title>
          <author fullname="John Cowan" initials="J." surname="Cowan" role="editor">
            <organization showOnFrontPage="true"/>
          </author>
          <author fullname="Richard Tobin" initials="R." surname="Tobin" role="editor">
            <organization showOnFrontPage="true"/>
          </author>
          <date month="February" year="2004"/>
        </front>
        <refcontent>W3C Recommendation REC-xml-infoset-20040204</refcontent>
      </reference>
      <reference anchor="XPath" target="https://www.w3.org/TR/2017/REC-xpath-31-20170321/" quoteTitle="true" derivedAnchor="XPath">
        <front>
          <title>XML Path Language (XPath) 3.1</title>
          <author initials="J." surname="Robie" fullname="Jonathan Robie" role="editor">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="M." surname="Dyck" fullname="Michael Dyck" role="editor">
            <organization showOnFrontPage="true"/>
          </author>
          <author initials="J." surname="Spiegel" fullname="Josh Spiegel" role="editor">
            <organization showOnFrontPage="true"/>
          </author>
          <date month="March" year="2017"/>
        </front>
        <annotation>Latest version available at <eref target="https://www.w3.org/TR/xpath-31/" brackets="angle"/>.</annotation>
      </reference>
    </references>
    <section numbered="false" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.a-1">
        <contact fullname="Brian Sipos"/> of the Johns Hopkins University Applied Physics Laboratory 
        (JHU/APL) provided excellent technical review of the DTNMA concepts 
        presented in this document and additional information related to 
        existing network management techniques.
      </t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Edward J. Birrane, III" initials="E." surname="Birrane, III">
        <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
        <address>
          <email>Edward.Birrane@jhuapl.edu</email>
        </address>
      </author>
      <author fullname="Sarah Heiner" initials="S." surname="Heiner">
        <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
        <address>
          <email>Sarah.Heiner@jhuapl.edu</email>
        </address>
      </author>
      <author fullname="Emery Annis" initials="E." surname="Annis">
        <organization abbrev="JHU/APL" showOnFrontPage="true">The Johns Hopkins University Applied Physics Laboratory</organization>
        <address>
          <email>Emery.Annis@jhuapl.edu</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
