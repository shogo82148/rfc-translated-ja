<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" ipr="trust200902" docName="draft-ietf-uuidrev-rfc4122bis-14" number="9562" submissionType="IETF" category="std" consensus="true" obsoletes="4122" updates="" tocDepth="3" tocInclude="true" sortRefs="true" symRefs="true" xml:lang="en" prepTime="2024-05-07T11:39:12" indexInclude="true" scripts="Common,Latin">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-uuidrev-rfc4122bis-14" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9562" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="UUIDs">Universally Unique IDentifiers (UUIDs)</title>
    <seriesInfo name="RFC" value="9562" stream="IETF"/>
    <author initials="K." surname="Davis" fullname="Kyzer R. Davis">
      <organization showOnFrontPage="true">Cisco Systems</organization>
      <address>
        <email>kydavis@cisco.com</email>
      </address>
    </author>
    <author initials="B." surname="Peabody" fullname="Brad G. Peabody">
      <organization showOnFrontPage="true">Uncloud</organization>
      <address>
        <email>brad@peabody.io</email>
      </address>
    </author>
    <author initials="P." surname="Leach" fullname="Paul J. Leach">
      <organization showOnFrontPage="true">University of Washington</organization>
      <address>
        <email>pjl7@uw.edu</email>
      </address>
    </author>
    <date month="05" year="2024"/>
    <area>art</area>
    <workgroup>uuidrev</workgroup>
    <keyword>uuid</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This specification defines UUIDs (Universally Unique IDentifiers) --
      also known as GUIDs (Globally Unique IDentifiers) -- and a Uniform
      Resource Name namespace for UUIDs. A UUID is 128 bits long and is intended to
      guarantee uniqueness across space and time.  UUIDs were originally used
      in the Apollo Network Computing System (NCS), later in the Open Software
      Foundation's (OSF's) Distributed Computing Environment (DCE), and then
      in Microsoft Windows platforms.</t>
      <t indent="0" pn="section-abstract-2">This specification is derived from the OSF DCE specification with the
      kind permission of the OSF (now known as "The Open Group").  Information
      from earlier versions of the OSF DCE specification have been incorporated
      into this document. This document obsoletes RFC 4122.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9562" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2024 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-motivation">Motivation</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-update-motivation">Update Motivation</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">Terminology</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requirements-language">Requirements Language</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-abbreviations">Abbreviations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-format">UUID Format</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-variant-field">Variant Field</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-version-field">Version Field</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-layouts">UUID Layouts</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-1">UUID Version 1</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-2">UUID Version 2</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-3">UUID Version 3</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-4">UUID Version 4</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.5">
                <t indent="0" pn="section-toc.1-1.5.2.5.1"><xref derivedContent="5.5" format="counter" sectionFormat="of" target="section-5.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-5">UUID Version 5</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.6">
                <t indent="0" pn="section-toc.1-1.5.2.6.1"><xref derivedContent="5.6" format="counter" sectionFormat="of" target="section-5.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-6">UUID Version 6</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.7">
                <t indent="0" pn="section-toc.1-1.5.2.7.1"><xref derivedContent="5.7" format="counter" sectionFormat="of" target="section-5.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-7">UUID Version 7</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.8">
                <t indent="0" pn="section-toc.1-1.5.2.8.1"><xref derivedContent="5.8" format="counter" sectionFormat="of" target="section-5.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-version-8">UUID Version 8</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.9">
                <t indent="0" pn="section-toc.1-1.5.2.9.1"><xref derivedContent="5.9" format="counter" sectionFormat="of" target="section-5.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-nil-uuid">Nil UUID</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.10">
                <t indent="0" pn="section-toc.1-1.5.2.10.1"><xref derivedContent="5.10" format="counter" sectionFormat="of" target="section-5.10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-max-uuid">Max UUID</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-best-practices">UUID Best Practices</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-timestamp-considerations">Timestamp Considerations</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-monotonicity-and-counters">Monotonicity and Counters</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uuid-generator-states">UUID Generator States</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.4">
                <t indent="0" pn="section-toc.1-1.6.2.4.1"><xref derivedContent="6.4" format="counter" sectionFormat="of" target="section-6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-distributed-uuid-generation">Distributed UUID Generation</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.5">
                <t indent="0" pn="section-toc.1-1.6.2.5.1"><xref derivedContent="6.5" format="counter" sectionFormat="of" target="section-6.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-name-based-uuid-generation">Name-Based UUID Generation</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.6">
                <t indent="0" pn="section-toc.1-1.6.2.6.1"><xref derivedContent="6.6" format="counter" sectionFormat="of" target="section-6.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-namespace-id-usage-and-allo">Namespace ID Usage and Allocation</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.7">
                <t indent="0" pn="section-toc.1-1.6.2.7.1"><xref derivedContent="6.7" format="counter" sectionFormat="of" target="section-6.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-collision-resistance">Collision Resistance</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.8">
                <t indent="0" pn="section-toc.1-1.6.2.8.1"><xref derivedContent="6.8" format="counter" sectionFormat="of" target="section-6.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-global-and-local-uniqueness">Global and Local Uniqueness</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.9">
                <t indent="0" pn="section-toc.1-1.6.2.9.1"><xref derivedContent="6.9" format="counter" sectionFormat="of" target="section-6.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unguessability">Unguessability</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.10">
                <t indent="0" pn="section-toc.1-1.6.2.10.1"><xref derivedContent="6.10" format="counter" sectionFormat="of" target="section-6.10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-uuids-that-do-not-identify-">UUIDs That Do Not Identify the Host</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.11">
                <t indent="0" pn="section-toc.1-1.6.2.11.1"><xref derivedContent="6.11" format="counter" sectionFormat="of" target="section-6.11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-sorting">Sorting</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.12">
                <t indent="0" pn="section-toc.1-1.6.2.12.1"><xref derivedContent="6.12" format="counter" sectionFormat="of" target="section-6.12"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-opacity">Opacity</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.13">
                <t indent="0" pn="section-toc.1-1.6.2.13.1"><xref derivedContent="6.13" format="counter" sectionFormat="of" target="section-6.13"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-dbms-and-database-considera">DBMS and Database Considerations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-uuid-subtype-registry-">IANA UUID Subtype Registry and Registration</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-uuid-namespace-id-regi">IANA UUID Namespace ID Registry and Registration</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-test-vectors">Test Vectors</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-appendix.a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv1-value">Example of a UUIDv1 Value</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-appendix.a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv3-value">Example of a UUIDv3 Value</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.3">
                <t indent="0" pn="section-toc.1-1.10.2.3.1"><xref derivedContent="A.3" format="counter" sectionFormat="of" target="section-appendix.a.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv4-value">Example of a UUIDv4 Value</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.4">
                <t indent="0" pn="section-toc.1-1.10.2.4.1"><xref derivedContent="A.4" format="counter" sectionFormat="of" target="section-appendix.a.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv5-value">Example of a UUIDv5 Value</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.5">
                <t indent="0" pn="section-toc.1-1.10.2.5.1"><xref derivedContent="A.5" format="counter" sectionFormat="of" target="section-appendix.a.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv6-value">Example of a UUIDv6 Value</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.6">
                <t indent="0" pn="section-toc.1-1.10.2.6.1"><xref derivedContent="A.6" format="counter" sectionFormat="of" target="section-appendix.a.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv7-value">Example of a UUIDv7 Value</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-illustrative-examples">Illustrative Examples</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
              <li pn="section-toc.1-1.11.2.1">
                <t indent="0" pn="section-toc.1-1.11.2.1.1"><xref derivedContent="B.1" format="counter" sectionFormat="of" target="section-appendix.b.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv8-value-t">Example of a UUIDv8 Value (Time-Based)</xref></t>
              </li>
              <li pn="section-toc.1-1.11.2.2">
                <t indent="0" pn="section-toc.1-1.11.2.2.1"><xref derivedContent="B.2" format="counter" sectionFormat="of" target="section-appendix.b.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-of-a-uuidv8-value-n">Example of a UUIDv8 Value (Name-Based)</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.d"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="Background" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">This specification defines a Uniform Resource Name namespace for
   Universally Unique IDentifiers (UUIDs), also known as Globally
   Unique IDentifiers (GUIDs).  A UUID is 128 bits long and
      requires no central registration process.</t>
      <t indent="0" pn="section-1-2">The use of UUIDs is extremely pervasive in computing.  They comprise
      the core identifier infrastructure for many operating systems such as
      Microsoft Windows and applications such as the Mozilla Web browser;
      in many cases, they can become exposed in many non-standard ways.</t>
      <t indent="0" pn="section-1-3">This specification attempts to standardize that practice as openly as
      possible and in a way that attempts to benefit the entire Internet.  The information
      here is meant to be a concise guide for those wishing to implement
      services using UUIDs either in combination with URNs <xref target="RFC8141" format="default" sectionFormat="of" derivedContent="RFC8141"/> or otherwise.</t>
      <t indent="0" pn="section-1-4">There is an ITU-T Recommendation and an ISO/IEC Standard <xref target="X667" format="default" sectionFormat="of" derivedContent="X667"/> that are derived from <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>.  Both
      sets of specifications have been aligned and are fully technically
      compatible.  Nothing in this document should be construed to override
      the DCE standards that defined UUIDs.</t>
    </section>
    <section anchor="motivation" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-motivation">Motivation</name>
      <t indent="0" pn="section-2-1">One of the main reasons for using UUIDs is that no centralized
      authority is required to administer them (although two formats may
      leverage optional IEEE 802 Node IDs, others do not).  As a
      result, generation on demand can be completely automated and used for a
      variety of purposes.  The UUID generation algorithm described here
      supports very high allocation rates of 10 million per second per machine
      or more, if necessary, so that they could even be used as transaction
      IDs.</t>
      <t indent="0" pn="section-2-2">UUIDs are of a fixed size (128 bits), which is reasonably small
      compared to other alternatives.  This lends itself well to sorting,
      ordering, and hashing of all sorts; storing in databases; simple
      allocation; and ease of programming in general.</t>
      <t indent="0" pn="section-2-3">Since UUIDs are unique and persistent, they make excellent URNs. 
      The unique ability to generate a new UUID without a
      registration process allows for UUIDs to be one of the URNs with the
      lowest minting cost.</t>
      <section anchor="update-motivation" numbered="true" removeInRFC="false" toc="include" pn="section-2.1">
        <name slugifiedName="name-update-motivation">Update Motivation</name>
        <t indent="0" pn="section-2.1-1">Many things have changed in the time since UUIDs were originally
        created.  Modern applications have a need to create and utilize UUIDs
        as the primary identifier for a variety of different items in complex
        computational systems, including but not limited to database keys,
        file names, machine or system names, and identifiers for event-driven
        transactions.</t>
        <t indent="0" pn="section-2.1-2">One area in which UUIDs have gained popularity is database keys.
        This stems from the increasingly distributed nature of modern
        applications.  In such cases, "auto-increment" schemes that are often
        used by databases do not work well: the effort required to
        coordinate sequential numeric identifiers across a network can easily
        become a burden.  The fact that UUIDs can be used to create unique,
        reasonably short values in distributed systems without requiring
        coordination makes them a good alternative, but UUID versions 1-5,
        which were originally defined by <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, lack
        certain other desirable characteristics, such as:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-2.1-3">
	  <li pn="section-2.1-3.1" derivedCounter="1.">UUID versions that are not time ordered, such as UUIDv4 (described in
	  <xref target="uuidv4" format="default" sectionFormat="of" derivedContent="Section 5.4"/>), have poor database-index locality.  This
	  means that new values created in succession are not close to each
	  other in the index; thus, they require inserts to be performed at
	  random locations.  The resulting negative performance effects on the
	  common structures used for this (B-tree and its variants) can be
	  dramatic.</li>
          <li pn="section-2.1-3.2" derivedCounter="2.">The 100-nanosecond Gregorian Epoch used in UUIDv1 timestamps (described in
          <xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>) is uncommon and difficult to
          represent accurately using a standard number format such as that
          described in <xref target="IEEE754" format="default" sectionFormat="of" derivedContent="IEEE754"/>.</li>
          <li pn="section-2.1-3.3" derivedCounter="3.">Introspection/parsing is required to order by time sequence, as
          opposed to being able to perform a simple byte-by-byte comparison.
          </li>
          <li pn="section-2.1-3.4" derivedCounter="4.">Privacy and network security issues arise from using a Media Access Control (MAC)
          address in the node field of UUIDv1.  Exposed MAC addresses
          can be used as an attack surface to locate network interfaces and
          reveal various other information about such machines (minimally, the 
          manufacturer and, potentially, other details). Additionally, with the
          advent of virtual machines and containers, uniqueness of the MAC address is
          no longer guaranteed.</li>
          <li pn="section-2.1-3.5" derivedCounter="5.">Many of the implementation details specified in <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/> involved trade-offs that are neither possible to
          specify for all applications nor necessary to produce interoperable
          implementations.</li>
          <li pn="section-2.1-3.6" derivedCounter="6.">
            <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/> did not distinguish between the
          requirements for generating a UUID and those for simply storing one,
          although they are often different. </li>
        </ol>
        <t indent="0" pn="section-2.1-4">Due to the aforementioned issues, many widely distributed database
        applications and large application vendors have sought to solve the
        problem of creating a better time-based, sortable unique identifier
        for use as a database key. This has led to numerous implementations
        over the past 10+ years solving the same problem in slightly different
        ways.</t>
        <t indent="0" pn="section-2.1-5">While preparing this specification, the following 16 different
        implementations were analyzed for trends in total ID length, bit
        layout, lexical formatting and encoding, timestamp type, timestamp
        format, timestamp accuracy, node format and components, collision
        handling, and multi-timestamp tick generation sequencing:</t>
        <ol spacing="compact" type="1" indent="adaptive" start="1" pn="section-2.1-6">
	  <li pn="section-2.1-6.1" derivedCounter="1.">
            <xref target="ULID" format="default" sectionFormat="of" derivedContent="ULID"/></li>
          <li pn="section-2.1-6.2" derivedCounter="2.">
            <xref target="LexicalUUID" format="default" sectionFormat="of" derivedContent="LexicalUUID"/></li>
          <li pn="section-2.1-6.3" derivedCounter="3.">
            <xref target="Snowflake" format="default" sectionFormat="of" derivedContent="Snowflake"/></li>
          <li pn="section-2.1-6.4" derivedCounter="4.">
            <xref target="Flake" format="default" sectionFormat="of" derivedContent="Flake"/></li>
          <li pn="section-2.1-6.5" derivedCounter="5.">
            <xref target="ShardingID" format="default" sectionFormat="of" derivedContent="ShardingID"/></li>
          <li pn="section-2.1-6.6" derivedCounter="6.">
            <xref target="KSUID" format="default" sectionFormat="of" derivedContent="KSUID"/></li>
          <li pn="section-2.1-6.7" derivedCounter="7.">
            <xref target="Elasticflake" format="default" sectionFormat="of" derivedContent="Elasticflake"/></li>
          <li pn="section-2.1-6.8" derivedCounter="8.">
            <xref target="FlakeID" format="default" sectionFormat="of" derivedContent="FlakeID"/></li>
          <li pn="section-2.1-6.9" derivedCounter="9.">
            <xref target="Sonyflake" format="default" sectionFormat="of" derivedContent="Sonyflake"/></li>
          <li pn="section-2.1-6.10" derivedCounter="10.">
            <xref target="orderedUuid" format="default" sectionFormat="of" derivedContent="orderedUuid"/></li>
          <li pn="section-2.1-6.11" derivedCounter="11.">
            <xref target="COMBGUID" format="default" sectionFormat="of" derivedContent="COMBGUID"/></li>
          <li pn="section-2.1-6.12" derivedCounter="12.">
            <xref target="SID" format="default" sectionFormat="of" derivedContent="SID"/></li>
          <li pn="section-2.1-6.13" derivedCounter="13.">
            <xref target="pushID" format="default" sectionFormat="of" derivedContent="pushID"/></li>
          <li pn="section-2.1-6.14" derivedCounter="14.">
            <xref target="XID" format="default" sectionFormat="of" derivedContent="XID"/></li>
          <li pn="section-2.1-6.15" derivedCounter="15.">
            <xref target="ObjectID" format="default" sectionFormat="of" derivedContent="ObjectID"/></li>
          <li pn="section-2.1-6.16" derivedCounter="16.">
            <xref target="CUID" format="default" sectionFormat="of" derivedContent="CUID"/></li>
        </ol>
        <t indent="0" pn="section-2.1-7">An inspection of these implementations and the issues described
        above has led to this document, in which new UUIDs are adapted to
        address these issues.</t>
        <t indent="0" pn="section-2.1-8">Further, <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/> itself was in need of an overhaul to
        address a number of topics such as, but not limited to, the
        following:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-2.1-9">
	  <li pn="section-2.1-9.1" derivedCounter="1.">Implementation of miscellaneous errata reports. Mostly around
	  bit-layout clarifications, which lead to inconsistent
	  implementations <xref target="Err1957" format="default" sectionFormat="of" derivedContent="Err1957"/>, <xref target="Err3546" format="default" sectionFormat="of" derivedContent="Err3546"/>,
	  <xref target="Err4975" format="default" sectionFormat="of" derivedContent="Err4975"/>, <xref target="Err4976" format="default" sectionFormat="of" derivedContent="Err4976"/>, <xref target="Err5560" format="default" sectionFormat="of" derivedContent="Err5560"/>, etc.</li>
          <li pn="section-2.1-9.2" derivedCounter="2.">Decoupling other UUID versions from the UUIDv1 bit layout so that
          fields like "time_hi_and_version" do not need to be referenced
          within a UUID that is not time based while also providing
          definition sections similar to that for UUIDv1 for UUIDv3, UUIDv4, and UUIDv5.</li>
          <li pn="section-2.1-9.3" derivedCounter="3.">Providing implementation best practices around many real-world
          scenarios and corner cases observed by existing and prototype
          implementations.</li>
          <li pn="section-2.1-9.4" derivedCounter="4.">Addressing security best practices and
          considerations for the modern age as it pertains to MAC addresses,
          hashing algorithms, secure randomness, and other topics.</li>
          <li pn="section-2.1-9.5" derivedCounter="5.">Providing implementations a standard-based option for
          implementation-specific and/or experimental UUID designs.</li>
          <li pn="section-2.1-9.6" derivedCounter="6.">Providing more test vectors that illustrate real UUIDs created as
          per the specification.</li>
        </ol>
      </section>
    </section>
    <section anchor="terminology" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-terminology">Terminology</name>
      <section anchor="requirements_language" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-requirements-language">Requirements Language</name>
        <t indent="0" pn="section-3.1-1">The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
        "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
        "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
        "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document
        are to be interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they
        appear in all capitals, as shown here.</t>
      </section>
      <section anchor="acronyms" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-abbreviations">Abbreviations</name>
        <t indent="0" pn="section-3.2-1">The following abbreviations are used in this document:</t>
        <dl newline="false" spacing="normal" indent="14" pn="section-3.2-2">
          <dt pn="section-3.2-2.1">ABNF</dt>
          <dd pn="section-3.2-2.2">Augmented Backus-Naur Form</dd>
          <dt pn="section-3.2-2.3">CSPRNG</dt>
          <dd pn="section-3.2-2.4">Cryptographically Secure Pseudorandom Number Generator</dd>
          <dt pn="section-3.2-2.5">DBMS</dt>
          <dd pn="section-3.2-2.6">Database Management System</dd>
          <dt pn="section-3.2-2.7">IEEE</dt>
          <dd pn="section-3.2-2.8">Institute of Electrical and Electronics Engineers</dd>
          <dt pn="section-3.2-2.9">ITU</dt>
          <dd pn="section-3.2-2.10">International Telecommunication Union</dd>
          <dt pn="section-3.2-2.11">MAC</dt>
          <dd pn="section-3.2-2.12">Media Access Control</dd>
          <dt pn="section-3.2-2.13">MD5</dt>
          <dd pn="section-3.2-2.14">Message Digest 5</dd>
          <dt pn="section-3.2-2.15">MSB</dt>
          <dd pn="section-3.2-2.16">Most Significant Bit</dd>
          <dt pn="section-3.2-2.17">OID</dt>
          <dd pn="section-3.2-2.18">Object Identifier</dd>
          <dt pn="section-3.2-2.19">SHA</dt>
          <dd pn="section-3.2-2.20">Secure Hash Algorithm</dd>
          <dt pn="section-3.2-2.21">SHA-1</dt>
          <dd pn="section-3.2-2.22">Secure Hash Algorithm 1 (with message digest of 160 bits)</dd>
          <dt pn="section-3.2-2.23">SHA-3</dt>
          <dd pn="section-3.2-2.24">Secure Hash Algorithm 3 (arbitrary size)</dd>
          <dt pn="section-3.2-2.25">SHA-224</dt>
          <dd pn="section-3.2-2.26">Secure Hash Algorithm 2 with message digest size of 224 bits</dd>
          <dt pn="section-3.2-2.27">SHA-256</dt>
          <dd pn="section-3.2-2.28">Secure Hash Algorithm 2 with message digest size of 256 bits</dd>
          <dt pn="section-3.2-2.29">SHA-512</dt>
          <dd pn="section-3.2-2.30">Secure Hash Algorithm 2 with message digest size of 512 bits</dd>
          <dt pn="section-3.2-2.31">SHAKE</dt>
          <dd pn="section-3.2-2.32">Secure Hash Algorithm 3 based on the KECCAK algorithm</dd>
          <dt pn="section-3.2-2.33">URN</dt>
          <dd pn="section-3.2-2.34">Uniform Resource Names</dd>
          <dt pn="section-3.2-2.35">UTC</dt>
          <dd pn="section-3.2-2.36">Coordinated Universal Time</dd>
          <dt pn="section-3.2-2.37">UUID</dt>
          <dd pn="section-3.2-2.38">Universally Unique Identifier</dd>
          <dt pn="section-3.2-2.39">UUIDv1</dt>
          <dd pn="section-3.2-2.40">Universally Unique Identifier version 1</dd>
          <dt pn="section-3.2-2.41">UUIDv2</dt>
          <dd pn="section-3.2-2.42">Universally Unique Identifier version 2</dd>
          <dt pn="section-3.2-2.43">UUIDv3</dt>
          <dd pn="section-3.2-2.44">Universally Unique Identifier version 3</dd>
          <dt pn="section-3.2-2.45">UUIDv4</dt>
          <dd pn="section-3.2-2.46">Universally Unique Identifier version 4</dd>
          <dt pn="section-3.2-2.47">UUIDv5</dt>
          <dd pn="section-3.2-2.48">Universally Unique Identifier version 5</dd>
          <dt pn="section-3.2-2.49">UUIDv6</dt>
          <dd pn="section-3.2-2.50">Universally Unique Identifier version 6</dd>
          <dt pn="section-3.2-2.51">UUIDv7</dt>
          <dd pn="section-3.2-2.52">Universally Unique Identifier version 7</dd>
          <dt pn="section-3.2-2.53">UUIDv8</dt>
          <dd pn="section-3.2-2.54">Universally Unique Identifier version 8</dd>
        </dl>
      </section>
    </section>
    <section anchor="format" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-uuid-format">UUID Format</name>
      <t indent="0" pn="section-4-1">The UUID format is 16 octets (128 bits) in size; the variant bits in
      conjunction with the version bits described in the next sections
      determine finer structure. In terms of these UUID formats and layout, bit
      definitions start at 0 and end at 127, while octet definitions start at 0
      and end at 15.</t>
      <t indent="0" pn="section-4-2">In the absence of explicit application or presentation protocol
      specification to the contrary, each field is encoded with the most
      significant byte first (known as "network byte order").</t>
      <t indent="0" pn="section-4-3">Saving UUIDs to binary format is done by sequencing all fields in
      big-endian format.  However, there is a known caveat that Microsoft's
      Component Object Model (COM) GUIDs leverage little-endian when saving
      GUIDs.  The discussion of this (see <xref target="MS_COM_GUID" format="default" sectionFormat="of" derivedContent="MS_COM_GUID"/>) is outside
      the scope of this specification.</t>
      <t indent="0" pn="section-4-4">UUIDs <bcp14>MAY</bcp14> be represented as binary data or integers.
      When in use with URNs or as text in applications, any given UUID should
      be represented by the "hex-and-dash" string format consisting of
      multiple groups of uppercase or lowercase alphanumeric hexadecimal
      characters separated by single dashes/hyphens.  When used with databases,
      please refer to <xref target="database_considerations" format="default" sectionFormat="of" derivedContent="Section 6.13"/>.</t>
      <t indent="0" pn="section-4-5">The formal definition of the UUID string representation is provided by the following ABNF <xref target="RFC5234" format="default" sectionFormat="of" derivedContent="RFC5234"/>:</t>
      <sourcecode type="abnf" markers="false" pn="section-4-6">
UUID     = 4hexOctet "-"
           2hexOctet "-"
           2hexOctet "-"
           2hexOctet "-"
           6hexOctet
hexOctet = HEXDIG HEXDIG
DIGIT    = %x30-39
HEXDIG   = DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
</sourcecode>
      <t indent="0" pn="section-4-7">Note that the alphabetic characters may be all uppercase, all lowercase, or mixed case, as per <xref section="2.3" sectionFormat="of" target="RFC5234" format="default" derivedLink="https://rfc-editor.org/rfc/rfc5234#section-2.3" derivedContent="RFC5234"/>.
An example UUID using this textual representation from the above ABNF is shown in <xref target="sampleStringUUID" format="default" sectionFormat="of" derivedContent="Figure 1"/>.</t>
      <figure anchor="sampleStringUUID" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-example-string-uuid-format">Example String UUID Format</name>
        <artwork align="left" pn="section-4-8.1">
f81d4fae-7dec-11d0-a765-00a0c91e6bf6
</artwork>
      </figure>
      <t indent="0" pn="section-4-9">The same UUID from <xref target="sampleStringUUID" format="default" sectionFormat="of" derivedContent="Figure 1"/> is represented in binary (<xref target="sampleBinaryUUID" format="default" sectionFormat="of" derivedContent="Figure 2"/>), as an unsigned integer (<xref target="sampleIntegerUUID" format="default" sectionFormat="of" derivedContent="Figure 3"/>), and as a URN (<xref target="sampleURNUUID" format="default" sectionFormat="of" derivedContent="Figure 4"/>) defined by <xref target="RFC8141" format="default" sectionFormat="of" derivedContent="RFC8141"/>.</t>
      <figure anchor="sampleBinaryUUID" align="left" suppress-title="false" pn="figure-2">
        <name slugifiedName="name-example-binary-uuid">Example Binary UUID</name>
        <artwork align="left" pn="section-4-10.1">
111110000001110101001111101011100111110111101100000100011101000\
01010011101100101000000001010000011001001000111100110101111110110
</artwork>
      </figure>
      <figure anchor="sampleIntegerUUID" align="left" suppress-title="false" pn="figure-3">
        <name slugifiedName="name-example-unsigned-integer-uu">Example Unsigned Integer UUID (Shown as a Decimal Number)</name>
        <artwork align="left" pn="section-4-11.1">
329800735698586629295641978511506172918
</artwork>
      </figure>
      <figure anchor="sampleURNUUID" align="left" suppress-title="false" pn="figure-4">
        <name slugifiedName="name-example-urn-namespace-for-u">Example URN Namespace for UUID</name>
        <artwork align="left" pn="section-4-12.1">
urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6
</artwork>
      </figure>
      <t indent="0" pn="section-4-13">There are many other ways to define a UUID format; some examples are detailed below.
Please note that this is not an exhaustive list and is only provided for informational purposes.</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4-14">
        <li pn="section-4-14.1">Some UUID implementations, such as those found in <xref target="Python" format="default" sectionFormat="of" derivedContent="Python"/> and <xref target="Microsoft" format="default" sectionFormat="of" derivedContent="Microsoft"/>, will output UUID
        with the string format, including dashes, enclosed in curly braces.
        </li>
        <li pn="section-4-14.2">
          <xref target="X667" format="default" sectionFormat="of" derivedContent="X667"/> provides UUID format definitions for use of
        UUID with an OID.</li>
        <li pn="section-4-14.3">
          <xref target="IBM_NCS" format="default" sectionFormat="of" derivedContent="IBM_NCS"/> is a legacy implementation that produces a
        unique UUID format compatible with Variant 0xx of <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/>.</li>
      </ul>
      <section anchor="variant_field" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-variant-field">Variant Field</name>
        <t indent="0" pn="section-4.1-1">The variant field determines the layout of the UUID.  That is, the
        interpretation of all other bits in the UUID depends on the setting of
        the bits in the variant field.  As such, it could more accurately be
        called a "type" field; we retain the original term for compatibility.
        The variant field consists of a variable number of the most
        significant bits of octet 8 of the UUID.</t>
        <t indent="0" pn="section-4.1-2"><xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/> lists the contents of the variant field,
        where the letter "x" indicates a "don't-care" value.</t>
        <table anchor="table1" align="center" pn="table-1">
          <name slugifiedName="name-uuid-variants">UUID Variants</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">MSB0</th>
              <th align="left" colspan="1" rowspan="1">MSB1</th>
              <th align="left" colspan="1" rowspan="1">MSB2</th>
              <th align="left" colspan="1" rowspan="1">MSB3</th>
              <th align="left" colspan="1" rowspan="1">Variant</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">1-7</td>
              <td align="left" colspan="1" rowspan="1">Reserved. Network Computing System (NCS) backward compatibility, and
              includes Nil UUID as per <xref target="niluuid" format="default" sectionFormat="of" derivedContent="Section 5.9"/>.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">8-9,A-B</td>
              <td align="left" colspan="1" rowspan="1">The variant specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">C-D</td>
              <td align="left" colspan="1" rowspan="1">Reserved. Microsoft Corporation backward compatibility.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">x</td>
              <td align="left" colspan="1" rowspan="1">E-F</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition and includes Max UUID as per <xref target="maxuuid" format="default" sectionFormat="of" derivedContent="Section 5.10"/>.</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-4.1-4">Interoperability, in any form, with variants other than the one
defined here is not guaranteed but is not likely to be an issue in
practice.</t>
        <t indent="0" pn="section-4.1-5">Specifically for UUIDs in this document, bits 64 and 65 of the UUID (bits 0 and 1 of octet 8) <bcp14>MUST</bcp14> be set to 1 and 0 as specified in row 2 of <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/>.
Accordingly, all bit and field layouts avoid the use of these bits.</t>
      </section>
      <section anchor="version_field" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-version-field">Version Field</name>
        <t indent="0" pn="section-4.2-1">The version number is in the most significant 4 bits of octet 6
(bits 48 through 51 of the UUID).</t>
        <t indent="0" pn="section-4.2-2"><xref target="table2" format="default" sectionFormat="of" derivedContent="Table 2"/> lists all of the versions for this UUID variant 10xx specified in this document.</t>
        <table anchor="table2" align="center" pn="table-2">
          <name slugifiedName="name-uuid-variant-10xx-versions-">UUID Variant 10xx Versions Defined by This Specification</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">MSB0</th>
              <th align="left" colspan="1" rowspan="1">MSB1</th>
              <th align="left" colspan="1" rowspan="1">MSB2</th>
              <th align="left" colspan="1" rowspan="1">MSB3</th>
              <th align="left" colspan="1" rowspan="1">Version</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">Unused.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">The Gregorian time-based UUID specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">2</td>
              <td align="left" colspan="1" rowspan="1">Reserved for DCE Security version, with embedded POSIX UUIDs.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">3</td>
              <td align="left" colspan="1" rowspan="1">The name-based version specified in this document that uses MD5 hashing.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">4</td>
              <td align="left" colspan="1" rowspan="1">The randomly or pseudorandomly generated version specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">5</td>
              <td align="left" colspan="1" rowspan="1">The name-based version specified in this document that uses SHA-1 hashing.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">6</td>
              <td align="left" colspan="1" rowspan="1">Reordered Gregorian time-based UUID specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">7</td>
              <td align="left" colspan="1" rowspan="1">Unix Epoch time-based UUID specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">8</td>
              <td align="left" colspan="1" rowspan="1">Reserved for custom UUID formats specified in this document.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">9</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">10</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">11</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">12</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">13</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">14</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">15</td>
              <td align="left" colspan="1" rowspan="1">Reserved for future definition.</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-4.2-4">An example version/variant layout for UUIDv4 follows the table
        where "M" represents the version placement for the hexadecimal
        representation of 0x4 (0b0100) and the "N" represents the variant
        placement for one of the four possible hexadecimal representation of
        variant 10xx: 0x8 (0b1000), 0x9 (0b1001), 0xA (0b1010), 0xB
        (0b1011).</t>
        <figure align="left" suppress-title="false" pn="figure-5">
          <name slugifiedName="name-uuidv4-variant-examples">UUIDv4 Variant Examples</name>
          <artwork align="left" pn="section-4.2-5.1">
00000000-0000-4000-8000-000000000000
00000000-0000-4000-9000-000000000000
00000000-0000-4000-A000-000000000000
00000000-0000-4000-B000-000000000000
xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx
</artwork>
        </figure>
        <t indent="0" pn="section-4.2-6">It should be noted that the other remaining UUID variants found in <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/> leverage different sub-typing or versioning mechanisms.
The recording and definition of the remaining UUID variant and sub-typing combinations are outside of the scope of this document.</t>
      </section>
    </section>
    <section anchor="layout" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-uuid-layouts">UUID Layouts</name>
      <t indent="0" pn="section-5-1">To minimize confusion about bit assignments within octets and among
      differing versions, the UUID record definition is provided as a grouping
      of fields within a bit layout consisting of four octets per row.  The
      fields are presented with the most significant one first.</t>
      <section anchor="uuidv1" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-uuid-version-1">UUID Version 1</name>
        <t indent="0" pn="section-5.1-1">UUIDv1 is a time-based UUID featuring a 60-bit timestamp
        represented by Coordinated Universal Time (UTC) as a count of
        100-nanosecond intervals since 00:00:00.00, 15 October 1582 (the date
        of Gregorian reform to the Christian calendar).</t>
        <t indent="0" pn="section-5.1-2">UUIDv1 also features a clock sequence field that is used to help
        avoid duplicates that could arise when the clock is set backwards in
        time or if the Node ID changes.</t>
        <t indent="0" pn="section-5.1-3">The node field consists of an IEEE 802 MAC address, usually the
        host address or a randomly derived value per Sections <xref target="unguessability" format="counter" sectionFormat="of" derivedContent="6.9"/> and <xref target="unidentifiable" format="counter" sectionFormat="of" derivedContent="6.10"/>.</t>
        <figure align="left" suppress-title="false" pn="figure-6">
          <name slugifiedName="name-uuidv1-field-and-bit-layout">UUIDv1 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.1-4.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           time_low                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           time_mid            |  ver  |       time_high       |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|         clock_seq         |             node              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              node                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.1-5">
          <dt pn="section-5.1-5.1">time_low:</dt>
          <dd pn="section-5.1-5.2">The least significant 32 bits of the 60-bit starting
          timestamp.  Occupies bits 0 through 31 (octets 0-3).</dd>
          <dt pn="section-5.1-5.3">time_mid:</dt>
          <dd pn="section-5.1-5.4">The middle 16 bits of the 60-bit starting timestamp.  Occupies
          bits 32 through 47 (octets 4-5).</dd>
          <dt pn="section-5.1-5.5">ver:</dt>
          <dd pn="section-5.1-5.6">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0001 (1).  Occupies bits 48
          through 51 of octet 6. </dd>
          <dt pn="section-5.1-5.7">time_high:</dt>
          <dd pn="section-5.1-5.8">The least significant 12 bits from the 60-bit starting
          timestamp.  Occupies bits 52 through 63 (octets 6-7).</dd>
          <dt pn="section-5.1-5.9">var:</dt>
          <dd pn="section-5.1-5.10">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.1-5.11">clock_seq:</dt>
          <dd pn="section-5.1-5.12">The 14 bits containing the clock sequence.  Occupies bits 66
          through 79 (octets 8-9).  </dd>
          <dt pn="section-5.1-5.13">node:</dt>
          <dd pn="section-5.1-5.14">48-bit spatially unique identifier.  Occupies bits 80 through
          127 (octets 10-15).</dd>
        </dl>
        <t indent="0" pn="section-5.1-6">For systems that do not have UTC available but do have the local
        time, they may use that instead of UTC as long as they do so
        consistently throughout the system.  However, this is not recommended
        since generating the UTC from local time only needs a time-zone
        offset.</t>
        <t indent="0" pn="section-5.1-7">If the clock is set backwards, or if it might have been set
        backwards (e.g., while the system was powered off), and the UUID
        generator cannot be sure that no UUIDs were generated with timestamps
        larger than the value to which the clock was set, then the clock
        sequence <bcp14>MUST</bcp14> be changed.  If the previous value of the
        clock sequence is known, it <bcp14>MAY</bcp14> be incremented;
        otherwise it <bcp14>SHOULD</bcp14> be set to a random or high-quality
        pseudorandom value.</t>
        <t indent="0" pn="section-5.1-8">Similarly, if the Node ID changes (e.g., because a network card has
been moved between machines), setting the clock sequence to a random
number minimizes the probability of a duplicate due to slight
differences in the clock settings of the machines.  If the value of
the clock sequence associated with the changed Node ID were known, then
the clock sequence <bcp14>MAY</bcp14> be incremented, but that is unlikely.</t>
        <t indent="0" pn="section-5.1-9">The clock sequence <bcp14>MUST</bcp14> be originally (i.e., once in the lifetime of
a system) initialized to a random number to minimize the correlation
across systems.  This provides maximum protection against Node
IDs that may move or switch from system to system rapidly.
The initial value <bcp14>MUST NOT</bcp14> be correlated to the Node ID.</t>
        <t indent="0" pn="section-5.1-10">Notes about nodes derived from IEEE 802:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.1-11">
          <li pn="section-5.1-11.1">On systems with multiple IEEE 802 addresses, any available one
          <bcp14>MAY</bcp14> be used.</li>
          <li pn="section-5.1-11.2">On systems with no IEEE address, a randomly or pseudorandomly
          generated value <bcp14>MUST</bcp14> be used; see Sections <xref target="unguessability" format="counter" sectionFormat="of" derivedContent="6.9"/> and <xref target="unidentifiable" format="counter" sectionFormat="of" derivedContent="6.10"/>.
          </li>
          <li pn="section-5.1-11.3">On systems utilizing a 64-bit MAC address, the least significant,
          rightmost 48 bits <bcp14>MAY</bcp14> be used.</li>
          <li pn="section-5.1-11.4">Systems utilizing an IEEE 802.15.4 16-bit address
          <bcp14>SHOULD</bcp14> instead utilize their 64-bit MAC address where
          the least significant, rightmost 48 bits <bcp14>MAY</bcp14> be used. An
          alternative is to generate 32 bits of random data and postfix at the
          end of the 16-bit MAC address to create a 48-bit value.</li>
        </ul>
      </section>
      <section anchor="uuidv2" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-uuid-version-2">UUID Version 2</name>
        <t indent="0" pn="section-5.2-1">UUIDv2 is for DCE Security UUIDs (see <xref target="C309" format="default" sectionFormat="of" derivedContent="C309"/> and
        <xref target="C311" format="default" sectionFormat="of" derivedContent="C311"/>).  As such, the definition of these UUIDs is
        outside the scope of this specification.</t>
      </section>
      <section anchor="uuidv3" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-uuid-version-3">UUID Version 3</name>
        <t indent="0" pn="section-5.3-1">UUIDv3 is meant for generating UUIDs from names that are
        drawn from, and unique within, some namespace as per <xref target="name_based_uuid_generation" format="default" sectionFormat="of" derivedContent="Section 6.5"/>.</t>
        <t indent="0" pn="section-5.3-2">UUIDv3 values are created by computing an MD5 hash <xref target="RFC1321" format="default" sectionFormat="of" derivedContent="RFC1321"/> over a given Namespace ID value (<xref target="namespaces" format="default" sectionFormat="of" derivedContent="Section 6.6"/>) concatenated with the desired name value after
        both have been converted to a canonical sequence of octets, as defined
        by the standards or conventions of its namespace, in network byte
        order.  This MD5 value is then used to populate all 128 bits of the
        UUID layout.  The UUID version and variant then replace the respective
        bits as defined by Sections <xref target="version_field" format="counter" sectionFormat="of" derivedContent="4.2"/> and  <xref target="variant_field" format="counter" sectionFormat="of" derivedContent="4.1"/>. An example of this bit substitution can be found
        in <xref target="uuidv3_example" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>.</t>
        <t indent="0" pn="section-5.3-3">Information around selecting a desired name's canonical format
        within a given namespace can be found in <xref target="name_based_uuid_generation" format="default" sectionFormat="of" derivedContent="Section 6.5"/> under the heading "A note on names".</t>
        <t indent="0" pn="section-5.3-4">Where possible, UUIDv5 <bcp14>SHOULD</bcp14> be used in lieu of
        UUIDv3.  For more information on MD5 security considerations, see <xref target="RFC6151" format="default" sectionFormat="of" derivedContent="RFC6151"/>.</t>
        <figure align="left" suppress-title="false" pn="figure-7">
          <name slugifiedName="name-uuidv3-field-and-bit-layout">UUIDv3 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.3-5.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            md5_high                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          md5_high             |  ver  |       md5_mid         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|                        md5_low                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            md5_low                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.3-6">
          <dt pn="section-5.3-6.1">md5_high:</dt>
          <dd pn="section-5.3-6.2">The first 48 bits of the layout are filled with the most
          significant, leftmost 48 bits from the computed MD5 value. Occupies
          bits 0 through 47 (octets 0-5).</dd>
          <dt pn="section-5.3-6.3">ver:</dt>
          <dd pn="section-5.3-6.4">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0011 (3).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.3-6.5">md5_mid:</dt>
          <dd pn="section-5.3-6.6">12 more bits of the layout consisting of the least significant,
          rightmost 12 bits of 16 bits immediately following md5_high from
          the computed MD5 value.  Occupies bits 52 through 63 (octets 6-7).
          </dd>
          <dt pn="section-5.3-6.7">var:</dt>
          <dd pn="section-5.3-6.8">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.3-6.9">md5_low:</dt>
          <dd pn="section-5.3-6.10">The final 62 bits of the layout immediately following the var
          field to be filled with the least significant, rightmost bits of
          the final 64 bits from the computed MD5 value. Occupies bits 66
          through 127 (octets 8-15)</dd>
        </dl>
      </section>
      <section anchor="uuidv4" numbered="true" removeInRFC="false" toc="include" pn="section-5.4">
        <name slugifiedName="name-uuid-version-4">UUID Version 4</name>
        <t indent="0" pn="section-5.4-1">UUIDv4 is meant for generating UUIDs from truly random or
        pseudorandom numbers.</t>
        <t indent="0" pn="section-5.4-2">An implementation may generate 128 bits of random data that is used
        to fill out the UUID fields in <xref target="uuidv4fields" format="default" sectionFormat="of" derivedContent="Figure 8"/>. The UUID
        version and variant then replace the respective bits as defined by
        Sections  <xref target="variant_field" format="counter" sectionFormat="of" derivedContent="4.1"/> and <xref target="version_field" format="counter" sectionFormat="of" derivedContent="4.2"/>.</t>
        <t indent="0" pn="section-5.4-3">Alternatively, an implementation <bcp14>MAY</bcp14> choose to
        randomly generate the exact required number of bits for random_a,
        random_b, and random_c (122 bits total) and then concatenate the
        version and variant in the required position.</t>
        <t indent="0" pn="section-5.4-4">For guidelines on random data generation, see <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/>.</t>
        <figure anchor="uuidv4fields" align="left" suppress-title="false" pn="figure-8">
          <name slugifiedName="name-uuidv4-field-and-bit-layout">UUIDv4 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.4-5.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           random_a                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          random_a             |  ver  |       random_b        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|                       random_c                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           random_c                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.4-6">
          <dt pn="section-5.4-6.1">random_a:</dt>
          <dd pn="section-5.4-6.2">The first 48 bits of the layout that can be filled with random
          data as specified in <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/>. Occupies bits
          0 through 47 (octets 0-5).</dd>
          <dt pn="section-5.4-6.3">ver:</dt>
          <dd pn="section-5.4-6.4">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0100 (4).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.4-6.5">random_b:</dt>
          <dd pn="section-5.4-6.6">12 more bits of the layout that can be filled random data as per
          <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/>. Occupies bits 52 through 63 (octets
          6-7).</dd>
          <dt pn="section-5.4-6.7">var:</dt>
          <dd pn="section-5.4-6.8">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.4-6.9">random_c:</dt>
          <dd pn="section-5.4-6.10">The final 62 bits of the layout immediately following the var
          field to be filled with random data as per <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/>. Occupies bits 66 through 127 (octets
          8-15).</dd>
        </dl>
      </section>
      <section anchor="uuidv5" numbered="true" removeInRFC="false" toc="include" pn="section-5.5">
        <name slugifiedName="name-uuid-version-5">UUID Version 5</name>
        <t indent="0" pn="section-5.5-1">UUIDv5 is meant for generating UUIDs from "names" that are
        drawn from, and unique within, some "namespace" as per <xref target="name_based_uuid_generation" format="default" sectionFormat="of" derivedContent="Section 6.5"/>.</t>
        <t indent="0" pn="section-5.5-2">UUIDv5 values are created by computing an SHA-1 hash <xref target="FIPS180-4" format="default" sectionFormat="of" derivedContent="FIPS180-4"/> over a given Namespace ID value (<xref target="namespaces" format="default" sectionFormat="of" derivedContent="Section 6.6"/>) concatenated with the desired name value after
        both have been converted to a canonical sequence of octets, as defined
        by the standards or conventions of its namespace, in network byte
        order.  The most significant, leftmost 128 bits of the SHA-1 value
        are then used to populate all 128 bits of the UUID layout, and the
        remaining 32 least significant, rightmost bits of SHA-1 output are
        discarded.  The UUID version and variant then replace the respective
        bits as defined by Sections <xref target="version_field" format="counter" sectionFormat="of" derivedContent="4.2"/> and <xref target="variant_field" format="counter" sectionFormat="of" derivedContent="4.1"/>. An example of this bit substitution and discarding
        excess bits can be found in <xref target="uuidv5_example" format="default" sectionFormat="of" derivedContent="Appendix A.4"/>.</t>
        <t indent="0" pn="section-5.5-3">Information around selecting a desired name's canonical format
        within a given namespace can be found in <xref target="name_based_uuid_generation" format="default" sectionFormat="of" derivedContent="Section 6.5"/> under the heading "A note on names".</t>
        <t indent="0" pn="section-5.5-4">There may be scenarios, usually depending on organizational
        security policies, where SHA-1 libraries may not be available or may
        be deemed unsafe for use.  As such, it may be desirable to generate
        name-based UUIDs derived from SHA-256 or newer SHA methods. These
        name-based UUIDs <bcp14>MUST NOT</bcp14> utilize UUIDv5 and
        <bcp14>MUST</bcp14> be within the UUIDv8 space defined by <xref target="uuidv8" format="default" sectionFormat="of" derivedContent="Section 5.8"/>.  An illustrative example of UUIDv8 for SHA-256
        name-based UUIDs is provided in <xref target="uuidv8_example_name" format="default" sectionFormat="of" derivedContent="Appendix B.2"/>.</t>
        <t indent="0" pn="section-5.5-5">For more information on SHA-1 security considerations, see <xref target="RFC6194" format="default" sectionFormat="of" derivedContent="RFC6194"/>.</t>
        <figure align="left" suppress-title="false" pn="figure-9">
          <name slugifiedName="name-uuidv5-field-and-bit-layout">UUIDv5 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.5-6.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           sha1_high                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|         sha1_high             |  ver  |      sha1_mid         |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|                       sha1_low                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           sha1_low                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.5-7">
          <dt pn="section-5.5-7.1">sha1_high:</dt>
          <dd pn="section-5.5-7.2">The first 48 bits of the layout are filled with the most
          significant, leftmost 48 bits from the computed SHA-1 value.
          Occupies bits 0 through 47 (octets 0-5).  </dd>
          <dt pn="section-5.5-7.3">ver:</dt>
          <dd pn="section-5.5-7.4">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0101 (5).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.5-7.5">sha1_mid:</dt>
          <dd pn="section-5.5-7.6">12 more bits of the layout consisting of the least significant,
          rightmost 12 bits of 16 bits immediately following sha1_high from
          the computed SHA-1 value.  Occupies bits 52 through 63 (octets 6-7).
          </dd>
          <dt pn="section-5.5-7.7">var:</dt>
          <dd pn="section-5.5-7.8">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.5-7.9">sha1_low:</dt>
          <dd pn="section-5.5-7.10">The final 62 bits of the layout immediately following the var
          field to be filled by skipping the two most significant, leftmost
          bits of the remaining SHA-1 hash and then using the next 62 most
          significant, leftmost bits.  Any leftover SHA-1 bits are discarded
          and unused. Occupies bits 66 through 127 (octets 8-15).</dd>
        </dl>
      </section>
      <section anchor="uuidv6" numbered="true" removeInRFC="false" toc="include" pn="section-5.6">
        <name slugifiedName="name-uuid-version-6">UUID Version 6</name>
        <t indent="0" pn="section-5.6-1">UUIDv6 is a field-compatible version of UUIDv1 (<xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>), reordered for improved DB locality.  It is expected
        that UUIDv6 will primarily be implemented in contexts where UUIDv1 is used.
        Systems that do not involve legacy UUIDv1 <bcp14>SHOULD</bcp14> use
        UUIDv7 (<xref target="uuidv7" format="default" sectionFormat="of" derivedContent="Section 5.7"/>) instead.</t>
        <t indent="0" pn="section-5.6-2">Instead of splitting the timestamp into the low, mid, and high
        sections from UUIDv1, UUIDv6 changes this sequence so timestamp bytes
        are stored from most to least significant.  That is, given a 60-bit
        timestamp value as specified for UUIDv1 in <xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>,
        for UUIDv6 the first 48 most significant bits are stored first,
        followed by the 4-bit version (same position), followed by the
        remaining 12 bits of the original 60-bit timestamp.</t>
        <t indent="0" pn="section-5.6-3">The clock sequence and node bits remain unchanged from their
        position in <xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>.</t>
        <t indent="0" pn="section-5.6-4">The clock sequence and node bits <bcp14>SHOULD</bcp14> be reset to
        a pseudorandom value for each new UUIDv6 generated; however,
        implementations <bcp14>MAY</bcp14> choose to retain the old clock
        sequence and MAC address behavior from <xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>. For
        more information on MAC address usage within UUIDs, see the <xref target="Security" format="default" sectionFormat="of" derivedContent="Section 8"/>.</t>
        <t indent="0" pn="section-5.6-5">The format for the 16-byte, 128-bit UUIDv6 is shown in <xref target="v6layout" format="default" sectionFormat="of" derivedContent="Figure 10"/>.</t>
        <figure anchor="v6layout" align="left" suppress-title="false" pn="figure-10">
          <name slugifiedName="name-uuidv6-field-and-bit-layout">UUIDv6 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.6-6.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           time_high                           |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           time_mid            |  ver  |       time_low        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|         clock_seq         |             node              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                              node                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.6-7">
          <dt pn="section-5.6-7.1">time_high:</dt>
          <dd pn="section-5.6-7.2">The most significant 32 bits of the 60-bit starting timestamp.
          Occupies bits 0 through 31 (octets 0-3).</dd>
          <dt pn="section-5.6-7.3">time_mid:</dt>
          <dd pn="section-5.6-7.4">The middle 16 bits of the 60-bit starting timestamp.  Occupies
          bits 32 through 47 (octets 4-5).</dd>
          <dt pn="section-5.6-7.5">ver:</dt>
          <dd pn="section-5.6-7.6">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0110 (6).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.6-7.7">time_low:</dt>
          <dd pn="section-5.6-7.8">12 bits that will contain the least significant 12 bits from the
          60-bit starting timestamp.  Occupies bits 52 through 63 (octets
          6-7).</dd>
          <dt pn="section-5.6-7.9">var:</dt>
          <dd pn="section-5.6-7.10">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.6-7.11">clock_seq:</dt>
          <dd pn="section-5.6-7.12">The 14 bits containing the clock sequence.  Occupies bits 66
          through 79 (octets 8-9).</dd>
          <dt pn="section-5.6-7.13">node:</dt>
          <dd pn="section-5.6-7.14">48-bit spatially unique identifier.  Occupies bits 80 through
          127 (octets 10-15).</dd>
        </dl>
        <t indent="0" pn="section-5.6-8">With UUIDv6, the steps for splitting the timestamp into time_high and time_mid
are <bcp14>OPTIONAL</bcp14>
since the 48 bits of time_high and time_mid will remain in the same order.
An extra step of splitting the first 48 bits of the timestamp into the most
significant
32 bits and least significant 16 bits proves useful when reusing an existing
UUIDv1 implementation.</t>
      </section>
      <section anchor="uuidv7" numbered="true" removeInRFC="false" toc="include" pn="section-5.7">
        <name slugifiedName="name-uuid-version-7">UUID Version 7</name>
        <t indent="0" pn="section-5.7-1">UUIDv7 features a time-ordered value field derived from the widely
implemented and well-known Unix Epoch timestamp source, the number of milliseconds
since midnight 1 Jan 1970 UTC, leap seconds excluded.
Generally, UUIDv7 has improved entropy characteristics over UUIDv1 (<xref target="uuidv1" format="default" sectionFormat="of" derivedContent="Section 5.1"/>) or UUIDv6 (<xref target="uuidv6" format="default" sectionFormat="of" derivedContent="Section 5.6"/>).</t>
        <t indent="0" pn="section-5.7-2">UUIDv7 values are created by allocating a Unix timestamp in milliseconds in the most significant 48 bits and filling the remaining 74 bits, excluding the required version and variant bits, with random bits for each new UUIDv7 generated to provide uniqueness as per <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/>. Alternatively, implementations <bcp14>MAY</bcp14> fill the 74 bits, jointly, with a combination of the following subfields, in this order from the most significant bits to the least, to guarantee additional monotonicity within a millisecond:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.7-3">
	  <li pn="section-5.7-3.1" derivedCounter="1.">An <bcp14>OPTIONAL</bcp14> sub-millisecond timestamp fraction
	  (12 bits at maximum) as per <xref target="monotonicity_counters" format="default" sectionFormat="of" derivedContent="Section 6.2"/>
	  (Method 3).</li>
          <li pn="section-5.7-3.2" derivedCounter="2.">An <bcp14>OPTIONAL</bcp14> carefully seeded counter as per <xref target="monotonicity_counters" format="default" sectionFormat="of" derivedContent="Section 6.2"/> (Method 1 or 2).</li>
          <li pn="section-5.7-3.3" derivedCounter="3.">Random data for each new UUIDv7 generated for any remaining
          space.</li>
        </ol>
        <t indent="0" pn="section-5.7-4">Implementations <bcp14>SHOULD</bcp14> utilize UUIDv7 instead of UUIDv1 and UUIDv6 if
possible.</t>
        <figure align="left" suppress-title="false" pn="figure-11">
          <name slugifiedName="name-uuidv7-field-and-bit-layout">UUIDv7 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.7-5.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           unix_ts_ms                          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          unix_ts_ms           |  ver  |       rand_a          |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|                        rand_b                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                            rand_b                             |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.7-6">
          <dt pn="section-5.7-6.1">unix_ts_ms:</dt>
          <dd pn="section-5.7-6.2">48-bit big-endian unsigned number of the Unix Epoch timestamp in
          milliseconds as per <xref target="timestamp_considerations" format="default" sectionFormat="of" derivedContent="Section 6.1"/>.
          Occupies bits 0 through 47 (octets 0-5).</dd>
          <dt pn="section-5.7-6.3">ver:</dt>
          <dd pn="section-5.7-6.4">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b0111 (7).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.7-6.5">rand_a:</dt>
          <dd pn="section-5.7-6.6">12 bits of pseudorandom data to provide uniqueness as per <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/> and/or optional constructs to guarantee
          additional monotonicity as per <xref target="monotonicity_counters" format="default" sectionFormat="of" derivedContent="Section 6.2"/>.  Occupies bits 52 through 63
          (octets 6-7).</dd>
          <dt pn="section-5.7-6.7">var:</dt>
          <dd pn="section-5.7-6.8">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.7-6.9">rand_b:</dt>
          <dd pn="section-5.7-6.10">The final 62 bits of pseudorandom data to provide uniqueness as
          per <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/> and/or an optional counter to
          guarantee additional monotonicity as per <xref target="monotonicity_counters" format="default" sectionFormat="of" derivedContent="Section 6.2"/>.  Occupies bits 66 through 127
          (octets 8-15).</dd>
        </dl>
      </section>
      <section anchor="uuidv8" numbered="true" removeInRFC="false" toc="include" pn="section-5.8">
        <name slugifiedName="name-uuid-version-8">UUID Version 8</name>
        <t indent="0" pn="section-5.8-1">UUIDv8 provides a format for experimental
        or vendor-specific use cases.  The only requirement is that the
        variant and version bits <bcp14>MUST</bcp14> be set as defined in
        Sections <xref target="variant_field" format="counter" sectionFormat="of" derivedContent="4.1"/> and <xref target="version_field" format="counter" sectionFormat="of" derivedContent="4.2"/>.  UUIDv8's uniqueness will be
        implementation specific and <bcp14>MUST NOT</bcp14> be assumed.</t>
        <t indent="0" pn="section-5.8-2">The only explicitly defined bits are those of the version and
        variant fields, leaving 122 bits for implementation-specific UUIDs. To
        be clear, UUIDv8 is not a replacement for UUIDv4 (<xref target="uuidv4" format="default" sectionFormat="of" derivedContent="Section 5.4"/>) where all 122 extra bits are filled with random
        data.</t>
        <t indent="0" pn="section-5.8-3">Some example situations in which UUIDv8 usage could occur:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.8-4">
          <li pn="section-5.8-4.1">An implementation would like to embed extra information
          within the UUID other than what is defined in this document.</li>
          <li pn="section-5.8-4.2">An implementation has other application and/or language
          restrictions that inhibit the use of one of the current UUIDs.</li>
        </ul>
        <t indent="0" pn="section-5.8-5"><xref target="ill_examples" format="default" sectionFormat="of" derivedContent="Appendix B"/> provides two illustrative examples of
        custom UUIDv8 algorithms to address two example scenarios.</t>
        <figure align="left" suppress-title="false" pn="figure-12">
          <name slugifiedName="name-uuidv8-field-and-bit-layout">UUIDv8 Field and Bit Layout</name>
          <artwork align="left" pn="section-5.8-6.1">
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           custom_a                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          custom_a             |  ver  |       custom_b        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|var|                       custom_c                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                           custom_c                            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</artwork>
        </figure>
        <dl spacing="normal" newline="true" indent="3" pn="section-5.8-7">
          <dt pn="section-5.8-7.1">custom_a:</dt>
          <dd pn="section-5.8-7.2">The first 48 bits of the layout that can be filled as an
          implementation sees fit. Occupies bits 0 through 47 (octets 0-5).
          </dd>
          <dt pn="section-5.8-7.3">ver:</dt>
          <dd pn="section-5.8-7.4">The 4-bit version field as defined by <xref target="version_field" format="default" sectionFormat="of" derivedContent="Section 4.2"/>, set to 0b1000 (8).  Occupies bits 48
          through 51 of octet 6.</dd>
          <dt pn="section-5.8-7.5">custom_b:</dt>
          <dd pn="section-5.8-7.6">12 more bits of the layout that can be filled as an
          implementation sees fit.  Occupies bits 52 through 63 (octets 6-7).
          </dd>
          <dt pn="section-5.8-7.7">var:</dt>
          <dd pn="section-5.8-7.8">The 2-bit variant field as defined by <xref target="variant_field" format="default" sectionFormat="of" derivedContent="Section 4.1"/>, set to 0b10.  Occupies bits 64 and 65 of
          octet 8.</dd>
          <dt pn="section-5.8-7.9">custom_c:</dt>
          <dd pn="section-5.8-7.10">The final 62 bits of the layout immediately following the var
          field to be filled as an implementation sees fit.  Occupies bits 66
          through 127 (octets 8-15).</dd>
        </dl>
      </section>
      <section anchor="niluuid" numbered="true" removeInRFC="false" toc="include" pn="section-5.9">
        <name slugifiedName="name-nil-uuid">Nil UUID</name>
        <t indent="0" pn="section-5.9-1">The Nil UUID is special form of UUID that is specified to have all
128 bits set to zero.</t>
        <figure align="left" suppress-title="false" pn="figure-13">
          <name slugifiedName="name-nil-uuid-format">Nil UUID Format</name>
          <artwork align="left" pn="section-5.9-2.1">
00000000-0000-0000-0000-000000000000
</artwork>
        </figure>
        <t indent="0" pn="section-5.9-3">A Nil UUID value can be useful to communicate the absence of any
        other UUID value in situations that otherwise require or use a 128-bit
        UUID.  A Nil UUID can express the concept "no such value here". Thus,
        it is reserved for such use as needed for implementation-specific
        situations.</t>
        <t indent="0" pn="section-5.9-4">Note that the Nil UUID value falls within the range of the Apollo
        NCS variant as per the first row of <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/> rather
        than the variant defined by this document.</t>
      </section>
      <section anchor="maxuuid" numbered="true" removeInRFC="false" toc="include" pn="section-5.10">
        <name slugifiedName="name-max-uuid">Max UUID</name>
        <t indent="0" pn="section-5.10-1">The Max UUID is a special form of UUID that is specified to have
        all 128 bits set to 1. This UUID can be thought of as the inverse of
        the Nil UUID defined in <xref target="niluuid" format="default" sectionFormat="of" derivedContent="Section 5.9"/>.</t>
        <figure align="left" suppress-title="false" pn="figure-14">
          <name slugifiedName="name-max-uuid-format">Max UUID Format</name>
          <artwork align="left" pn="section-5.10-2.1">
FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF
</artwork>
        </figure>
        <t indent="0" pn="section-5.10-3">A Max UUID value can be used as a sentinel value in situations
        where a 128-bit UUID is required, but a concept such as "end of UUID
        list" needs to be expressed and is reserved for such use as needed
        for implementation-specific situations.</t>
        <t indent="0" pn="section-5.10-4">Note that the Max UUID value falls within the range of the "yet-to-be defined" future UUID variant as per the last row of <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/> rather than the variant defined by this
        document.</t>
      </section>
    </section>
    <section anchor="uuid_best_practices" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-uuid-best-practices">UUID Best Practices</name>
      <t indent="0" pn="section-6-1">The minimum requirements for generating UUIDs of each version are described in this
      document.  Everything else is an implementation detail,
      and it is up to the implementer to decide what is appropriate for a
      given implementation. Various relevant factors are covered below to help
      guide an implementer through the different trade-offs among differing
      UUID implementations.</t>
      <section anchor="timestamp_considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6.1">
        <name slugifiedName="name-timestamp-considerations">Timestamp Considerations</name>
        <t indent="0" pn="section-6.1-1">UUID timestamp source, precision, and length were topics of great
        debate while creating UUIDv7 for this specification. Choosing the
        right timestamp for your application is very important. This
        section will detail some of the most common points on this issue.</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.1-2">
          <dt pn="section-6.1-2.1">Reliability:</dt>
          <dd pn="section-6.1-2.2">Implementations acquire the current timestamp from a reliable
          source to provide values that are time ordered and continually
          increasing.  Care must be taken to ensure that timestamp changes
          from the environment or operating system are handled in a way that
          is consistent with implementation requirements.  For example, if it
          is possible for the system clock to move backward due to either
          manual adjustment or corrections from a time synchronization
          protocol, implementations need to determine how to handle such
          cases. (See "Altering, Fuzzing, or Smearing" below.)</dd>
          <dt pn="section-6.1-2.3">Source:</dt>
          <dd pn="section-6.1-2.4">UUIDv1 and UUIDv6 both utilize a Gregorian Epoch timestamp,
          while UUIDv7 utilizes a Unix Epoch timestamp. If other timestamp
          sources or a custom timestamp Epoch are required, UUIDv8
          <bcp14>MUST</bcp14> be used.</dd>
          <dt pn="section-6.1-2.5">Sub-second Precision and Accuracy:</dt>
          <dd pn="section-6.1-2.6">Many levels of precision exist for timestamps: milliseconds,
          microseconds, nanoseconds, and beyond.  Additionally, fractional
          representations of sub-second precision may be desired to mix
          various levels of precision in a time-ordered manner.  Furthermore,
          system clocks themselves have an underlying granularity, which is
          frequently less than the precision offered by the operating system.
          With UUIDv1 and UUIDv6, 100 nanoseconds of precision are present,
          while UUIDv7 features a millisecond level of precision by default
          within the Unix Epoch that does not exceed the granularity capable
          in most modern systems.  For other levels of precision, UUIDv8 is
          available.  Similar to <xref target="monotonicity_counters" format="default" sectionFormat="of" derivedContent="Section 6.2"/>, with
          UUIDv1 or UUIDv6, a high-resolution timestamp can be simulated by
          keeping a count of the number of UUIDs that have been generated with
          the same value of the system time and using that count to construct the low
          order bits of the timestamp.  The count of the high-resolution
          timestamp will range between zero and the number of 100-nanosecond
          intervals per system-time interval.</dd>
          <dt pn="section-6.1-2.7">Length:</dt>
          <dd pn="section-6.1-2.8">The length of a given timestamp directly impacts how many
          timestamp ticks can be contained in a UUID before the maximum value
          for the timestamp field is reached.  Take care to ensure that the
          proper length is selected for a given timestamp.  UUIDv1 and
          UUIDv6 utilize a 60-bit timestamp valid until 5623 AD; UUIDv7 features
          a 48-bit timestamp valid until the year 10889 AD.</dd>
          <dt pn="section-6.1-2.9">Altering, Fuzzing, or Smearing:</dt>
          <dd pn="section-6.1-2.10">Implementations <bcp14>MAY</bcp14> alter the actual
          timestamp. Some examples include security considerations around
          providing a real-clock value within a UUID to 1) correct inaccurate
          clocks, 2) handle leap seconds, or 3) obtain a millisecond value by
          dividing by 1024 (or some other value) for performance reasons
          (instead of dividing a number of microseconds by 1000). This
          specification makes no requirement or guarantee about how close the
          clock value needs to be to the actual time.  If UUIDs do not need to
          be frequently generated, the UUIDv1 or UUIDv6 timestamp can simply
          be the system time multiplied by the number of 100-nanosecond
          intervals per system-time interval.</dd>
          <dt pn="section-6.1-2.11">Padding:</dt>
          <dd pn="section-6.1-2.12">When timestamp padding is required, implementations
          <bcp14>MUST</bcp14> pad the most significant bits (leftmost)
          with data. An example for this padding data is to fill the most
          significant, leftmost bits of a Unix timestamp with zeroes to
          complete the 48-bit timestamp in UUIDv7. An alternative approach for
          padding data is to fill the most significant, leftmost bits with
          the number of 32-bit Unix timestamp rollovers after 2038-01-19.
          </dd>
          <dt pn="section-6.1-2.13">Truncating:</dt>
          <dd pn="section-6.1-2.14">When timestamps need to be truncated, the lower, least
          significant bits <bcp14>MUST</bcp14> be used. An example would be
          truncating a 64-bit Unix timestamp to the least significant,
          rightmost 48 bits for UUIDv7.</dd>
          <dt pn="section-6.1-2.15">Error Handling:</dt>
          <dd pn="section-6.1-2.16">If a system overruns the generator by requesting too many UUIDs
          within a single system-time interval, the UUID service can return an
          error or stall the UUID generator until the system clock catches
          up and <bcp14>MUST NOT</bcp14> knowingly return duplicate values
          due to a counter rollover.  Note that if the processors overrun the
          UUID generation frequently, additional Node IDs can be
          allocated to the system, which will permit higher speed allocation
          by making multiple UUIDs potentially available for each timestamp
          value.  Similar techniques are discussed in <xref target="distributed_shared_knowledge" format="default" sectionFormat="of" derivedContent="Section 6.4"/>.</dd>
        </dl>
      </section>
      <section anchor="monotonicity_counters" numbered="true" removeInRFC="false" toc="include" pn="section-6.2">
        <name slugifiedName="name-monotonicity-and-counters">Monotonicity and Counters</name>
        <t indent="0" pn="section-6.2-1">Monotonicity (each subsequent value being greater than the last) is
        the backbone of time-based sortable UUIDs. Normally, time-based UUIDs
        from this document will be monotonic due to an embedded timestamp;
        however, implementations can guarantee additional monotonicity via the
        concepts covered in this section.</t>
        <t indent="0" pn="section-6.2-2">Take care to ensure UUIDs generated in batches are also
        monotonic. That is, if one thousand UUIDs are generated for the same
        timestamp, there should be sufficient logic for organizing the
        creation order of those one thousand UUIDs.  Batch UUID creation
        implementations <bcp14>MAY</bcp14> utilize a monotonic counter that
        increments for each UUID created during a given timestamp.</t>
        <t indent="0" pn="section-6.2-3">For single-node UUID implementations that do not need to create
        batches of UUIDs, the embedded timestamp within UUIDv6 and UUIDv7
        can provide sufficient monotonicity guarantees by simply ensuring that
        timestamp increments before creating a new UUID. Distributed nodes are
        discussed in <xref target="distributed_shared_knowledge" format="default" sectionFormat="of" derivedContent="Section 6.4"/>.</t>
        <t indent="0" pn="section-6.2-4">Implementations <bcp14>SHOULD</bcp14> employ the following methods
        for single-node UUID implementations that require batch UUID creation
        or are otherwise concerned about monotonicity with high-frequency UUID
        generation.</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.2-5">
          <dt pn="section-6.2-5.1">Fixed Bit-Length Dedicated Counter (Method 1):</dt>
          <dd pn="section-6.2-5.2">Some implementations allocate a specific number of bits in the
          UUID layout to the sole purpose of tallying the total number of
          UUIDs created during a given UUID timestamp tick.  If present, a fixed
          bit-length counter <bcp14>MUST</bcp14> be positioned
          immediately after the embedded timestamp. This promotes sortability
          and allows random data generation for each counter increment.
	  With
          this method, the rand_a section (or a subset of its leftmost bits)
          of UUIDv7 is used as a fixed bit-length dedicated counter that is
          incremented for every UUID generation.  The trailing random bits
          generated for each new UUID in rand_b can help produce unguessable
          UUIDs. In the event that more counter bits are required, the most
          significant (leftmost) bits of rand_b <bcp14>MAY</bcp14> be used as
          additional counter bits.</dd>
          <dt pn="section-6.2-5.3">Monotonic Random (Method 2):</dt>
          <dd pn="section-6.2-5.4">With this method, the random data is extended to also function
          as a counter.  This monotonic value can be thought of as a "randomly
          seeded counter" that <bcp14>MUST</bcp14> be incremented in the
          least significant position for each UUID created on a given
          timestamp tick.  UUIDv7's rand_b section <bcp14>SHOULD</bcp14> be
          utilized with this method to handle batch UUID generation during a
          single timestamp tick.  The increment value for every UUID
          generation is a random integer of any desired length larger than
          zero. It ensures that the UUIDs retain the required level of
          unguessability provided by the underlying entropy.  The increment
          value <bcp14>MAY</bcp14> be 1 when the number of UUIDs generated in
          a particular period of time is important and guessability is not an
          issue. However, incrementing the counter by 1 <bcp14>SHOULD NOT</bcp14> be used by implementations that favor unguessability, as
          the resulting values are easily guessable.</dd>
          <dt pn="section-6.2-5.5">Replace Leftmost Random Bits with Increased Clock Precision (Method 3):</dt>
          <dd pn="section-6.2-5.6">
            <t indent="0" pn="section-6.2-5.6.1">For UUIDv7, which has millisecond timestamp precision, it is
          possible to use additional clock precision available on the system
          to substitute for up to 12 random bits immediately following the
          timestamp.  This can provide values that are time ordered with
          sub-millisecond precision, using however many bits are appropriate
          in the implementation environment.  With this method, the additional
          time precision bits <bcp14>MUST</bcp14> follow the timestamp as the
          next available bit in the rand_a field for UUIDv7.</t>
            <t indent="0" pn="section-6.2-5.6.2">To calculate this value, start with the portion of the timestamp
          expressed as a fraction of the clock's tick value (fraction of a
          millisecond for UUIDv7).  Compute the count of possible values that
          can be represented in the available bit space, 4096 for the UUIDv7
          rand_a field.  Using floating point or scaled integer arithmetic,
          multiply this fraction of a millisecond value by 4096 and round down
          (toward zero) to an integer result to arrive at a number between 0
          and the maximum allowed for the indicated bits, which sorts
          monotonically based on time. Each increasing fractional value will
          result in an increasing bit field value to the precision available
          with these bits.</t>
            <t indent="0" pn="section-6.2-5.6.3">For example, let's assume a system timestamp of 1 Jan 2023
          12:34:56.1234567.  Taking the precision greater than 1 ms gives us a
          value of 0.4567, as a fraction of a millisecond.  If we wish to
          encode this as 12 bits, we can take the count of possible values
          that fit in those bits (4096 or 2<sup>12</sup>), multiply it by our
          millisecond fraction value of 0.4567, and truncate the result to an
          integer, which gives an integer value of 1870. Expressed as
          hexadecimal, it is 0x74E or the binary bits 0b011101001110.  One can
          then use those 12 bits as the most significant (leftmost) portion of
          the random section of the UUID (e.g., the rand_a field in UUIDv7).
          This works for any desired bit length that fits into a UUID, and
          applications can decide the appropriate length based on available
          clock precision; for UUIDv7, it is limited to 12 bits at maximum to
          reserve sufficient space for random bits.</t>
            <t indent="0" pn="section-6.2-5.6.4">The main benefit to encoding additional timestamp precision is
          that it utilizes additional time precision already available in the
          system clock to provide values that are more likely to be unique; thus, it may simplify certain implementations. This technique can
          also be used in conjunction with one of the other methods, where
          this additional time precision would immediately follow the
          timestamp. Then, if any bits are to be used as a clock sequence,
          they would follow next.</t>
          </dd>
        </dl>
        <t indent="0" pn="section-6.2-6">The following sub-topics cover issues related solely to creating reliable
fixed bit-length dedicated counters:</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.2-7">
          <dt pn="section-6.2-7.1">Fixed Bit-Length Dedicated Counter Seeding:</dt>
          <dd pn="section-6.2-7.2">Implementations utilizing the fixed bit-length counter method
          randomly initialize the counter with each new timestamp tick.
          However, when the timestamp has not increased, the counter is
          instead incremented by the desired increment logic.  When utilizing
          a randomly seeded counter alongside Method 1, the random value
          <bcp14>MAY</bcp14> be regenerated with each counter increment
          without impacting sortability.  The downside is that Method 1 is
          prone to overflows if a counter of adequate length is not selected
          or the random data generated leaves little room for the required
          number of increments.  Implementations utilizing fixed bit-length
          counter method <bcp14>MAY</bcp14> also choose to randomly initialize
          a portion of the counter rather than the entire counter. For
          example, a 24-bit counter could have the 23 bits in
          least significant, rightmost position randomly initialized. The
          remaining most significant, leftmost counter bit is initialized as
          zero for the sole purpose of guarding against counter rollovers.
          </dd>
          <dt pn="section-6.2-7.3">Fixed Bit-Length Dedicated Counter Length:</dt>
          <dd pn="section-6.2-7.4">Select a counter bit-length that can properly handle the level
          of timestamp precision in use.  For example, millisecond precision
          generally requires a larger counter than a timestamp with nanosecond
          precision.  General guidance is that the counter
          <bcp14>SHOULD</bcp14> be at least 12 bits but no longer than 42
          bits.  Care must be taken to ensure that the counter length selected
          leaves room for sufficient entropy in the random portion of the UUID
          after the counter.  This entropy helps improve the unguessability
          characteristics of UUIDs created within the batch.</dd>
        </dl>
        <t indent="0" pn="section-6.2-8">The following sub-topics cover rollover handling with either type of counter
method:</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.2-9">
          <dt pn="section-6.2-9.1">Counter Rollover Guards:</dt>
          <dd pn="section-6.2-9.2">The technique from "Fixed Bit-Length Dedicated Counter Seeding" above that
          describes allocating a segment of the fixed bit-length counter as a
          rollover guard is also helpful to mitigate counter rollover issues.
          This same technique can be used with monotonic random counter
          methods by ensuring that the total length of a possible increment in
          the least significant, rightmost position is less than the total
          length of the random value being incremented.  As such, the most
          significant, leftmost bits can be incremented as rollover
          guarding.</dd>
          <dt pn="section-6.2-9.3">Counter Rollover Handling:</dt>
          <dd pn="section-6.2-9.4">Counter rollovers <bcp14>MUST</bcp14> be handled by the
          application to avoid sorting issues.  The general guidance is that
          applications that care about absolute monotonicity and sortability
          should freeze the counter and wait for the timestamp to advance,
          which ensures monotonicity is not broken.  Alternatively,
          implementations <bcp14>MAY</bcp14> increment the timestamp ahead of
          the actual time and reinitialize the counter.</dd>
        </dl>
        <t indent="0" pn="section-6.2-10">Implementations <bcp14>MAY</bcp14> use the following logic to
        ensure UUIDs featuring embedded counters are monotonic in nature:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-6.2-11">
	  <li pn="section-6.2-11.1" derivedCounter="1.">Compare the current timestamp against the previously stored
	  timestamp.</li>
          <li pn="section-6.2-11.2" derivedCounter="2.">If the current timestamp is equal to the previous timestamp,
          increment the counter according to the desired method.</li>
          <li pn="section-6.2-11.3" derivedCounter="3.">If the current timestamp is greater than the previous timestamp,
          re-initialize the desired counter method to the new timestamp and
          generate new random bytes (if the bytes were frozen or being used as
          the seed for a monotonic counter). </li>
        </ol>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.2-12">
          <dt pn="section-6.2-12.1">Monotonic Error Checking:</dt>
          <dd pn="section-6.2-12.2">Implementations <bcp14>SHOULD</bcp14> check if the currently
          generated UUID is greater than the previously generated UUID. If
          this is not the case, then any number of things could have occurred,
          such as clock rollbacks, leap second handling, and counter
          rollovers. Applications <bcp14>SHOULD</bcp14> embed sufficient logic
          to catch these scenarios and correct the problem to ensure that the
          next UUID generated is greater than the previous, or they should at least report
          an appropriate error.  To handle this scenario, the general guidance
          is that the application <bcp14>MAY</bcp14> reuse the previous timestamp
          and increment the previous counter method. </dd>
        </dl>
      </section>
      <section anchor="generator_states" numbered="true" removeInRFC="false" toc="include" pn="section-6.3">
        <name slugifiedName="name-uuid-generator-states">UUID Generator States</name>
        <t indent="0" pn="section-6.3-1">The (optional) UUID generator state only needs to be read from
        stable storage once at boot time, if it is read into a system-wide
        shared volatile store (and updated whenever the stable store is
        updated).</t>
        <t indent="0" pn="section-6.3-2">This stable storage <bcp14>MAY</bcp14> be used to record various
        portions of the UUID generation, which prove useful for batch UUID
        generation purposes and monotonic error checking with UUIDv6 and
        UUIDv7.  These stored values include but are not limited to last known
        timestamp, clock sequence, counters, and random data.</t>
        <t indent="0" pn="section-6.3-3">If an implementation does not have any stable store available, then
        it <bcp14>MAY</bcp14> proceed with UUID generation as if this were the
        first UUID created within a batch.  This is the least desirable
        implementation because it will increase the frequency of creation of
        values such as clock sequence, counters, or random data, which
        increases the probability of duplicates. Further, frequent generation
        of random numbers also puts more stress on any entropy source and/or
        entropy pool being used as the basis for such random numbers.</t>
        <t indent="0" pn="section-6.3-4">An implementation <bcp14>MAY</bcp14> also return an application
        error in the event that collision resistance is of the utmost concern.
        The semantics of this error are up to the application and
        implementation.  See <xref target="collision_resistance" format="default" sectionFormat="of" derivedContent="Section 6.7"/> for more
        information on weighting collision tolerance in applications.</t>
        <t indent="0" pn="section-6.3-5">For UUIDv1 and UUIDv6, if the Node ID can never change (e.g., the
        network interface card from which the Node ID is derived is
        inseparable from the system), or if any change also re-initializes the
        clock sequence to a random value, then instead of keeping it in stable
        store, the current Node ID may be returned.</t>
        <t indent="0" pn="section-6.3-6">For UUIDv1 and UUIDv6, the state does not always need to be written
        to stable store every time a UUID is generated.  The timestamp in the
        stable store can periodically be set to a value larger than any yet
        used in a UUID.  As long as the generated UUIDs have timestamps less
        than that value, and the clock sequence and Node ID remain unchanged,
        only the shared volatile copy of the state needs to be updated.
        Furthermore, if the timestamp value in stable store is in the future
        by less than the typical time it takes the system to reboot, a crash
        will not cause a re-initialization of the clock sequence.</t>
        <t indent="0" pn="section-6.3-7">If it is too expensive to access shared state each time a UUID is
        generated, then the system-wide generator can be implemented to
        allocate a block of timestamps each time it is called; a per-process
        generator can allocate from that block until it is exhausted.</t>
      </section>
      <section anchor="distributed_shared_knowledge" numbered="true" removeInRFC="false" toc="include" pn="section-6.4">
        <name slugifiedName="name-distributed-uuid-generation">Distributed UUID Generation</name>
        <t indent="0" pn="section-6.4-1">Some implementations <bcp14>MAY</bcp14> desire the utilization of
        multi-node, clustered, applications that involve two or more nodes
        independently generating UUIDs that will be stored in a common
        location.  While UUIDs already feature sufficient entropy to ensure
        that the chances of collision are low, as the total number of UUID
        generating nodes increases, so does the likelihood of a collision.</t>
        <t indent="0" pn="section-6.4-2">This section will detail the two additional collision resistance
        approaches that have been observed by multi-node UUID implementations
        in distributed environments.</t>
        <t indent="0" pn="section-6.4-3">It should be noted that, although this section details two methods
        for the sake of completeness, implementations should utilize the
        pseudorandom Node ID option if additional collision resistance for
        distributed UUID generation is a requirement.  Likewise, utilization
        of either method is not required for implementing UUID generation in
        distributed environments.</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.4-4">
          <dt pn="section-6.4-4.1">Node IDs:</dt>
          <dd pn="section-6.4-4.2">With this method, a pseudorandom Node ID value is placed within
          the UUID layout.  This identifier helps ensure the bit space for a
          given node is unique, resulting in UUIDs that do not conflict with
          any other UUID created by another node with a different node id.
          Implementations that choose to leverage an embedded node id
          <bcp14>SHOULD</bcp14> utilize UUIDv8.  The node id <bcp14>SHOULD NOT</bcp14> be an IEEE 802 MAC address per <xref target="Security" format="default" sectionFormat="of" derivedContent="Section 8"/>.  The location and bit length are left to
          implementations and are outside the scope of this specification.
          Furthermore, the creation and negotiation of unique node ids among
          nodes is also out of scope for this specification.</dd>
          <dt pn="section-6.4-4.3">Centralized Registry:</dt>
          <dd pn="section-6.4-4.4">With this method, all nodes tasked with creating UUIDs consult a
          central registry and confirm the generated value is unique. As
          applications scale, the communication with the central registry
          could become a bottleneck and impact UUID generation in a negative
          way. Shared knowledge schemes with central/global registries are
          outside the scope of this specification and are <bcp14>NOT RECOMMENDED</bcp14>.</dd>
        </dl>
        <t indent="0" pn="section-6.4-5">Distributed applications generating UUIDs at a variety of hosts <bcp14>MUST</bcp14>
be willing to rely on the random number source at all hosts.</t>
      </section>
      <section anchor="name_based_uuid_generation" numbered="true" removeInRFC="false" toc="include" pn="section-6.5">
        <name slugifiedName="name-name-based-uuid-generation">Name-Based UUID Generation</name>
        <t indent="0" pn="section-6.5-1">Although some prefer to use the word "hash-based" to describe UUIDs
	featuring hashing algorithms (MD5 or SHA-1), this document retains the
	usage of the term "name-based" in order to maintain consistency with
	previously published documents and existing implementations.</t>
        <t indent="0" pn="section-6.5-2">The requirements for name-based UUIDs are as follows:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.5-3">
          <li pn="section-6.5-3.1">UUIDs generated at different times from the same name (using
          the same canonical format) in the same namespace <bcp14>MUST</bcp14>
          be equal.</li>
          <li pn="section-6.5-3.2">UUIDs generated from two different names (same or differing
          canonical format) in the same namespace should be different (with
          very high probability).</li>
          <li pn="section-6.5-3.3">UUIDs generated from the same name (same or differing
          canonical format) in two different namespaces should be different
          (with very high probability).</li>
          <li pn="section-6.5-3.4">If two UUIDs that were generated from names (using the same
          canonical format) are equal, then they were generated from the same
          name in the same namespace (with very high probability).</li>
        </ul>
        <t indent="0" pn="section-6.5-4">A note on names:</t>
        <t indent="3" pn="section-6.5-5">The concept of name (and namespace) should be broadly
          construed and not limited to textual names. A canonical sequence of
          octets is one that conforms to the specification for that name
          form's canonical representation. A name can have many usual forms,
          only one of which can be canonical. An implementer of new namespaces
          for UUIDs needs to reference the specification for the canonical
          form of names in that space or define such a canonical form for the
          namespace if it does not exist.  For example, at the time of
          writing, Domain Name System (DNS) <xref target="RFC9499" format="default" sectionFormat="of" derivedContent="RFC9499"/> has three
          conveyance formats: common (www.example.com), presentation
          (www.example.com.), and wire format (3www7example3com0).  Looking at
          <xref target="X500" format="default" sectionFormat="of" derivedContent="X500"/> Distinguished Names (DNs), <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/> allowed either text-based or
          binary DER-based names as inputs.  For Uniform Resource Locators
          (URLs) <xref target="RFC1738" format="default" sectionFormat="of" derivedContent="RFC1738"/>, one could provide a Fully Qualified
          Domain Name (FQDN) with or without the protocol identifier
          www.example.com or https://www.example.com.  When it comes to Object
          Identifiers (OIDs) <xref target="X660" format="default" sectionFormat="of" derivedContent="X660"/>, one could choose dot
          notation without the leading dot (2.999), choose to include the
          leading dot (.2.999), or select one of the many formats from <xref target="X680" format="default" sectionFormat="of" derivedContent="X680"/> such as OID Internationalized Resource Identifier
          (OID-IRI) (/Joint-ISO-ITU-T/Example).  While most users may default
          to the common format for DNS, FQDN format for a URL, text format for
          X.500, and dot notation without a leading dot for OID, name-based
          UUID implementations generally <bcp14>SHOULD</bcp14> allow arbitrary
          input that will compute name-based UUIDs for any of the
          aforementioned example names and others not defined here.  Each name
          format within a namespace will output different UUIDs.  As such, the
          mechanisms or conventions used for allocating names and ensuring
          their uniqueness within their namespaces are beyond the scope of
          this specification.</t>
      </section>
      <section anchor="namespaces" numbered="true" removeInRFC="false" toc="include" pn="section-6.6">
        <name slugifiedName="name-namespace-id-usage-and-allo">Namespace ID Usage and Allocation</name>
        <t indent="0" pn="section-6.6-1">This section details the namespace
        IDs for some potentially interesting namespaces such as those for DNS
        <xref target="RFC9499" format="default" sectionFormat="of" derivedContent="RFC9499"/>, URLs <xref target="RFC1738" format="default" sectionFormat="of" derivedContent="RFC1738"/>, OIDs <xref target="X660" format="default" sectionFormat="of" derivedContent="X660"/>, and DNs <xref target="X500" format="default" sectionFormat="of" derivedContent="X500"/>.</t>
        <t indent="0" pn="section-6.6-2">Further, this section also details allocation, IANA registration,
        and other details pertinent to Namespace IDs.</t>
        <table anchor="namespaceIDs" align="center" pn="table-3">
          <name slugifiedName="name-namespace-ids">Namespace IDs</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Namespace</th>
              <th align="left" colspan="1" rowspan="1">Namespace ID Value</th>
              <th align="left" colspan="1" rowspan="1">Name Reference</th>
              <th align="left" colspan="1" rowspan="1">Namespace ID Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">DNS</td>
              <td align="left" colspan="1" rowspan="1">6ba7b810-9dad-11d1-80b4-00c04fd430c8</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC9499" format="default" sectionFormat="of" derivedContent="RFC9499"/></td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">URL</td>
              <td align="left" colspan="1" rowspan="1">6ba7b811-9dad-11d1-80b4-00c04fd430c8</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC1738" format="default" sectionFormat="of" derivedContent="RFC1738"/></td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">OID</td>
              <td align="left" colspan="1" rowspan="1">6ba7b812-9dad-11d1-80b4-00c04fd430c8</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="X660" format="default" sectionFormat="of" derivedContent="X660"/></td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">X500</td>
              <td align="left" colspan="1" rowspan="1">6ba7b814-9dad-11d1-80b4-00c04fd430c8</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="X500" format="default" sectionFormat="of" derivedContent="X500"/></td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-6.6-4">Items may be added to this registry using the Specification Required
        policy as per <xref target="RFC8126" format="default" sectionFormat="of" derivedContent="RFC8126"/>.</t>
        <t indent="0" pn="section-6.6-5">For designated experts, generally speaking, Namespace IDs are
        allocated as follows:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.6-6">
          <li pn="section-6.6-6.1">The first Namespace ID value, for DNS, was calculated from a
          time-based UUIDv1 and "6ba7b810-9dad-11d1-80b4-00c04fd430c8", used as
          a starting point.</li>
          <li pn="section-6.6-6.2">Subsequent Namespace ID values increment the
          least significant, rightmost bit of time_low "6ba7b810" while
          freezing the rest of the UUID to "9dad-11d1-80b4-00c04fd430c8".</li>
          <li pn="section-6.6-6.3">New Namespace ID values <bcp14>MUST</bcp14> use this same
          logic and <bcp14>MUST NOT</bcp14> use a previously used Namespace ID
          value.</li>
          <li pn="section-6.6-6.4">Thus, "6ba7b815" is the next available time_low for a new
          Namespace ID value with the full ID being
          "6ba7b815-9dad-11d1-80b4-00c04fd430c8".</li>
          <li pn="section-6.6-6.5">The upper bound for time_low in this special use, Namespace ID
          values, is "ffffffff" or "ffffffff-9dad-11d1-80b4-00c04fd430c8",
          which should be sufficient space for future Namespace ID values.</li>
        </ul>
        <t indent="0" pn="section-6.6-7">Note that the Namespace ID value
        "6ba7b813-9dad-11d1-80b4-00c04fd430c8" and its usage are not defined by
        this document or by <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>; thus, it <bcp14>SHOULD NOT</bcp14> be used as a Namespace ID value.</t>
        <t indent="0" pn="section-6.6-8">New Namespace ID values <bcp14>MUST</bcp14> be documented as per
        <xref target="IANA" format="default" sectionFormat="of" derivedContent="Section 7"/> if they are to be globally available and fully
        interoperable.  Implementations <bcp14>MAY</bcp14> continue to use
        vendor-specific, application-specific, and deployment-specific
        Namespace ID values; but know that interoperability is not guaranteed.
        These custom Namespace ID values <bcp14>MUST NOT</bcp14> use the logic
        above; instead, generating a
        UUIDv4 or UUIDv7 Namespace ID value is <bcp14>RECOMMENDED</bcp14>.  If collision probability (<xref target="collision_resistance" format="default" sectionFormat="of" derivedContent="Section 6.7"/>) and uniqueness (<xref target="global_local_uniqueness" format="default" sectionFormat="of" derivedContent="Section 6.8"/>) of the final name-based UUID are
        not a problem, an implementation <bcp14>MAY</bcp14> also leverage
        UUIDv8 instead to create a custom, application-specific Namespace ID
        value.</t>
        <t indent="0" pn="section-6.6-9">Implementations <bcp14>SHOULD</bcp14> provide the ability to input
        a custom namespace to account for newly registered IANA Namespace ID
        values outside of those listed in this section or custom,
        application-specific Namespace ID values.</t>
      </section>
      <section anchor="collision_resistance" numbered="true" removeInRFC="false" toc="include" pn="section-6.7">
        <name slugifiedName="name-collision-resistance">Collision Resistance</name>
        <t indent="0" pn="section-6.7-1">Implementations should weigh the consequences of UUID collisions
        within their application and when deciding between UUID versions that
        use entropy (randomness) versus the other components such as those in
        Sections <xref target="timestamp_considerations" format="counter" sectionFormat="of" derivedContent="6.1"/>
        and <xref target="monotonicity_counters" format="counter" sectionFormat="of" derivedContent="6.2"/>.  This is
        especially true for distributed node collision resistance as defined
        by <xref target="distributed_shared_knowledge" format="default" sectionFormat="of" derivedContent="Section 6.4"/>.</t>
        <t indent="0" pn="section-6.7-2">There are two example scenarios below that help illustrate the
        varying seriousness of a collision within an application.</t>
        <dl spacing="normal" newline="true" indent="3" pn="section-6.7-3">
          <dt pn="section-6.7-3.1">Low Impact:</dt>
          <dd pn="section-6.7-3.2">A UUID collision generated a duplicate log entry, which results
          in incorrect statistics derived from the data. Implementations that
          are not negatively affected by collisions may continue with the
          entropy and uniqueness provided by UUIDs defined in this document.
          </dd>
          <dt pn="section-6.7-3.3">High Impact:</dt>
          <dd pn="section-6.7-3.4">A duplicate key causes an airplane to receive the wrong course,
          which puts people's lives at risk. In this scenario, there is no
          margin for error. Collisions must be avoided: failure is
          unacceptable. Applications dealing with this type of scenario must
          employ as much collision resistance as possible within the given
          application context.</dd>
        </dl>
      </section>
      <section anchor="global_local_uniqueness" numbered="true" removeInRFC="false" toc="include" pn="section-6.8">
        <name slugifiedName="name-global-and-local-uniqueness">Global and Local Uniqueness</name>
        <t indent="0" pn="section-6.8-1">UUIDs created by this specification <bcp14>MAY</bcp14> be used to
        provide local uniqueness guarantees.  For example, ensuring UUIDs
        created within a local application context are unique within a
        database <bcp14>MAY</bcp14> be sufficient for some implementations
        where global uniqueness outside of the application context, in other
        applications, or around the world is not required.</t>
        <t indent="0" pn="section-6.8-2">Although true global uniqueness is impossible to guarantee without
        a shared knowledge scheme, a shared knowledge scheme is not required
        by a UUID to provide uniqueness for practical implementation purposes.
        Implementations <bcp14>MAY</bcp14> use a shared knowledge
        scheme, introduced in <xref target="distributed_shared_knowledge" format="default" sectionFormat="of" derivedContent="Section 6.4"/>,
        as they see fit to extend the uniqueness guaranteed by this
        specification.</t>
      </section>
      <section anchor="unguessability" numbered="true" removeInRFC="false" toc="include" pn="section-6.9">
        <name slugifiedName="name-unguessability">Unguessability</name>
        <t indent="0" pn="section-6.9-1">Implementations <bcp14>SHOULD</bcp14> utilize a cryptographically
        secure pseudorandom number generator (CSPRNG) to provide values that
        are both difficult to predict ("unguessable") and have a low
        likelihood of collision ("unique").  The exception is when a suitable
        CSPRNG is unavailable in the execution environment.  Take care to
        ensure the CSPRNG state is properly reseeded upon state changes, such
        as process forks, to ensure proper CSPRNG operation.  CSPRNG ensures
        the best of Sections <xref target="collision_resistance" format="counter" sectionFormat="of" derivedContent="6.7"/> and <xref target="Security" format="counter" sectionFormat="of" derivedContent="8"/> are
        present in modern UUIDs.</t>
        <t indent="0" pn="section-6.9-2">Further advice on generating cryptographic-quality random numbers
        can be found in <xref target="RFC4086" format="default" sectionFormat="of" derivedContent="RFC4086"/>, <xref target="RFC8937" format="default" sectionFormat="of" derivedContent="RFC8937"/>,
        and <xref target="RANDOM" format="default" sectionFormat="of" derivedContent="RANDOM"/>.</t>
      </section>
      <section anchor="unidentifiable" numbered="true" removeInRFC="false" toc="include" pn="section-6.10">
        <name slugifiedName="name-uuids-that-do-not-identify-">UUIDs That Do Not Identify the Host</name>
        <t indent="0" pn="section-6.10-1">This section describes how to generate a UUIDv1 or UUIDv6 value if
        an IEEE 802 address is not available or its use is not desired.</t>
        <t indent="0" pn="section-6.10-2">Implementations <bcp14>MAY</bcp14> leverage MAC address
        randomization techniques <xref target="IEEE802.11bh" format="default" sectionFormat="of" derivedContent="IEEE802.11bh"/> as an alternative to the pseudorandom logic
        provided in this section.</t>
        <t indent="0" pn="section-6.10-3">Alternatively, implementations <bcp14>MAY</bcp14> elect to obtain a
        48-bit cryptographic-quality random number as per <xref target="unguessability" format="default" sectionFormat="of" derivedContent="Section 6.9"/> to use as the Node ID.  After generating the
        48-bit fully randomized node value, implementations
        <bcp14>MUST</bcp14> set the least significant bit of the first octet
        of the Node ID to 1.  This bit is the unicast or multicast bit, which
        will never be set in IEEE 802 addresses obtained from network cards.
        Hence, there can never be a conflict between UUIDs generated by
        machines with and without network cards.  An example of generating a
        randomized 48-bit node value and the subsequent bit modification is
        detailed in <xref target="test_vectors" format="default" sectionFormat="of" derivedContent="Appendix A"/>.  For more information about
        IEEE 802 address and the unicast or multicast or local/global bits,
        please review <xref target="RFC9542" format="default" sectionFormat="of" derivedContent="RFC9542"/>.</t>
        <t indent="0" pn="section-6.10-4">For compatibility with earlier specifications, note that this
        document uses the unicast or multicast bit instead of the arguably more
        correct local/global bit because MAC addresses with the local/global
        bit set or not set are both possible in a network.  This is not the case
        with the unicast or multicast bit.  One node cannot have a MAC address
        that multicasts to multiple nodes.</t>
        <t indent="0" pn="section-6.10-5">In addition, items such as the computer's name and the name of the
        operating system, while not strictly speaking random, will help
        differentiate the results from those obtained by other systems.</t>
        <t indent="0" pn="section-6.10-6">The exact algorithm to generate a Node ID using these data is
        system specific because both the data available and the functions to
        obtain them are often very system specific.  However, a generic approach
        is to accumulate as many sources as possible into a buffer, use a
        message digest (such as SHA-256 or SHA-512 defined by <xref target="FIPS180-4" format="default" sectionFormat="of" derivedContent="FIPS180-4"/>), take an arbitrary 6 bytes from the hash value,
        and set the multicast bit as described above.</t>
      </section>
      <section anchor="sorting" numbered="true" removeInRFC="false" toc="include" pn="section-6.11">
        <name slugifiedName="name-sorting">Sorting</name>
        <t indent="0" pn="section-6.11-1">UUIDv6 and UUIDv7 are designed so that implementations that require
        sorting (e.g., database indexes) sort as opaque raw bytes without the
        need for parsing or introspection.</t>
        <t indent="0" pn="section-6.11-2">Time-ordered monotonic UUIDs benefit from greater database-index
        locality because the new values are near each other in the index.  As
        a result, objects are more easily clustered together for better
        performance.  The real-world differences in this approach of index
        locality versus random data inserts can be one order of magnitude or
        more.</t>
        <t indent="0" pn="section-6.11-3">UUID formats created by this specification are intended to be
        lexicographically sortable while in the textual representation.</t>
        <t indent="0" pn="section-6.11-4">UUIDs created by this specification are crafted with big-endian
        byte order (network byte order) in mind. If little-endian style is
        required, UUIDv8 is available for custom UUID formats.</t>
      </section>
      <section anchor="opacity" numbered="true" removeInRFC="false" toc="include" pn="section-6.12">
        <name slugifiedName="name-opacity">Opacity</name>
        <t indent="0" pn="section-6.12-1">As general guidance, avoiding parsing UUID values
        unnecessarily is recommended; instead, treat UUIDs as opaquely as possible.
        Although application-specific concerns could, of course, require some
        degree of introspection (e.g., to examine Sections <xref target="variant_field" format="counter" sectionFormat="of" derivedContent="4.1"/> or <xref target="version_field" format="counter" sectionFormat="of" derivedContent="4.2"/> or perhaps the timestamp of
        a UUID), the advice here is to avoid this or other parsing unless
        absolutely necessary.  Applications typically tend to be simpler, be more
        interoperable, and perform better when this advice is followed.</t>
      </section>
      <section anchor="database_considerations" numbered="true" removeInRFC="false" toc="include" pn="section-6.13">
        <name slugifiedName="name-dbms-and-database-considera">DBMS and Database Considerations</name>
        <t indent="0" pn="section-6.13-1">For many applications, such as databases, storing UUIDs as text is
        unnecessarily verbose, requiring 288 bits to represent 128-bit UUID
        values.  Thus, where feasible, UUIDs <bcp14>SHOULD</bcp14> be stored
        within database applications as the underlying 128-bit binary
        value.</t>
        <t indent="0" pn="section-6.13-2">For other systems, UUIDs <bcp14>MAY</bcp14> be stored in binary
        form or as text, as appropriate.  The trade-offs to both approaches
        are as follows:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6.13-3">
          <li pn="section-6.13-3.1">Storing in binary form requires less space and may result in faster
          data access.</li>
          <li pn="section-6.13-3.2">Storing as text requires more space but may require less
          translation if the resulting text form is to be used after
          retrieval, which may make it simpler to implement. </li>
        </ul>
        <t indent="0" pn="section-6.13-4">DBMS vendors are encouraged to provide functionality to generate
        and store UUID formats defined by this specification for use as
        identifiers or left parts of identifiers such as, but not limited to,
        primary keys, surrogate keys for temporal databases, foreign keys
        included in polymorphic relationships, and keys for key-value pairs in
        JSON columns and key-value databases.  Applications using a monolithic
        database may find using database-generated UUIDs (as opposed to
        client-generated UUIDs) provides the best UUID monotonicity.  In
        addition to UUIDs, additional identifiers <bcp14>MAY</bcp14> be used
        to ensure integrity and feedback.</t>
        <t indent="0" pn="section-6.13-5">Designers of database schema are cautioned against using name-based
        UUIDs (see Sections <xref target="uuidv3" format="counter" sectionFormat="of" derivedContent="5.3"/> and <xref target="uuidv5" format="counter" sectionFormat="of" derivedContent="5.5"/>) as primary keys in tables.  A
        common issue observed in database schema design is the assumption that
        a particular value will never change, which later turns out to be
        an incorrect assumption.  Postal codes, license or other
        identification numbers, and numerous other such identifiers seem
        unique and unchanging at a given point time -- only later to have edge
        cases where they need to change.  The subsequent change of the
        identifier, used as a "name" input for name-based UUIDs, can
        invalidate a given database structure.  In such scenarios, it is
        observed that using any non-name-based UUID version would have
        resulted in the field in question being placed somewhere that would
        have been easier to adapt to such changes (primary key excluded from
        this statement).  The general advice is to avoid name-based UUID
        natural keys and, instead, to utilize time-based UUID surrogate keys
        based on the aforementioned problems detailed in this section.</t>
      </section>
    </section>
    <section anchor="IANA" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-7-1">All references to <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/> in IANA registries
      (outside of those created by this document) have been replaced with
      references to this document, including the IANA URN namespace
      registration <xref target="URNNamespaces" format="default" sectionFormat="of" derivedContent="URNNamespaces"/> for UUID.  References to
      <xref target="RFC4122" sectionFormat="of" section="4.1.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc4122#section-4.1.2" derivedContent="RFC4122"/> have been
      updated to refer to <xref target="format" format="default" sectionFormat="of" derivedContent="Section 4"/> of this document.</t>
      <t indent="0" pn="section-7-2">Finally, IANA should track UUID Subtypes and Special Case "Namespace
      IDs Values" as specified in Sections <xref target="iana2" format="counter" sectionFormat="of" derivedContent="7.1"/> and <xref target="iana3" format="counter" sectionFormat="of" derivedContent="7.2"/> at the
      following location: <eref brackets="angle" target="https://www.iana.org/assignments/uuid"/>.</t>
      <t indent="0" pn="section-7-3">When evaluating requests, the designated expert should consider
      community feedback, how well-defined the reference specification is, and
      this specification's requirements.  Vendor-specific,
      application-specific, and deployment-specific values are unable to be
      registered.  Specification documents should be published in a stable,
      freely available manner (ideally, located with a URL) but need not be
      standards.  The designated expert will either approve or deny the
      registration request and communicate this decision to IANA. Denials
      should include an explanation and, if applicable, suggestions as to how
      to make the request successful.</t>
      <section anchor="iana2" numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-iana-uuid-subtype-registry-">IANA UUID Subtype Registry and Registration</name>
        <t indent="0" pn="section-7.1-1">This specification defines the "UUID Subtypes" registry for common
        widely used UUID standards.</t>
        <table anchor="ianaSubtypes" align="center" pn="table-4">
          <name slugifiedName="name-iana-uuid-subtypes">IANA UUID Subtypes</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Name</th>
              <th align="left" colspan="1" rowspan="1">ID</th>
              <th align="left" colspan="1" rowspan="1">Subtype</th>
              <th align="left" colspan="1" rowspan="1">Variant</th>
              <th align="left" colspan="1" rowspan="1">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">Gregorian Time-based</td>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">DCE Security</td>
              <td align="left" colspan="1" rowspan="1">2</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="C309" format="default" sectionFormat="of" derivedContent="C309"/>, <xref target="C311" format="default" sectionFormat="of" derivedContent="C311"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">MD5 Name-based</td>
              <td align="left" colspan="1" rowspan="1">3</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">Random</td>
              <td align="left" colspan="1" rowspan="1">4</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">SHA-1 Name-based</td>
              <td align="left" colspan="1" rowspan="1">5</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">
                <xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>, RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">Reordered Gregorian Time-based</td>
              <td align="left" colspan="1" rowspan="1">6</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">Unix Time-based</td>
              <td align="left" colspan="1" rowspan="1">7</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">RFC 9562</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">Custom</td>
              <td align="left" colspan="1" rowspan="1">8</td>
              <td align="left" colspan="1" rowspan="1">version</td>
              <td align="left" colspan="1" rowspan="1">OSF DCE / IETF</td>
              <td align="left" colspan="1" rowspan="1">RFC 9562</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-7.1-3">This table may be extended by Standards Action as per
        <xref target="RFC8126" format="default" sectionFormat="of" derivedContent="RFC8126"/>.</t>
        <t indent="0" pn="section-7.1-4">For designated experts:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-7.1-5">
          <li pn="section-7.1-5.1">The minimum and maximum "ID" value for the subtype "version"
          within the "OSF DCE / IETF" variant is 0 through 15. The versions
          within <xref target="table1" format="default" sectionFormat="of" derivedContent="Table 1"/> described as "Reserved for future
          definition" or "unused" are omitted from this IANA registry until
          properly defined. </li>
          <li pn="section-7.1-5.2">The "Subtype" column is free-form text.  However, at the time of
          publication, "version" and "family" are the only known UUID
          subtypes. The "family" subtype is part of the "Apollo NCS" variant
          space (both are outside the scope of this specification). The
          Microsoft variant may have subtyping mechanisms defined; however,
          they are unknown and outside of the scope of this
          specification. Similarly, the final "Reserved for future definition"
          variant may introduce new subtyping logic at a future date. Subtype
          IDs are permitted to overlap. That is, an ID of "1" may exist in
          multiple variant spaces.</li>
          <li pn="section-7.1-5.3">The "Variant" column is free-form text. However, it is likely that one
          of four values will be included: the first three are "OSF DCE /
          IETF", "Apollo NCS", and "Microsoft", and the final variant value belongs to
          the "Reserved for future definition" variant and may introduce a new
          name at a future date.</li>
        </ul>
      </section>
      <section anchor="iana3" numbered="true" removeInRFC="false" toc="include" pn="section-7.2">
        <name slugifiedName="name-iana-uuid-namespace-id-regi">IANA UUID Namespace ID Registry and Registration</name>
        <t indent="0" pn="section-7.2-1">This specification defines the "UUID Namespace IDs" registry for common, widely used Namespace ID values.</t>
        <t indent="0" pn="section-7.2-2">The full details of this registration, including information for designated experts, can be found in <xref target="namespaces" format="default" sectionFormat="of" derivedContent="Section 6.6"/>.</t>
      </section>
    </section>
    <section anchor="Security" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-8-1">Implementations <bcp14>SHOULD NOT</bcp14> assume that UUIDs are hard
      to guess.  For example, they <bcp14>MUST NOT</bcp14> be used as security
      capabilities (identifiers whose mere possession grants access).
      Discovery of predictability in a random number source will result in a
      vulnerability.</t>
      <t indent="0" pn="section-8-2">Implementations <bcp14>MUST NOT</bcp14> assume that it is easy to
      determine if a UUID has been slightly modified in order to redirect a
      reference to another object.  Humans do not have the ability to easily
      check the integrity of a UUID by simply glancing at it.</t>
      <t indent="0" pn="section-8-3">MAC addresses pose inherent security risks around privacy and
      <bcp14>SHOULD NOT</bcp14> be used within a UUID.  Instead CSPRNG data
      <bcp14>SHOULD</bcp14> be selected from a source with sufficient entropy
      to ensure guaranteed uniqueness among UUID generation. See Sections
      <xref target="unguessability" format="counter" sectionFormat="of" derivedContent="6.9"/> and <xref target="unidentifiable" format="counter" sectionFormat="of" derivedContent="6.10"/> for more information.</t>
      <t indent="0" pn="section-8-4">Timestamps embedded in the UUID do pose a very small attack
      surface. The timestamp in conjunction with an embedded counter does
      signal the order of creation for a given UUID and its corresponding data
      but does not define anything about the data itself or the application as
      a whole.  If UUIDs are required for use with any security operation
      within an application context in any shape or form, then UUIDv4 (<xref target="uuidv4" format="default" sectionFormat="of" derivedContent="Section 5.4"/>) <bcp14>SHOULD</bcp14> be utilized.</t>
      <t indent="0" pn="section-8-5">See <xref target="RFC6151" format="default" sectionFormat="of" derivedContent="RFC6151"/> for MD5 security considerations and
      <xref target="RFC6194" format="default" sectionFormat="of" derivedContent="RFC6194"/> for SHA-1 security considerations.</t>
    </section>
  </middle>
  <back>
    <references pn="section-9">
      <name slugifiedName="name-references">References</name>
      <references anchor="sec-normative-references" pn="section-9.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="C309" target="https://pubs.opengroup.org/onlinepubs/9696999099/toc.pdf" quoteTitle="true" derivedAnchor="C309">
          <front>
            <title>X/Open DCE: Remote Procedure Call</title>
            <author>
              <organization showOnFrontPage="true">X/Open Company Limited</organization>
            </author>
            <date year="1994" month="August"/>
          </front>
          <seriesInfo name="ISBN" value="1-85912-041-5"/>
          <seriesInfo name="Open CAE Specification" value="C309"/>
        </reference>
        <reference anchor="C311" target="https://pubs.opengroup.org/onlinepubs/9696989899/toc.pdf" quoteTitle="true" derivedAnchor="C311">
          <front>
            <title>DCE 1.1: Authentication and Security Services</title>
            <author>
              <organization showOnFrontPage="true">The Open Group</organization>
            </author>
            <date year="1997" month="August"/>
          </front>
          <seriesInfo name="Open Group CAE Specification" value="C311"/>
        </reference>
        <reference anchor="FIPS180-4" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf" quoteTitle="true" derivedAnchor="FIPS180-4">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date year="2015" month="August"/>
          </front>
          <seriesInfo name="FIPS PUB" value="180-4"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.180-4"/>
        </reference>
        <reference anchor="FIPS202" target="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf" quoteTitle="true" derivedAnchor="FIPS202">
          <front>
            <title>SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions</title>
            <author>
              <organization showOnFrontPage="true">National Institute of Standards and Technology (NIST)</organization>
            </author>
            <date year="2015" month="August"/>
          </front>
          <seriesInfo name="FIPS PUB" value="202"/>
          <seriesInfo name="DOI" value="10.6028/NIST.FIPS.202"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8141" target="https://www.rfc-editor.org/info/rfc8141" quoteTitle="true" derivedAnchor="RFC8141">
          <front>
            <title>Uniform Resource Names (URNs)</title>
            <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
            <author fullname="J. Klensin" initials="J." surname="Klensin"/>
            <date month="April" year="2017"/>
            <abstract>
              <t indent="0">A Uniform Resource Name (URN) is a Uniform Resource Identifier (URI) that is assigned under the "urn" URI scheme and a particular URN namespace, with the intent that the URN will be a persistent, location-independent resource identifier. With regard to URN syntax, this document defines the canonical syntax for URNs (in a way that is consistent with URI syntax), specifies methods for determining URN-equivalence, and discusses URI conformance. With regard to URN namespaces, this document specifies a method for defining a URN namespace and associating it with a namespace identifier, and it describes procedures for registering namespace identifiers with the Internet Assigned Numbers Authority (IANA). This document obsoletes both RFCs 2141 and 3406.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8141"/>
          <seriesInfo name="DOI" value="10.17487/RFC8141"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="X667" quoteTitle="true" derivedAnchor="X667">
          <front>
            <title>Information technology - Open Systems Interconnection - Procedures for the operation of OSI Registration Authorities: Generation and registration of Universally Unique Identifiers (UUIDs) and their use as ASN.1 object identifier components</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date month="September" year="2004"/>
          </front>
          <seriesInfo name="ISO/IEC" value="9834-8:2004"/>
          <seriesInfo name="ITU-T Recommendation" value="X.667"/>
        </reference>
      </references>
      <references anchor="sec-informative-references" pn="section-9.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="COMBGUID" target="https://github.com/richardtallent/RT.Comb" quoteTitle="true" derivedAnchor="COMBGUID">
          <front>
            <title>Creating sequential GUIDs in C# for MSSQL or PostgreSql</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="December"/>
          </front>
          <refcontent>commit 2759820</refcontent>
        </reference>
        <reference anchor="CUID" target="https://github.com/ericelliott/cuid" quoteTitle="true" derivedAnchor="CUID">
          <front>
            <title>Collision-resistant ids optimized for horizontal scaling and performance.</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="October"/>
          </front>
          <refcontent>commit 215b27b</refcontent>
        </reference>
        <reference anchor="Elasticflake" target="https://github.com/ppearcy/elasticflake" quoteTitle="true" derivedAnchor="Elasticflake">
          <front>
            <title>Sequential UUID / Flake ID generator pulled out of elasticsearch common</title>
            <author initials="P." surname="Pearcy" fullname="Paul Pearcy">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2015" month="January"/>
          </front>
          <refcontent>commit dd71c21</refcontent>
        </reference>
        <reference anchor="Err1957" target="https://www.rfc-editor.org/errata/eid1957" quoteTitle="false" derivedAnchor="Err1957">
          <front>
            <title>Erratum ID 1957</title>
            <author>
              <organization showOnFrontPage="true">RFC Errata</organization>
            </author>
          </front>
          <refcontent>RFC 4122</refcontent>
        </reference>
        <reference anchor="Err3546" target="https://www.rfc-editor.org/errata/eid3546" quoteTitle="false" derivedAnchor="Err3546">
          <front>
            <title>Erratum ID 3546</title>
            <author>
              <organization showOnFrontPage="true">RFC Errata</organization>
            </author>
          </front>
          <refcontent>RFC 4122</refcontent>
        </reference>
        <reference anchor="Err4975" target="https://www.rfc-editor.org/errata/eid4975" quoteTitle="false" derivedAnchor="Err4975">
          <front>
            <title>Erratum ID 4975</title>
            <author>
              <organization showOnFrontPage="true">RFC Errata</organization>
            </author>
          </front>
          <refcontent>RFC 4122</refcontent>
        </reference>
        <reference anchor="Err4976" target="https://www.rfc-editor.org/errata/eid4976" quoteTitle="false" derivedAnchor="Err4976">
          <front>
            <title>Erratum ID 4976</title>
            <author>
              <organization showOnFrontPage="true">RFC Errata</organization>
            </author>
          </front>
          <refcontent>RFC 4122</refcontent>
        </reference>
        <reference anchor="Err5560" target="https://www.rfc-editor.org/errata/eid5560" quoteTitle="false" derivedAnchor="Err5560">
          <front>
            <title>Erratum ID 5560</title>
            <author>
              <organization showOnFrontPage="true">RFC Errata</organization>
            </author>
          </front>
          <refcontent>RFC 4122</refcontent>
        </reference>
        <reference anchor="Flake" target="https://github.com/boundary/flake" quoteTitle="true" derivedAnchor="Flake">
          <front>
            <title>Flake: A decentralized, k-ordered id generation service in Erlang</title>
            <author>
              <organization showOnFrontPage="true">Boundary</organization>
            </author>
            <date year="2017" month="February"/>
          </front>
          <refcontent>commit 15c933a</refcontent>
        </reference>
        <reference anchor="FlakeID" target="https://github.com/T-PWK/flake-idgen" quoteTitle="true" derivedAnchor="FlakeID">
          <front>
            <title>Flake ID Generator</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="April"/>
          </front>
          <refcontent>commit fcd6a2f</refcontent>
        </reference>
        <reference anchor="IBM_NCS" target="https://www.ibm.com/docs/en/aix/7.1?topic=u-uuid-gen-command-ncs" quoteTitle="true" derivedAnchor="IBM_NCS">
          <front>
            <title>uuid_gen Command (NCS)</title>
            <author>
              <organization showOnFrontPage="true">IBM</organization>
            </author>
            <date year="2023" month="March"/>
          </front>
        </reference>
        <reference anchor="IEEE754" target="https://standards.ieee.org/ieee/754/6210/" quoteTitle="true" derivedAnchor="IEEE754">
          <front>
            <title>IEEE Standard for Floating-Point Arithmetic.</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2019" month="July"/>
          </front>
          <seriesInfo name="IEEE Std" value="754-2019"/>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2019.8766229"/>
        </reference>
        <reference anchor="IEEE802.11bh" target="https://standards.ieee.org/ieee/802.11bh/10525/" quoteTitle="true" derivedAnchor="IEEE802.11bh">
          <front>
            <title>IEEE Draft Standard for Information technology--Telecommunications and information exchange between systems Local and metropolitan area networks--Specific requirements - Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications Amendment: Enhancements for Extremely High Throughput (EHT)</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2023" month="March"/>
          </front>
          <seriesInfo name="Electronic ISBN" value="978-1-5044-9520-2"/>
        </reference>
        <reference anchor="KSUID" target="https://github.com/segmentio/ksuid" quoteTitle="true" derivedAnchor="KSUID">
          <front>
            <title>K-Sortable Globally Unique IDs</title>
            <author>
              <organization showOnFrontPage="true">Segment</organization>
            </author>
            <date year="2020" month="July"/>
          </front>
          <refcontent>commit bf376a7</refcontent>
        </reference>
        <reference anchor="LexicalUUID" target="https://github.com/twitter-archive/cassie" quoteTitle="true" derivedAnchor="LexicalUUID">
          <front>
            <title>Cassie</title>
            <author>
              <organization showOnFrontPage="true">Twitter</organization>
            </author>
            <date year="2012" month="November"/>
          </front>
          <refcontent>commit f6da4e0</refcontent>
        </reference>
        <reference anchor="Microsoft" target="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-dtyp/222af2d3-5c00-4899-bc87-ed4c6515e80d" quoteTitle="true" derivedAnchor="Microsoft">
          <front>
            <title>2.3.4.3 GUID - Curly Braced String Representation</title>
            <author>
              <organization showOnFrontPage="true">Microsoft</organization>
            </author>
            <date year="2023" month="April"/>
          </front>
        </reference>
        <reference anchor="MS_COM_GUID" target="https://devblogs.microsoft.com/oldnewthing/20220928-00/?p=107221" quoteTitle="true" derivedAnchor="MS_COM_GUID">
          <front>
            <title>Why does COM express GUIDs in a mix of big-endian and little-endian? Why can't it just pick a side and stick with it?</title>
            <author initials="R." surname="Chen" fullname="Raymond Chen">
              <organization showOnFrontPage="true">Microsoft</organization>
            </author>
            <date year="2022" month="September"/>
          </front>
        </reference>
        <reference anchor="ObjectID" target="https://docs.mongodb.com/manual/reference/method/ObjectId/" quoteTitle="true" derivedAnchor="ObjectID">
          <front>
            <title>ObjectId</title>
            <author>
              <organization showOnFrontPage="true">MongoDB</organization>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="orderedUuid" target="https://itnext.io/laravel-the-mysterious-ordered-uuid-29e7500b4f8" quoteTitle="true" derivedAnchor="orderedUuid">
          <front>
            <title>Laravel: The mysterious "Ordered UUID"</title>
            <author initials="I. B." surname="Cabrera" fullname="Italo Baeza Cabrera">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="January"/>
          </front>
        </reference>
        <reference anchor="pushID" target="https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html" quoteTitle="true" derivedAnchor="pushID">
          <front>
            <title>The 2^120 Ways to Ensure Unique Identifiers</title>
            <author fullname="Michael Lehenbauer" surname="Lehenbauer" initials="M.">
              <organization showOnFrontPage="true">Google</organization>
            </author>
            <date year="2015" month="February"/>
          </front>
        </reference>
        <reference anchor="Python" target="https://docs.python.org/3/library/uuid.html" quoteTitle="true" derivedAnchor="Python">
          <front>
            <title>uuid - UUID objects according to RFC 4122</title>
            <author>
              <organization showOnFrontPage="true">Python</organization>
            </author>
          </front>
        </reference>
        <reference anchor="RANDOM" target="https://peteroupc.github.io/random.html" quoteTitle="true" derivedAnchor="RANDOM">
          <front>
            <title>Random Number Generator Recommendations for Applications</title>
            <author initials="P." surname="Occil" fullname="Peter Occil">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="June" year="2023"/>
          </front>
        </reference>
        <reference anchor="RFC1321" target="https://www.rfc-editor.org/info/rfc1321" quoteTitle="true" derivedAnchor="RFC1321">
          <front>
            <title>The MD5 Message-Digest Algorithm</title>
            <author fullname="R. Rivest" initials="R." surname="Rivest"/>
            <date month="April" year="1992"/>
            <abstract>
              <t indent="0">This document describes the MD5 message-digest algorithm. The algorithm takes as input a message of arbitrary length and produces as output a 128-bit "fingerprint" or "message digest" of the input. This memo provides information for the Internet community. It does not specify an Internet standard.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="1321"/>
          <seriesInfo name="DOI" value="10.17487/RFC1321"/>
        </reference>
        <reference anchor="RFC1738" target="https://www.rfc-editor.org/info/rfc1738" quoteTitle="true" derivedAnchor="RFC1738">
          <front>
            <title>Uniform Resource Locators (URL)</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <author fullname="M. McCahill" initials="M." surname="McCahill"/>
            <date month="December" year="1994"/>
            <abstract>
              <t indent="0">This document specifies a Uniform Resource Locator (URL), the syntax and semantics of formalized information for location and access of resources via the Internet. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="1738"/>
          <seriesInfo name="DOI" value="10.17487/RFC1738"/>
        </reference>
        <reference anchor="RFC4086" target="https://www.rfc-editor.org/info/rfc4086" quoteTitle="true" derivedAnchor="RFC4086">
          <front>
            <title>Randomness Requirements for Security</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="J. Schiller" initials="J." surname="Schiller"/>
            <author fullname="S. Crocker" initials="S." surname="Crocker"/>
            <date month="June" year="2005"/>
            <abstract>
              <t indent="0">Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts. However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities. The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t>
              <t indent="0">Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult. This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities. It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="106"/>
          <seriesInfo name="RFC" value="4086"/>
          <seriesInfo name="DOI" value="10.17487/RFC4086"/>
        </reference>
        <reference anchor="RFC4122" target="https://www.rfc-editor.org/info/rfc4122" quoteTitle="true" derivedAnchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t indent="0">This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t indent="0">This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" quoteTitle="true" derivedAnchor="RFC5234">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <author fullname="D. Crocker" initials="D." role="editor" surname="Crocker"/>
            <author fullname="P. Overell" initials="P." surname="Overell"/>
            <date month="January" year="2008"/>
            <abstract>
              <t indent="0">Internet technical specifications often need to define a formal syntax. Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications. The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power. The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges. This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="68"/>
          <seriesInfo name="RFC" value="5234"/>
          <seriesInfo name="DOI" value="10.17487/RFC5234"/>
        </reference>
        <reference anchor="RFC6151" target="https://www.rfc-editor.org/info/rfc6151" quoteTitle="true" derivedAnchor="RFC6151">
          <front>
            <title>Updated Security Considerations for the MD5 Message-Digest and the HMAC-MD5 Algorithms</title>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <author fullname="L. Chen" initials="L." surname="Chen"/>
            <date month="March" year="2011"/>
            <abstract>
              <t indent="0">This document updates the security considerations for the MD5 message digest algorithm. It also updates the security considerations for HMAC-MD5. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6151"/>
          <seriesInfo name="DOI" value="10.17487/RFC6151"/>
        </reference>
        <reference anchor="RFC6194" target="https://www.rfc-editor.org/info/rfc6194" quoteTitle="true" derivedAnchor="RFC6194">
          <front>
            <title>Security Considerations for the SHA-0 and SHA-1 Message-Digest Algorithms</title>
            <author fullname="T. Polk" initials="T." surname="Polk"/>
            <author fullname="L. Chen" initials="L." surname="Chen"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="March" year="2011"/>
            <abstract>
              <t indent="0">This document includes security considerations for the SHA-0 and SHA-1 message digest algorithm. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6194"/>
          <seriesInfo name="DOI" value="10.17487/RFC6194"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126" quoteTitle="true" derivedAnchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t indent="0">Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t indent="0">To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t indent="0">This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8937" target="https://www.rfc-editor.org/info/rfc8937" quoteTitle="true" derivedAnchor="RFC8937">
          <front>
            <title>Randomness Improvements for Security Protocols</title>
            <author fullname="C. Cremers" initials="C." surname="Cremers"/>
            <author fullname="L. Garratt" initials="L." surname="Garratt"/>
            <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
            <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
            <author fullname="C. Wood" initials="C." surname="Wood"/>
            <date month="October" year="2020"/>
            <abstract>
              <t indent="0">Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
              <t indent="0">This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8937"/>
          <seriesInfo name="DOI" value="10.17487/RFC8937"/>
        </reference>
        <reference anchor="RFC9499" target="https://www.rfc-editor.org/info/rfc9499" quoteTitle="true" derivedAnchor="RFC9499">
          <front>
            <title>DNS Terminology</title>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <author fullname="K. Fujiwara" initials="K." surname="Fujiwara"/>
            <date month="March" year="2024"/>
            <abstract>
              <t indent="0">The Domain Name System (DNS) is defined in literally dozens of different RFCs. The terminology used by implementers and developers of DNS protocols, and by operators of DNS systems, has changed in the decades since the DNS was first defined. This document gives current definitions for many of the terms used in the DNS in a single document.</t>
              <t indent="0">This document updates RFC 2308 by clarifying the definitions of "forwarder" and "QNAME". It obsoletes RFC 8499 by adding multiple terms and clarifications. Comprehensive lists of changed and new definitions can be found in Appendices A and B.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="219"/>
          <seriesInfo name="RFC" value="9499"/>
          <seriesInfo name="DOI" value="10.17487/RFC9499"/>
        </reference>
        <reference anchor="RFC9542" target="https://www.rfc-editor.org/info/rfc9542" quoteTitle="true" derivedAnchor="RFC9542">
          <front>
            <title>IANA Considerations and IETF Protocol and Documentation Usage for IEEE 802 Parameters</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="J. Abley" initials="J." surname="Abley"/>
            <author fullname="Y. Li" initials="Y." surname="Li"/>
            <date month="April" year="2024"/>
            <abstract>
              <t indent="0">Some IETF protocols make use of Ethernet frame formats and IEEE 802 parameters. This document discusses several aspects of such parameters and their use in IETF protocols, specifies IANA considerations for assignment of points under the IANA Organizationally Unique Identifier (OUI), and provides some values for use in documentation. This document obsoletes RFC 7042.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="141"/>
          <seriesInfo name="RFC" value="9542"/>
          <seriesInfo name="DOI" value="10.17487/RFC9542"/>
        </reference>
        <reference anchor="ShardingID" target="https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c" quoteTitle="true" derivedAnchor="ShardingID">
          <front>
            <title>Sharding &amp; IDs at Instagram</title>
            <author>
              <organization showOnFrontPage="true">Instagram Engineering</organization>
            </author>
            <date year="2012" month="December"/>
          </front>
        </reference>
        <reference anchor="SID" target="https://github.com/chilts/sid" quoteTitle="true" derivedAnchor="SID">
          <front>
            <title>sid : generate sortable identifiers</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2019" month="June"/>
          </front>
          <seriesInfo name="Commit" value="660e947"/>
        </reference>
        <reference anchor="Snowflake" target="https://github.com/twitter-archive/snowflake" quoteTitle="true" derivedAnchor="Snowflake">
          <front>
            <title>Snowflake is a network service for generating unique ID numbers at high scale with some simple guarantees.</title>
            <author>
              <organization showOnFrontPage="true">Twitter</organization>
            </author>
            <date year="2014" month="May"/>
          </front>
          <refcontent>commit ec40836</refcontent>
        </reference>
        <reference anchor="Sonyflake" target="https://github.com/sony/sonyflake" quoteTitle="true" derivedAnchor="Sonyflake">
          <front>
            <title>A distributed unique ID generator inspired by Twitter's Snowflake</title>
            <author>
              <organization showOnFrontPage="true">Sony</organization>
            </author>
            <date year="2020" month="August"/>
          </front>
          <refcontent>commit 848d664</refcontent>
        </reference>
        <reference anchor="ULID" target="https://github.com/ulid/spec" quoteTitle="true" derivedAnchor="ULID">
          <front>
            <title>Universally Unique Lexicographically Sortable Identifier</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2019" month="May"/>
          </front>
          <seriesInfo name="Commit" value="d0c7170"/>
        </reference>
        <reference anchor="URNNamespaces" target="https://www.iana.org/assignments/urn-namespaces/" quoteTitle="true" derivedAnchor="URNNamespaces">
          <front>
            <title>Uniform Resource Names (URN) Namespaces</title>
            <author>
              <organization showOnFrontPage="true">IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="X500" quoteTitle="true" derivedAnchor="X500">
          <front>
            <title>Information technology - Open Systems Interconnection - The Directory: Overview of concepts, models and services</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date year="2019" month="October"/>
          </front>
          <seriesInfo name="ISO/IEC" value="9594-1"/>
          <seriesInfo name="ITU-T Recommendation" value="X.500"/>
        </reference>
        <reference anchor="X660" quoteTitle="true" derivedAnchor="X660">
          <front>
            <title>Information technology - Procedures for the operation of object identifier registration authorities: General procedures and top arcs of the international object identifier tree</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date month="July" year="2011"/>
          </front>
          <seriesInfo name="ISO/IEC" value="9834-1"/>
          <seriesInfo name="ITU-T Recommendation" value="X.660"/>
        </reference>
        <reference anchor="X680" quoteTitle="true" derivedAnchor="X680">
          <front>
            <title>Information Technology - Abstract Syntax Notation One (ASN.1) &amp; ASN.1 encoding rules</title>
            <author>
              <organization showOnFrontPage="true">ITU-T</organization>
            </author>
            <date month="February" year="2021"/>
          </front>
          <seriesInfo name="ISO/IEC" value="8824-1:2021"/>
          <seriesInfo name="ITU-T Recommendation" value="X.680"/>
        </reference>
        <reference anchor="XID" target="https://github.com/rs/xid" quoteTitle="true" derivedAnchor="XID">
          <front>
            <title>Globally Unique ID Generator</title>
            <author>
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="October"/>
          </front>
          <refcontent>commit efa678f</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="test_vectors" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-test-vectors">Test Vectors</name>
      <t indent="0" pn="section-appendix.a-1">Both UUIDv1 and UUIDv6 test vectors utilize the same 60-bit
      timestamp: 0x1EC9414C232AB00 (138648505420000000) Tuesday, February 22,
      2022 2:22:22.000000 PM GMT-05:00.</t>
      <t indent="0" pn="section-appendix.a-2">Both UUIDv1 and UUIDv6 utilize the same values in clock_seq and
      node; all of which have been generated with random data.  For the
      randomized node, the least significant bit of the first octet is set to
      a value of 1 as per <xref target="unidentifiable" format="default" sectionFormat="of" derivedContent="Section 6.10"/>.  Thus, the starting
      value 0x9E6BDECED846 was changed to 0x9F6BDECED846.</t>
      <t indent="0" pn="section-appendix.a-3">The pseudocode used for converting from a 64-bit Unix timestamp to a
      100 ns Gregorian timestamp value has been left in the document for
      reference purposes.</t>
      <figure align="left" suppress-title="false" pn="figure-15">
        <name slugifiedName="name-test-vector-timestamp-pseud">Test Vector Timestamp Pseudocode</name>
        <sourcecode type="pseudocode" markers="false" pn="section-appendix.a-4.1">
# Gregorian-to-Unix Offset:
# The number of 100 ns intervals between the
# UUID Epoch 1582-10-15 00:00:00
# and the Unix Epoch 1970-01-01 00:00:00
# Greg_Unix_offset = 0x01b21dd213814000 or 122192928000000000

# Unix 64-bit Nanosecond Timestamp:
# Unix NS: Tuesday, February 22, 2022 2:22:22 PM GMT-05:00
# Unix_64_bit_ns = 0x16D6320C3D4DCC00 or 1645557742000000000

# Unix Nanosecond precision to Gregorian 100-nanosecond intervals
# Greg_100_ns = (Unix_64_bit_ns/100)+Greg_Unix_offset

# Work:
# Greg_100_ns = (1645557742000000000/100)+122192928000000000
# Unix_64_bit_ns = (138648505420000000-122192928000000000)*100

# Final:
# Greg_100_ns = 0x1EC9414C232AB00 or 138648505420000000
</sourcecode>
      </figure>
      <section anchor="uuidv1_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.1">
        <name slugifiedName="name-example-of-a-uuidv1-value">Example of a UUIDv1 Value</name>
        <figure align="left" suppress-title="false" pn="figure-16">
          <name slugifiedName="name-uuidv1-example-test-vector">UUIDv1 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.1-1.1">
-------------------------------------------
field      bits value
-------------------------------------------
time_low   32   0xC232AB00
time_mid   16   0x9414
ver         4   0x1
time_high  12   0x1EC
var         2   0b10
clock_seq  14   0b11, 0x3C8
node       48   0x9F6BDECED846
-------------------------------------------
total      128
-------------------------------------------
final: C232AB00-9414-11EC-B3C8-9F6BDECED846
</artwork>
        </figure>
      </section>
      <section anchor="uuidv3_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.2">
        <name slugifiedName="name-example-of-a-uuidv3-value">Example of a UUIDv3 Value</name>
        <t indent="0" pn="section-appendix.a.2-1">The MD5 computation from is detailed in <xref target="v3md5" format="default" sectionFormat="of" derivedContent="Figure 17"/>
        using the DNS Namespace ID value and the Name "www.example.com".
        The field mapping and all values are illustrated in <xref target="v3fields" format="default" sectionFormat="of" derivedContent="Figure 18"/>.  Finally, to further illustrate the bit swapping
        for version and variant, see <xref target="v3vervar" format="default" sectionFormat="of" derivedContent="Figure 19"/>.</t>
        <figure anchor="v3md5" align="left" suppress-title="false" pn="figure-17">
          <name slugifiedName="name-uuidv3-example-md5">UUIDv3 Example MD5</name>
          <artwork align="left" pn="section-appendix.a.2-2.1">
Namespace (DNS):  6ba7b810-9dad-11d1-80b4-00c04fd430c8
Name:             www.example.com
------------------------------------------------------
MD5:              5df418813aed051548a72f4a814cf09e
</artwork>
        </figure>
        <figure anchor="v3fields" align="left" suppress-title="false" pn="figure-18">
          <name slugifiedName="name-uuidv3-example-test-vector">UUIDv3 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.2-3.1">
-------------------------------------------
field     bits value
-------------------------------------------
md5_high  48   0x5df418813aed
ver        4   0x3
md5_mid   12   0x515
var        2   0b10
md5_low   62   0b00, 0x8a72f4a814cf09e
-------------------------------------------
total     128
-------------------------------------------
final: 5df41881-3aed-3515-88a7-2f4a814cf09e
</artwork>
        </figure>
        <figure anchor="v3vervar" align="left" suppress-title="false" pn="figure-19">
          <name slugifiedName="name-uuidv3-example-ver-var-bit-">UUIDv3 Example Ver/Var Bit Swaps</name>
          <artwork align="left" pn="section-appendix.a.2-4.1">
MD5 hex and dash:      5df41881-3aed-0515-48a7-2f4a814cf09e
Ver and Var Overwrite: xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx
Final:                 5df41881-3aed-3515-88a7-2f4a814cf09e
</artwork>
        </figure>
      </section>
      <section anchor="uuidv4_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.3">
        <name slugifiedName="name-example-of-a-uuidv4-value">Example of a UUIDv4 Value</name>
        <t indent="0" pn="section-appendix.a.3-1">This UUIDv4 example was created by generating 16 bytes of random
        data resulting in the hexadecimal value of
        919108F752D133205BACF847DB4148A8. This is then used to fill out the
        fields as shown in <xref target="v4fields" format="default" sectionFormat="of" derivedContent="Figure 20"/>.</t>
        <t indent="0" pn="section-appendix.a.3-2">Finally, to further illustrate the bit swapping for version and
        variant, see <xref target="v4vervar" format="default" sectionFormat="of" derivedContent="Figure 21"/>.</t>
        <figure anchor="v4fields" align="left" suppress-title="false" pn="figure-20">
          <name slugifiedName="name-uuidv4-example-test-vector">UUIDv4 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.3-3.1">
-------------------------------------------
field     bits value
-------------------------------------------
random_a  48   0x919108f752d1
ver        4   0x4
random_b  12   0x320
var        2   0b10
random_c  62   0b01, 0xbacf847db4148a8
-------------------------------------------
total     128
-------------------------------------------
final: 919108f7-52d1-4320-9bac-f847db4148a8
</artwork>
        </figure>
        <figure anchor="v4vervar" align="left" suppress-title="false" pn="figure-21">
          <name slugifiedName="name-uuidv4-example-ver-var-bit-">UUIDv4 Example Ver/Var Bit Swaps</name>
          <artwork align="left" pn="section-appendix.a.3-4.1">
Random hex:            919108f752d133205bacf847db4148a8
Random hex and dash:   919108f7-52d1-3320-5bac-f847db4148a8
Ver and Var Overwrite: xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx
Final:                 919108f7-52d1-4320-9bac-f847db4148a8
</artwork>
        </figure>
      </section>
      <section anchor="uuidv5_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.4">
        <name slugifiedName="name-example-of-a-uuidv5-value">Example of a UUIDv5 Value</name>
        <t indent="0" pn="section-appendix.a.4-1">The SHA-1 computation form is detailed in <xref target="v5sha1" format="default" sectionFormat="of" derivedContent="Figure 22"/>,
        using the DNS Namespace ID value and the Name "www.example.com".  The
        field mapping and all values are illustrated in <xref target="v5fields" format="default" sectionFormat="of" derivedContent="Figure 23"/>.  Finally, to further illustrate the bit swapping
        for version and variant and the unused/discarded part of the SHA-1
        value, see <xref target="v5vervar" format="default" sectionFormat="of" derivedContent="Figure 24"/>.</t>
        <figure anchor="v5sha1" align="left" suppress-title="false" pn="figure-22">
          <name slugifiedName="name-uuidv5-example-sha-1">UUIDv5 Example SHA-1</name>
          <artwork align="left" pn="section-appendix.a.4-2.1">
Namespace (DNS):  6ba7b810-9dad-11d1-80b4-00c04fd430c8
Name:             www.example.com
----------------------------------------------------------
SHA-1:            2ed6657de927468b55e12665a8aea6a22dee3e35
</artwork>
        </figure>
        <figure anchor="v5fields" align="left" suppress-title="false" pn="figure-23">
          <name slugifiedName="name-uuidv5-example-test-vector">UUIDv5 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.4-3.1">
-------------------------------------------
field      bits value
-------------------------------------------
sha1_high  48   0x2ed6657de927
ver         4   0x5
sha1_mid   12   0x68b
var         2   0b10
sha1_low   62   0b01, 0x5e12665a8aea6a2
-------------------------------------------
total      128
-------------------------------------------
final: 2ed6657d-e927-568b-95e1-2665a8aea6a2
</artwork>
        </figure>
        <figure anchor="v5vervar" align="left" suppress-title="false" pn="figure-24">
          <name slugifiedName="name-uuidv5-example-ver-var-bit-">UUIDv5 Example Ver/Var Bit Swaps and Discarded SHA-1 Segment</name>
          <artwork align="left" pn="section-appendix.a.4-4.1">
SHA-1 hex and dash:    2ed6657d-e927-468b-55e1-2665a8aea6a2-2dee3e35
Ver and Var Overwrite: xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx
Final:                 2ed6657d-e927-568b-95e1-2665a8aea6a2
Discarded:                                                 -2dee3e35
</artwork>
        </figure>
      </section>
      <section anchor="uuidv6_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.5">
        <name slugifiedName="name-example-of-a-uuidv6-value">Example of a UUIDv6 Value</name>
        <figure align="left" suppress-title="false" pn="figure-25">
          <name slugifiedName="name-uuidv6-example-test-vector">UUIDv6 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.5-1.1">
-------------------------------------------
field       bits value
-------------------------------------------
time_high   32   0x1EC9414C
time_mid    16   0x232A
ver          4   0x6
time_high   12   0xB00
var          2   0b10
clock_seq   14   0b11, 0x3C8
node        48   0x9F6BDECED846
-------------------------------------------
total       128
-------------------------------------------
final: 1EC9414C-232A-6B00-B3C8-9F6BDECED846
</artwork>
        </figure>
      </section>
      <section anchor="uuidv7_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.6">
        <name slugifiedName="name-example-of-a-uuidv7-value">Example of a UUIDv7 Value</name>
        <t indent="0" pn="section-appendix.a.6-1">This example UUIDv7 test vector utilizes a well-known Unix Epoch
        timestamp with millisecond precision to fill the first 48 bits.</t>
        <t indent="0" pn="section-appendix.a.6-2">rand_a and rand_b are filled with random data.</t>
        <t indent="0" pn="section-appendix.a.6-3">The timestamp is Tuesday, February 22, 2022 2:22:22.00 PM
        GMT-05:00, represented as 0x017F22E279B0 or 1645557742000.</t>
        <figure align="left" suppress-title="false" pn="figure-26">
          <name slugifiedName="name-uuidv7-example-test-vector">UUIDv7 Example Test Vector</name>
          <artwork align="left" pn="section-appendix.a.6-4.1">
-------------------------------------------
field       bits value
-------------------------------------------
unix_ts_ms  48   0x017F22E279B0
ver          4   0x7
rand_a      12   0xCC3
var          2   0b10
rand_b      62   0b01, 0x8C4DC0C0C07398F
-------------------------------------------
total       128
-------------------------------------------
final: 017F22E2-79B0-7CC3-98C4-DC0C0C07398F
</artwork>
        </figure>
      </section>
    </section>
    <section anchor="ill_examples" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-illustrative-examples">Illustrative Examples</name>
      <t indent="0" pn="section-appendix.b-1">The following sections contain illustrative examples that serve to
      show how one may use UUIDv8 (<xref target="uuidv8" format="default" sectionFormat="of" derivedContent="Section 5.8"/>) for custom and/or
      experimental application-based logic.  The examples below have not been
      through the same rigorous testing, prototyping, and feedback loop that
      other algorithms in this document have undergone.  The authors
      encourage implementers to create their own UUIDv8 algorithm rather than
      use the items defined in this section.</t>
      <section anchor="uuidv8_example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b.1">
        <name slugifiedName="name-example-of-a-uuidv8-value-t">Example of a UUIDv8 Value (Time-Based)</name>
        <t indent="0" pn="section-appendix.b.1-1">This example UUIDv8 test vector utilizes a well-known 64-bit Unix
        Epoch timestamp with 10 ns precision, truncated to the
        least significant, rightmost bits to fill the first 60 bits of
        custom_a and custom_b, while setting the version bits between these two
        segments to the version value of 8.</t>
        <t indent="0" pn="section-appendix.b.1-2">The variant bits are set; and the final segment, custom_c, is filled
        with random data.</t>
        <t indent="0" pn="section-appendix.b.1-3">Timestamp is Tuesday, February 22, 2022 2:22:22.000000 PM
        GMT-05:00, represented as 0x2489E9AD2EE2E00 or 164555774200000000
        (10 ns-steps).</t>
        <figure align="left" suppress-title="false" pn="figure-27">
          <name slugifiedName="name-uuidv8-example-time-based-i">UUIDv8 Example Time-Based Illustrative Example</name>
          <artwork align="left" pn="section-appendix.b.1-4.1">
-------------------------------------------
field     bits value
-------------------------------------------
custom_a  48   0x2489E9AD2EE2
ver        4   0x8
custom_b  12   0xE00
var        2   0b10
custom_c  62   0b00, 0xEC932D5F69181C0
-------------------------------------------
total     128
-------------------------------------------
final: 2489E9AD-2EE2-8E00-8EC9-32D5F69181C0
</artwork>
        </figure>
      </section>
      <section anchor="uuidv8_example_name" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b.2">
        <name slugifiedName="name-example-of-a-uuidv8-value-n">Example of a UUIDv8 Value (Name-Based)</name>
        <t indent="0" pn="section-appendix.b.2-1">As per <xref target="uuidv5" format="default" sectionFormat="of" derivedContent="Section 5.5"/>, name-based UUIDs that want to use
        modern hashing algorithms <bcp14>MUST</bcp14> be created within the
        UUIDv8 space. These <bcp14>MAY</bcp14> leverage newer hashing
        algorithms such as SHA-256 or SHA-512 (as defined by <xref target="FIPS180-4" format="default" sectionFormat="of" derivedContent="FIPS180-4"/>), SHA-3 or SHAKE (as defined by <xref target="FIPS202" format="default" sectionFormat="of" derivedContent="FIPS202"/>), or even algorithms that have not been defined
        yet.</t>
        <t indent="0" pn="section-appendix.b.2-2">A SHA-256 version of the SHA-1 computation in <xref target="uuidv5_example" format="default" sectionFormat="of" derivedContent="Appendix A.4"/> is detailed in <xref target="v8sha256" format="default" sectionFormat="of" derivedContent="Figure 28"/> as
        an illustrative example detailing how this can be achieved.  The
        creation of the name-based UUIDv8 value in this section follows the
        same logic defined in <xref target="uuidv5" format="default" sectionFormat="of" derivedContent="Section 5.5"/> with the difference
        being SHA-256 in place of SHA-1.</t>
        <t indent="0" pn="section-appendix.b.2-3">The field mapping and all values are illustrated in <xref target="v8fieldssha256" format="default" sectionFormat="of" derivedContent="Figure 29"/>.  Finally, to further illustrate the bit
        swapping for version and variant and the unused/discarded part of the
        SHA-256 value, see <xref target="v8vervar" format="default" sectionFormat="of" derivedContent="Figure 30"/>.  An important note for
        secure hashing algorithms that produce outputs of an arbitrary size,
        such as those found in SHAKE, is that the output hash
        <bcp14>MUST</bcp14> be 128 bits or larger.</t>
        <figure anchor="v8sha256" align="left" suppress-title="false" pn="figure-28">
          <name slugifiedName="name-uuidv8-example-sha256">UUIDv8 Example SHA256</name>
          <artwork align="left" pn="section-appendix.b.2-4.1">
Namespace (DNS):       6ba7b810-9dad-11d1-80b4-00c04fd430c8
Name:                  www.example.com
----------------------------------------------------------------
SHA-256:
5c146b143c524afd938a375d0df1fbf6fe12a66b645f72f6158759387e51f3c8
</artwork>
        </figure>
        <figure anchor="v8fieldssha256" align="left" suppress-title="false" pn="figure-29">
          <name slugifiedName="name-uuidv8-example-name-based-s">UUIDv8 Example Name-Based SHA-256 Illustrative Example</name>
          <artwork align="left" pn="section-appendix.b.2-5.1">
-------------------------------------------
field     bits value
-------------------------------------------
custom_a  48   0x5c146b143c52
ver        4   0x8
custom_b  12   0xafd
var        2   0b10
custom_c  62   0b00, 0x38a375d0df1fbf6
-------------------------------------------
total     128
-------------------------------------------
final: 5c146b14-3c52-8afd-938a-375d0df1fbf6
</artwork>
        </figure>
        <figure anchor="v8vervar" align="left" suppress-title="false" pn="figure-30">
          <name slugifiedName="name-uuidv8-example-ver-var-bit-">UUIDv8 Example Ver/Var Bit Swaps and Discarded SHA-256 Segment</name>
          <artwork align="left" pn="section-appendix.b.2-6.1">	  
A: 5c146b14-3c52-4afd-938a-375d0df1fbf6-fe12a66b645f72f6158759387e51f3c8
B: xxxxxxxx-xxxx-Mxxx-Nxxx-xxxxxxxxxxxx
C: 5c146b14-3c52-8afd-938a-375d0df1fbf6
D:                                     -fe12a66b645f72f6158759387e51f3c8
</artwork>
        </figure>
        <t indent="0" pn="section-appendix.b.2-7">Examining <xref target="v8vervar" format="default" sectionFormat="of" derivedContent="Figure 30"/>:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.b.2-8">
          <li pn="section-appendix.b.2-8.1">Line A details the full SHA-256 as a hexadecimal value with the
          dashes inserted.</li>
          <li pn="section-appendix.b.2-8.2">Line B details the version and variant hexadecimal positions,
          which must be overwritten.</li>
          <li pn="section-appendix.b.2-8.3">Line C details the final value after the ver and var have been
          overwritten.</li>
          <li pn="section-appendix.b.2-8.4">Line D details the discarded leftover values from the original
          SHA-256 computation.</li>
        </ul>
      </section>
    </section>
    <section anchor="Acknowledgements" toc="include" numbered="false" removeInRFC="false" pn="section-appendix.c">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.c-1">The authors gratefully acknowledge the contributions of <contact fullname="Rich Salz"/>, <contact fullname="Michael Mealling"/>, <contact fullname="Ben Campbell"/>, <contact fullname="Ben Ramsey"/>, <contact fullname="Fabio Lima"/>, <contact fullname="Gonzalo Salgueiro"/>,
      <contact fullname="Martin Thomson"/>, <contact fullname="Murray       S. Kucherawy"/>, <contact fullname="Rick van Rein"/>, <contact fullname="Rob Wilton"/>, <contact fullname="Sean Leonard"/>, <contact fullname="Theodore Y. Ts'o"/>, <contact fullname="Robert Kieffer"/>,
      <contact fullname="Sergey Prokhorenko"/>, and <contact fullname="LiosK"/>.</t>
      <t indent="0" pn="section-appendix.c-2">As well as all of those in the IETF community and on GitHub to who
      contributed to the discussions that resulted in this document.</t>
      <t indent="0" pn="section-appendix.c-3">This document draws heavily on the OSF DCE specification (Appendix A
      of <xref target="C309" format="default" sectionFormat="of" derivedContent="C309"/>) for UUIDs.  <contact fullname="Ted Ts'o"/> provided helpful comments.</t>
      <t indent="0" pn="section-appendix.c-4">We are also grateful to the careful reading and bit-twiddling of
      <contact fullname="Ralf S. Engelschall"/>, <contact fullname="John       Larmouth"/>, and <contact fullname="Paul Thorpe"/>.  <contact fullname="Professor Larmouth"/> was also invaluable in achieving
      coordination with ISO/IEC.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="K." surname="Davis" fullname="Kyzer R. Davis">
        <organization showOnFrontPage="true">Cisco Systems</organization>
        <address>
          <email>kydavis@cisco.com</email>
        </address>
      </author>
      <author initials="B." surname="Peabody" fullname="Brad G. Peabody">
        <organization showOnFrontPage="true">Uncloud</organization>
        <address>
          <email>brad@peabody.io</email>
        </address>
      </author>
      <author initials="P." surname="Leach" fullname="Paul J. Leach">
        <organization showOnFrontPage="true">University of Washington</organization>
        <address>
          <email>pjl7@uw.edu</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
