<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-jose-json-web-signature-41" indexInclude="true" number="7515" symRefs="true" tocDepth="3" tocInclude="true" xml:lang="en">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-jose-json-web-signature-41" rel="prev"/>
<link href="https://dx.doi.org/10.17487/rfc7515" rel="alternate"/>
  <front>
    <title>JSON Web Signature (JWS)</title>
    <seriesInfo name="RFC" value="7515" stream="IETF"/>
    <date year="2015" month="May"/>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">JSON Web Signature (JWS) は、JSON ベースのデータ構造を使用して、デジタル署名またはメッセージ認証コード (MAC) で保護されたコンテンツを表します。この仕様で使用する暗号アルゴリズムと識別子については、別個の JSON Web Algorithms (JWA) 仕様およびその仕様で定義された IANA レジストリに記載されています。関連する暗号化機能については、別個の JSON Web Encryption (JWE) 仕様で説明されています。</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">このメモのステータス</name>
        <t indent="0" pn="section-boilerplate.1.1">これはインターネット標準トラック文書です。</t>
        <t indent="0" pn="section-boilerplate.1.2">この文書は、インターネットエンジニアリングタスクフォース（IETF）の製品です。IETFコミュニティの合意を表しています。公開レビューを受け、インターネットエンジニアリングステアリンググループ（IESG）によって公開承認されました。インターネット標準に関する詳細は、RFC 5741のセクション2に記載されています。</t>
        <t indent="0" pn="section-boilerplate.1.3">この文書の現在の状態、正誤表、およびフィードバック方法に関する情報については、http://www.rfc-editor.org/info/rfc7515を参照してください。</t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">著作権表示</name>
        <t indent="0" pn="section-boilerplate.2-1">Copyright (c) 2015 IETF Trust and the persons identified as the
document authors.  All rights reserved.</t>
        <t indent="0" pn="section-boilerplate.2-2">この文書は、BCP 78およびIETFドキュメントに関するIETFトラストの法的規定 https://trustee.ietf.org/license-info にしたがう必要があります。これらの文書をよく確認し、この文書に関するあなたの権利と制限を説明しています。この文書から抽出されたコードコンポーネントには、Trust Legal Provisionsのセクション4.eに記載されているSimplified BSD Licenseのテキストが含まれている必要があり、Simplified BSD Licenseに記載されているように保証なしで提供されます。</t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">目次</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
            <li pn="section-toc.1-1.1.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notational-conventions">表記上の規則</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology">用語</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-web-signature-(jws)-overview">JSON Web Signature (JWS) 概要</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
            <li pn="section-toc.1-1.3.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-compact-serialization-overview">JWS Compact Serialization 概要</xref></t>
            </li>
            <li pn="section-toc.1-1.3.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-json-serialization-overview">JWS JSON Serialization 概要</xref></t>
            </li>
            <li pn="section-toc.1-1.3.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.3.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws">JWSの例</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jose-header">JOSEヘッダー</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
            <li pn="section-toc.1-1.4.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registered-header-parameter-names">登録済みヘッダパラメーター名</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.1.2">
              <li pn="section-toc.1-1.4.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.1.1"><xref derivedContent="4.1.1" format="counter" sectionFormat="of" target="section-4.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;alg&quot;-(algorithm)-header-parameter">&quot;alg&quot; (Algorithm) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.2.1"><xref derivedContent="4.1.2" format="counter" sectionFormat="of" target="section-4.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;jku&quot;-(jwk-set-url)-header-parameter">&quot;jku&quot; (JWK Set URL) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.3.1"><xref derivedContent="4.1.3" format="counter" sectionFormat="of" target="section-4.1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;jwk&quot;-(json-web-key)-header-parameter">&quot;jwk&quot; (JSON Web Key) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.4.1"><xref derivedContent="4.1.4" format="counter" sectionFormat="of" target="section-4.1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;kid&quot;-(key-id)-header-parameter">&quot;kid&quot; (Key ID) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.5">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.5.1"><xref derivedContent="4.1.5" format="counter" sectionFormat="of" target="section-4.1.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5u&quot;-(x.509-url)-header-parameter">&quot;x5u&quot; (X.509 URL) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.6">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.6.1"><xref derivedContent="4.1.6" format="counter" sectionFormat="of" target="section-4.1.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter">&quot;x5c&quot; (X.509 Certificate Chain) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.7">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.7.1"><xref derivedContent="4.1.7" format="counter" sectionFormat="of" target="section-4.1.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter">&quot;x5t&quot; (X.509 Certificate SHA-1 Thumbprint) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.8">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.8.1"><xref derivedContent="4.1.8" format="counter" sectionFormat="of" target="section-4.1.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header">&quot;x5t#S256&quot; (X.509 Certificate SHA-256 Thumbprint) Header</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.9">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.9.1"><xref derivedContent="4.1.9" format="counter" sectionFormat="of" target="section-4.1.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;typ&quot;-(type)-header-parameter">&quot;typ&quot; (Type) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.10">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.10.1"><xref derivedContent="4.1.10" format="counter" sectionFormat="of" target="section-4.1.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;cty&quot;-(content-type)-header-parameter">&quot;cty&quot; (Content Type) ヘッダーパラメーター</xref></t>
              </li>
              <li pn="section-toc.1-1.4.1.11">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.1.11.1"><xref derivedContent="4.1.11" format="counter" sectionFormat="of" target="section-4.1.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;crit&quot;-(critical)-header-parameter">&quot;crit&quot; (Critical) ヘッダーパラメーター</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.4.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-public-header-parameter-names">公開ヘッダーパラメーター名</xref></t>
            </li>
            <li pn="section-toc.1-1.4.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.4.3.1"><xref derivedContent="4.3" format="counter" sectionFormat="of" target="section-4.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-private-header-parameter-names">非公開ヘッダーパラメーター名</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-producing-and-consuming-jwss">JWSの生成と消費</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
            <li pn="section-toc.1-1.5.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-signature-or-mac-computation">メッセージ署名またはMACの計算</xref></t>
            </li>
            <li pn="section-toc.1-1.5.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-signature-or-mac-validation">メッセージ署名またはMACの検証</xref></t>
            </li>
            <li pn="section-toc.1-1.5.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.5.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-string-comparison-rules">文字列比較ルール</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-identification">Key Identification</xref></t>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-serializations">Serializations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2">
            <li pn="section-toc.1-1.7.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.1.1"><xref derivedContent="7.1" format="counter" sectionFormat="of" target="section-7.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-compact-serialization">JWS Compact Serialization</xref></t>
            </li>
            <li pn="section-toc.1-1.7.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.1"><xref derivedContent="7.2" format="counter" sectionFormat="of" target="section-7.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-json-serialization">JWS JSON Serialization</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.7.2.2">
              <li pn="section-toc.1-1.7.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.1.1"><xref derivedContent="7.2.1" format="counter" sectionFormat="of" target="section-7.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-general-jws-json-serialization-syntax">General JWS JSON Serialization Syntax</xref></t>
              </li>
              <li pn="section-toc.1-1.7.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.7.2.2.1"><xref derivedContent="7.2.2" format="counter" sectionFormat="of" target="section-7.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-flattened-jws-json-serialization-syntax">Flattened JWS JSON Serialization Syntax</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tls-requirements">TLS要件</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANAに関する考慮事項</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
            <li pn="section-toc.1-1.9.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-web-signature-and-encryption-header-parameters-registry">JSON Web Signature and Encryption Header Parameters Registry</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.1.2">
              <li pn="section-toc.1-1.9.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.1.1"><xref derivedContent="9.1.1" format="counter" sectionFormat="of" target="section-9.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registration-template">登録テンプレート</xref></t>
              </li>
              <li pn="section-toc.1-1.9.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.1.2.1"><xref derivedContent="9.1.2" format="counter" sectionFormat="of" target="section-9.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-initial-registry-contents">初期登録内容</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.9.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-media-type-registration">Media Type Registration</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.2.1" format="counter" sectionFormat="of" target="section-9.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-registry-contents">登録内容</xref></t>
              </li>
              </ul>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
            <li pn="section-toc.1-1.10.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-entropy-and-random-values">鍵のエントロピーとランダム値</xref></t>
            </li>
            <li pn="section-toc.1-1.10.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-protection">鍵の保護</xref></t>
            </li>
            <li pn="section-toc.1-1.10.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.3.1"><xref derivedContent="10.3" format="counter" sectionFormat="of" target="section-10.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-origin-authentication">鍵のオリジン認証</xref></t>
            </li>
            <li pn="section-toc.1-1.10.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.4.1"><xref derivedContent="10.4" format="counter" sectionFormat="of" target="section-10.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cryptographic-agility">暗号アジリティ</xref></t>
            </li>
            <li pn="section-toc.1-1.10.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.5.1"><xref derivedContent="10.5" format="counter" sectionFormat="of" target="section-10.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-differences-between-digital-signatures-and-macs">デジタル署名とMACの違い</xref></t>
            </li>
            <li pn="section-toc.1-1.10.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.6.1"><xref derivedContent="10.6" format="counter" sectionFormat="of" target="section-10.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-algorithm-validation">アルゴリズムの検証</xref></t>
            </li>
            <li pn="section-toc.1-1.10.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.7.1"><xref derivedContent="10.7" format="counter" sectionFormat="of" target="section-10.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-algorithm-protection">アルゴリズムの保護</xref></t>
            </li>
            <li pn="section-toc.1-1.10.8">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.8.1"><xref derivedContent="10.8" format="counter" sectionFormat="of" target="section-10.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-chosen-plaintext-attacks">選択平文攻撃</xref></t>
            </li>
            <li pn="section-toc.1-1.10.9">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.9.1"><xref derivedContent="10.9" format="counter" sectionFormat="of" target="section-10.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-timing-attacks">タイミング攻撃</xref></t>
            </li>
            <li pn="section-toc.1-1.10.10">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.10.1"><xref derivedContent="10.10" format="counter" sectionFormat="of" target="section-10.10"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-replay-protection">リプレイ攻撃対策</xref></t>
            </li>
            <li pn="section-toc.1-1.10.11">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.11.1"><xref derivedContent="10.11" format="counter" sectionFormat="of" target="section-10.11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-sha-1-certificate-thumbprints">SHA-1証明書のサムプリント</xref></t>
            </li>
            <li pn="section-toc.1-1.10.12">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.12.1"><xref derivedContent="10.12" format="counter" sectionFormat="of" target="section-10.12"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-json-security-considerations">JSONセキュリティー上の考慮事項</xref></t>
            </li>
            <li pn="section-toc.1-1.10.13">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.10.13.1"><xref derivedContent="10.13" format="counter" sectionFormat="of" target="section-10.13"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unicode-comparison-security-considerations">Unicodeの比較に関するセキュリティー上の考慮事項</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">参考文献</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
            <li pn="section-toc.1-1.11.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">引用規格</xref></t>
            </li>
            <li pn="section-toc.1-1.11.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.11.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">参考文献</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.A">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1"><xref derivedContent="A" format="counter" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-examples">JWSの例</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.2">
            <li pn="section-toc.1-1.A.1">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-hmac-sha-256">HMAC SHA-256を使用したJWSの例</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.1.2">
              <li pn="section-toc.1-1.A.1.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.1.1"><xref derivedContent="A.1.1" format="counter" sectionFormat="of" target="section-a.1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.1.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.1.2.1"><xref derivedContent="A.1.2" format="counter" sectionFormat="of" target="section-a.1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.2">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-rsassa-pkcs1-v1_5-sha-256">RSASSA-PKCS1-v1_5 SHA-256を使用したJWSの例</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.2.2">
              <li pn="section-toc.1-1.A.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.1.1"><xref derivedContent="A.2.1" format="counter" sectionFormat="of" target="section-a.2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.2.2.1"><xref derivedContent="A.2.2" format="counter" sectionFormat="of" target="section-a.2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.3">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.1"><xref derivedContent="A.3" format="counter" sectionFormat="of" target="section-a.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-ecdsa-p-256-sha-256">ECDSA P-256 SHA-256を使用したJWSの例</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.3.2">
              <li pn="section-toc.1-1.A.3.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.1.1"><xref derivedContent="A.3.1" format="counter" sectionFormat="of" target="section-a.3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.3.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.3.2.1"><xref derivedContent="A.3.2" format="counter" sectionFormat="of" target="section-a.3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.4">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.1"><xref derivedContent="A.4" format="counter" sectionFormat="of" target="section-a.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-ecdsa-p-521-sha-512">ECDSA P-521 SHA-512を使用したJWSの例</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.4.2">
              <li pn="section-toc.1-1.A.4.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.1.1"><xref derivedContent="A.4.1" format="counter" sectionFormat="of" target="section-a.4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-encoding">Encoding</xref></t>
              </li>
              <li pn="section-toc.1-1.A.4.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.4.2.1"><xref derivedContent="A.4.2" format="counter" sectionFormat="of" target="section-a.4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating">Validating</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.5">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.5.1"><xref derivedContent="A.5" format="counter" sectionFormat="of" target="section-a.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-unsecured-jws">Unsecured JWSの例</xref></t>
            </li>
            <li pn="section-toc.1-1.A.6">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.1"><xref derivedContent="A.6" format="counter" sectionFormat="of" target="section-a.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-general-jws-json-serialization">JWSの例 Using General JWS JSON Serialization</xref></t>
              <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.A.6.2">
              <li pn="section-toc.1-1.A.6.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.1.1"><xref derivedContent="A.6.1" format="counter" sectionFormat="of" target="section-a.6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-per-signature-protected-headers">JWS Per-Signature Protected Headers</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.2.1"><xref derivedContent="A.6.2" format="counter" sectionFormat="of" target="section-a.6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-jws-per-signature-unprotected-headers">JWS Per-Signature Unprotected Headers</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.3.1"><xref derivedContent="A.6.3" format="counter" sectionFormat="of" target="section-a.6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-complete-jose-header-values">Complete JOSEヘッダー Values</xref></t>
              </li>
              <li pn="section-toc.1-1.A.6.4">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.6.4.1"><xref derivedContent="A.6.4" format="counter" sectionFormat="of" target="section-a.6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-complete-jws-json-serialization-representation">Complete JWS JSON Serialization Representation</xref></t>
              </li>
              </ul>
            </li>
            <li pn="section-toc.1-1.A.7">
              <t indent="0" keepWithNext="true" pn="section-toc.1-1.A.7.1"><xref derivedContent="A.7" format="counter" sectionFormat="of" target="section-a.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-jws-using-flattened-jws-json-serialization">Flattened JWS JSON Serializationを使用したJWSの例</xref></t>
            </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.B">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.B.1"><xref derivedContent="B" format="counter" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-&quot;x5c&quot;-(x.509-certificate-chain)-example">&quot;x5c&quot; (X.509 Certificate Chain) 例</xref></t>
          </li>
          <li pn="section-toc.1-1.C">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.C.1"><xref derivedContent="C" format="counter" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notes-on-implementing-base64url-encoding-without-padding">パディングなしでbase64urlエンコードを実装する際の注意事項</xref></t>
          </li>
          <li pn="section-toc.1-1.D">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.D.1"><xref derivedContent="D" format="counter" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-notes-on-key-selection">鍵選択に関する注意事項</xref></t>
          </li>
          <li pn="section-toc.1-1.E">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.E.1"><xref derivedContent="E" format="counter" sectionFormat="of" target="section-appendix.e"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-negative-test-case-for-&quot;crit&quot;-header-parameter">&quot;crit&quot;ヘッダーパラメーターの負のテストケース</xref></t>
          </li>
          <li pn="section-toc.1-1.F">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.F.1"><xref derivedContent="F" format="counter" sectionFormat="of" target="section-appendix.f"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-detached-content">切り離されたコンテンツ</xref></t>
          </li>
          <li pn="section-toc.1-1.g">
            <t indent="0" pn="section-toc.1-1.g.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.g"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">謝辞</xref></t>
          </li>
      </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">JSON Web Signature (JWS) は、JSON ベースのデータ構造を使用して、デジタル署名またはメッセージ認証コード (MAC) で保護されたコンテンツを表します。JWS 暗号メカニズムは、任意のオクテットのシーケンスの整合性保護を提供します。デジタル署名と MAC の違いについては、セクション 10.5 を参照してください。</t>
      <t indent="0" pn="section-1-2">JWS の 2 つの関連するシリアル化形式が定義されています。JWS コンパクトシリアル化は、HTTP 認証ヘッダーや URI クエリパラメーターなどのスペースが制限された環境向けに設計されたコンパクトで URL セーフな表現です。JWS JSON シリアル化は、JWS を JSON オブジェクトとして表現し、同じコンテンツに複数の署名と/または MAC を適用できるようにします。両方とも、同じ暗号基盤を共有しています。</t>
      <t indent="0" pn="section-1-3">この仕様で使用する暗号アルゴリズムと識別子については、別個の JSON Web Algorithms (JWA) 仕様およびその仕様で定義された IANA レジストリに記載されています。関連する暗号化機能については、別個の JSON Web Encryption (JWE) 仕様で説明されています。</t>
      <t indent="0" pn="section-1-4">この仕様で定義された名前は短くなっています。なぜなら、結果として得られる表現がコンパクトであることが主な目的だからです。</t>
      <section anchor="notational-conventions" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-notational-conventions">表記上の規則</name>
        <t indent="0" pn="section-1.1-1">キーワード「<bcp14>しなければなりません（MUST）</bcp14>」、「<bcp14>してはなりません（MUST NOT）</bcp14>」、
「<bcp14>要求されています（REQUIRED）</bcp14>」、
「<bcp14>することになります（SHALL）</bcp14>」、「<bcp14>することはありません（SHALL NOT）</bcp14>」、
「<bcp14>すべきです（SHOULD）</bcp14>」、「<bcp14>すべきではありません（SHOULD NOT）</bcp14>」、
「<bcp14>推奨されます（RECOMMENDED）</bcp14>」、「<bcp14>推奨されません（NOT RECOMMENDED）</bcp14>」、
「<bcp14>してもよいです（MAY）</bcp14>」、「<bcp14>選択できます（OPTIONAL）</bcp14>」は、
<xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/>に記載されているとおりに解釈されるものとします。
これらのキーワードは、大文字で表記されている場合にのみ適用されると解釈すべきです</t>
        <t indent="0" pn="section-1.1-2">BASE64URL（OCTETS）は、セクション2に従ってOCTETSのbase64urlエンコーディングを示します。</t>
        <t indent="0" pn="section-1.1-3">UTF8（STRING）は、STRINGがゼロ個以上のUnicode<xref target="UNICODE" format="default" sectionFormat="of" derivedContent="UNICODE"/>文字のシーケンスである場合、STRINGのUTF-8<xref target="RFC3629" format="default" sectionFormat="of" derivedContent="RFC3629"/>表現のオクテットを示します。</t>
        <t indent="0" pn="section-1.1-4">ASCII（STRING）は、STRINGがゼロ個以上のASCII文字のシーケンスである場合、STRINGのASCII<xref target="RFC20" format="default" sectionFormat="of" derivedContent="RFC20"/>表現のオクテットを示します。</t>
        <t indent="0" pn="section-1.1-5">2つの値AとBの連結は、A || Bと表されます。</t>
      </section>
    </section>
    <section anchor="terminology" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-terminology">用語</name>
      <t indent="0" pn="section-2-1">この仕様で定義される用語は以下の通りです:</t>
      <t indent="0" pn="section-2-2">JSON Web Signature (JWS)
   デジタル署名またはMACで保護されたメッセージを表すデータ構造。</t>
      <t indent="0" pn="section-2-3">JOSEヘッダー
   暗号操作とパラメーターを記述するパラメーターを含むJSONオブジェクト。JOSE（JSON Object Signing and Encryption）ヘッダーは、ヘッダーパラメーターのセットで構成されています。</t>
      <t indent="0" pn="section-2-4">JWS Payload
   保護されるオクテットのシーケンス、つまりメッセージ。ペイロードには任意のオクテットのシーケンスを含めることができます。</t>
      <t indent="0" pn="section-2-5">JWS Signature
   JWS Protected HeaderとJWS Payloadのデジタル署名またはMAC。</t>
      <t indent="0" pn="section-2-6">ヘッダーパラメーター
   JOSE Headerのメンバーである名前/値のペア。</t>
      <t indent="0" pn="section-2-7">JWS Protected Header
   JWS Signatureデジタル署名またはMAC操作によって整合性が保護されるヘッダーパラメーターを含むJSONオブジェクト。JWS Compact Serializationの場合、これはJOSE Header全体を構成します。JWS JSON Serializationの場合、これはJOSE Headerの1つのコンポーネントです。</t>
      <t indent="0" pn="section-2-8">JWS Unprotected Header
   整合性が保護されていないヘッダーパラメーターを含むJSONオブジェクト。これはJWS JSON Serializationを使用している場合にのみ存在できます。</t>
      <t indent="0" pn="section-2-9">Base64url Encoding
   RFC 4648のセクション5で定義されたURLとファイル名に適した文字セットを使用したBase64エンコーディングで、すべての末尾の「=」文字が省略されています（セクション3.2で許可されています）。また、改行、空白、またはその他の追加文字を含めることはできません。空のオクテットシーケンスのbase64urlエンコーディングは空の文字列です（パディングなしでbase64urlエンコーディングを実装するためのノートについては、付録Cを参照してください）。</t>
      <t indent="0" pn="section-2-10">JWS Signing Input
   デジタル署名またはMAC計算の入力。その値はASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload))です。</t>
      <t indent="0" pn="section-2-11">JWS Compact Serialization
   JWSをコンパクトでURLセーフな文字列として表現します。</t>
      <t indent="0" pn="section-2-12">JWS JSON Serialization
   JWSをJSONオブジェクトとして表現します。JWS Compact Serializationとは異なり、JWS JSON Serializationでは同じコンテンツに複数のデジタル署名と/またはMACを適用できます。この表現は、コンパクト性やURLセーフ性に最適化されていません。</t>
      <t indent="0" pn="section-2-13">Unsecured JWS
   整合性保護を提供しないJWS。Unsecured JWSは、「alg」値「none」を使用します。</t>
      <t indent="0" pn="section-2-14">Collision-Resistant Name
   名前が他の名前と高い確率で衝突しないように名前を割り当てるための名前空間内の名前。衝突耐性のある名前空間の例には、ドメイン名、ITU-T X.660およびX.670勧告シリーズで定義されたオブジェクト識別子（OID）、およびUniversally Unique IDentifiers（UUID）<xref target="RFC4122" format="default" sectionFormat="of" derivedContent="RFC4122"/>が含まれます。管理的に委任された名前空間を使用する場合、名前の定義者は、名前を定義するために使用する名前空間の部分を制御していることを合理的に確認する必要があります。</t>
      <t indent="0" pn="section-2-15">StringOrURI
   追加の要件として、任意の文字列値を使用できますが、「：」文字を含む値はURIである必要があるという条件があります。StringOrURI値は、変換や正準化が適用されずに大文字と小文字を区別する文字列として比較されます。</t>
      <t indent="0" pn="section-2-16">「JSON Web Encryption（JWE）」、「JWE Compact Serialization」、「JWE JSON Serialization」の用語は、JWE仕様で定義されています<xref target="JWE" format="default" sectionFormat="of" derivedContent="JWE"/>。</t>
      <t indent="0" pn="section-2-17">「Digital Signature」と「Message Authentication Code（MAC）」の用語は、「Internet Security Glossary, Version 2」<xref target="RFC4949" format="default" sectionFormat="of" derivedContent="RFC4949"/>で定義されています。</t>
    </section>
    <section anchor="json-web-signature-(jws)-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-json-web-signature-(jws)-overview">JSON Web Signature (JWS) 概要</name>
      <t indent="0" pn="section-3-1">JWSは、JSONデータ構造とbase64urlエンコーディングを使用して、デジタルに署名されたまたはMACされたコンテンツを表します。これらのJSONデータ構造には、RFC 7159のセクション2に従って、JSON値または構造上の文字の前後にホワイトスペースと/または改行が含まれる場合があります。<bcp14>MAY</bcp14>。 JWSは、これらの論理値を表します（それぞれはセクション2で定義されています）：<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>。</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3-2">
        <li pn="section-3-2.1"> JOSEヘッダー</li>
        <li pn="section-3-2.2"> JWS Payload</li>
        <li pn="section-3-2.3"> JWS Signature</li>
      </ul>
      <t indent="0" pn="section-3-3">JWSの場合、JOSEヘッダーメンバーは、これらの値のメンバーの和集合です（それぞれはセクション2で定義されています）：</t>
      <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3-4">
        <li pn="section-3-4.1"> JWS保護ヘッダー</li>
        <li pn="section-3-4.2"> JWS非保護ヘッダー</li>
      </ul>
      <t indent="0" pn="section-3-5">このドキュメントでは、JWSに対して2つのシリアル化方法が定義されています。1つはJWSコンパクトシリアル化と呼ばれるコンパクトでURLセーフなシリアル化で、もう1つはJWS JSONシリアル化と呼ばれるJSONシリアル化です。両方のシリアル化において、JWS保護ヘッダー、JWSペイロード、およびJWSシグネチャは、JSONが任意のオクテットシーケンスを直接表現する方法を持たないため、base64urlエンコードされます。</t>
      <section anchor="jws-compact-serialization-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-jws-compact-serialization-overview">JWS Compact Serialization 概要</name>
        <t indent="0" pn="section-3.1-1">JWS Compact Serializationでは、JWS Unprotected Headerは使用されません。
この場合、JOSE HeaderとJWS Protected Headerは同じです。</t>
        <t indent="0" pn="section-3.1-2">JWS Compact Serializationでは、JWSは以下の連結として表されます：</t>
        <t indent="0" pn="section-3.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   BASE64URL(UTF8(JWS Protected Header)) || '.' ||
   BASE64URL(JWS Payload) || '.' ||
   BASE64URL(JWS Signature)
]]></artwork>
</t>
        <t indent="0" pn="section-3.1-4">See Section 7.1 for more information about the JWS Compact
Serialization.</t>
      </section>
      <section anchor="jws-json-serialization-overview" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-jws-json-serialization-overview">JWS JSON Serialization 概要</name>
        <t indent="0" pn="section-3.2-1">JWS JSONシリアル化では、JWS保護ヘッダーとJWS保護されていないヘッダーのいずれか1つまたは両方が存在する<bcp14>MUST</bcp14>です。この場合、JOSEヘッダーのメンバーは、JWS保護ヘッダーとJWS保護されていないヘッダーの値の和集合です。</t>
        <t indent="0" pn="section-3.2-2">JWS JSONシリアル化では、JWSは、次の4つのメンバーのいずれかまたはすべてを含むJSONオブジェクトとして表されます。</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-3.2-3">
          <li pn="section-3.2-3.1"> &quot;protected&quot;、値はBASE64URL（UTF8（JWS保護ヘッダー））</li>
          <li pn="section-3.2-3.2"> &quot;header&quot;、値はJWS保護されていないヘッダー</li>
          <li pn="section-3.2-3.3"> &quot;payload&quot;、値はBASE64URL（JWSペイロード）</li>
          <li pn="section-3.2-3.4"> &quot;signature&quot;、値はBASE64URL（JWS署名）</li>
        </ul>
        <t indent="0" pn="section-3.2-4">3つのbase64urlエンコードされた結果文字列とJWS保護されていないヘッダーの値は、JSONオブジェクト内のメンバーとして表されます。これらの値の一部を含めることは<bcp14>オプション</bcp14>です。JWS JSONシリアル化では、1つではなく複数の署名および/またはMAC値を表すこともできます。JWS JSONシリアル化に関する詳細については、セクション7.2を参照してください。</t>
      </section>
      <section anchor="example-jws" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-example-jws">JWSの例</name>
        <t indent="0" pn="section-3.3-1">このセクションでは、JWSの例を示します。詳細については、付録A.1で、使用されるJSON値の正確なオクテットシーケンスと使用されるキー値を指定することが説明されています。</t>
        <t indent="0" pn="section-3.3-2">次の例のJWS Protected Headerは、エンコードされたオブジェクトがJSON Web Token<xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/>であり、JWS Protected HeaderとJWS PayloadがHMAC SHA-256<xref target="RFC2104" format="default" sectionFormat="of" derivedContent="RFC2104"/> <xref target="SHS" format="default" sectionFormat="of" derivedContent="SHS"/>アルゴリズムを使用して保護されていることを宣言しています。</t>
        <t indent="0" pn="section-3.3-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"typ":"JWT",
   "alg":"HS256"}
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-4">このJWS Protected HeaderをBASE64URL(UTF8(JWS Protected Header))としてエンコードすると、次の値が得られます。</t>
        <t indent="0" pn="section-3.3-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-6">次のJSONオブジェクトのUTF-8表現がJWSペイロードとして使用されます。 （ペイロードは任意のコンテンツであり、JSONオブジェクトの表現である必要はありません。）</t>
        <t indent="0" pn="section-3.3-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-8">このJWSペイロードをBASE64URL(JWS Payload)としてエンコードすると、次の値が得られます（表示目的の改行を含む）：</t>
        <t indent="0" pn="section-3.3-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-10">JWS署名入力のASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload))のHMAC SHA-256アルゴリズムを使用して、付録A.1で指定されたキーを使用して計算し、結果をbase64urlエンコードすると、次のBASE64URL(JWS Signature)値が得られます。</t>
        <t indent="0" pn="section-3.3-11"><artwork name="" type="" align="left" alt=""><![CDATA[
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-12">これらの値をHeader.Payload.Signatureの順序で連結し、部分間にピリオド（'.'）文字を使用すると、JWS Compact Serializationを使用した完全なJWS表現が得られます（表示目的の改行を含む）：</t>
        <t indent="0" pn="section-3.3-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        <t indent="0" pn="section-3.3-14">セクションA.6およびA.7のJWS JSON Serializationを使用した例を含む、追加の例については、付録Aを参照してください。</t>
      </section>
    </section>
    <section anchor="jose-header" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-jose-header">JOSEヘッダー</name>
      <t indent="0" pn="section-4-1">JWSの場合、JOSEヘッダーを表すJSONオブジェクトのメンバーは、JWS保護ヘッダーとJWSペイロードに適用されるデジタル署名またはMAC、およびJWSのオプションの追加プロパティを説明します。JOSEヘッダー内のヘッダーパラメーター名は、一意である必要があります。JWSパーサーは、重複するヘッダーパラメーター名を持つJWSを拒否するか、ECMAScript 5.1のセクション15.12（「JSONオブジェクト」）で指定されているように、レキシカルに最後の重複メンバー名のみを返すJSONパーサーを使用<bcp14>しなければなりません（MUST）</bcp14></t>
      <t indent="0" pn="section-4-2">実装は、この仕様で「理解する必要がある」と指定された特定のヘッダーパラメーターを理解し、この仕様で定義された方法で処理する必要があります。この仕様で定義されたその他のヘッダーパラメーターは、理解されない場合は無視する必要があります。セクション4.1.11に記載されていない限り、この仕様で定義されていないすべてのヘッダーパラメーターは、理解されない場合は無視<bcp14>しなければなりません（MUST）</bcp14></t>
      <t indent="0" pn="section-4-3">ヘッダーパラメーター名には、登録済みヘッダーパラメーター名、パブリックヘッダーパラメーター名、およびプライベートヘッダーパラメーター名の3つのクラスがあります。</t>
      <section anchor="registered-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-registered-header-parameter-names">登録済みヘッダパラメーター名</name>
        <t indent="0" pn="section-4.1-1">JWSで使用するために登録されたHeader Parameter名は、セクション9.1で設立されたIANA「JSON Web Signature and Encryption Header Parameters」レジストリに登録されており、以下のサブセクションで定義される意味を持ちます。</t>
        <t indent="0" pn="section-4.1-2">共通のレジストリによって示されるように、JWSとJWEは共通のHeader Parameterスペースを共有しています。両方の仕様でパラメーターが使用される場合、その使用法は仕様間で互換性がある必要があります。</t>
        <section anchor="&quot;alg&quot;-(algorithm)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.1">
          <name slugifiedName="name-&quot;alg&quot;-(algorithm)-header-parameter">&quot;alg&quot; (Algorithm) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.1-1">&quot;alg&quot;（アルゴリズム）ヘッダーパラメーターは、JWSを保護するために使用される暗号アルゴリズムを識別します。 &quot;alg&quot;値がサポートされていないアルゴリズムを表している場合、またはデジタルに署名またはMACされたコンテンツを処理するためのキーが関連付けられていない場合、JWS署名値は無効です。 &quot;alg&quot;値は、IANAによって設立された「JSON Web Signature and Encryption Algorithms」レジストリに登録されているか、衝突耐性のある名前を含む値である必要があります。 &quot;alg&quot;値は、StringOrURI値を含む大文字と小文字を区別するASCII文字列です。このヘッダーパラメーターは存在<bcp14>しなければなりません（MUST）</bcp14>。実装によって理解され、処理される<bcp14>必要があります（MUST）</bcp14>。</t>
          <t indent="0" pn="section-4.1.1-2">この用途の定義済みの&quot;alg&quot;値のリストは、<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>によって設立されたIANAの「JSON Web Signature and Encryption Algorithms」レジストリで見つけることができます。このレジストリの最初の内容は、<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>のセクション3.1で定義された値です。</t>
        </section>
        <section anchor="&quot;jku&quot;-(jwk-set-url)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.2">
          <name slugifiedName="name-&quot;jku&quot;-(jwk-set-url)-header-parameter">&quot;jku&quot; (JWK Set URL) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.2-1">&quot;jku&quot; (JWK Set URL)ヘッダーパラメーターは、JSONエンコードされた公開鍵のセットのリソースを参照するURI <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/>であり、そのうち1つがJWSのデジタル署名に使用されるキーに対応します。キーはJWK Set <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>としてエンコードする必要があります。リソースを取得するために使用されるプロトコルは、整合性保護を提供する必要があります。JWK Setを取得するためのHTTP GETリクエストは、Transport Layer Security (TLS) <xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/> <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>を使用する必要があり、サーバーの識別情報はRFC 6125 <xref target="RFC6125" format="default" sectionFormat="of" derivedContent="RFC6125"/>のセクション6に従って検証する必要があります。また、TLS要件に関するセクション8も参照してください。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
        </section>
        <section anchor="&quot;jwk&quot;-(json-web-key)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.3">
          <name slugifiedName="name-&quot;jwk&quot;-(json-web-key)-header-parameter">&quot;jwk&quot; (JSON Web Key) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.3-1">&quot;jwk&quot;（JSON Web Key）ヘッダーパラメーターは、JWSをデジタル署名するために使用されるキーに対応する公開鍵を表します。このキーはJSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>として表されます。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
        </section>
        <section anchor="&quot;kid&quot;-(key-id)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.4">
          <name slugifiedName="name-&quot;kid&quot;-(key-id)-header-parameter">&quot;kid&quot; (Key ID) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.4-1">&quot;kid&quot;（キーID）ヘッダーパラメーターは、JWSを保護するために使用されたキーを示すヒントです。このパラメーターにより、送信者は受信者に対してキーの変更を明示的に通知できます。 &quot;kid&quot;値の構造は未指定です。その値は大文字と小文字を区別する文字列である必要があります。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
          <t indent="0" pn="section-4.1.4-2">JWKと一緒に使用する場合、&quot;kid&quot;値はJWKの&quot;kid&quot;パラメーター値と一致するように使用されます。</t>
        </section>
        <section anchor="&quot;x5u&quot;-(x.509-url)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.5">
          <name slugifiedName="name-&quot;x5u&quot;-(x.509-url)-header-parameter">&quot;x5u&quot; (X.509 URL) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.5-1">&quot;x5u&quot;（X.509 URL）ヘッダーパラメーターは、JWSをデジタル署名するために使用されるキーに対応するX.509公開鍵証明書または証明書チェーンのリソースを参照するURI <xref target="RFC3986" format="default" sectionFormat="of" derivedContent="RFC3986"/>です。識別されたリソースはRFC 5280 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>に準拠したPEMエンコード形式で表された証明書または証明書チェーンの表現を提供する必要があり、各証明書はRFC 4945 <xref target="RFC4945" format="default" sectionFormat="of" derivedContent="RFC4945"/>のセクション6.1で指定されたように区切られている必要があります。JWSをデジタル署名するために使用される公開鍵を含む証明書は、最初の証明書である必要があります。これに続いて、前の証明書を認証するために使用される証明書が続く場合があります。リソースを取得するために使用されるプロトコルは整合性保護を提供する必要があります。証明書を取得するためのHTTP GETリクエストは、Transport Layer Security（TLS）<xref target="RFC2818" format="default" sectionFormat="of" derivedContent="RFC2818"/> <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>を使用する必要があり、サーバーの識別子はRFC 6125のセクション6に従って検証する必要があります。TLS要件については、セクション8を参照してください。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
        </section>
        <section anchor="&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.6">
          <name slugifiedName="name-&quot;x5c&quot;-(x.509-certificate-chain)-header-parameter">&quot;x5c&quot; (X.509 Certificate Chain) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.6-1">「x5c」（X.509証明書チェーン）ヘッダーパラメーターには、JWSにデジタル署名するために使用されるキーに対応するX.509公開鍵証明書または証明書チェーンが含まれます。証明書または証明書チェーンは、証明書値文字列のJSON配列として表されます。配列内の各文字列は、base64エンコードされた（<xref target="RFC4648" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc4648#section-4" derivedContent="RFC4648"/> - base64urlエンコードされていない）DER <xref target="ITU.X690.2008" format="default" sectionFormat="of" derivedContent="ITU.X690.2008"/> PKIX証明書値です。JWSにデジタル署名するために使用される公開鍵を含む証明書は、最初の証明書である<bcp14>MUST</bcp14>。これに続いて、追加の証明書が続く場合があります。各証明書は、前の証明書を認証するために使用されます。受信者は、RFC 5280 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>に従って証明書チェーンを検証し、検証に失敗した場合は証明書または証明書チェーンを無効とする<bcp14>MUST</bcp14>。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
          <t indent="0" pn="section-4.1.6-2">See Appendix B for an example &quot;x5c&quot; value.</t>
        </section>
        <section anchor="&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.7">
          <name slugifiedName="name-&quot;x5t&quot;-(x.509-certificate-sha-1-thumbprint)-header-parameter">&quot;x5t&quot; (X.509 Certificate SHA-1 Thumbprint) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.7-1">&quot;x5t&quot;（X.509証明書SHA-1サムプリント）ヘッダーパラメーターは、JWSをデジタル署名するために使用されるキーに対応するX.509証明書のDERエンコードのSHA-1サムプリント（別名ダイジェスト）のbase64urlエンコードです。証明書のサムプリントは、証明書フィンガープリントとしても知られています。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
        </section>
        <section anchor="&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.8">
          <name slugifiedName="name-&quot;x5t#s256&quot;-(x.509-certificate-sha-256-thumbprint)-header">&quot;x5t#S256&quot; (X.509 Certificate SHA-256 Thumbprint) Header</name>
          <t indent="0" pn="section-4.1.8-1"><artwork name="" type="" align="left" alt=""><![CDATA[
   Parameter
]]></artwork>
</t>
          <t indent="0" pn="section-4.1.8-2">&quot;x5t#S256&quot;（X.509証明書SHA-256サムプリント）ヘッダーパラメーターは、JWSをデジタル署名するために使用されるキーに対応するX.509証明書のDERエンコードのSHA-256サムプリント（別名ダイジェスト）のbase64urlエンコードです。証明書のサムプリントは、証明書フィンガープリントとしても知られています。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。<xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/>に対応するX.509証明書のDERエンコードのSHA-256サムプリントを取得するために使用されるアルゴリズムは、RFC 6234 <xref target="RFC6234" format="default" sectionFormat="of" derivedContent="RFC6234"/>で定義されています。</t>
        </section>
        <section anchor="&quot;typ&quot;-(type)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.9">
          <name slugifiedName="name-&quot;typ&quot;-(type)-header-parameter">&quot;typ&quot; (Type) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.9-1">&quot;typ&quot;（タイプ）ヘッダーパラメーターは、JWSアプリケーションがこの完全なJWSのメディアタイプ<xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/>を宣言するために使用されます。これは、JWSを含むアプリケーションデータ構造に複数の種類のオブジェクトが存在する場合に、アプリケーションが異なる種類のオブジェクトを区別するためにこの値を使用できるようにするためです。オブジェクトの種類が既にわかっている場合、通常はアプリケーションによって使用されません。このパラメーターは、JWS実装によって無視されます。このパラメーターの処理は、JWSアプリケーションによって実行されます。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
          <t indent="0" pn="section-4.1.9-2">RFC 2045 <xref target="RFC2045" format="default" sectionFormat="of" derivedContent="RFC2045"/>によると、すべてのメディアタイプ値、サブタイプ値、およびパラメーター名は大文字と小文字を区別しません。ただし、特定のパラメーターに対して別に指定されていない限り、パラメーター値は大文字と小文字を区別します。</t>
          <t indent="0" pn="section-4.1.9-3">一般的な状況でメッセージをコンパクトに保つために、プロデューサーは、メディアタイプ値に他の「/」が含まれていない場合、ヘッダーパラメーターの「typ」に「application/」接頭辞を省略することを<bcp14>推奨</bcp14>します。メディアタイプ値を使用する受信者は、'/ 'を含まない'typ'値に'application/'が前置されたものとして扱う<bcp14>必要があります</bcp14>。たとえば、「typ」値が「example」の場合、「application/example」メディアタイプを表すために使用する<bcp14>必要があります</bcp14>。一方、「application/example;part=&quot;1/2&quot;」メディアタイプは、「example;part=&quot;1/2&quot;」に短縮できません。</t>
          <t indent="0" pn="section-4.1.9-4">&quot;typ&quot;値「JOSE」は、このオブジェクトがJWS Compact SerializationまたはJWE Compact Serializationを使用してJWSまたはJWEであることを示すためにアプリケーションによって使用できます。「typ」値「JOSE+JSON」は、このオブジェクトがJWS JSON SerializationまたはJWE JSON Serializationを使用してJWSまたはJWEであることを示すためにアプリケーションによって使用できます。他のタイプの値もアプリケーションによって使用できます。</t>
        </section>
        <section anchor="&quot;cty&quot;-(content-type)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.10">
          <name slugifiedName="name-&quot;cty&quot;-(content-type)-header-parameter">&quot;cty&quot; (Content Type) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.10-1">&quot;cty&quot;（コンテンツタイプ）ヘッダーパラメーターは、JWSアプリケーションが保護されたコンテンツ（ペイロード）のメディアタイプ<xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/>を宣言するために使用されます。これは、JWSペイロードに複数の種類のオブジェクトが存在する場合、アプリケーションが異なる種類のオブジェクトを区別するためにこの値を使用できるようにするためです。オブジェクトの種類が既にわかっている場合、通常はアプリケーションによって使用されません。このパラメーターは、JWS実装によって無視されます。このパラメーターの処理は、JWSアプリケーションによって実行されます。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。</t>
          <t indent="0" pn="section-4.1.10-2">RFC 2045 <xref target="RFC2045" format="default" sectionFormat="of" derivedContent="RFC2045"/>によると、すべてのメディアタイプ値、サブタイプ値、およびパラメーター名は大文字と小文字を区別しません。ただし、特定のパラメーターに対して別に指定されていない限り、パラメーター値は大文字と小文字を区別します。</t>
          <t indent="0" pn="section-4.1.10-3">一般的な状況でメッセージをコンパクトに保つために、プロデューサーは、メディアタイプ値に他の「/」が含まれていない場合、ヘッダーパラメーターの「cty」に「application/」接頭辞を省略することを<bcp14>推奨</bcp14>します。メディアタイプ値を使用する受信者は、'/ 'を含まない'cty'値に'application/'が前置されたものとして扱う<bcp14>必要があります</bcp14>。たとえば、「cty」値が「example」の場合、「application/example」メディアタイプを表すために使用する<bcp14>必要があります</bcp14>。一方、「application/example;part=&quot;1/2&quot;」メディアタイプは、「example;part=&quot;1/2&quot;」に短縮できません。</t>
        </section>
        <section anchor="&quot;crit&quot;-(critical)-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-4.1.11">
          <name slugifiedName="name-&quot;crit&quot;-(critical)-header-parameter">&quot;crit&quot; (Critical) ヘッダーパラメーター</name>
          <t indent="0" pn="section-4.1.11-1">&quot;crit&quot;（クリティカル）ヘッダーパラメーターは、この仕様および<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>の拡張機能が使用されていることを示し、理解および処理する<bcp14>必要がある</bcp14>ことを示します。その値は、これらの拡張機能を使用するJOSEヘッダーに存在するヘッダーパラメーター名のリストを示す配列です。リストされた拡張ヘッダーパラメーターのいずれかが受信者によって理解されず、サポートされていない場合、JWSは無効です。プロデューサーは、この仕様で定義されたヘッダーパラメーター名、またはJWSで使用するために<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>で定義された名前、重複した名前、または「crit」リスト内のJOSEヘッダー内のヘッダーパラメーター名として存在しない名前を使用しては<bcp14>なりません</bcp14>。プロデューサーは、空のリスト「[]」を「crit」値として使用しては<bcp14>なりません</bcp14>。受信者は、この仕様で定義されたヘッダーパラメーター名、またはJWSで使用するために<xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>で定義された名前がクリティカルリストに含まれている場合、またはその使用に関するその他の制約が違反されている場合、JWSを無効と見なす<bcp14>ことができます</bcp14>。使用する場合、このヘッダーパラメーターは完全性保護されるため、JWS Protected Header内にのみ存在する<bcp14>必要があります</bcp14>。このヘッダーパラメーターの使用は<bcp14>オプション</bcp14>です。このヘッダーパラメーターは、実装によって理解および処理する<bcp14>必要があります</bcp14>。</t>
          <t indent="0" pn="section-4.1.11-2">仮想の「exp」（有効期限）フィールドとともに使用する例は次のとおりです。</t>
          <t indent="0" pn="section-4.1.11-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256",
   "crit":["exp"],
   "exp":1363284000
  }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="public-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-public-header-parameter-names">公開ヘッダーパラメーター名</name>
        <t indent="0" pn="section-4.2-1">JWSを使用する者は、追加のヘッダーパラメーター名を定義できます。ただし、衝突を防ぐために、新しいヘッダーパラメーター名は、セクション9.1で確立されたIANA「JSON Web Signature and Encryption Header Parameters」レジストリに登録されるか、衝突耐性のある名前を含む値であるパブリックネームである必要があります。いずれの場合も、名前または値の定義者は、ヘッダーパラメーター名を定義するために使用する名前空間の部分を制御していることを確認するために、合理的な注意を払う必要があります。</t>
        <t indent="0" pn="section-4.2-2">新しいヘッダーパラメーターは、相互運用性のないJWSを引き起こす可能性があるため、控えめに導入する必要があります。</t>
      </section>
      <section anchor="private-header-parameter-names" numbered="true" removeInRFC="false" toc="include" pn="section-4.3">
        <name slugifiedName="name-private-header-parameter-names">非公開ヘッダーパラメーター名</name>
        <t indent="0" pn="section-4.3-1">JWSの生成者と検証者は、ヘッダーパラメーター名として、登録されたヘッダーパラメーター名（セクション4.1）でないプライベート名またはパブリックヘッダーパラメーター名（セクション4.2）を使用することに同意する場合があります。パブリックヘッダーパラメーター名とは異なり、プライベートヘッダーパラメーター名は衝突の可能性があり、注意して使用する必要があります。</t>
      </section>
    </section>
    <section anchor="producing-and-consuming-jwss" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-producing-and-consuming-jwss">JWSの生成と消費</name>
      <section anchor="message-signature-or-mac-computation" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-message-signature-or-mac-computation">メッセージ署名またはMACの計算</name>
        <t indent="0" pn="section-5.1-1">JWSを作成するには、次の手順を実行します。入力と出力の間に依存関係がない場合、手順の順序は重要ではありません。</t>
        <t indent="0" pn="section-5.1-2">1. JWSペイロードとして使用するコンテンツを作成します。</t>
        <t indent="0" pn="section-5.1-3">2. エンコードされたペイロード値BASE64URL(JWS Payload)を計算します。</t>
        <t indent="0" pn="section-5.1-4">3. JOSEヘッダー（JWS Protected Headerおよび/またはJWS Unprotected Header）を構成する所望のヘッダーパラメーターセットを含むJSONオブジェクトを作成します。</t>
        <t indent="0" pn="section-5.1-5">4. エンコードされたヘッダー値BASE64URL(UTF8(JWS Protected Header))を計算します。JWS Protected Headerが存在しない場合（JWS JSON Serializationを使用していて、&quot;protected&quot;メンバーが存在しない場合にのみ発生する）、この値は空の文字列とします。</t>
        <t indent="0" pn="section-5.1-6">5. JWS Signatureを、JWS Signing Input ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload))上で使用される特定のアルゴリズムで計算します。JOSEヘッダーには、アルゴリズム値が正確にJWS Signatureを構築するために使用されるアルゴリズムを表すように、&quot;alg&quot;（アルゴリズム）ヘッダーパラメーター<bcp14>が必ず</bcp14>含まれている必要があります。</t>
        <t indent="0" pn="section-5.1-7">6. エンコードされたシグネチャ値BASE64URL(JWS Signature)を計算します。</t>
        <t indent="0" pn="section-5.1-8">7. JWS JSON Serializationを使用している場合、実行される各デジタル署名またはMAC操作について、このプロセス（手順3〜6）を繰り返します。</t>
        <t indent="0" pn="section-5.1-9">8. 必要なシリアル化された出力を作成します。この結果のJWS Compact Serializationは、BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload) || '.' || BASE64URL(JWS Signature)です。JWS JSON Serializationについては、セクション7.2で説明されています。</t>
      </section>
      <section anchor="message-signature-or-mac-validation" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-message-signature-or-mac-validation">メッセージ署名またはMACの検証</name>
        <t indent="0" pn="section-5.2-1">JWSを検証する場合、以下の手順が実行されます。ステップの入力と出力に依存関係がない場合は、ステップの順序は重要ではありません。リストされたステップのいずれかが失敗した場合、署名またはMACを検証できません。</t>
        <t indent="0" pn="section-5.2-2">複数のJWS Signature値がある場合、JWSが受け入れられるためには、どのJWS Signature値が正常に検証される必要があるかはアプリケーションの決定によるものです。場合によっては、すべてが正常に検証されなければJWSは無効と見なされます。他の場合では、特定のJWS Signature値のみが正常に検証される必要があります。ただし、すべての場合において、少なくとも1つのJWS Signature値が<bcp14>正常に検証されなければならず</bcp14>、そうでなければJWSは<bcp14>無効と見なされなければなりません</bcp14>。</t>
        <t indent="0" pn="section-5.2-3">1. JWS表現を解析して、JWSの各コンポーネントのシリアル化された値を抽出します。JWS Compact Serializationを使用する場合、これらのコンポーネントは、JWS Protected Header、JWS Payload、およびJWS Signatureのbase64urlエンコードされた表現です。JWS JSON Serializationを使用する場合、これらのコンポーネントには、未エンコードのJWS Unprotected Header値も含まれます。JWS Compact Serializationを使用する場合、JWS Protected Header、JWS Payload、およびJWS Signatureは、その順序でbase64urlエンコードされた値として表され、各値は単一のピリオド（'.'）文字で区切られ、正確に2つの区切りピリオド文字が使用されます。JWS JSON Serializationについては、セクション7.2を参照してください。</t>
        <t indent="0" pn="section-5.2-4">2. JWS Protected Headerのエンコードされた表現をbase64urlデコードし、改行、空白、またはその他の追加文字が使用されていない制限に従います。</t>
        <t indent="0" pn="section-5.2-5">3. 結果のオクテットシーケンスが、RFC 7159 <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>に準拠した完全に有効なJSONオブジェクトのUTF-8エンコードされた表現であることを検証します。このJSONオブジェクトがJWS Protected Headerです。</t>
        <t indent="0" pn="section-5.2-6">4. JWS Compact Serializationを使用する場合、JOSEヘッダーはJWS Protected Headerとなります。JWS JSON Serializationを使用する場合、JOSEヘッダーは、対応するJWS Protected HeaderとJWS Unprotected Headerのメンバーの和集合とします。これらすべてが完全に有効なJSONオブジェクトである必要があります。このステップでは、JOSEヘッダーが重複するヘッダーパラメーター名を含まないことを確認します。JWS JSON Serializationを使用する場合、この制限には、同じヘッダーパラメーター名がJOSEヘッダーを構成する別のJSONオブジェクト値にも<bcp14>現れてはならない</bcp14>という制限も含まれます。</t>
        <t indent="0" pn="section-5.2-7">5. 実装がサポートする必要があるすべてのフィールドを理解し、処理できることを確認します。これらは、この仕様、使用されるアルゴリズム、または「crit」ヘッダーパラメーター値によって必要とされるものです。また、これらのパラメーターの値が理解され、サポートされていることも確認します。</t>
        <t indent="0" pn="section-5.2-8">6. JWSペイロードのエンコードされた表現をbase64urlデコードし、改行、空白、またはその他の追加文字が使用されていない制限に従います。</t>
        <t indent="0" pn="section-5.2-9">7. JWS Signatureのエンコードされた表現をbase64urlデコードし、改行、空白、またはその他の追加文字が使用されていない制限に従います。</t>
        <t indent="0" pn="section-5.2-10">8. 使用されているアルゴリズムに応じて、JWS SignatureをJWS署名入力ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload))に対して検証し、その方法を定義された方法で行います。アルゴリズムは、&quot;alg&quot;（アルゴリズム）ヘッダーパラメーターの値で正確に表され、必ず存在する必要があります<bcp14>（MUST）</bcp14>。アルゴリズムの検証に関するセキュリティー上の考慮事項については、セクション10.6を参照してください。検証が成功したかどうかを記録します。</t>
        <t indent="0" pn="section-5.2-11">9. JWS JSON Serializationを使用している場合、このプロセス（ステップ4〜8）を、表現に含まれる各デジタル署名またはMAC値に対して繰り返します。</t>
        <t indent="0" pn="section-5.2-12">10. ステップ9での検証がすべて失敗した場合、JWSは<bcp14>無効と見なされなければなりません</bcp14>。それ以外の場合、JWS JSON Serializationの場合、アプリケーションに、どの検証が成功し、どの検証が失敗したかを示す結果を返します。JWS Compact Serializationの場合、結果は、JWSが正常に検証されたかどうかを単に示すことができます。</t>
        <t indent="0" pn="section-5.2-13">最後に、特定のコンテキストで使用できるアルゴリズムは、アプリケーションの決定によるものです。JWSが正常に検証されたとしても、JWSで使用されるアルゴリズムがアプリケーションにとって許容可能でない場合、JWSは<bcp14>無効と見なすべき</bcp14>です。</t>
      </section>
      <section anchor="string-comparison-rules" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-string-comparison-rules">文字列比較ルール</name>
        <t indent="0" pn="section-5.3-1">JWSの処理には、既知の文字列をJSONオブジェクトのメンバーや値と比較する必要があります。たとえば、アルゴリズムが何であるかを確認する場合、Unicode文字列「alg」は、JOSEヘッダーのメンバー名と照合され、一致するヘッダーパラメーター名があるかどうかを確認します。その後、同じプロセスが使用され、algヘッダーパラメーターの値がサポートされているアルゴリズムを表しているかどうかを判断します。</t>
        <t indent="0" pn="section-5.3-2">メンバー名の比較を行うためのJSONルールについては、RFC 7159のセクション8.3で説明されています<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>。比較演算には等価性と非等価性のみが行われるため、既知の文字列とメンバー名およびメンバー値を比較するために同じルールが使用できます。</t>
        <t indent="0" pn="section-5.3-3">これらの比較ルールは、明示的に異なる比較ルールがそのメンバー値に使用されることを呼び出すメンバーの定義を除いて、すべてのJSON文字列比較に使用<bcp14>MUST</bcp14>されます。この仕様で定義された&quot;typ&quot;および&quot;cty&quot;メンバー値のみが、これらの比較ルールを使用しないことに注意してください。</t>
        <t indent="0" pn="section-5.3-4">一部のアプリケーションでは、DNS名を「kid」（キーID）値の一部として含めるなど、大文字小文字を区別する値に大文字小文字を含める場合があります。その場合、複数のパーティが同じ値を生成する必要がある場合は、大文字小文字を小文字に変換するなど、大文字小文字を区別しない部分を表すための正準的なケースの定義が必要になる場合があります。ただし、他のすべてのパーティが、独立して生成された値と比較することなく、生成パーティが出力した値をそのまま消費する場合は、生成者が使用したケースは問題ありません。</t>
        <t indent="0" pn="section-5.3-5">また、セクション10.12のJSONセキュリティーに関する考慮事項およびセクション10.13のUnicodeセキュリティーに関する考慮事項も参照してください。</t>
      </section>
    </section>
    <section anchor="key-identification" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-key-identification">Key Identification</name>
      <t indent="0" pn="section-6-1">JWSの受信者は、デジタル署名またはMAC操作に使用されたキーを特定できる必要があります。使用されたキーは、セクション4.1で説明されているヘッダーパラメーターの方法を使用して識別できます。または、この仕様の範囲外の方法を使用して識別できます。具体的には、ヘッダーパラメーター「jku」、「jwk」、「kid」、「x5u」、「x5c」、「x5t」、および「x5t#S256」を使用して、使用されたキーを識別できます。これらのヘッダーパラメーターは、信頼判断に使用される情報を伝達する場合、整合性が保護される必要があります。<bcp14>MUST</bcp14>ただし、信頼判断に使用される情報がキーのみである場合、これらのパラメーターは整合性が保護される必要はありません。これらのパラメーターを変更して異なるキーが使用されるようにすると、検証が失敗するためです。</t>
      <t indent="0" pn="section-6-2">生成者は、キーを特定するための十分な情報をヘッダーパラメーターに含める<bcp14>SHOULD</bcp14>。ただし、アプリケーションがキーを特定するために別の手段または規約を使用する場合は、これらのパラメーターを使用する必要はありません。使用されたアルゴリズムがキーを必要とする場合（「none」を除くすべてのアルゴリズムが該当）、使用されたキーが特定できない場合、署名またはMACの検証が失敗します。</t>
      <t indent="0" pn="section-6-3">共有対称鍵の交換手段は、この仕様の範囲外です。</t>
      <t indent="0" pn="section-6-4">また、キー選択アルゴリズムに関する注意事項については、付録Dを参照してください。</t>
    </section>
    <section anchor="serializations" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-serializations">Serializations</name>
      <t indent="0" pn="section-7-1">JWSは、JWS Compact SerializationまたはJWS JSON Serializationのいずれかのシリアル化を使用します。この仕様を使用するアプリケーションは、そのアプリケーションで使用されるシリアル化およびシリアル化機能を指定する必要があります。たとえば、アプリケーションは、JWS JSON Serializationのみが使用されること、単一の署名またはMAC値のJWS JSON Serializationサポートのみが使用されること、または複数の署名および/またはMAC値のサポートが使用されることを指定できます。JWSの実装は、サポートするアプリケーションに必要な機能のみを実装する必要があります。<bcp14>ただし、この仕様で定義されている機能を実装する必要があります。</bcp14></t>
      <section anchor="jws-compact-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-7.1">
        <name slugifiedName="name-jws-compact-serialization">JWS Compact Serialization</name>
        <t indent="0" pn="section-7.1-1">JWSコンパクトシリアル化は、デジタル署名またはMAC操作されたコンテンツをコンパクトでURLセーフな文字列として表します。この文字列は次のとおりです。</t>
        <t indent="0" pn="section-7.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
   BASE64URL(UTF8(JWS Protected Header)) || '.' ||
   BASE64URL(JWS Payload) || '.' ||
   BASE64URL(JWS Signature)
]]></artwork>
</t>
        <t indent="0" pn="section-7.1-3">JWSコンパクトシリアル化では、1つの署名/MACのみがサポートされ、JWS非保護ヘッダーの値を表す構文は提供されていません。</t>
      </section>
      <section anchor="jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-7.2">
        <name slugifiedName="name-jws-json-serialization">JWS JSON Serialization</name>
        <t indent="0" pn="section-7.2-1">JWS JSONシリアル化は、デジタル署名またはMAC操作されたコンテンツをJSONオブジェクトとして表します。この表現は、コンパクトさやURLセーフさを最適化するわけではありません。</t>
        <t indent="0" pn="section-7.2-2">JWS JSONシリアル化には、2つの関連する構文が定義されています。1つは完全な一般的な構文であり、この構文では、コンテンツを1つ以上のデジタル署名および/またはMAC操作で保護できます。もう1つはフラット化された構文であり、単一のデジタル署名またはMAC操作の場合に最適化されています。</t>
        <section anchor="general-jws-json-serialization-syntax" numbered="true" removeInRFC="false" toc="include" pn="section-7.2.1">
          <name slugifiedName="name-general-jws-json-serialization-syntax">General JWS JSON Serialization Syntax</name>
          <t indent="0" pn="section-7.2.1-1">完全な一般的なJWS JSONシリアル化構文に使用されるトップレベルJSONオブジェクトには、次のメンバーが定義されています。</t>
          <t indent="0" pn="section-7.2.1-2">payload
   「payload」メンバーは<bcp14>MUST</bcp14>存在し、値にはBASE64URL(JWS Payload)が含まれている必要があります。</t>
          <t indent="0" pn="section-7.2.1-3">signatures
   「signatures」メンバーの値は、JSONオブジェクトの配列である必要があります。<bcp14>MUST</bcp14>各オブジェクトは、JWSペイロードとJWS保護ヘッダーに対する署名またはMACを表します。</t>
          <t indent="0" pn="section-7.2.1-4">「signatures」配列の要素であるJSONオブジェクトで使用するために、次のメンバーが定義されています。</t>
          <t indent="0" pn="section-7.2.1-5">protected
   「protected」メンバーは、JWS保護ヘッダーの値が空でない場合はBASE64URL(UTF8(JWS Protected Header))の値を含まなければなりません。<bcp14>MUST</bcp14>一方、JWS保護ヘッダーの値が空の場合は、省略する必要があります。これらのヘッダーパラメーターの値は、整合性が保護されます。</t>
          <t indent="0" pn="section-7.2.1-6">header
   「header」メンバーは<bcp14>MUST</bcp14>存在し、JWS Unprotected Header値が空でない場合は値にJWS Unprotected Headerを含め、それ以外の場合は省略する必要があります。この値は、文字列ではなくエンコードされていないJSONオブジェクトとして表されます。これらのヘッダーパラメーターの値は、整合性が保護されません。</t>
          <t indent="0" pn="section-7.2.1-7">signature
   「signature」メンバーは<bcp14>MUST</bcp14>存在し、値にはBASE64URL(JWS Signature)が含まれている必要があります。</t>
          <t indent="0" pn="section-7.2.1-8">「protected」と「header」の少なくとも1つのメンバーは、各署名/MAC計算に対して<bcp14>MUST</bcp14>存在する必要があります。これにより、「alg」ヘッダーパラメーターの値が伝達されます。</t>
          <t indent="0" pn="section-7.2.1-9">上記で定義されたJSONオブジェクトの両方には、追加のメンバーが存在する場合があります。実装がこれらのメンバーを理解できない場合、これらは<bcp14>MUST</bcp14>無視される必要があります。</t>
          <t indent="0" pn="section-7.2.1-10">個々の署名またはMAC値を作成または検証する際に使用されるヘッダーパラメーター値は、2つのヘッダーパラメーター値の和集合である必要があります。1つ目は、署名/MACの配列要素の「protected」メンバーに表されるJWS保護ヘッダーであり、2つ目は、署名/MACの配列要素の「header」メンバーにあるJWS非保護ヘッダーです。これらのヘッダーパラメーターの和集合は、JOSEヘッダーを構成します。2つの場所のヘッダーパラメーター名は、<bcp14>MUST</bcp14>互いに素である必要があります。</t>
          <t indent="0" pn="section-7.2.1-11">各JWS Signature値は、JWS Compact Serializationと同じ方法で、同じJOSEヘッダー値のパラメーターを使用して計算されます。これにより、「signatures」配列に表される各JWS Signature値は、その署名/MAC計算のために使用されたJWS保護ヘッダー値（整合性保護されたヘッダーパラメーター値を表す）がJWS Compact Serializationで使用されたものと一致する場合、同じパラメーターで計算された値と同じになるという望ましい特性があります。</t>
          <t indent="0" pn="section-7.2.1-12">要約すると、一般的なJWS JSONシリアル化を使用したJWSの構文は次のようになります。</t>
          <t indent="0" pn="section-7.2.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":"<payload contents>",
   "signatures":[
    {"protected":"<integrity-protected header 1 contents>",
     "header":<non-integrity-protected header 1 contents>,
     "signature":"<signature 1 contents>"},
    ...
    {"protected":"<integrity-protected header N contents>",
     "header":<non-integrity-protected header N contents>,
     "signature":"<signature N contents>"}]
  }
]]></artwork>
</t>
          <t indent="0" pn="section-7.2.1-14">一般的なJWS JSONシリアル化構文を使用したJWSの例については、付録A.6を参照してください。</t>
        </section>
        <section anchor="flattened-jws-json-serialization-syntax" numbered="true" removeInRFC="false" toc="include" pn="section-7.2.2">
          <name slugifiedName="name-flattened-jws-json-serialization-syntax">Flattened JWS JSON Serialization Syntax</name>
          <t indent="0" pn="section-7.2.2-1">フラット化されたJWS JSONシリアル化構文は、一般的な構文に基づいていますが、単一のデジタル署名/MACの場合に最適化するためにフラット化します。これは、「signatures」メンバーを削除し、代わりに「signatures」配列で使用されるメンバー（「protected」、「header」、および「signature」メンバー）をトップレベルのJSONオブジェクト（「payload」メンバーと同じレベル）に配置することによってフラット化されます。</t>
          <t indent="0" pn="section-7.2.2-2">この構文を使用する場合、「signatures」メンバーは<bcp14>MUST NOT</bcp14>存在してはなりません。
この構文の違い以外は、フラット化された構文を使用するJWS JSONシリアル化オブジェクトは、一般的な構文を使用するものと同じように処理されます。</t>
          <t indent="0" pn="section-7.2.2-3">フラット化されたJWS JSONシリアル化を使用したJWSの構文は、次のようになります。</t>
          <t indent="0" pn="section-7.2.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":"<payload contents>",
   "protected":"<integrity-protected header contents>",
   "header":<non-integrity-protected header contents>,
   "signature":"<signature contents>"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-7.2.2-5">フラット化されたJWS JSONシリアル化構文を使用したJWSの例については、付録A.7を参照してください。</t>
        </section>
      </section>
    </section>
    <section anchor="tls-requirements" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-tls-requirements">TLS要件</name>
      <t indent="0" pn="section-8-1">&quot;jku&quot;および/または&quot;x5u&quot;ヘッダーパラメーターをサポートする実装は、TLSをサポートする<bcp14>MUST</bcp14>です。実装されるTLSバージョンは、時間の経過とともに変化し、実装時の広範な展開と既知のセキュリティー脆弱性に依存します。この記述時点では、TLSバージョン1.2 <xref target="RFC5246" format="default" sectionFormat="of" derivedContent="RFC5246"/>が最新のバージョンです。</t>
      <t indent="0" pn="section-8-2">情報漏洩と改ざんから保護するために、機密性保護には、機密性と整合性保護を提供する暗号スイートを使用したTLSが適用される<bcp14>MUST</bcp14>です。現在、使用するのに適切と考えられる暗号スイートに関するガイダンスについては、RFC 6176 <xref target="RFC6176" format="default" sectionFormat="of" derivedContent="RFC6176"/>を含む、IETF TLSワーキンググループによる現在の出版物を参照してください。また、TLSを使用するソフトウェアおよびサービスのセキュリティーを向上させるための推奨事項については、「Transport Layer Security（TLS）およびDatagram Transport Layer Security（DTLS）の安全な使用の推奨事項」<xref target="RFC7525" format="default" sectionFormat="of" derivedContent="RFC7525"/>を参照してください。</t>
      <t indent="0" pn="section-8-3">TLSを使用する場合、TLSサーバー証明書にエンコードされたサービスプロバイダーの識別子は、RFC 6125のセクション6で説明されている手順を使用して検証する必要があります。<bcp14>MUST</bcp14>です。</t>
    </section>
    <section anchor="iana-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-iana-considerations">IANAに関する考慮事項</name>
      <t indent="0" pn="section-9-1">この仕様で設立されたすべての登録には、以下の登録手順が使用されます。</t>
      <t indent="0" pn="section-9-2">値は、1つまたは複数の指定専門家のアドバイスに基づいて、jose-reg-review@ietf.orgメーリングリストでの3週間のレビュー期間の後、仕様に必要な値として登録されます。<xref target="RFC5226" format="default" sectionFormat="of" derivedContent="RFC5226"/>ただし、公開前に値を割り当てるために、指定専門家は、そのような仕様が公開されることを確信した場合に、登録を承認することができます。</t>
      <t indent="0" pn="section-9-3">レビュー用のメーリングリストに送信される登録リクエストは、適切な件名（例：「ヘッダーパラメーターの登録リクエスト：example」）を使用する必要があります。</t>
      <t indent="0" pn="section-9-4">レビュー期間中、指定専門家は、登録リクエストを承認または拒否し、この決定をレビューリストとIANAに通知します。拒否の場合は、説明と、リクエストを成功させるための提案があれば、それを含める必要があります。21日間以上未決定の登録リクエストは、解決のためにIESGに通知されることがあります（iesg@ietf.orgメーリングリストを使用）。</t>
      <t indent="0" pn="section-9-5">指定専門家によって適用される基準には、提案された登録が既存の機能と重複しているかどうか、一般的な適用性があるか、単一のアプリケーションにのみ有用か、登録の説明が明確かどうかなどが含まれます。</t>
      <t indent="0" pn="section-9-6">IANAは、指定専門家からの登録更新のみを受け入れ、すべての登録リクエストをレビューメーリングリストに送信する必要があります。</t>
      <t indent="0" pn="section-9-7">この仕様を使用するさまざまなアプリケーションの視点を代表できる複数の指定専門家を任命し、登録決定の広範な情報提供を可能にすることが提案されています。登録決定が特定の専門家にとって利益相反を引き起こす可能性がある場合は、その専門家は他の専門家の判断に従う必要があります。</t>
      <section anchor="json-web-signature-and-encryption-header-parameters-registry" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-json-web-signature-and-encryption-header-parameters-registry">JSON Web Signature and Encryption Header Parameters Registry</name>
        <t indent="0" pn="section-9.1-1">この仕様では、ヘッダーパラメーター名のためのIANA「JSON Web Signature and Encryption Header Parameters」レジストリが設立されます。レジストリには、ヘッダーパラメーター名と、それを定義する仕様への参照が記録されます。同じヘッダーパラメーター名は、パラメーターの使用法が仕様間で互換性がある場合に限り、複数回登録できます。同じヘッダーパラメーター名の異なる登録は、通常、異なるヘッダーパラメーター使用場所値を使用します。</t>
        <section anchor="registration-template" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.1">
          <name slugifiedName="name-registration-template">登録テンプレート</name>
          <t indent="0" pn="section-9.1.1-1">ヘッダーパラメーター名：
   要求された名前（例：&quot;kid&quot;）。この仕様の主要な目標の1つは、生成された表現がコンパクトであることですので、名前は短くすることが<bcp14>推奨されます</bcp14>。特別な理由がない限り、8文字を超えないようにしてください。この名前は大文字と小文字を区別します。登録された他の名前と大文字と小文字を区別しない場合は、指定専門家が例外を許可する理由があると判断した場合を除き、使用できません。</t>
          <t indent="0" pn="section-9.1.1-2">ヘッダーパラメーターの説明：
   ヘッダーパラメーターの簡単な説明（例：「キーID」）。</t>
          <t indent="0" pn="section-9.1.1-3">ヘッダーパラメーターの使用場所：
   ヘッダーパラメーターの使用場所。値は「JWS」または「JWE」のいずれか1つ以上である必要があります。</t>
          <t indent="0" pn="section-9.1.1-4">変更管理者：
   標準トラックRFCの場合、「IESG」をリストします。その他の場合は、責任者の名前を指定します。その他の詳細（例：郵便番号、電子メールアドレス、ホームページURI）も含めることができます。</t>
          <t indent="0" pn="section-9.1.1-5">仕様書：
   パラメーターを指定するドキュメントへの参照。できれば、ドキュメントのコピーを取得するために使用できるURIも含めることが望ましいです。関連するセクションの指示も含めることができますが、必須ではありません。</t>
        </section>
        <section anchor="initial-registry-contents" numbered="true" removeInRFC="false" toc="include" pn="section-9.1.2">
          <name slugifiedName="name-initial-registry-contents">初期登録内容</name>
          <t indent="0" pn="section-9.1.2-1">このセクションでは、このレジストリに定義されたヘッダーパラメーター名を、セクション4.1で登録します。</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-2">
            <li pn="section-9.1.2-2.1">ヘッダーパラメーター名：&quot;alg&quot;</li>
            <li pn="section-9.1.2-2.2">ヘッダーパラメーターの説明：アルゴリズム</li>
            <li pn="section-9.1.2-2.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-2.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-2.5">仕様書：RFC 7515のセクション4.1.1</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-3">
            <li pn="section-9.1.2-3.1">ヘッダーパラメーター名：&quot;jku&quot;</li>
            <li pn="section-9.1.2-3.2">ヘッダーパラメーターの説明：JWKセットURL</li>
            <li pn="section-9.1.2-3.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-3.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-3.5">仕様書：RFC 7515のセクション4.1.2</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-4">
            <li pn="section-9.1.2-4.1">ヘッダーパラメーター名：&quot;jwk&quot;</li>
            <li pn="section-9.1.2-4.2">ヘッダーパラメーターの説明：JSON Web Key</li>
            <li pn="section-9.1.2-4.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-4.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-4.5">仕様書：RFC 7515のセクション4.1.3</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-5">
            <li pn="section-9.1.2-5.1">ヘッダーパラメーター名：&quot;kid&quot;</li>
            <li pn="section-9.1.2-5.2">ヘッダーパラメーターの説明：キーID</li>
            <li pn="section-9.1.2-5.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-5.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-5.5">仕様書：RFC 7515のセクション4.1.4</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-6">
            <li pn="section-9.1.2-6.1">ヘッダーパラメーター名：&quot;x5u&quot;</li>
            <li pn="section-9.1.2-6.2">ヘッダーパラメーターの説明：X.509 URL</li>
            <li pn="section-9.1.2-6.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-6.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-6.5">仕様書：RFC 7515のセクション4.1.5</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-7">
            <li pn="section-9.1.2-7.1">ヘッダーパラメーター名：&quot;x5c&quot;</li>
            <li pn="section-9.1.2-7.2">ヘッダーパラメーターの説明：X.509証明書チェーン</li>
            <li pn="section-9.1.2-7.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-7.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-7.5">仕様書：RFC 7515のセクション4.1.6</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-8">
            <li pn="section-9.1.2-8.1">ヘッダーパラメーター名：&quot;x5t&quot;</li>
            <li pn="section-9.1.2-8.2">ヘッダーパラメーターの説明：X.509証明書のSHA-1サムプリント</li>
            <li pn="section-9.1.2-8.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-8.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-8.5">仕様書：RFC 7515のセクション4.1.7</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-9">
            <li pn="section-9.1.2-9.1">ヘッダーパラメーター名：&quot;x5t#S256&quot;</li>
            <li pn="section-9.1.2-9.2">ヘッダーパラメーターの説明：X.509証明書のSHA-256サムプリント</li>
            <li pn="section-9.1.2-9.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-9.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-9.5">仕様書：RFC 7515のセクション4.1.8</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-10">
            <li pn="section-9.1.2-10.1">ヘッダーパラメーター名：&quot;typ&quot;</li>
            <li pn="section-9.1.2-10.2">ヘッダーパラメーターの説明：タイプ</li>
            <li pn="section-9.1.2-10.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-10.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-10.5">仕様書：RFC 7515のセクション4.1.9</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-11">
            <li pn="section-9.1.2-11.1">ヘッダーパラメーター名：&quot;cty&quot;</li>
            <li pn="section-9.1.2-11.2">ヘッダーパラメーターの説明：コンテンツタイプ</li>
            <li pn="section-9.1.2-11.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-11.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-11.5">仕様書：RFC 7515のセクション4.1.10</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.1.2-12">
            <li pn="section-9.1.2-12.1">ヘッダーパラメーター名：&quot;crit&quot;</li>
            <li pn="section-9.1.2-12.2">ヘッダーパラメーターの説明：Critical</li>
            <li pn="section-9.1.2-12.3">ヘッダーパラメーターの使用場所：JWS</li>
            <li pn="section-9.1.2-12.4">変更管理者：IESG</li>
            <li pn="section-9.1.2-12.5">仕様書：RFC 7515のセクション4.1.11</li>
          </ul>
        </section>
      </section>
      <section anchor="media-type-registration" numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-media-type-registration">Media Type Registration</name>
        <section anchor="registry-contents" numbered="true" removeInRFC="false" toc="include" pn="section-9.2.1">
          <name slugifiedName="name-registry-contents">登録内容</name>
          <t indent="0" pn="section-9.2.1-1">このセクションでは、JWS Compact SerializationまたはJWE Compact Serializationを使用してJWSまたはJWEであることを示すために使用できる、RFC 6838で説明されている方法で、「Media Types」レジストリ<xref target="IANA.MediaTypes" format="default" sectionFormat="of" derivedContent="IANA.MediaTypes"/>に「application/jose」メディアタイプ<xref target="RFC2046" format="default" sectionFormat="of" derivedContent="RFC2046"/>を登録します。このセクションでは、「Media Types」レジストリに「application/jose+json」メディアタイプも登録され、JWS JSON SerializationまたはJWE JSON Serializationを使用してJWSまたはJWEであることを示すために使用できます。</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-2">
            <li pn="section-9.2.1-2.1">タイプ名：application</li>
            <li pn="section-9.2.1-2.2">サブタイプ名：jose</li>
            <li pn="section-9.2.1-2.3">必須パラメーター：なし</li>
            <li pn="section-9.2.1-2.4">オプションパラメーター：なし</li>
            <li pn="section-9.2.1-2.5">エンコードの考慮事項：8ビット。application/joseの値は、一連のbase64urlエンコードされた値（そのうちいくつかは空の文字列である場合があります）としてエンコードされ、各値は単一のピリオド（'.'）文字で区切られます。</li>
            <li pn="section-9.2.1-2.6">セキュリティーの考慮事項：RFC 7515のセキュリティーの考慮事項を参照してください。</li>
            <li pn="section-9.2.1-2.7">相互運用性の考慮事項：なし</li>
            <li pn="section-9.2.1-2.8">公開された仕様：RFC 7515</li>
            <li pn="section-9.2.1-2.9">このメディアタイプを使用するアプリケーション：OpenID Connect、Mozilla Persona、Salesforce、Google、Android、Windows Azure、Xbox One、Amazon Web Services、およびJWTを使用する多数のその他のアプリケーション</li>
            <li pn="section-9.2.1-2.10">フラグメント識別子の考慮事項：なし</li>
            <li pn="section-9.2.1-2.11">追加情報：</li>
          </ul>
          <t indent="0" pn="section-9.2.1-3"><artwork name="" type="" align="left" alt=""><![CDATA[
      マジックナンバー：なし
      ファイル拡張子：なし
      Macintoshファイルタイプコード：なし
]]></artwork>
</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-4">
            <li pn="section-9.2.1-4.1">追加情報の問い合わせ先：Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-4.2">意図される使用方法：COMMON</li>
            <li pn="section-9.2.1-4.3">使用上の制限：なし</li>
            <li pn="section-9.2.1-4.4">著者：Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-4.5">変更管理者：IESG</li>
            <li pn="section-9.2.1-4.6">仮登録：いいえ</li>
          </ul>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-5">
            <li pn="section-9.2.1-5.1">タイプ名：application</li>
            <li pn="section-9.2.1-5.2">サブタイプ名：jose+json</li>
            <li pn="section-9.2.1-5.3">必須パラメーター：なし</li>
            <li pn="section-9.2.1-5.4">オプションパラメーター：なし</li>
            <li pn="section-9.2.1-5.5">エンコードの考慮事項：8ビット。application/jose+jsonの値はJSONオブジェクトとして表されます。JSONオブジェクトにはUTF-8エンコーディングを使用する必要があります。</li>
            <li pn="section-9.2.1-5.6">セキュリティーの考慮事項：RFC 7515のセキュリティーの考慮事項を参照してください。</li>
            <li pn="section-9.2.1-5.7">相互運用性の考慮事項：なし</li>
            <li pn="section-9.2.1-5.8">公開された仕様：RFC 7515</li>
            <li pn="section-9.2.1-5.9">このメディアタイプを使用するアプリケーション：Nimbus JOSE + JWTライブラリ</li>
            <li pn="section-9.2.1-5.10">フラグメント識別子の考慮事項：なし</li>
            <li pn="section-9.2.1-5.11">追加情報：</li>
          </ul>
          <t indent="0" pn="section-9.2.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
      マジックナンバー：なし
      ファイル拡張子：なし
      Macintoshファイルタイプコード：なし
]]></artwork>
</t>
          <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-9.2.1-7">
            <li pn="section-9.2.1-7.1">追加情報の問い合わせ先：Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-7.2">意図される使用方法：COMMON</li>
            <li pn="section-9.2.1-7.3">使用上の制限：なし</li>
            <li pn="section-9.2.1-7.4">著者：Michael B. Jones, mbj@microsoft.com</li>
            <li pn="section-9.2.1-7.5">変更管理者：IESG</li>
            <li pn="section-9.2.1-7.6">仮登録：いいえ</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-10-1">JWS/JWE/JWKエージェントは、暗号化アプリケーションに関連するすべてのセキュリティー上の問題に対処する必要があります。これらの問題の中には、ユーザーの非対称秘密鍵と対称秘密鍵を保護すること、およびさまざまな攻撃に対する対策を講じることが含まれます。</t>
      <t indent="0" pn="section-10-2">&quot;XML Signature Syntax and Processing Version 2.0&quot; <xref target="W3C.NOTE-xmldsig-core2-20130411" format="default" sectionFormat="of" derivedContent="W3C.NOTE-xmldsig-core2-20130411"/>に記載されているすべてのセキュリティー上の考慮事項は、XML固有のものを除いて、この仕様にも適用されます。同様に、「XML Signature Best Practices」<xref target="W3C.NOTE-xmldsig-bestpractices-20130411" format="default" sectionFormat="of" derivedContent="W3C.NOTE-xmldsig-bestpractices-20130411"/>に記載されている多くのベストプラクティスも、XML固有のものを除いて、この仕様にも適用されます。</t>
      <section anchor="key-entropy-and-random-values" numbered="true" removeInRFC="false" toc="include" pn="section-10.1">
        <name slugifiedName="name-key-entropy-and-random-values">鍵のエントロピーとランダム値</name>
        <t indent="0" pn="section-10.1-1">鍵の強度は、生成に使用されるエントロピーの量によって決まります。すべての鍵には、少なくとも128ビットのエントロピーを使用する必要があり、アプリケーションの文脈に応じて、それ以上が必要になる場合があります。</t>
        <t indent="0" pn="section-10.1-2">実装は、公開/秘密鍵ペア、MAC鍵、およびパディング値をランダムに生成する必要があります。暗号鍵を生成するために不適切な疑似乱数生成器（PRNG）を使用すると、ほとんどまたはまったくセキュリティーが確保されません。攻撃者は、鍵を生成したPRNG環境を再現することがはるかに容易であるため、全鍵空間を総当たりするよりも、その結果得られる少数の可能性を探索することができます。質の高いランダム数値の生成は困難です。RFC 4086 <xref target="RFC4086" format="default" sectionFormat="of" derivedContent="RFC4086"/>は、この分野で重要な指針を提供しています。</t>
      </section>
      <section anchor="key-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.2">
        <name slugifiedName="name-key-protection">鍵の保護</name>
        <t indent="0" pn="section-10.2-1">実装は署名者の秘密鍵を保護する必要があります。署名者の秘密鍵が漏洩すると、攻撃者は署名者として偽装することができます。</t>
        <t indent="0" pn="section-10.2-2">実装はMAC鍵を保護する必要があります。MAC鍵が漏洩すると、認証されたコンテンツの検出不能な変更が発生する可能性があります。</t>
      </section>
      <section anchor="key-origin-authentication" numbered="true" removeInRFC="false" toc="include" pn="section-10.3">
        <name slugifiedName="name-key-origin-authentication">鍵のオリジン認証</name>
        <t indent="0" pn="section-10.3-1">公開鍵を取得するために使用される鍵管理技術は、鍵の起源を認証する必要があります。そうでない場合、メッセージに署名した当事者が不明です。</t>
        <t indent="0" pn="section-10.3-2">同様に、MAC鍵を配布するために使用される鍵管理技術は、データの起源認証を提供する必要があります。そうでない場合、コンテンツは未知のソースからの整合性が保証されたものとして配信されます。</t>
      </section>
      <section anchor="cryptographic-agility" numbered="true" removeInRFC="false" toc="include" pn="section-10.4">
        <name slugifiedName="name-cryptographic-agility">暗号アジリティ</name>
        <t indent="0" pn="section-10.4-1"><xref target="JWA" format="default" sectionFormat="of" derivedContent="JWA"/>のセクション8.1を参照して、暗号アジリティに関するセキュリティー上の考慮事項を確認してください。</t>
      </section>
      <section anchor="differences-between-digital-signatures-and-macs" numbered="true" removeInRFC="false" toc="include" pn="section-10.5">
        <name slugifiedName="name-differences-between-digital-signatures-and-macs">デジタル署名とMACの違い</name>
        <t indent="0" pn="section-10.5-1">MACとデジタル署名は、両方とも整合性チェックに使用できますが、それぞれが提供するセキュリティープロパティにはいくつかの重要な違いがあります。プロトコルの設計やプロトコルで使用するアルゴリズムの選択に際しては、これらを考慮する必要があります。</t>
        <t indent="0" pn="section-10.5-2">署名とMACは、両方とも整合性チェックに使用できますが、それぞれが提供するセキュリティープロパティにはいくつかの重要な違いがあります。署名に使用される秘密鍵は、通常、単一のエンティティ（複製されたサーバーの場合を除く）の手にしかないと想定できます。一方、MAC鍵は、整合性計算とチェックに使用するすべてのエンティティの手にある必要があります。MACの検証は、対称MAC鍵を知っている当事者のうちの1つによってメッセージが生成されたことを確認するだけであり、起源の特定は特定の状況下でのみ可能です。MAC鍵が2つのエンティティにしか知られておらず、受信者がメッセージを作成していないことを知っている場合にのみ、起源を特定できます。MACの検証は、第三者に起源を証明するために使用できません。</t>
      </section>
      <section anchor="algorithm-validation" numbered="true" removeInRFC="false" toc="include" pn="section-10.6">
        <name slugifiedName="name-algorithm-validation">アルゴリズムの検証</name>
        <t indent="0" pn="section-10.6-1">一部のアルゴリズムに対するデジタル署名表現には、署名値内で使用されたアルゴリズムに関する情報が含まれています。たとえば、RSASSA-PKCS1-v1_5 <xref target="RFC3447" format="default" sectionFormat="of" derivedContent="RFC3447"/>で生成された署名は、使用されたハッシュ関数をエンコードしています。多くのライブラリは、実際には署名内で指定されたハッシュアルゴリズムを使用して署名を検証します。このようなライブラリを使用する場合、実装はアルゴリズムの検証の一環として、署名にエンコードされたアルゴリズム情報が「alg」ヘッダーパラメーターで指定されたものと一致することを<bcp14>必ず確認しなければなりません</bcp14>。そうしないと、攻撃者は、署名値に表された弱いハッシュアルゴリズムを使用しているにもかかわらず、強いハッシュアルゴリズムを使用したと主張することができます。</t>
      </section>
      <section anchor="algorithm-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.7">
        <name slugifiedName="name-algorithm-protection">アルゴリズムの保護</name>
        <t indent="0" pn="section-10.7-1">JWSの一部の用途では、アルゴリズムの代替攻撃のリスクがあります。この攻撃では、攻撃者は既存のデジタル署名値を別の署名アルゴリズムで使用して、署名者が署名していないものに署名したように見せかけることができます。この攻撃については、暗号メッセージ構文（CMS）<xref target="RFC6211" format="default" sectionFormat="of" derivedContent="RFC6211"/>の文脈で詳しく説明されています。このリスクは、次のすべてが真である場合に発生します。</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-2">
          <li pn="section-10.7-2.1"> 署名の検証者は複数のアルゴリズムをサポートしています。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-3">
          <li pn="section-10.7-3.1"> 既存の署名がある場合、攻撃者は別のペイロードを見つけて、異なるアルゴリズムで同じ署名値を生成することができます。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-4">
          <li pn="section-10.7-4.1"> 攻撃者によって作成されたペイロードは、アプリケーションの文脈で有効です。</li>
        </ul>
        <t indent="0" pn="section-10.7-5">アプリケーションがアルゴリズムの代替攻撃を緩和するためのいくつかの方法があります。</t>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-6">
          <li pn="section-10.7-6.1"> 代替攻撃に対して脆弱でないデジタル署名アルゴリズムのみを使用してください。代替攻撃は、攻撃者が受信者が受け入れるハッシュ関数のプレイメージを計算できる場合にのみ実行可能です。この執筆時点では、JWAで定義されたすべての署名アルゴリズムは、SHA-2ハッシュを使用しており、プレイメージ攻撃は知られていません。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-7">
          <li pn="section-10.7-7.1"> JWSコンパクトシリアル化を使用する場合は常に、およびCMS[RFC6211]で採用されているアプローチであるように、JWS保護ヘッダーに「alg」ヘッダーパラメーターが含まれていることを<bcp14>必ず要求</bcp14>します。</li>
        </ul>
        <ul bare="false" empty="false" indent="3" spacing="normal" pn="section-10.7-8">
          <li pn="section-10.7-8.1"> アプリケーションペイロードにアルゴリズムを含むフィールドを含め、検証時に「alg」ヘッダーパラメーターと一致することを<bcp14>必ず要求</bcp14>します（これはPKIX[RFC5280]で採用されているアプローチです）。</li>
        </ul>
      </section>
      <section anchor="chosen-plaintext-attacks" numbered="true" removeInRFC="false" toc="include" pn="section-10.8">
        <name slugifiedName="name-chosen-plaintext-attacks">選択平文攻撃</name>
        <t indent="0" pn="section-10.8-1">JWSの作成者は、第三者が制御していないエントロピーを追加しない限り、メッセージに任意のコンテンツを挿入することを許可すべきではありません。</t>
      </section>
      <section anchor="timing-attacks" numbered="true" removeInRFC="false" toc="include" pn="section-10.9">
        <name slugifiedName="name-timing-attacks">タイミング攻撃</name>
        <t indent="0" pn="section-10.9-1">暗号アルゴリズムが、成功した操作と失敗した操作で異なる時間を要するように実装されている場合、攻撃者は時間差を利用して使用される鍵に関する情報を取得できる可能性があります。したがって、このようなタイミングの違いは避ける必要があります。</t>
      </section>
      <section anchor="replay-protection" numbered="true" removeInRFC="false" toc="include" pn="section-10.10">
        <name slugifiedName="name-replay-protection">リプレイ攻撃対策</name>
        <t indent="0" pn="section-10.10-1">この仕様の直接の範囲外であるが、JWS（またはJWE）オブジェクトを使用するアプリケーションは、JWS（またはJWE）メッセージに一意のメッセージ識別子を含め、受信者がメッセージが以前に受信または処理されていないことを確認することで、再生攻撃を防止できます。</t>
      </section>
      <section anchor="sha-1-certificate-thumbprints" numbered="true" removeInRFC="false" toc="include" pn="section-10.11">
        <name slugifiedName="name-sha-1-certificate-thumbprints">SHA-1証明書のサムプリント</name>
        <t indent="0" pn="section-10.11-1">互換性のために、&quot;x5t&quot;（X.509証明書SHA-1サムプリント）値を計算するときに、SHA-1ハッシュが使用されます。SHA-1ハッシュの衝突を効果的に生成する手段が開発され、攻撃者が特定のシステム上で既知の証明書の使用に干渉したい場合、攻撃者は、SHA-1ハッシュ値が同じである別の証明書を作成し、意図した被害者が使用する証明書ストアに追加することで、これを達成できます。この攻撃が成功するための前提条件は、攻撃者が意図した被害者の証明書ストアに書き込みアクセス権を持っていることです。</t>
        <t indent="0" pn="section-10.11-2">&quot;x5t&quot;の代わりに、&quot;x5t#S256&quot;（X.509証明書SHA-256サムプリント）ヘッダーパラメーターを使用することもできます。ただし、この執筆時点では、SHA-256証明書サムプリントをサポートする開発プラットフォームは知られていません。</t>
      </section>
      <section anchor="json-security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.12">
        <name slugifiedName="name-json-security-considerations">JSONセキュリティー上の考慮事項</name>
        <t indent="0" pn="section-10.12-1">厳密なJSON <xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>の検証は、セキュリティー上の要件です。不正なJSONが受信された場合、生産者の意図を確実に把握するのは不可能です。JSONパーサーが不正なJSON構文を拒否しない場合、曖昧で潜在的に悪用される状況が発生する可能性があります。とくに、RFC 7159で定義されたJSONテキスト構文に準拠していないJSON入力は、JSONパーサーによって完全に拒否される<bcp14>必要があります（MUST）</bcp14>。</t>
        <t indent="0" pn="section-10.12-2">「JavaScript Object Notation（JSON）データ交換形式」<xref target="RFC7159" format="default" sectionFormat="of" derivedContent="RFC7159"/>のセクション4には、「オブジェクト内の名前は<bcp14>一意である必要があります</bcp14>」と記載されていますが、この仕様では、</t>
        <t indent="0" pn="section-10.12-3"><artwork name="" type="" align="left" alt=""><![CDATA[
   JOSEヘッダー内のヘッダーパラメーター名は一意でなければならず、
   JWSパーサーは、重複するヘッダーパラメーター名を持つJWSを拒否するか、
   ECMAScript 5.1 [ECMAScript]のセクション15.12（「JSONオブジェクト」）で指定されているように、
   字句的に最後の重複メンバー名のみを返すJSONパーサーを使用する必要があります。
]]></artwork>
</t>
        <t indent="0" pn="section-10.12-4">したがって、この仕様では、生産者に対して<bcp14>SHOULD</bcp14>を<bcp14>MUST</bcp14>として扱い、消費者に対しては、<xref target="RFC7159" section="4" format="default" sectionFormat="of" derivedLink="https://www.rfc-editor.org/rfc/rfc7159#section-4" derivedContent="RFC7159"/>で指定された方法で処理するか、ECMAScript 5.1で指定されたように処理する必要があります。JSONパーサーがメンバー名の一意性を強制しない場合や、重複するメンバー名に対して予測不可能な値を返す場合、曖昧で潜在的に悪用される状況が発生する可能性があります。</t>
        <t indent="0" pn="section-10.12-5">一部のJSONパーサーは、有効な入力の後に余分な有意義な文字を含む入力を拒否しない場合があります。たとえば、「{ "tag": "value"} ABCD」という入力は、有効なJSONテキストオブジェクトに続いて余分な文字「ABCD」が含まれています。実装は、このような入力を含むJWSを無効とする必要があります<bcp14>MUST</bcp14>。</t>
      </section>
      <section anchor="unicode-comparison-security-considerations" numbered="true" removeInRFC="false" toc="include" pn="section-10.13">
        <name slugifiedName="name-unicode-comparison-security-considerations">Unicodeの比較に関するセキュリティー上の考慮事項</name>
        <t indent="0" pn="section-10.13-1">ヘッダーパラメーター名とアルゴリズム名はUnicode文字列です。セキュリティー上の理由から、これらの名前の表現は、エスケープ処理（RFC 7159のセクション8.3に従って）を実行した後に、そのまま比較する必要があります。つまり、これらのJSON文字列は等しいとして比較される必要があります（「sig」、「\u0073ig」）。一方、これらはすべて、最初のセットまたはお互いに等しくないとして比較される必要があります（「SIG」、「Sig」、「si\u0047」）。</t>
        <t indent="0" pn="section-10.13-2">JSON文字列には、Unicode基本多言語面の外の文字が含まれる場合があります。たとえば、Gクレフ文字（U+1D11E）はJSON文字列で「\uD834\uDD1E」として表現されることがあります。理想的には、JWS実装は、基本多言語面の外の文字が正しく保存および比較されるように<bcp14>SHOULD</bcp14>を確実にする必要があります。また、基礎となるJSON実装に存在する制限により、これが不可能な場合は、これらの文字を含む入力は<bcp14>MUST</bcp14>に拒否される必要があります。</t>
      </section>
    </section>
  </middle>
  <back>
    <references pn="section-11">
      <name slugifiedName="name-references">参考文献</name>
      <references pn="section-11.1">
        <name slugifiedName="name-normative-references">引用規格</name>
        <reference anchor="ECMAScript" target="http://www.ecma-international.org/ecma-262/5.1/ ECMA-262.pdf" quoteTitle="true" derivedAnchor="ECMAScript">
          <front>
            <title>ECMAScript Language Specification, 5.1 Edition</title>
            <date year="2011" month="June"/>
          </front>
        </reference>
        <reference anchor="IANA.MediaTypes" target="http://www.iana.org/assignments/media-types" quoteTitle="true" derivedAnchor="IANA.MediaTypes">
          <front>
            <title>Media Types</title>
          </front>
        </reference>
        <reference anchor="ITU.X690.2008" quoteTitle="true" derivedAnchor="ITU.X690.2008">
          <front>
            <title>Information Technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
            <date year="2008"/>
          </front>
          <seriesInfo name="ITU-T Recommendation">X.690</seriesInfo>
        </reference>
        <reference anchor="JWA" target="http://www.rfc-editor.org/info/rfc7518" quoteTitle="true" derivedAnchor="JWA">
          <front>
            <title>JSON Web Algorithms (JWA)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7518</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7518</seriesInfo>
        </reference>
        <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517" quoteTitle="true" derivedAnchor="JWK">
          <front>
            <title>JSON Web Key (JWK)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7517</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7517</seriesInfo>
        </reference>
        <reference anchor="RFC20" target="http://www.rfc-editor.org/info/rfc20" quoteTitle="true" derivedAnchor="RFC20">
          <front>
            <title>ASCII format for Network Interchange</title>
            <date year="1969" month="October"/>
          </front>
          <seriesInfo name="STD">80</seriesInfo>
          <seriesInfo name="RFC">20</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC0020</seriesInfo>
        </reference>
        <reference anchor="RFC2045" target="http://www.rfc-editor.org/info/rfc2045" quoteTitle="true" derivedAnchor="RFC2045">
          <front>
            <title>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
            <date year="1996" month="November"/>
          </front>
          <seriesInfo name="RFC">2045</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2045</seriesInfo>
        </reference>
        <reference anchor="RFC2046" target="http://www.rfc-editor.org/info/rfc2046" quoteTitle="true" derivedAnchor="RFC2046">
          <front>
            <title>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
            <date year="1996" month="November"/>
          </front>
          <seriesInfo name="RFC">2046</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2046</seriesInfo>
        </reference>
        <reference anchor="RFC2119" target="http://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <date year="1997" month="March"/>
          </front>
          <seriesInfo name="BCP">14</seriesInfo>
          <seriesInfo name="RFC">2119</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2119</seriesInfo>
        </reference>
        <reference anchor="RFC2818" target="http://www.rfc-editor.org/info/rfc2818" quoteTitle="true" derivedAnchor="RFC2818">
          <front>
            <title>HTTP Over TLS</title>
            <date year="2000" month="May"/>
          </front>
          <seriesInfo name="RFC">2818</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2818</seriesInfo>
        </reference>
        <reference anchor="RFC3629" target="http://www.rfc-editor.org/info/rfc3629" quoteTitle="true" derivedAnchor="RFC3629">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <date year="2003" month="November"/>
          </front>
          <seriesInfo name="STD">63</seriesInfo>
          <seriesInfo name="RFC">3629</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3629</seriesInfo>
        </reference>
        <reference anchor="RFC3986" target="http://www.rfc-editor.org/info/rfc3986" quoteTitle="true" derivedAnchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <date year="2005" month="January"/>
          </front>
          <seriesInfo name="STD">66</seriesInfo>
          <seriesInfo name="RFC">3986</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3986</seriesInfo>
        </reference>
        <reference anchor="RFC4648" target="http://www.rfc-editor.org/info/rfc4648" quoteTitle="true" derivedAnchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <date year="2006" month="October"/>
          </front>
          <seriesInfo name="RFC">4648</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4648</seriesInfo>
        </reference>
        <reference anchor="RFC4945" target="http://www.rfc-editor.org/info/rfc4945" quoteTitle="true" derivedAnchor="RFC4945">
          <front>
            <title>The Internet IP Security PKI Profile of IKEv1/ISAKMP, IKEv2, and PKIX</title>
            <date year="2007" month="August"/>
          </front>
          <seriesInfo name="RFC">4945</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4945</seriesInfo>
        </reference>
        <reference anchor="RFC4949" target="http://www.rfc-editor.org/info/rfc4949" quoteTitle="true" derivedAnchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <date year="2007" month="August"/>
          </front>
          <seriesInfo name="RFC">4949</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4949</seriesInfo>
        </reference>
        <reference anchor="RFC5246" target="http://www.rfc-editor.org/info/rfc5246" quoteTitle="true" derivedAnchor="RFC5246">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
            <date year="2008" month="August"/>
          </front>
          <seriesInfo name="RFC">5246</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5246</seriesInfo>
        </reference>
        <reference anchor="RFC5280" target="http://www.rfc-editor.org/info/rfc5280" quoteTitle="true" derivedAnchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <date year="2008" month="May"/>
          </front>
          <seriesInfo name="RFC">5280</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5280</seriesInfo>
        </reference>
        <reference anchor="RFC6125" target="http://www.rfc-editor.org/info/rfc6125" quoteTitle="true" derivedAnchor="RFC6125">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <date year="2011" month="March"/>
          </front>
          <seriesInfo name="RFC">6125</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6125</seriesInfo>
        </reference>
        <reference anchor="RFC6176" target="http://www.rfc-editor.org/info/rfc6176" quoteTitle="true" derivedAnchor="RFC6176">
          <front>
            <title>Prohibiting Secure Sockets Layer (SSL) Version 2.0</title>
            <date year="2011" month="March"/>
          </front>
          <seriesInfo name="RFC">6176</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6176</seriesInfo>
        </reference>
        <reference anchor="RFC7159" target="http://www.rfc-editor.org/info/rfc7159" quoteTitle="true" derivedAnchor="RFC7159">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <date year="2014" month="March"/>
          </front>
          <seriesInfo name="RFC">7159</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7159</seriesInfo>
        </reference>
        <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/" quoteTitle="true" derivedAnchor="UNICODE">
          <front>
            <title>The Unicode Standard</title>
          </front>
        </reference>
      </references>
      <references pn="section-11.2">
        <name slugifiedName="name-informative-references">参考文献</name>
        <reference anchor="CanvasApp" target="http://developers.facebook.com/docs/authentication/ canvas" quoteTitle="true" derivedAnchor="CanvasApp">
          <front>
            <title>Canvas Applications</title>
          </front>
        </reference>
        <reference anchor="JSS" target="http://jsonenc.info/jss/1.0/" quoteTitle="true" derivedAnchor="JSS">
          <front>
            <title>JSON Simple Sign</title>
            <date year="2010" month="September"/>
          </front>
        </reference>
        <reference anchor="JWE" target="http://www.rfc-editor.org/info/rfc7516" quoteTitle="true" derivedAnchor="JWE">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7516</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7516</seriesInfo>
        </reference>
        <reference anchor="JWT" target="http://www.rfc-editor.org/info/rfc7519" quoteTitle="true" derivedAnchor="JWT">
          <front>
            <title>JSON Web Token (JWT)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="RFC">7519</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7519</seriesInfo>
        </reference>
        <reference anchor="MagicSignatures" target="http://salmon-protocol.googlecode.com/svn/trunk/ draft-panzer-magicsig-01.html" quoteTitle="true" derivedAnchor="MagicSignatures">
          <front>
            <title>Magic Signatures</title>
            <date year="2011" month="January"/>
          </front>
        </reference>
        <reference anchor="RFC2104" target="http://www.rfc-editor.org/info/rfc2104" quoteTitle="true" derivedAnchor="RFC2104">
          <front>
            <title>HMAC: Keyed-Hashing for Message Authentication</title>
            <date year="1997" month="February"/>
          </front>
          <seriesInfo name="RFC">2104</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC2104</seriesInfo>
        </reference>
        <reference anchor="RFC3447" target="http://www.rfc-editor.org/info/rfc3447" quoteTitle="true" derivedAnchor="RFC3447">
          <front>
            <title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
            <date year="2003" month="February"/>
          </front>
          <seriesInfo name="RFC">3447</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC3447</seriesInfo>
        </reference>
        <reference anchor="RFC4086" target="http://www.rfc-editor.org/info/rfc4086" quoteTitle="true" derivedAnchor="RFC4086">
          <front>
            <title>Randomness Requirements for Security</title>
            <date year="2005" month="June"/>
          </front>
          <seriesInfo name="BCP">106</seriesInfo>
          <seriesInfo name="RFC">4086</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4086</seriesInfo>
        </reference>
        <reference anchor="RFC4122" target="http://www.rfc-editor.org/info/rfc4122" quoteTitle="true" derivedAnchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <date year="2005" month="July"/>
          </front>
          <seriesInfo name="RFC">4122</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC4122</seriesInfo>
        </reference>
        <reference anchor="RFC5226" target="http://www.rfc-editor.org/info/rfc5226" quoteTitle="true" derivedAnchor="RFC5226">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <date year="2008" month="May"/>
          </front>
          <seriesInfo name="BCP">26</seriesInfo>
          <seriesInfo name="RFC">5226</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC5226</seriesInfo>
        </reference>
        <reference anchor="RFC6211" target="http://www.rfc-editor.org/info/rfc6211" quoteTitle="true" derivedAnchor="RFC6211">
          <front>
            <title>Cryptographic Message Syntax (CMS) Algorithm Identifier Protection Attribute</title>
            <date year="2011" month="April"/>
          </front>
          <seriesInfo name="RFC">6211</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6211</seriesInfo>
        </reference>
        <reference anchor="RFC6838" target="http://www.rfc-editor.org/info/rfc6838" quoteTitle="true" derivedAnchor="RFC6838">
          <front>
            <title>Media Type Specifications and Registration Procedures</title>
            <date year="2013" month="January"/>
          </front>
          <seriesInfo name="BCP">13</seriesInfo>
          <seriesInfo name="RFC">6838</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC6838</seriesInfo>
        </reference>
        <reference anchor="RFC7525" target="http://www.rfc-editor.org/info/rfc7525" quoteTitle="true" derivedAnchor="RFC7525">
          <front>
            <title>Recommendations for Secure Use of Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
            <date year="2015" month="May"/>
          </front>
          <seriesInfo name="BCP">195</seriesInfo>
          <seriesInfo name="RFC">7525</seriesInfo>
          <seriesInfo name="DOI">10.17487/RFC7525</seriesInfo>
        </reference>
        <reference anchor="SHS" target="http://csrc.nist.gov/publications/fips/fips180-4/ fips-180-4.pdf" quoteTitle="true" derivedAnchor="SHS">
          <front>
            <title>Secure Hash Standard (SHS)</title>
            <date year="2012" month="March"/>
          </front>
          <seriesInfo name="FIPS PUB">180-4</seriesInfo>
        </reference>
        <reference anchor="W3C.NOTE-xmldsig-bestpractices-20130411" target="http://www.w3.org/TR/2013/ NOTE-xmldsig-bestpractices-20130411/" quoteTitle="true" derivedAnchor="W3C.NOTE-xmldsig-bestpractices-20130411">
          <front>
            <title>XML Signature Best Practices</title>
            <date year="2013" month="April"/>
          </front>
        </reference>
        <reference anchor="W3C.NOTE-xmldsig-core2-20130411" target="http://www.w3.org/TR/2013/NOTE-xmldsig-core2-20130411/" quoteTitle="true" derivedAnchor="W3C.NOTE-xmldsig-core2-20130411">
          <front>
            <title>XML Signature Syntax and Processing Version 2.0</title>
            <date year="2013" month="April"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="jws-examples" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-jws-examples">JWSの例</name>
      <t indent="0" pn="section-appendix.a-1">このセクションでは、いくつかのJWSの例を提供します。最初の3つの例はすべてJSON Web Token（JWT）<xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/>を表していますが、ペイロードは付録A.4に示されているように、任意のオクテットシーケンスであることができます。</t>
      <section anchor="example-jws-using-hmac-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.1">
        <name slugifiedName="name-example-jws-using-hmac-sha-256">HMAC SHA-256を使用したJWSの例</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.1.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.1.1-1">次の例のJWS保護ヘッダーは、データ構造がJWT<xref target="JWT" format="default" sectionFormat="of" derivedContent="JWT"/>であることを宣言し、JWS署名入力がHMAC SHA-256アルゴリズムを使用して保護されていることを示しています。</t>
          <t indent="0" pn="section-a.1.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"typ":"JWT",
   "alg":"HS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-3">JSONオブジェクトの表現における曖昧さを回避するために、この例で使用されるUTF8（JWS Protected Header）を表すオクテットシーケンスも以下に含まれています。 （異なるプラットフォーム表現による行区切り（CRLF対LF）、行の先頭と末尾のスペースの違い、最後の行に行区切りがあるかどうかなど、曖昧さが生じる可能性があります。この例で使用される表現では、最初の行には先頭または末尾のスペースがなく、CRLF行区切り（13、10）が最初の行と2番目の行の間に発生し、2番目の行には先頭スペース（32）が1つあり、末尾スペースはありません。最後の行には行区切りがありません。）この例でUTF8（JWS Protected Header）を表すオクテットは、JSON配列表記を使用して以下のようになります：</t>
          <t indent="0" pn="section-a.1.1-4">[123, 34, 116, 121, 112, 34, 58, 34, 74, 87, 84, 34, 44, 13, 10, 32,
34, 97, 108, 103, 34, 58, 34, 72, 83, 50, 53, 54, 34, 125]</t>
          <t indent="0" pn="section-a.1.1-5">このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が得られます：</t>
          <t indent="0" pn="section-a.1.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-7">この例で使用されるJWSペイロードは、以下のJSONオブジェクトのUTF-8表現のオクテットです。（ペイロードは、base64urlエンコードされたオクテットシーケンスである必要があり、base64urlエンコードされたJSONオブジェクトである必要はありません。）</t>
          <t indent="0" pn="section-a.1.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-9">上記のJSONオブジェクトに使用されるUTF-8表現である次のオクテットシーケンスが、JWSペイロードです:</t>
          <t indent="0" pn="section-a.1.1-10">[123, 34, 105, 115, 115, 34, 58, 34, 106, 111, 101, 34, 44, 13, 10,
32, 34, 101, 120, 112, 34, 58, 49, 51, 48, 48, 56, 49, 57, 51, 56,
48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,
109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,
111, 116, 34, 58, 116, 114, 117, 101, 125]</t>
          <t indent="0" pn="section-a.1.1-11">このJWSペイロードをBASE64URL(UTF8(JWSペイロード))でエンコードすると、次の値が得られます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.1.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-13">これらをBASE64URL(UTF8(JWS保護ヘッダー)) || '.' || BASE64URL(JWSペイロード)と結合すると、次の文字列が得られます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.1.1-14"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-15">上記の文字列のASCII表現であるJWS署名入力値は、次のオクテットシーケンスです（JSON配列表記を使用）:</t>
          <t indent="0" pn="section-a.1.1-16">[101, 121, 74, 48, 101, 88, 65, 105, 79, 105, 74, 75, 86, 49, 81,
105, 76, 65, 48, 75, 73, 67, 74, 104, 98, 71, 99, 105, 79, 105, 74,
73, 85, 122, 73, 49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51,
77, 105, 79, 105, 74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67,
74, 108, 101, 72, 65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84,
107, 122, 79, 68, 65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100,
72, 65, 54, 76, 121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76,
109, 78, 118, 98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73,
106, 112, 48, 99, 110, 86, 108, 102, 81]</t>
          <t indent="0" pn="section-a.1.1-17">HMACは鍵を使用して生成されます。この例では、以下のJSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>形式で表される対称鍵を使用します（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.1.1-18"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"oct",
   "k":"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-1qS0gZH75
        aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-19">この鍵を使用してJWS署名入力に対してHMAC SHA-256アルゴリズムを実行すると、次のJWS署名オクテットシーケンスが得られます:</t>
          <t indent="0" pn="section-a.1.1-20">[116, 24, 223, 180, 151, 153, 224, 37, 79, 250, 96, 125, 216, 173,
187, 186, 22, 212, 37, 77, 105, 214, 191, 240, 91, 88, 5, 88, 83,
132, 141, 121]</t>
          <t indent="0" pn="section-a.1.1-21">このJWS署名をBASE64URL(JWS署名)でエンコードすると、次の値が得られます:</t>
          <t indent="0" pn="section-a.1.1-22"><artwork name="" type="" align="left" alt=""><![CDATA[
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
          <t indent="0" pn="section-a.1.1-23">これらの値をHeader.Payload.Signatureの順序で連結し、部分の間にピリオド（'.'）文字を挿入すると、JWS Compact Serializationを使用した完全なJWS表現が得られます（表示目的の改行を含む）。</t>
          <t indent="0" pn="section-a.1.1-24"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.1.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.1.2-1">&quot;alg&quot;ヘッダーパラメーターが&quot;HS256&quot;であるため、JWS署名に含まれるHMAC SHA-256値を検証します。</t>
          <t indent="0" pn="section-a.1.2-2">HMAC値を検証するには、正しいキーとJWS署名入力（JWS Compact Serialization表現の最初のピリオド文字までの初期サブストリング）をHMAC SHA-256関数の入力として使用し、出力を取得して、JWS署名（JWS表現でエンコードされた値からbase64urlデコードされたもの）と一致するかどうかを確認します。完全に一致する場合、HMACは検証されます。</t>
        </section>
      </section>
      <section anchor="example-jws-using-rsassa-pkcs1-v1_5-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.2">
        <name slugifiedName="name-example-jws-using-rsassa-pkcs1-v1_5-sha-256">RSASSA-PKCS1-v1_5 SHA-256を使用したJWSの例</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.2.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.2.1-1">この例のJWS保護ヘッダーは、前の例とは異なる2つの方法で異なります。 まず、異なるアルゴリズムが使用されているため、「alg」値が異なります。 2番目に、説明のために、オプションの「typ」（タイプ）ヘッダーパラメーターは使用されていません。 （この違いは使用されるアルゴリズムとは関係ありません。）使用されるJWS保護ヘッダーは次のとおりです：</t>
          <t indent="0" pn="section-a.2.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-3">この例でUTF8（JWS保護ヘッダー）を表すオクテットは、JSON配列表記を使用して以下のようになります：</t>
          <t indent="0" pn="section-a.2.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 82, 83, 50, 53, 54, 34, 125]</t>
          <t indent="0" pn="section-a.2.1-5">このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が得られます：</t>
          <t indent="0" pn="section-a.2.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-7">この例で使用されるJWSペイロードは、前の例と同じです。したがって、BASE64URL（JWSペイロード）の値は同じであるため、ここではその計算を繰り返しません。</t>
          <t indent="0" pn="section-a.2.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-9">これらをBASE64URL（UTF8（JWS保護ヘッダー））|| '.' || BASE64URL（JWSペイロード）として結合すると、次の文字列が得られます（表示目的の改行を含む）：</t>
          <t indent="0" pn="section-a.2.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-11">上記の文字列のASCII表現であるJWS署名入力値は、以下のオクテットシーケンスです：</t>
          <t indent="0" pn="section-a.2.1-12">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 83, 85, 122, 73,
49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
99, 110, 86, 108, 102, 81]
この例では、以下のJSON Web Key<xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>形式で表されるRSAキーが使用されます（表示目的の改行を含む）：</t>
          <t indent="0" pn="section-a.2.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"RSA",
   "n":"ofgWCuLjybRlzo0tZWJjNiuSfb4p4fAkd_wWJcyQoTbji9k0l8W26mPddx
        HmfHQp-Vaw-4qPCJrcS2mJPMEzP1Pt0Bm4d4QlL-yRT-SFd2lZS-pCgNMs
        D1W_YpRPEwOWvG6b32690r2jZ47soMZo9wGzjb_7OMg0LOL-bSf63kpaSH
        SXndS5z5rexMdbBYUsLA9e-KXBdQOS-UTo7WTBEMa2R2CapHg665xsmtdV
        MTBQY4uDZlxvb3qCo5ZwKh9kG4LT6_I5IhlJH7aGhyxXFvUK-DWNmoudF8
        NAco9_h9iaGNj8q2ethFkMLs91kzk2PAcDTW9gb54h4FRWyuXpoQ",
   "e":"AQAB",
   "d":"Eq5xpGnNCivDflJsRQBXHx1hdR1k6Ulwe2JZD50LpXyWPEAeP88vLNO97I
        jlA7_GQ5sLKMgvfTeXZx9SE-7YwVol2NXOoAJe46sui395IW_GO-pWJ1O0
        BkTGoVEn2bKVRUCgu-GjBVaYLU6f3l9kJfFNS3E0QbVdxzubSu3Mkqzjkn
        439X0M_V51gfpRLI9JYanrC4D4qAdGcopV_0ZHHzQlBjudU2QvXt4ehNYT
        CBr6XCLQUShb1juUO1ZdiYoFaFQT5Tw8bGUl_x_jTj3ccPDVZFD9pIuhLh
        BOneufuBiB4cS98l2SR_RQyGWSeWjnczT0QU91p1DhOVRuOopznQ",
   "p":"4BzEEOtIpmVdVEZNCqS7baC4crd0pqnRH_5IB3jw3bcxGn6QLvnEtfdUdi
        YrqBdss1l58BQ3KhooKeQTa9AB0Hw_Py5PJdTJNPY8cQn7ouZ2KKDcmnPG
        BY5t7yLc1QlQ5xHdwW1VhvKn-nXqhJTBgIPgtldC-KDV5z-y2XDwGUc",
   "q":"uQPEfgmVtjL0Uyyx88GZFF1fOunH3-7cepKmtH4pxhtCoHqpWmT8YAmZxa
        ewHgHAjLYsp1ZSe7zFYHj7C6ul7TjeLQeZD_YwD66t62wDmpe_HlB-TnBA
        -njbglfIsRLtXlnDzQkv5dTltRJ11BKBBypeeF6689rjcJIDEz9RWdc",
   "dp":"BwKfV3Akq5_MFZDFZCnW-wzl-CCo83WoZvnLQwCTeDv8uzluRSnm71I3Q
        CLdhrqE2e9YkxvuxdBfpT_PI7Yz-FOKnu1R6HsJeDCjn12Sk3vmAktV2zb
        34MCdy7cpdTh_YVr7tss2u6vneTwrA86rZtu5Mbr1C1XsmvkxHQAdYo0",
   "dq":"h_96-mK1R_7glhsum81dZxjTnYynPbZpHziZjeeHcXYsXaaMwkOlODsWa
        7I9xXDoRwbKgB719rrmI2oKr6N3Do9U0ajaHF-NKJnwgjMd2w9cjz3_-ky
        NlxAr2v4IKhGNpmM5iIgOS1VZnOZ68m6_pbLBSp3nssTdlqvd0tIiTHU",
   "qi":"IYd7DHOhrWvxkwPQsRM2tOgrjbcrfvtQJipd-DlcxyVuuM9sQLdgjVk2o
        y26F0EmpScGLq2MowX7fhd_QJQ3ydy5cY7YIBi87w93IKLEdfnbJtoOPLU
        W0ITrJReOgo1cq9SbsxYawBgfp_gh6A5603k2-ZQwVK0JKSHuLFkuQ3U"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-14">RSAの秘密鍵は、SHA-256のハッシュタイプとJWS署名入力を入力として受け取るRSA署名関数に渡されます。デジタル署名の結果は、ビッグエンディアンの整数を表すオクテットシーケンスです。この例では、次の値です:</t>
          <t indent="0" pn="section-a.2.1-15">[112, 46, 33, 137, 67, 232, 143, 209, 30, 181, 216, 45, 191, 120, 69,
243, 65, 6, 174, 27, 129, 255, 247, 115, 17, 22, 173, 209, 113, 125,
131, 101, 109, 66, 10, 253, 60, 150, 238, 221, 115, 162, 102, 62, 81,
102, 104, 123, 0, 11, 135, 34, 110, 1, 135, 237, 16, 115, 249, 69,
229, 130, 173, 252, 239, 22, 216, 90, 121, 142, 232, 198, 109, 219,
61, 184, 151, 91, 23, 208, 148, 2, 190, 237, 213, 217, 217, 112, 7,
16, 141, 178, 129, 96, 213, 248, 4, 12, 167, 68, 87, 98, 184, 31,
190, 127, 249, 217, 46, 10, 231, 111, 36, 242, 91, 51, 187, 230, 244,
74, 230, 30, 177, 4, 10, 203, 32, 4, 77, 62, 249, 18, 142, 212, 1,
48, 121, 91, 212, 189, 59, 65, 238, 202, 208, 102, 171, 101, 25, 129,
253, 228, 141, 247, 127, 55, 45, 195, 139, 159, 175, 221, 59, 239,
177, 139, 93, 163, 204, 60, 46, 176, 47, 158, 58, 65, 214, 18, 202,
173, 21, 145, 18, 115, 160, 95, 35, 185, 232, 56, 250, 175, 132, 157,
105, 132, 41, 239, 90, 30, 136, 121, 130, 54, 195, 212, 14, 96, 69,
34, 165, 68, 200, 242, 122, 122, 45, 184, 6, 99, 209, 108, 247, 202,
234, 86, 222, 64, 92, 178, 33, 90, 69, 178, 194, 85, 102, 181, 90,
193, 167, 72, 160, 112, 223, 200, 163, 42, 70, 149, 67, 208, 25, 238,
251, 71]</t>
          <t indent="0" pn="section-a.2.1-16">署名をBASE64URL(JWS Signature)でエンコードすると、次の値が得られます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.2.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
  cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZmh7
  AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjbKBYNX4
  BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHlb1L07Qe7K
  0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZESc6BfI7noOPqv
  hJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AXLIhWkWywlVmtVrB
  p0igcN_IoypGlUPQGe77Rw
]]></artwork>
</t>
          <t indent="0" pn="section-a.2.1-18">これらの値をHeader.Payload.Signatureの順序で連結し、部分の間にピリオド（'.'）文字を挿入すると、JWS Compact Serializationを使用した完全なJWS表現が得られます（表示目的の改行を含む）。</t>
          <t indent="0" pn="section-a.2.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZmh7
  AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjbKBYNX4
  BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHlb1L07Qe7K
  0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZESc6BfI7noOPqv
  hJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AXLIhWkWywlVmtVrB
  p0igcN_IoypGlUPQGe77Rw
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.2.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.2.2-1">&quot;alg&quot;ヘッダーパラメーターが&quot;RS256&quot;であるため、JWS署名に含まれるRSASSA-PKCS1-v1_5 SHA-256デジタル署名を検証します。</t>
          <t indent="0" pn="section-a.2.2-2">JWS署名の検証は、前の例とは少し異なります。公開鍵（n、e）、JWS署名（JWS表現でエンコードされた値からbase64urlデコードされたもの）、およびJWS署名入力（JWS Compact Serialization表現の最初のピリオド文字までの初期サブストリング）を、SHA-256ハッシュ関数を使用するように構成されたRSASSA-PKCS1-v1_5署名検証器に渡します。</t>
        </section>
      </section>
      <section anchor="example-jws-using-ecdsa-p-256-sha-256" numbered="true" removeInRFC="false" toc="include" pn="section-a.3">
        <name slugifiedName="name-example-jws-using-ecdsa-p-256-sha-256">ECDSA P-256 SHA-256を使用したJWSの例</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.3.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.3.1-1">この例のJWS保護ヘッダーは、前の例とは異なるアルゴリズムが使用されているため異なります。使用されるJWS保護ヘッダーは次のとおりです：</t>
          <t indent="0" pn="section-a.3.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-3">この例でUTF8(JWS Protected Header)を表すオクテットは、次のJSON配列表記です:</t>
          <t indent="0" pn="section-a.3.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 69, 83, 50, 53, 54, 34, 125]
このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が得られます：</t>
          <t indent="0" pn="section-a.3.1-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-6">この例で使用されるJWSペイロードは、前の例と同じです。したがって、BASE64URL(JWSペイロード)の値は同じであるため、ここでは再計算されません。</t>
          <t indent="0" pn="section-a.3.1-7"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-8">これらをBASE64URL（UTF8（JWS保護ヘッダー））|| '.' || BASE64URL（JWSペイロード）として結合すると、次の文字列が得られます（表示目的の改行を含む）：</t>
          <t indent="0" pn="section-a.3.1-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-10">上記の文字列のASCII表現であるJWS署名入力値は、以下のオクテットシーケンスです：</t>
          <t indent="0" pn="section-a.3.1-11">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 70, 85, 122, 73,
49, 78, 105, 74, 57, 46, 101, 121, 74, 112, 99, 51, 77, 105, 79, 105,
74, 113, 98, 50, 85, 105, 76, 65, 48, 75, 73, 67, 74, 108, 101, 72,
65, 105, 79, 106, 69, 122, 77, 68, 65, 52, 77, 84, 107, 122, 79, 68,
65, 115, 68, 81, 111, 103, 73, 109, 104, 48, 100, 72, 65, 54, 76,
121, 57, 108, 101, 71, 70, 116, 99, 71, 120, 108, 76, 109, 78, 118,
98, 83, 57, 112, 99, 49, 57, 121, 98, 50, 57, 48, 73, 106, 112, 48,
99, 110, 86, 108, 102, 81]</t>
          <t indent="0" pn="section-a.3.1-12">この例では、以下のJSON Web Key<xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>形式で表される楕円曲線キーが使用されます：</t>
          <t indent="0" pn="section-a.3.1-13"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
   "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
   "d":"jpsQnnGQmL-YBIffH1136cspYG6-0iY7X1fCE9-E9LI"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-14">楕円曲線デジタル署名アルゴリズム（ECDSA）の秘密部分dは、曲線タイプP-256、ハッシュタイプSHA-256、およびJWS署名入力を入力として受け取るECDSA署名関数に渡されます。デジタル署名の結果は、楕円曲線（EC）の点（R、S）であり、RとSは符号なし整数です。この例では、ビッグエンディアンの整数を表すオクテットシーケンスとして与えられたRとSの値は次のとおりです:</t>
          <t indent="0" pn="section-a.3.1-15"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Result  Name</td>
<td align="left">Value                                                    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> R  </td>
<td align="left">[14, 209, 33, 83, 121, 99, 108, 72, 60, 47, 127, 21, 88,  7, 212, 2, 163, 178, 40, 3, 58, 249, 124, 126, 23, 129,   154, 195, 22, 158, 166, 101]                             </td>
</tr>
<tr>
<td align="left"> S  </td>
<td align="left">[197, 10, 7, 211, 140, 60, 112, 229, 216, 241, 45, 175,   8, 74, 84, 128, 166, 101, 144, 197, 242, 147, 80, 154,    143, 63, 127, 138, 131, 163, 84, 213]                    </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-a.3.1-16">JWS署名は、値R || Sです。署名をBASE64URL(JWS署名)でエンコードすると、次の値が得られます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.3.1-17"><artwork name="" type="" align="left" alt=""><![CDATA[
  DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8ISlSA
  pmWQxfKTUJqPP3-Kg6NU1Q
]]></artwork>
</t>
          <t indent="0" pn="section-a.3.1-18">これらの値をHeader.Payload.Signatureの順序で連結し、部分の間にピリオド（'.'）文字を挿入すると、JWS Compact Serializationを使用した完全なJWS表現が得られます（表示目的の改行を含む）。</t>
          <t indent="0" pn="section-a.3.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
  DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8ISlSA
  pmWQxfKTUJqPP3-Kg6NU1Q
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.3.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.3.2-1">&quot;alg&quot;ヘッダーパラメーターが&quot;ES256&quot;であるため、JWS署名に含まれるECDSA P-256 SHA-256デジタル署名を検証します。</t>
          <t indent="0" pn="section-a.3.2-2">JWS署名の検証は、前の例とは少し異なります。JWS署名の64バイトのオクテットシーケンス（JWS表現でエンコードされた値からbase64urlデコードされたもの）を、RとSを表す2つの32バイトのオクテットシーケンスに分割する必要があります。次に、公開鍵（x、y）、署名（R、S）、およびJWS署名入力（JWS Compact Serialization表現の最初のピリオド文字までの初期サブストリング）を、SHA-256ハッシュ関数を使用するように構成されたP-256曲線を使用するECDSA署名検証器に渡します。</t>
        </section>
      </section>
      <section anchor="example-jws-using-ecdsa-p-521-sha-512" numbered="true" removeInRFC="false" toc="include" pn="section-a.4">
        <name slugifiedName="name-example-jws-using-ecdsa-p-521-sha-512">ECDSA P-521 SHA-512を使用したJWSの例</name>
        <section anchor="encoding" numbered="true" removeInRFC="false" toc="include" pn="section-a.4.1">
          <name slugifiedName="name-encoding">Encoding</name>
          <t indent="0" pn="section-a.4.1-1">この例のJWS保護ヘッダーは、前の例とは異なるECDSA曲線とハッシュ関数が使用されているため異なります。使用されるJWS保護ヘッダーは次のとおりです：</t>
          <t indent="0" pn="section-a.4.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES512"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-3">この例でUTF8（JWS保護ヘッダー）を表すオクテットは、JSON配列表記を使用して以下のようになります：</t>
          <t indent="0" pn="section-a.4.1-4">[123, 34, 97, 108, 103, 34, 58, 34, 69, 83, 53, 49, 50, 34, 125]</t>
          <t indent="0" pn="section-a.4.1-5">このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が得られます：</t>
          <t indent="0" pn="section-a.4.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-7">この例で使用されるJWSペイロードは、ASCII文字列「Payload」です。
この文字列の表現は、次のオクテットシーケンスです：</t>
          <t indent="0" pn="section-a.4.1-8">[80, 97, 121, 108, 111, 97, 100]</t>
          <t indent="0" pn="section-a.4.1-9">このJWSペイロードをBASE64URL（JWSペイロード）としてエンコードすると、次の値が得られます：</t>
          <t indent="0" pn="section-a.4.1-10"><artwork name="" type="" align="left" alt=""><![CDATA[
  UGF5bG9hZA
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-11">これらをBASE64URL(UTF8(JWS保護ヘッダー)) || '.' || BASE64URL(JWSペイロード)と結合すると、次の文字列が得られます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.4.1-12"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9.UGF5bG9hZA
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-13">上記の文字列のASCII表現であるJWS署名入力値は、次のオクテットシーケンスです:</t>
          <t indent="0" pn="section-a.4.1-14">[101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 70, 85, 122, 85,
120, 77, 105, 74, 57, 46, 85, 71, 70, 53, 98, 71, 57, 104, 90, 65]
この例では、以下のJSON Web Key <xref target="JWK" format="default" sectionFormat="of" derivedContent="JWK"/>形式で表される楕円曲線鍵を使用します（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.4.1-15"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-521",
   "x":"AekpBQ8ST8a8VcfVOTNl353vSrDCLLJXmPk06wTjxrrjcBpXp5EOnYG_
        NjFZ6OvLFV1jSfS9tsz4qUxcWceqwQGk",
   "y":"ADSmRA43Z1DSNx_RvcLI87cdL07l6jQyyBXMoxVg_l2Th-x3S1WDhjDl
        y79ajL4Kkd0AZMaZmh9ubmf63e3kyMj2",
   "d":"AY5pb7A0UFiB3RELSD64fTLOSV_jazdF7fLYyuTw8lOfRhWg6Y6rUrPA
        xerEzgdRhajnu0ferB0d53vM9mE15j2C"
  }
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-16">ECDSAの秘密部分dは、曲線タイプP-521、ハッシュタイプSHA-512、およびJWS署名入力を入力として取るECDSA署名関数に渡されます。デジタル署名の結果は、ECポイント（R、S）であり、RとSは符号なし整数です。この例では、big-endian整数を表すオクテットシーケンスとして与えられたRおよびSの値は次のとおりです。</t>
          <t indent="0" pn="section-a.4.1-17"><table align="center">
<thead>
<tr>
<tr>
<td align="left"> Result  Name</td>
<td align="left">Value                                                    </td>
</tr>
</tr>
</thead>
<tbody>
<tr>
<td align="left"> R     </td>
<td align="left">[1, 220, 12, 129, 231, 171, 194, 209, 232, 135, 233,      117, 247, 105, 122, 210, 26, 125, 192, 1, 217, 21, 82,    91, 45, 240, 255, 83, 19, 34, 239, 71, 48, 157, 147,      152, 105, 18, 53, 108, 163, 214, 68, 231, 62, 153, 150,   106, 194, 164, 246, 72, 143, 138, 24, 50, 129, 223, 133,  206, 209, 172, 63, 237, 119, 109]                        </td>
</tr>
<tr>
<td align="left"> S     </td>
<td align="left">[0, 111, 6, 105, 44, 5, 41, 208, 128, 61, 152, 40, 92,    61, 152, 4, 150, 66, 60, 69, 247, 196, 170, 81, 193,      199, 78, 59, 194, 169, 16, 124, 9, 143, 42, 142, 131,     48, 206, 238, 34, 175, 83, 203, 220, 159, 3, 107, 155,    22, 27, 73, 111, 68, 68, 21, 238, 144, 229, 232, 148,     188, 222, 59, 242, 103]                                  </td>
</tr>
</tbody>
</table>
</t>
          <t indent="0" pn="section-a.4.1-18">JWS署名は、値R || Sです。署名をBASE64URL（JWS署名）としてエンコードすると、次の値が生成されます（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.4.1-19"><artwork name="" type="" align="left" alt=""><![CDATA[
  AdwMgeerwtHoh-l192l60hp9wAHZFVJbLfD_UxMi70cwnZOYaRI1bKPWROc-mZZq
  wqT2SI-KGDKB34XO0aw_7XdtAG8GaSwFKdCAPZgoXD2YBJZCPEX3xKpRwcdOO8Kp
  EHwJjyqOgzDO7iKvU8vcnwNrmxYbSW9ERBXukOXolLzeO_Jn
]]></artwork>
</t>
          <t indent="0" pn="section-a.4.1-20">これらの値をHeader.Payload.Signatureの順序で連結し、部分の間にピリオド（'.'）文字を挿入すると、JWS Compact Serializationを使用した完全なJWS表現が得られます（表示目的の改行を含む）。</t>
          <t indent="0" pn="section-a.4.1-21"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzUxMiJ9
  .
  UGF5bG9hZA
  .
  AdwMgeerwtHoh-l192l60hp9wAHZFVJbLfD_UxMi70cwnZOYaRI1bKPWROc-mZZq
  wqT2SI-KGDKB34XO0aw_7XdtAG8GaSwFKdCAPZgoXD2YBJZCPEX3xKpRwcdOO8Kp
  EHwJjyqOgzDO7iKvU8vcnwNrmxYbSW9ERBXukOXolLzeO_Jn
]]></artwork>
</t>
        </section>
        <section anchor="validating" numbered="true" removeInRFC="false" toc="include" pn="section-a.4.2">
          <name slugifiedName="name-validating">Validating</name>
          <t indent="0" pn="section-a.4.2-1">&quot;alg&quot;ヘッダーパラメーターが&quot;ES512&quot;であるため、JWSシグネチャに含まれるECDSA P-521 SHA-512デジタル署名を検証します。</t>
          <t indent="0" pn="section-a.4.2-2">このJWSシグネチャの検証は、前の例と非常に似ています。JWSシグネチャの132バイトのオクテットシーケンスを2つの66バイトのシーケンスに分割する必要があります。最初のシーケンスはRを表し、2番目のシーケンスはSを表します。次に、公開鍵（x、y）、署名（R、S）、およびJWS署名入力を使用して、P-521曲線とSHA-512ハッシュ関数を使用するように構成されたECDSA署名検証器に渡します。</t>
        </section>
      </section>
      <section anchor="example-unsecured-jws" numbered="true" removeInRFC="false" toc="include" pn="section-a.5">
        <name slugifiedName="name-example-unsecured-jws">Unsecured JWSの例</name>
        <t indent="0" pn="section-a.5-1">次の例のJWS保護ヘッダーは、エンコードされたオブジェクトがUnsecured JWSであることを宣言しています:</t>
        <t indent="0" pn="section-a.5-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"none"}
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-3">このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が生成されます:</t>
        <t indent="0" pn="section-a.5-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIn0
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-5">この例で使用されるJWSペイロードは、前の例と同じです。したがって、BASE64URL（JWSペイロード）の値は同じであるため、ここではその計算を繰り返しません。</t>
        <t indent="0" pn="section-a.5-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
]]></artwork>
</t>
        <t indent="0" pn="section-a.5-7">JWSシグネチャは空のオクテット文字列であり、BASE64URL（JWSシグネチャ）は空の文字列です。</t>
        <t indent="0" pn="section-a.5-8">これらの値をHeader.Payload.Signatureの順序で連結し、各部分の間にピリオド（'.'）文字を挿入すると、JWS Compact Serializationを使用した完全なJWS表現が生成されます（表示目的の改行を含む）:</t>
        <t indent="0" pn="section-a.5-9"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIn0
  .
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
  .
]]></artwork>
</t>
      </section>
      <section anchor="example-jws-using-general-jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-a.6">
        <name slugifiedName="name-example-jws-using-general-jws-json-serialization">JWSの例 Using General JWS JSON Serialization</name>
        <t indent="0" pn="section-a.6-1">このセクションには、一般的なJWS JSONシリアル化構文を使用した例が含まれています。この例は、同じペイロードに対して複数のデジタル署名および/またはMACを伝達する機能を示しています。</t>
        <t indent="0" pn="section-a.6-2">この例で使用されるJWSペイロードは、付録A.2および付録A.3の例で使用されるものと同じです（表示目的の改行を含む）:</t>
        <t indent="0" pn="section-a.6-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
  cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
]]></artwork>
</t>
        <t indent="0" pn="section-a.6-4">この例では、2つのデジタル署名が使用されています。1つ目はRSASSA-PKCS1-v1_5 SHA-256を使用し、2つ目はECDSA P-256 SHA-256を使用します。1つ目の場合、JWS保護ヘッダーと鍵は付録A.2と同じであり、同じJWSシグネチャ値が生成されます。したがって、ここではその計算を繰り返しません。2つ目の場合、JWS保護ヘッダーと鍵は付録A.3と同じであり、同じJWSシグネチャ値が生成されます。したがって、ここではその計算を繰り返しません。</t>
        <section anchor="jws-per-signature-protected-headers" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.1">
          <name slugifiedName="name-jws-per-signature-protected-headers">JWS Per-Signature Protected Headers</name>
          <t indent="0" pn="section-a.6.1-1">最初の署名に使用されるJWS保護ヘッダーの値は次のとおりです:</t>
          <t indent="0" pn="section-a.6.1-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-3">このJWS保護ヘッダーをBASE64URL（UTF8（JWS保護ヘッダー））としてエンコードすると、次の値が生成されます:</t>
          <t indent="0" pn="section-a.6.1-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJSUzI1NiJ9
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-5">2番目の署名に使用されるJWS保護ヘッダーの値は次のとおりです:</t>
          <t indent="0" pn="section-a.6.1-6"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.1-7">このJWS保護ヘッダーをBASE64URL(UTF8(JWS保護ヘッダー))でエンコードすると、次の値が得られます:</t>
          <t indent="0" pn="section-a.6.1-8"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJFUzI1NiJ9
]]></artwork>
</t>
        </section>
        <section anchor="jws-per-signature-unprotected-headers" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.2">
          <name slugifiedName="name-jws-per-signature-unprotected-headers">JWS Per-Signature Unprotected Headers</name>
          <t indent="0" pn="section-a.6.2-1">キーID値は、署名ごとにHeaderパラメーターを使用して提供されます。これらのキーIDを表すために使用される2つのJWS Unprotected Header値は次のとおりです:</t>
          <t indent="0" pn="section-a.6.2-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kid":"2010-12-29"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.2-3">および</t>
          <t indent="0" pn="section-a.6.2-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"}
]]></artwork>
</t>
        </section>
        <section anchor="complete-jose-header-values" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.3">
          <name slugifiedName="name-complete-jose-header-values">Complete JOSEヘッダー Values</name>
          <t indent="0" pn="section-a.6.3-1">提供されたJWS保護ヘッダーとJWS未保護ヘッダー値を組み合わせると、最初の署名に使用されるJOSEヘッダー値と2番目の署名に使用されるJOSEヘッダー値が次のようになります:</t>
          <t indent="0" pn="section-a.6.3-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"RS256",
   "kid":"2010-12-29"}
]]></artwork>
</t>
          <t indent="0" pn="section-a.6.3-3">および</t>
          <t indent="0" pn="section-a.6.3-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ES256",
   "kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"}
]]></artwork>
</t>
        </section>
        <section anchor="complete-jws-json-serialization-representation" numbered="true" removeInRFC="false" toc="include" pn="section-a.6.4">
          <name slugifiedName="name-complete-jws-json-serialization-representation">Complete JWS JSON Serialization Representation</name>
          <t indent="0" pn="section-a.6.4-1">これらの値に対する完全なJWS JSONシリアル化は、次のとおりです（表示目的の改行を含む）:</t>
          <t indent="0" pn="section-a.6.4-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":
    "eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF
     tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ",
   "signatures":[
    {"protected":"eyJhbGciOiJSUzI1NiJ9",
     "header":
      {"kid":"2010-12-29"},
     "signature":
      "cC4hiUPoj9Eetdgtv3hF80EGrhuB__dzERat0XF9g2VtQgr9PJbu3XOiZj5RZ
       mh7AAuHIm4Bh-0Qc_lF5YKt_O8W2Fp5jujGbds9uJdbF9CUAr7t1dnZcAcQjb
       KBYNX4BAynRFdiuB--f_nZLgrnbyTyWzO75vRK5h6xBArLIARNPvkSjtQBMHl
       b1L07Qe7K0GarZRmB_eSN9383LcOLn6_dO--xi12jzDwusC-eOkHWEsqtFZES
       c6BfI7noOPqvhJ1phCnvWh6IeYI2w9QOYEUipUTI8np6LbgGY9Fs98rqVt5AX
       LIhWkWywlVmtVrBp0igcN_IoypGlUPQGe77Rw"},
    {"protected":"eyJhbGciOiJFUzI1NiJ9",
     "header":
      {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"},
     "signature":
      "DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8IS
       lSApmWQxfKTUJqPP3-Kg6NU1Q"}]
  }
]]></artwork>
</t>
        </section>
      </section>
      <section anchor="example-jws-using-flattened-jws-json-serialization" numbered="true" removeInRFC="false" toc="include" pn="section-a.7">
        <name slugifiedName="name-example-jws-using-flattened-jws-json-serialization">Flattened JWS JSON Serializationを使用したJWSの例</name>
        <t indent="0" pn="section-a.7-1">このセクションには、フラット化されたJWS JSONシリアル化構文を使用した例が含まれています。この例は、フラット化されたJSON構造で単一のデジタル署名またはMACを伝達する機能を示しています。</t>
        <t indent="0" pn="section-a.7-2">この例で使用される値は、付録A.6の前の例の2番目の署名と同じです。</t>
        <t indent="0" pn="section-a.7-3">これらの値に対する完全なJWS JSONシリアル化は、次のとおりです（表示目的の改行を含む）:</t>
        <t indent="0" pn="section-a.7-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  {
   "payload":
    "eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGF
     tcGxlLmNvbS9pc19yb290Ijp0cnVlfQ",
   "protected":"eyJhbGciOiJFUzI1NiJ9",
   "header":
    {"kid":"e9bc097a-ce51-4036-9562-d2ade882db0d"},
   "signature":
    "DtEhU3ljbEg8L38VWAfUAqOyKAM6-Xx-F4GawxaepmXFCgfTjDxw5djxLa8IS
     lSApmWQxfKTUJqPP3-Kg6NU1Q"
  }
]]></artwork>
</t>
      </section>
    </section>
    <section anchor="&quot;x5c&quot;-(x.509-certificate-chain)-example" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-&quot;x5c&quot;-(x.509-certificate-chain)-example">&quot;x5c&quot; (X.509 Certificate Chain) 例</name>
      <t indent="0" pn="section-appendix.b-1">以下のJSON配列は、セクション4.1.6に従って「x5c」（X.509証明書チェーン）ヘッダーパラメーターの値として使用できる証明書チェーンの例です（表示目的の改行を含む）:</t>
      <t indent="0" pn="section-appendix.b-2"><artwork name="" type="" align="left" alt=""><![CDATA[
  ["MIIE3jCCA8agAwIBAgICAwEwDQYJKoZIhvcNAQEFBQAwYzELMAkGA1UEBhMCVVM
    xITAfBgNVBAoTGFRoZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR2
    8gRGFkZHkgQ2xhc3MgMiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjExM
    TYwMTU0MzdaFw0yNjExMTYwMTU0MzdaMIHKMQswCQYDVQQGEwJVUzEQMA4GA1UE
    CBMHQXJpem9uYTETMBEGA1UEBxMKU2NvdHRzZGFsZTEaMBgGA1UEChMRR29EYWR
    keS5jb20sIEluYy4xMzAxBgNVBAsTKmh0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYW
    RkeS5jb20vcmVwb3NpdG9yeTEwMC4GA1UEAxMnR28gRGFkZHkgU2VjdXJlIENlc
    nRpZmljYXRpb24gQXV0aG9yaXR5MREwDwYDVQQFEwgwNzk2OTI4NzCCASIwDQYJ
    KoZIhvcNAQEBBQADggEPADCCAQoCggEBAMQt1RWMnCZM7DI161+4WQFapmGBWTt
    wY6vj3D3HKrjJM9N55DrtPDAjhI6zMBS2sofDPZVUBJ7fmd0LJR4h3mUpfjWoqV
    Tr9vcyOdQmVZWt7/v+WIbXnvQAjYwqDL1CBM6nPwT27oDyqu9SoWlm2r4arV3aL
    GbqGmu75RpRSgAvSMeYddi5Kcju+GZtCpyz8/x4fKL4o/K1w/O5epHBp+YlLpyo
    7RJlbmr2EkRTcDCVw5wrWCs9CHRK8r5RsL+H0EwnWGu1NcWdrxcx+AuP7q2BNgW
    JCJjPOq8lh8BJ6qf9Z/dFjpfMFDniNoW1fho3/Rb2cRGadDAW/hOUoz+EDU8CAw
    EAAaOCATIwggEuMB0GA1UdDgQWBBT9rGEyk2xF1uLuhV+auud2mWjM5zAfBgNVH
    SMEGDAWgBTSxLDSkdRMEXGzYcs9of7dqGrU4zASBgNVHRMBAf8ECDAGAQH/AgEA
    MDMGCCsGAQUFBwEBBCcwJTAjBggrBgEFBQcwAYYXaHR0cDovL29jc3AuZ29kYWR
    keS5jb20wRgYDVR0fBD8wPTA7oDmgN4Y1aHR0cDovL2NlcnRpZmljYXRlcy5nb2
    RhZGR5LmNvbS9yZXBvc2l0b3J5L2dkcm9vdC5jcmwwSwYDVR0gBEQwQjBABgRVH
    SAAMDgwNgYIKwYBBQUHAgEWKmh0dHA6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5j
    b20vcmVwb3NpdG9yeTAOBgNVHQ8BAf8EBAMCAQYwDQYJKoZIhvcNAQEFBQADggE
    BANKGwOy9+aG2Z+5mC6IGOgRQjhVyrEp0lVPLN8tESe8HkGsz2ZbwlFalEzAFPI
    UyIXvJxwqoJKSQ3kbTJSMUA2fCENZvD117esyfxVgqwcSeIaha86ykRvOe5GPLL
    5CkKSkB2XIsKd83ASe8T+5o0yGPwLPk9Qnt0hCqU7S+8MxZC9Y7lhyVJEnfzuz9
    p0iRFEUOOjZv2kWzRaJBydTXRE4+uXR21aITVSzGh6O1mawGhId/dQb8vxRMDsx
    uxN89txJx9OjxUUAiKEngHUuHqDTMBqLdElrRhjZkAzVvb3du6/KFUJheqwNTrZ
    EjYx8WnM25sgVjOuH0aBsXBTWVU+4=",
   "MIIE+zCCBGSgAwIBAgICAQ0wDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1Z
    hbGlDZXJ0IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIE
    luYy4xNTAzBgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb
    24gQXV0aG9yaXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8x
    IDAeBgkqhkiG9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTA0MDYyOTE3MDY
    yMFoXDTI0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRoZS
    BHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3MgM
    iBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN
    ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XC
    APVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux
    6wwdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLO
    tXiEqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWo
    riMYavx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZ
    Eewo+YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjggHhMIIB3TAdBgNVHQ
    4EFgQU0sSw0pHUTBFxs2HLPaH+3ahq1OMwgdIGA1UdIwSByjCBx6GBwaSBvjCBu
    zEkMCIGA1UEBxMbVmFsaUNlcnQgVmFsaWRhdGlvbiBOZXR3b3JrMRcwFQYDVQQK
    Ew5WYWxpQ2VydCwgSW5jLjE1MDMGA1UECxMsVmFsaUNlcnQgQ2xhc3MgMiBQb2x
    pY3kgVmFsaWRhdGlvbiBBdXRob3JpdHkxITAfBgNVBAMTGGh0dHA6Ly93d3cudm
    FsaWNlcnQuY29tLzEgMB4GCSqGSIb3DQEJARYRaW5mb0B2YWxpY2VydC5jb22CA
    QEwDwYDVR0TAQH/BAUwAwEB/zAzBggrBgEFBQcBAQQnMCUwIwYIKwYBBQUHMAGG
    F2h0dHA6Ly9vY3NwLmdvZGFkZHkuY29tMEQGA1UdHwQ9MDswOaA3oDWGM2h0dHA
    6Ly9jZXJ0aWZpY2F0ZXMuZ29kYWRkeS5jb20vcmVwb3NpdG9yeS9yb290LmNybD
    BLBgNVHSAERDBCMEAGBFUdIAAwODA2BggrBgEFBQcCARYqaHR0cDovL2NlcnRpZ
    mljYXRlcy5nb2RhZGR5LmNvbS9yZXBvc2l0b3J5MA4GA1UdDwEB/wQEAwIBBjAN
    BgkqhkiG9w0BAQUFAAOBgQC1QPmnHfbq/qQaQlpE9xXUhUaJwL6e4+PrxeNYiY+
    Sn1eocSxI0YGyeR+sBjUZsE4OWBsUs5iB0QQeyAfJg594RAoYC5jcdnplDQ1tgM
    QLARzLrUc+cb53S8wGd9D0VmsfSxOaFIqII6hR8INMqzW/Rn453HWkrugp++85j
    09VZw==",
   "MIIC5zCCAlACAQEwDQYJKoZIhvcNAQEFBQAwgbsxJDAiBgNVBAcTG1ZhbGlDZXJ
    0IFZhbGlkYXRpb24gTmV0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNT
    AzBgNVBAsTLFZhbGlDZXJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0a
    G9yaXR5MSEwHwYDVQQDExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkq
    hkiG9w0BCQEWEWluZm9AdmFsaWNlcnQuY29tMB4XDTk5MDYyNjAwMTk1NFoXDTE
    5MDYyNjAwMTk1NFowgbsxJDAiBgNVBAcTG1ZhbGlDZXJ0IFZhbGlkYXRpb24gTm
    V0d29yazEXMBUGA1UEChMOVmFsaUNlcnQsIEluYy4xNTAzBgNVBAsTLFZhbGlDZ
    XJ0IENsYXNzIDIgUG9saWN5IFZhbGlkYXRpb24gQXV0aG9yaXR5MSEwHwYDVQQD
    ExhodHRwOi8vd3d3LnZhbGljZXJ0LmNvbS8xIDAeBgkqhkiG9w0BCQEWEWluZm9
    AdmFsaWNlcnQuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDOOnHK5a
    vIWZJV16vYdA757tn2VUdZZUcOBVXc65g2PFxTXdMwzzjsvUGJ7SVCCSRrCl6zf
    N1SLUzm1NZ9WlmpZdRJEy0kTRxQb7XBhVQ7/nHk01xC+YDgkRoKWzk2Z/M/VXwb
    P7RfZHM047QSv4dk+NoS/zcnwbNDu+97bi5p9wIDAQABMA0GCSqGSIb3DQEBBQU
    AA4GBADt/UG9vUJSZSWI4OB9L+KXIPqeCgfYrx+jFzug6EILLGACOTb2oWH+heQ
    C1u+mNr0HZDzTuIYEZoDJJKPTEjlbVUjP9UNV+mWwD5MlM/Mtsq2azSiGM5bUMM
    j4QssxsodyamEwCW/POuZ6lcg5Ktz885hZo+L7tdEy8W9ViH0Pd"]
]]></artwork>
</t>
    </section>
    <section anchor="notes-on-implementing-base64url-encoding-without-padding" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-notes-on-implementing-base64url-encoding-without-padding">パディングなしでbase64urlエンコードを実装する際の注意事項</name>
      <t indent="0" pn="section-appendix.c-1">この付録では、パディングを使用しないbase64urlエンコードおよびデコード関数を実装する方法について説明します。これは、パディングを使用する標準的なbase64エンコードおよびデコード関数に基づいています。</t>
      <t indent="0" pn="section-appendix.c-2">具体的には、これらの関数を実装するC#の例を以下に示します。他の言語でも同様のコードが使用できます。</t>
      <t indent="0" pn="section-appendix.c-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  static string base64urlencode(byte [] arg)
  {
    string s = Convert.ToBase64String(arg); // 通常のbase64エンコーダ
    s = s.Split('=')[0]; // 末尾の '=' を削除
    s = s.Replace('+', '-'); // エンコーディングの62番目の文字
    s = s.Replace('/', '_'); // エンコーディングの63番目の文字
    return s;
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-4"><artwork name="" type="" align="left" alt=""><![CDATA[
  static byte [] base64urldecode(string arg)
  {
    string s = arg;
    s = s.Replace('-', '+'); // エンコーディングの62番目の文字
    s = s.Replace('_', '/'); // エンコーディングの63番目の文字
    switch (s.Length % 4) // 末尾の '=' を補完
    {
      case 0: break; // この場合はパディング文字なし
      case 2: s += "=="; break; // パディング文字が2つ
      case 3: s += "="; break; // パディング文字が1つ
      default: throw new System.Exception(
        "不正なbase64url文字列です！");
    }
    return Convert.FromBase64String(s); // 通常のbase64デコーダ
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.c-5">上記の例のコードに従い、パディングのないbase64urlエンコードされた文字列をパディングのある文字列に変換するために必要な '=' パディング文字の数は、エンコードされた文字列の長さの決定論的関数です。具体的には、長さ mod 4 が0の場合、パディングは追加されません。長さ mod 4 が2の場合、2つの '=' パディング文字が追加されます。長さ mod 4 が3の場合、1つの '=' パディング文字が追加されます。長さ mod 4 が1の場合、入力は不正形式です。</t>
      <t indent="0" pn="section-appendix.c-6">未エンコード値とエンコード値の対応例を以下に示します。以下のオクテットシーケンスは、以下の文字列にエンコードされ、デコードするとオクテットシーケンスが再現されます。</t>
      <t indent="0" pn="section-appendix.c-7">3 236 255 224 193
A-z_4ME</t>
    </section>
    <section anchor="notes-on-key-selection" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-notes-on-key-selection">鍵選択に関する注意事項</name>
      <t indent="0" pn="section-appendix.d-1">この付録では、JWSのデジタル署名またはMACを検証するために使用するキーを選択するための一連の可能なアルゴリズムについて説明します。また、JWEを復号化するために使用するキーを選択するためのアルゴリズムについても説明します。このガイダンスは、単一のアルゴリズムではなく、可能なアルゴリズムのファミリーを説明しています。これは、異なるコンテキストでは、すべてのキーのソースが使用されない場合があるため、異なる順序で試行される場合があるため、収集されたすべてのキーが試行されない場合があるためです。したがって、異なるアプリケーションコンテキストで異なるアルゴリズムが使用されます。</t>
      <t indent="0" pn="section-appendix.d-2">以下の手順は、説明目的のために記載されています。特定のアプリケーションでは、異なるアルゴリズムを使用するか、手順のいくつかを異なる順序で実行することがあります。特定のアプリケーションでは、アプリケーションの使用にプロファイルされた1つまたは2つのキー選択方法があるため、はるかに簡単なキー選択方法が頻繁に使用されます。この付録は、キーの場所に関する規範的情報を補足するものです（セクション6）。</t>
      <t indent="0" pn="section-appendix.d-3">これらのアルゴリズムには、以下の手順が含まれます。手順は任意の順序で実行でき、区別する必要はありません。たとえば、キーは見つかるたびにすぐに試行できます。すべてのキーを収集する前に試行する必要はありません。</t>
      <t indent="0" pn="section-appendix.d-4">1. 適用可能なキーのセットを収集します。キーのソースには、以下が含まれます。</t>
      <t indent="0" pn="section-appendix.d-5"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  使用されているアプリケーションプロトコルによって提供されるキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-6"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  "jku" (JWK Set URL)ヘッダーパラメーターで参照されるキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-7"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  "jwk" (JSON Web Key)ヘッダーパラメーターで提供されるキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-8"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  "x5u" (X.509 URL)ヘッダーパラメーターで参照されるキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-9"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  "x5c" (X.509証明書チェーン)ヘッダーパラメーターで提供されるキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-10"><artwork name="" type="" align="left" alt=""><![CDATA[
    *  アプリケーションで利用可能なその他の適用可能なキー。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-11"><artwork name="" type="" align="left" alt=""><![CDATA[
異なるキーソースからキーを収集し、試行する順序は、通常、アプリケーションに依存します。
たとえば、ローカルキャッシュなどの1つの場所からすべてのキーが試行され、
その後他の場所からキーが収集され、試行される場合がよくあります。
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.d-12">2. 収集されたキーのセットをフィルターリングします。たとえば、一部のアプリケーションでは、&quot;kid&quot;（キーID）または &quot;x5t&quot;（X.509証明書SHA-1サムプリント）パラメーターで参照されるキーのみを使用します。アプリケーションがJWKの &quot;alg&quot;（アルゴリズム）、&quot;use&quot;（公開鍵の使用）、または &quot;key_ops&quot;（キー操作）パラメーターを使用する場合、これらのパラメーターの不適切な値を持つキーは除外されます。さらに、アプリケーション固有の方法で、特定の他のメンバー値を持つキーを含めたり除外したりすることがあります。一部のアプリケーションでは、フィルターリングは適用されません。</t>
      <t indent="0" pn="section-appendix.d-13">3. 収集されたキーのセットを順序付けます。たとえば、&quot;kid&quot;（キーID）または &quot;x5t&quot;（X.509証明書SHA-1サムプリント）パラメーターで参照されるキーは、これらの値を持たないキーよりも先に試行される場合があります。同様に、特定のメンバー値を持つキーは、他のメンバー値を持つキーよりも先に順序付けられる場合があります。一部のアプリケーションでは、順序付けが適用されません。</t>
      <t indent="0" pn="section-appendix.d-14">4. キーに関する信頼判断を行います。アプリケーションの信頼基準を満たさないキーで作成された署名は受け入れられません。このような基準には、キーのソース、URLから取得されたキーのTLS証明書が検証されるかどうか、X.509証明書のキーが有効な証明書チェーンでバックアップされているかどうか、およびアプリケーションが知っているその他の情報が含まれる場合があります。</t>
      <t indent="0" pn="section-appendix.d-15">5. 収集された、おそらくフィルターリングされ、順序付けされたキーの一部またはすべてを使用して、JWSの署名またはMACの検証、またはJWEの復号化を試行します。試行するキーの数に制限が適用される場合があります。このプロセスは、通常、検証または復号化が成功した場合に終了します。</t>
      <t indent="0" pn="section-appendix.d-16">一部のアプリケーションでは、キーに関する信頼判断を行う前に署名またはMACの検証を実行することが合理的です。なぜなら、検証に失敗したキーについては、信頼判断が必要ないからです。</t>
    </section>
    <section anchor="negative-test-case-for-&quot;crit&quot;-header-parameter" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-negative-test-case-for-&quot;crit&quot;-header-parameter">&quot;crit&quot;ヘッダーパラメーターの負のテストケース</name>
      <t indent="0" pn="section-appendix.e-1">準拠する実装は、理解できないまたは処理できない重要な拡張機能を含む入力を拒否する必要があります。次のJWSは、実装が理解しない「http://example.invalid/UNDEFINED」という拡張ヘッダーパラメーター名を使用しているため、すべての実装によって拒否される必要があります。実装が理解しない他のヘッダーパラメーター名に「http://example.invalid/UNDEFINED」の値を使用した類似の入力も拒否する必要があります。</t>
      <t indent="0" pn="section-appendix.e-2">このJWSの保護されたヘッダー値は次のとおりです:</t>
      <t indent="0" pn="section-appendix.e-3"><artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"none",
   "crit":["http://example.invalid/UNDEFINED"],
   "http://example.invalid/UNDEFINED":true
  }
]]></artwork>
</t>
      <t indent="0" pn="section-appendix.e-4">拒否される必要がある完全なJWSは、次のとおりです（表示目的の改行を含む）:</t>
      <t indent="0" pn="section-appendix.e-5"><artwork name="" type="" align="left" alt=""><![CDATA[
  eyJhbGciOiJub25lIiwNCiAiY3JpdCI6WyJodHRwOi8vZXhhbXBsZS5jb20vVU5ERU
  ZJTkVEIl0sDQogImh0dHA6Ly9leGFtcGxlLmNvbS9VTkRFRklORUQiOnRydWUNCn0.
  RkFJTA.
]]></artwork>
</t>
    </section>
    <section anchor="detached-content" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-detached-content">切り離されたコンテンツ</name>
      <t indent="0" pn="section-appendix.f-1">JWSに含まれていないコンテンツを整合性保護する場合、いくつかの文脈では、有用です。これを行う方法の1つは、コンテンツの表現をペイロードとして使用して通常の方法でJWSを作成した後、ペイロード表現をJWSから削除し、この変更されたオブジェクトをJWSではなく受信者に送信することです。JWSコンパクトシリアル化を使用する場合、削除は、2番目のフィールド（BASE64URL（JWSペイロード）を含む）の値を空の文字列に置き換えることによって実行されます。JWS JSONシリアル化を使用する場合、削除は、「ペイロード」メンバーを削除することによって実行されます。この方法は、受信者がJWSで使用された正確なペイロードを再構築できることを前提としています。変更されたオブジェクトを使用するには、受信者は、ペイロード表現を変更されたオブジェクトに再挿入して、通常の方法で結果のJWSを使用します。この方法は、アプリケーションが標準のJWSライブラリの入出力を変更することによって、JWSライブラリからのサポートを必要としません。</t>
    </section>
    <section anchor="acknowledgements" numbered="false" removeInRFC="false" toc="exclude" pn="section-appendix.g">
      <name slugifiedName="name-acknowledgements">謝辞</name>
        <t indent="0" pn="section-appendix.g-1">JSONコンテンツに署名するためのソリューションは、以前にMagic Signatures <xref target="MagicSignatures" format="default" sectionFormat="of" derivedContent="MagicSignatures"/>, JSON Simple Sign <xref target="JSS" format="default" sectionFormat="of" derivedContent="JSS"/>, およびCanvas Applications <xref target="CanvasApp" format="default" sectionFormat="of" derivedContent="CanvasApp"/>で探索され、これらのすべてがこのドキュメントに影響を与えました。</t>
        <t indent="0" pn="section-appendix.g-2">JWSおよびJWE仕様に対する初期の実装とフィードバックについて、Axel Nennkerに感謝します。</t>
        <t indent="0" pn="section-appendix.g-3">この仕様は、数十人のアクティブで献身的な参加者を含むJOSEワーキンググループの作業です。とくに、次の個人が、この仕様に影響を与えるアイデア、フィードバック、および用語を提供しました:</t>
        <t indent="0" pn="section-appendix.g-4">Dirk Balfanz、Richard Barnes、Brian Campbell、Alissa Cooper、Breno de Medeiros、Stephen Farrell、Yaron Y. Goland、Dick Hardt、Joe Hildebrand、Jeff Hodges、Russ Housley、Edmund Jay、Tero Kivinen、Ben Laurie、Ted Lemon、James Manger、Matt Miller、Kathleen Moriarty、Tony Nadalin、Hideki Nara、Axel Nennker、John Panzer、Ray Polk、Emmanuel Raviart、Eric Rescorla、Pete Resnick、Jim Schaad、Paul Tarjan、Hannes Tschofenig、およびSean Turner。</t>
       <t indent="0" pn="section-appendix.g-5">Jim SchaadとKaren O'DonoghueがJOSEワーキンググループを議長し、Sean Turner、Stephen Farrell、およびKathleen Moriartyがこの仕様の作成中にセキュリティーエリアディレクターを務めました。</t>
      </section>
  </back>
</rfc>
