<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" submissionType="IETF" number="7518" category="std" consensus="true" obsoletes="" updates="" xml:lang="en" symRefs="true" sortRefs="true" tocInclude="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.15.3 -->
  <!-- Generated by id2xml 1.5.0 on 2022-12-09T16:34:45Z -->
	<front>
    <title>JSON Web Algorithms (JWA)</title>
    <seriesInfo name="RFC" value="7518"/>
    <author initials="M." surname="Jones" fullname="Michael B. Jones">
      <organization>Microsoft</organization>
      <address>
        <email>mbj@microsoft.com</email>
        <uri>http://self-issued.info/</uri>
      </address>
    </author>
    <date year="2015" month="May"/>
    <abstract>
      <t>
   This specification registers cryptographic algorithms and identifiers
   to be used with the JSON Web Signature (JWS), JSON Web Encryption
   (JWE), and JSON Web Key (JWK) specifications.  It defines several
   IANA registries for these identifiers.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="sect-1" numbered="true" toc="default">
      <name>Introduction</name>
      <t>
   This specification registers cryptographic algorithms and identifiers
   to be used with the JSON Web Signature (JWS) <xref target="JWS" format="default"/>, JSON Web
   Encryption (JWE) <xref target="JWE" format="default"/>, and JSON Web Key (JWK) <xref target="JWK" format="default"/> specifications.
   It defines several IANA registries for these identifiers.  All these
   specifications utilize JSON-based <xref target="RFC7159" format="default"/> data structures.  This
   specification also describes the semantics and operations that are
   specific to these algorithms and key types.</t>
      <t>
   Registering the algorithms and identifiers here, rather than in the
   JWS, JWE, and JWK specifications, is intended to allow them to remain
   unchanged in the face of changes in the set of Required, Recommended,
   Optional, and Deprecated algorithms over time.  This also allows
   changes to the JWS, JWE, and JWK specifications without changing this
   document.</t>
      <t>
   Names defined by this specification are short because a core goal is
   for the resulting representations to be compact.</t>
      <section anchor="sect-1.1" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>
   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   "Key words for use in RFCs to Indicate Requirement Levels" <xref target="RFC2119" format="default"/>.</t>
        <t>
   The interpretation should only be applied when the terms appear in
   all capital letters.</t>
        <t>
   BASE64URL(OCTETS) denotes the base64url encoding of OCTETS, per
   Section 2 of <xref target="JWS" format="default"/>.</t>
        <t>
   UTF8(STRING) denotes the octets of the UTF-8 <xref target="RFC3629" format="default"/> representation
   of STRING, where STRING is a sequence of zero or more Unicode
   <xref target="UNICODE" format="default"/> characters.</t>
        <t>
   ASCII(STRING) denotes the octets of the ASCII [RFC20] representation
   of STRING, where STRING is a sequence of zero or more ASCII
   characters.</t>
        <t>
   The concatenation of two values A and B is denoted as A || B.</t>
      </section>
    </section>
    <section anchor="sect-2" numbered="true" toc="default">
      <name>Terminology</name>
      <t>
   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header Parameter", "JOSE Header", "JWS Payload", "JWS Protected Header",
   "JWS Signature", "JWS Signing Input", and "Unsecured JWS" are defined
   by the JWS specification <xref target="JWS" format="default"/>.</t>
      <t>
   The terms "JSON Web Encryption (JWE)", "Additional Authenticated Data (AAD)", "Authentication Tag", "Content Encryption Key (CEK)", "Direct Encryption", "Direct Key Agreement", "JWE Authentication Tag", "JWE Ciphertext", "JWE Encrypted Key", "JWE Initialization Vector", "JWE Protected Header", "Key Agreement with Key Wrapping", "Key Encryption", "Key Management Mode", and "Key Wrapping" are defined by
   the JWE specification <xref target="JWE" format="default"/>.</t>
      <t>
   The terms "JSON Web Key (JWK)" and "JWK Set" are defined by the JWK
   specification <xref target="JWK" format="default"/>.</t>
      <t>
   The terms "Ciphertext", "Digital Signature", "Initialization Vector",
   "Message Authentication Code (MAC)", and "Plaintext" are defined by
   the "Internet Security Glossary, Version 2" <xref target="RFC4949" format="default"/>.</t>
      <t>
   This term is defined by this specification:</t>
      <dl newline="true" spacing="normal" indent="3">
        <dt>Base64urlUInt</dt>
        <dd>
	The representation of a positive or zero integer value as the
      base64url encoding of the value's unsigned big-endian
      representation as an octet sequence.  The octet sequence MUST
      utilize the minimum number of octets needed to represent the
      value.  Zero is represented as BASE64URL(single zero-valued
      octet), which is "AA".
	</dd>
      </dl>
    </section>
    <section anchor="sect-3" numbered="true" toc="default">
      <name>Cryptographic Algorithms for Digital Signatures and MACs</name>
      <t>
   JWS uses cryptographic algorithms to digitally sign or create a MAC
   of the contents of the JWS Protected Header and the JWS Payload.</t>
      <section anchor="sect-3.1" numbered="true" toc="default">
        <name>"alg" (Algorithm) Header Parameter Values for JWS</name>
        <t>
   The table below is the set of "alg" (algorithm) Header Parameter
   values defined by this specification for use with JWS, each of which
   is explained in more detail in the following sections:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Digital Signature or MAC Algorithm</th>
              <th align="left"> Implementation Requirements</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">HS256</td>
              <td align="left">HMAC using SHA-256</td>
              <td align="left">Required</td>
            </tr>
            <tr>
              <td align="left">HS384</td>
              <td align="left">HMAC using SHA-384</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left">HS512</td>
              <td align="left">HMAC using SHA-512</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left">RS256</td>
              <td align="left">RSASSA-PKCS1-v1_5 using</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-256</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">RS384</td>
              <td align="left">RSASSA-PKCS1-v1_5 using</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-384</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">RS512</td>
              <td align="left">RSASSA-PKCS1-v1_5 using</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-512</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">ES256</td>
              <td align="left">ECDSA using P-256 and SHA-256</td>
              <td align="left">Recommended+</td>
            </tr>
            <tr>
              <td align="left">ES384</td>
              <td align="left">ECDSA using P-384 and SHA-384</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left">ES512</td>
              <td align="left">ECDSA using P-521 and SHA-512</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left">PS256</td>
              <td align="left">RSASSA-PSS using SHA-256 and</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">MGF1 with SHA-256</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">PS384</td>
              <td align="left">RSASSA-PSS using SHA-384 and</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">MGF1 with SHA-384</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">PS512</td>
              <td align="left">RSASSA-PSS using SHA-512 and</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">MGF1 with SHA-512</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">none</td>
              <td align="left">No digital signature or MAC</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">performed</td>
              <td align="left"/>
            </tr>
          </tbody>
        </table>
        <t>
   The use of "+" in the Implementation Requirements column indicates
   that the requirement strength is likely to be increased in a future
   version of the specification.</t>
        <t>
   See Appendix A.1 for a table cross-referencing the JWS digital
   signature and MAC "alg" (algorithm) values defined in this
   specification with the equivalent identifiers used by other standards
   and software packages.</t>
      </section>
      <section anchor="sect-3.2" numbered="true" toc="default">
        <name>HMAC with SHA-2 Functions</name>
        <t>
   Hash-based Message Authentication Codes (HMACs) enable one to use a
   secret plus a cryptographic hash function to generate a MAC.  This
   can be used to demonstrate that whoever generated the MAC was in
   possession of the MAC key.  The algorithm for implementing and
   validating HMACs is provided in RFC 2104 <xref target="RFC2104" format="default"/>.</t>
        <t>
   A key of the same size as the hash output (for instance, 256 bits for
   "HS256") or larger MUST be used with this algorithm.  (This
   requirement is based on Section 5.3.4 (Security Effect of the HMAC
   Key) of NIST SP 800-117 [NIST.800-107], which states that the
   effective security strength is the minimum of the security strength
   of the key and two times the size of the internal hash value.)</t>
        <t>
   The HMAC SHA-256 MAC is generated per RFC 2104, using SHA-256 as the
   hash algorithm "H", using the JWS Signing Input as the "text" value,
   and using the shared key.  The HMAC output value is the JWS
   Signature.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWS Signature is an HMAC value computed using the
   corresponding algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> MAC Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">HS256</td>
              <td align="left">HMAC using SHA-256</td>
            </tr>
            <tr>
              <td align="left">HS384</td>
              <td align="left">HMAC using SHA-384</td>
            </tr>
            <tr>
              <td align="left">HS512</td>
              <td align="left">HMAC using SHA-512</td>
            </tr>
          </tbody>
        </table>
        <t>
   The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC
   value per RFC 2104, using SHA-256 as the hash algorithm "H", using
   the received JWS Signing Input as the "text" value, and using the
   shared key.  This computed HMAC value is then compared to the result
   of base64url decoding the received encoded JWS Signature value.  The
   comparison of the computed HMAC value to the JWS Signature value MUST
   be done in a constant-time manner to thwart timing attacks.
   Alternatively, the computed HMAC value can be base64url encoded and
   compared to the received encoded JWS Signature value (also in a
   constant-time manner), as this comparison produces the same result as
   comparing the unencoded values.  In either case, if the values match,
   the HMAC has been validated.</t>
        <t>
   Securing content and validation with the HMAC SHA-384 and HMAC
   SHA-512 algorithms is performed identically to the procedure for HMAC
   SHA-256 -- just using the corresponding hash algorithms with
   correspondingly larger minimum key sizes and result values: 384 bits
   each for HMAC SHA-384 and 512 bits each for HMAC SHA-512.</t>
        <t>
   An example using this algorithm is shown in Appendix A.1 of <xref target="JWS" format="default"/>.</t>
      </section>
      <section anchor="sect-3.3" numbered="true" toc="default">
        <name>Digital Signature with RSASSA-PKCS1-v1_5</name>
        <t>
   This section defines the use of the RSASSA-PKCS1-v1_5 digital
   signature algorithm as defined in Section 8.2 of RFC 3447 <xref target="RFC3447" format="default"/>
   (commonly known as PKCS #1), using SHA-2 [SHS] hash functions.</t>
        <t>
   A key of size 2048 bits or larger MUST be used with these algorithms.</t>
        <t>
   The RSASSA-PKCS1-v1_5 SHA-256 digital signature is generated as
   follows: generate a digital signature of the JWS Signing Input using
   RSASSA-PKCS1-v1_5-SIGN and the SHA-256 hash function with the desired
   private key.  This is the JWS Signature value.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWS Signature is a digital signature value computed
   using the corresponding algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Digital Signature Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">RS256</td>
              <td align="left">RSASSA-PKCS1-v1_5 using SHA-256</td>
            </tr>
            <tr>
              <td align="left">RS384</td>
              <td align="left">RSASSA-PKCS1-v1_5 using SHA-384</td>
            </tr>
            <tr>
              <td align="left">RS512</td>
              <td align="left">RSASSA-PKCS1-v1_5 using SHA-512</td>
            </tr>
          </tbody>
        </table>
        <t>
   The RSASSA-PKCS1-v1_5 SHA-256 digital signature for a JWS is
   validated as follows: submit the JWS Signing Input, the JWS
   Signature, and the public key corresponding to the private key used
   by the signer to the RSASSA-PKCS1-v1_5-VERIFY algorithm using SHA-256
   as the hash function.</t>
        <t>
   Signing and validation with the RSASSA-PKCS1-v1_5 SHA-384 and RSASSA-
   PKCS1-v1_5 SHA-512 algorithms is performed identically to the
   procedure for RSASSA-PKCS1-v1_5 SHA-256 -- just using the
   corresponding hash algorithms instead of SHA-256.</t>
        <t>
   An example using this algorithm is shown in Appendix A.2 of <xref target="JWS" format="default"/>.</t>
      </section>
      <section anchor="sect-3.4" numbered="true" toc="default">
        <name>Digital Signature with ECDSA</name>
        <t>
   The Elliptic Curve Digital Signature Algorithm (ECDSA) [DSS] provides
   for the use of Elliptic Curve Cryptography, which is able to provide
   equivalent security to RSA cryptography but using shorter key sizes
   and with greater processing speed for many operations.  This means
   that ECDSA digital signatures will be substantially smaller in terms
   of length than equivalently strong RSA digital signatures.</t>
        <t>
   This specification defines the use of ECDSA with the P-256 curve and
   the SHA-256 cryptographic hash function, ECDSA with the P-384 curve
   and the SHA-384 hash function, and ECDSA with the P-521 curve and the
   SHA-512 hash function.  The P-256, P-384, and P-521 curves are
   defined in [DSS].</t>
        <t>
   The ECDSA P-256 SHA-256 digital signature is generated as follows:</t>
        <ol spacing="normal" type="1"><li>Generate a digital signature of the JWS Signing Input using ECDSA
       P-256 SHA-256 with the desired private key.  The output will be
       the pair (R, S), where R and S are 256-bit unsigned integers.</li>
          <li>Turn R and S into octet sequences in big-endian order, with each
       array being be 32 octets long.  The octet sequence
       representations MUST NOT be shortened to omit any leading zero
       octets contained in the values.</li>
          <li>Concatenate the two octet sequences in the order R and then S.
       (Note that many ECDSA implementations will directly produce this
       concatenation as their output.)</li>
          <li>The resulting 64-octet sequence is the JWS Signature value.</li>
        </ol>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWS Signature is a digital signature value computed
   using the corresponding algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Digital Signature Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ES256</td>
              <td align="left">ECDSA using P-256 and SHA-256</td>
            </tr>
            <tr>
              <td align="left">ES384</td>
              <td align="left">ECDSA using P-384 and SHA-384</td>
            </tr>
            <tr>
              <td align="left">ES512</td>
              <td align="left">ECDSA using P-521 and SHA-512</td>
            </tr>
          </tbody>
        </table>
        <t>
   The ECDSA P-256 SHA-256 digital signature for a JWS is validated as
   follows:</t>
        <ol spacing="normal" type="1"><li>The JWS Signature value MUST be a 64-octet sequence.  If it is
       not a 64-octet sequence, the validation has failed.</li>
          <li>Split the 64-octet sequence into two 32-octet sequences.  The
       first octet sequence represents R and the second S.  The values R
       and S are represented as octet sequences using the Integer-to-
       OctetString Conversion defined in Section 2.3.7 of SEC1 <xref target="SEC1" format="default"/>
       (in big-endian octet order).</li>
          <li>Submit the JWS Signing Input, R, S, and the public key (x, y) to
       the ECDSA P-256 SHA-256 validator.</li>
        </ol>
        <t>
   Signing and validation with the ECDSA P-384 SHA-384 and ECDSA P-521
   SHA-512 algorithms is performed identically to the procedure for
   ECDSA P-256 SHA-256 -- just using the corresponding hash algorithms
   with correspondingly larger result values.  For ECDSA P-384 SHA-384,
   R and S will be 384 bits each, resulting in a 96-octet sequence.  For
   ECDSA P-521 SHA-512, R and S will be 521 bits each, resulting in a
   132-octet sequence.  (Note that the Integer-to-OctetString Conversion
   defined in Section 2.3.7 of SEC1 <xref target="SEC1" format="default"/> used to represent R and S as
   octet sequences adds zero-valued high-order padding bits when needed
   to round the size up to a multiple of 8 bits; thus, each 521-bit
   integer is represented using 528 bits in 66 octets.)</t>
        <t>
   Examples using these algorithms are shown in Appendices A.3 and A.4
   of <xref target="JWS" format="default"/>.</t>
      </section>
      <section anchor="sect-3.5" numbered="true" toc="default">
        <name>Digital Signature with RSASSA-PSS</name>
        <t>
   This section defines the use of the RSASSA-PSS digital signature
   algorithm as defined in Section 8.1 of RFC 3447 <xref target="RFC3447" format="default"/> with the
   MGF1 mask generation function and SHA-2 hash functions, always using
   the same hash function for both the RSASSA-PSS hash function and the
   MGF1 hash function.  The size of the salt value is the same size as
   the hash function output.  All other algorithm parameters use the
   defaults specified in Appendix A.2.3 of RFC 3447.</t>
        <t>
   A key of size 2048 bits or larger MUST be used with this algorithm.</t>
        <t>
   The RSASSA-PSS SHA-256 digital signature is generated as follows:
   generate a digital signature of the JWS Signing Input using RSASSA-
   PSS-SIGN, the SHA-256 hash function, and the MGF1 mask generation
   function with SHA-256 with the desired private key.  This is the JWS
   Signature value.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWS Signature is a digital signature value computed
   using the corresponding algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Digital Signature Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">PS256</td>
              <td align="left">RSASSA-PSS using SHA-256 and MGF1 with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-256</td>
            </tr>
            <tr>
              <td align="left">PS384</td>
              <td align="left">RSASSA-PSS using SHA-384 and MGF1 with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-384</td>
            </tr>
            <tr>
              <td align="left">PS512</td>
              <td align="left">RSASSA-PSS using SHA-512 and MGF1 with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-512</td>
            </tr>
          </tbody>
        </table>
        <t>
   The RSASSA-PSS SHA-256 digital signature for a JWS is validated as
   follows: submit the JWS Signing Input, the JWS Signature, and the
   public key corresponding to the private key used by the signer to the
   RSASSA-PSS-VERIFY algorithm using SHA-256 as the hash function and
   using MGF1 as the mask generation function with SHA-256.</t>
        <t>
   Signing and validation with the RSASSA-PSS SHA-384 and RSASSA-PSS
   SHA-512 algorithms is performed identically to the procedure for
   RSASSA-PSS SHA-256 -- just using the alternative hash algorithm in
   both roles.</t>
      </section>
      <section anchor="sect-3.6" numbered="true" toc="default">
        <name>Using the Algorithm "none"</name>
        <t>
   JWSs MAY also be created that do not provide integrity protection.
   Such a JWS is called an Unsecured JWS.  An Unsecured JWS uses the
   "alg" value "none" and is formatted identically to other JWSs, but
   MUST use the empty octet sequence as its JWS Signature value.
   Recipients MUST verify that the JWS Signature value is the empty
   octet sequence.</t>
        <t>
   Implementations that support Unsecured JWSs MUST NOT accept such
   objects as valid unless the application specifies that it is
   acceptable for a specific object to not be integrity protected.
   Implementations MUST NOT accept Unsecured JWSs by default.  In order
   to mitigate downgrade attacks, applications MUST NOT signal
   acceptance of Unsecured JWSs at a global level, and SHOULD signal
   acceptance on a per-object basis.  See <xref target="sect-8.5" format="default"/> for security
   considerations associated with using this algorithm.</t>
      </section>
    </section>
    <section anchor="sect-4" numbered="true" toc="default">
      <name>Cryptographic Algorithms for Key Management</name>
      <t>
   JWE uses cryptographic algorithms to encrypt or determine the Content
   Encryption Key (CEK).</t>
      <section anchor="sect-4.1" numbered="true" toc="default">
        <name>"alg" (Algorithm) Header Parameter Values for JWE</name>
        <t>
   The table below is the set of "alg" (algorithm) Header Parameter
   values that are defined by this specification for use with JWE.
   These algorithms are used to encrypt the CEK, producing the JWE
   Encrypted Key, or to use key agreement to agree upon the CEK.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value  </th>
              <th align="left"> Key Management Algorithm </th>
              <th align="left"> More Header Params</th>
              <th align="left"> Implementation Requirements </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">RSA1_5</td>
              <td align="left">RSAES-PKCS1-v1_5</td>
              <td align="left">(none)</td>
              <td align="left">Recommended-</td>
            </tr>
            <tr>
              <td align="left">RSA-OAEP</td>
              <td align="left">RSAES OAEP using</td>
              <td align="left">(none)</td>
              <td align="left">Recommended+</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">default parameters</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">RSA-OAEP-256</td>
              <td align="left">RSAES OAEP using</td>
              <td align="left">(none)</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-256 and MGF1</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">with SHA-256</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A128KW</td>
              <td align="left">AES Key Wrap with</td>
              <td align="left">(none)</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">default initial</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">value using</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">128-bit key</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A192KW</td>
              <td align="left">AES Key Wrap with</td>
              <td align="left">(none)</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">default initial</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">value using</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">192-bit key</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A256KW</td>
              <td align="left">AES Key Wrap with</td>
              <td align="left">(none)</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">default initial</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">value using</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">256-bit key</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">dir</td>
              <td align="left">Direct use of a</td>
              <td align="left">(none)</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">shared symmetric</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">key as the CEK</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">ECDH-ES</td>
              <td align="left">Elliptic Curve</td>
              <td align="left">"epk",</td>
              <td align="left">Recommended+</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">Diffie-Hellman</td>
              <td align="left">"apu",</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">Ephemeral Static</td>
              <td align="left">"apv"</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">key agreement</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">using Concat KDF</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">ECDH-ES+A128KW</td>
              <td align="left">ECDH-ES using</td>
              <td align="left">"epk",</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">Concat KDF and CEK</td>
              <td align="left">"apu",</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">wrapped with</td>
              <td align="left">"apv"</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">"A128KW"</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">ECDH-ES+A192KW</td>
              <td align="left">ECDH-ES using</td>
              <td align="left">"epk",</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">Concat KDF and CEK</td>
              <td align="left">"apu",</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">wrapped with</td>
              <td align="left">"apv"</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">"A192KW"</td>
              <td align="left"/>
              <td align="left"/>
            </tr>
          </tbody>
        </table>
        <artwork name="" type="" align="left" alt=""><![CDATA[
| ECDH-ES+A256KW     | ECDH-ES using      | "epk", | Recommended    |
|                    | Concat KDF and CEK | "apu", |                |
|                    | wrapped with       | "apv"  |                |
|                    | "A256KW"           |        |                |
| A128GCMKW          | Key wrapping with  | "iv",  | Optional       |
|                    | AES GCM using      | "tag"  |                |
|                    | 128-bit key        |        |                |
| A192GCMKW          | Key wrapping with  | "iv",  | Optional       |
|                    | AES GCM using      | "tag"  |                |
|                    | 192-bit key        |        |                |
| A256GCMKW          | Key wrapping with  | "iv",  | Optional       |
|                    | AES GCM using      | "tag"  |                |
|                    | 256-bit key        |        |                |
| PBES2-HS256+A128KW | PBES2 with HMAC    | "p2s", | Optional       |
|                    | SHA-256 and        | "p2c"  |                |
|                    | "A128KW" wrapping  |        |                |
| PBES2-HS384+A192KW | PBES2 with HMAC    | "p2s", | Optional       |
|                    | SHA-384 and        | "p2c"  |                |
|                    | "A192KW" wrapping  |        |                |
| PBES2-HS512+A256KW | PBES2 with HMAC    | "p2s", | Optional       |
|                    | SHA-512 and        | "p2c"  |                |
|                    | "A256KW" wrapping  |        |                |
+--------------------+--------------------+--------+----------------+
]]></artwork>
        <t>
   The More Header Params column indicates what additional Header
   Parameters are used by the algorithm, beyond "alg", which all use.
   All but "dir" and "ECDH-ES" also produce a JWE Encrypted Key value.</t>
        <t>
   The use of "+" in the Implementation Requirements column indicates
   that the requirement strength is likely to be increased in a future
   version of the specification.  The use of "-" indicates that the
   requirement strength is likely to be decreased in a future version of
   the specification.</t>
        <t>
   See Appendix A.2 for a table cross-referencing the JWE "alg"
   (algorithm) values defined in this specification with the equivalent
   identifiers used by other standards and software packages.</t>
      </section>
      <section anchor="sect-4.2" numbered="true" toc="default">
        <name>Key Encryption with RSAES-PKCS1-v1_5</name>
        <t>
   This section defines the specifics of encrypting a JWE CEK with
   RSAES-PKCS1-v1_5 <xref target="RFC3447" format="default"/>.  The "alg" (algorithm) Header Parameter
   value "RSA1_5" is used for this algorithm.</t>
        <t>
   A key of size 2048 bits or larger MUST be used with this algorithm.</t>
        <t>
   An example using this algorithm is shown in Appendix A.2 of <xref target="JWE" format="default"/>.</t>
      </section>
      <section anchor="sect-4.3" numbered="true" toc="default">
        <name>Key Encryption with RSAES OAEP</name>
        <t>
   This section defines the specifics of encrypting a JWE CEK with RSAES
   using Optimal Asymmetric Encryption Padding (OAEP) <xref target="RFC3447" format="default"/>.  Two
   sets of parameters for using OAEP are defined, which use different
   hash functions.  In the first case, the default parameters specified
   in Appendix A.2.1 of RFC 3447 are used.  (Those default parameters
   are the SHA-1 hash function and the MGF1 with SHA-1 mask generation
   function.)  In the second case, the SHA-256 hash function and the
   MGF1 with SHA-256 mask generation function are used.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWE Encrypted Key is the result of encrypting the
   CEK using the corresponding algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Key Management Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">RSA-OAEP</td>
              <td align="left">RSAES OAEP using default parameters</td>
            </tr>
            <tr>
              <td align="left">RSA-OAEP-256</td>
              <td align="left">RSAES OAEP using SHA-256 and MGF1 with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">SHA-256</td>
            </tr>
          </tbody>
        </table>
        <t>
   A key of size 2048 bits or larger MUST be used with these algorithms.
   (This requirement is based on Table 4 (Security-strength time frames)
   of NIST SP 800-57 [NIST.800-57], which requires 112 bits of security
   for new uses, and Table 2 (Comparable strengths) of the same, which
   states that 2048-bit RSA keys provide 112 bits of security.)</t>
        <t>
   An example using RSAES OAEP with the default parameters is shown in
   Appendix A.1 of <xref target="JWE" format="default"/>.</t>
      </section>
      <section anchor="sect-4.4" numbered="true" toc="default">
        <name>Key Wrapping with AES Key Wrap</name>
        <t>
   This section defines the specifics of encrypting a JWE CEK with the
   Advanced Encryption Standard (AES) Key Wrap Algorithm <xref target="RFC3394" format="default"/> using
   the default initial value specified in Section 2.2.3.1 of that
   document.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWE Encrypted Key is the result of encrypting the
   CEK using the corresponding algorithm and key size:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Key Management Algorithm </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">A128KW</td>
              <td align="left">AES Key Wrap with default initial value using</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">128-bit key</td>
            </tr>
            <tr>
              <td align="left">A192KW</td>
              <td align="left">AES Key Wrap with default initial value using</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">192-bit key</td>
            </tr>
            <tr>
              <td align="left">A256KW</td>
              <td align="left">AES Key Wrap with default initial value using</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">256-bit key</td>
            </tr>
          </tbody>
        </table>
        <t keepWithPrevious="true">   An example using this algorithm is shown in Appendix A.3 of [JWE].</t>
      </section>
      <section anchor="sect-4.5" numbered="true" toc="default">
        <name>Direct Encryption with a Shared Symmetric Key</name>
        <t>
   This section defines the specifics of directly performing symmetric
   key encryption without performing a key wrapping step.  In this case,
   the shared symmetric key is used directly as the Content Encryption
   Key (CEK) value for the "enc" algorithm.  An empty octet sequence is
   used as the JWE Encrypted Key value.  The "alg" (algorithm) Header
   Parameter value "dir" is used in this case.</t>
        <t>
   Refer to the security considerations on key lifetimes in <xref target="sect-8.2" format="default"/>
   and AES GCM in <xref target="sect-8.4" format="default"/> when considering utilizing direct
   encryption.</t>
      </section>
      <section anchor="sect-4.6" numbered="true" toc="default">
        <name>Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static (ECDH-ES)</name>
        <t>
   This section defines the specifics of key agreement with Elliptic
   Curve Diffie-Hellman Ephemeral Static <xref target="RFC6090" format="default"/>, in combination with
   the Concat KDF, as defined in Section 5.8.1 of [NIST.800-56A].  The
   key agreement result can be used in one of two ways:</t>
        <ol spacing="normal" type="1"><li>directly as the Content Encryption Key (CEK) for the "enc"
       algorithm, in the Direct Key Agreement mode, or</li>
          <li>as a symmetric key used to wrap the CEK with the "A128KW",
       "A192KW", or "A256KW" algorithms, in the Key Agreement with Key
       Wrapping mode.</li>
        </ol>
        <t>
   A new ephemeral public key value MUST be generated for each key
   agreement operation.</t>
        <t>
   In Direct Key Agreement mode, the output of the Concat KDF MUST be a
   key of the same length as that used by the "enc" algorithm.  In this
   case, the empty octet sequence is used as the JWE Encrypted Key
   value.  The "alg" (algorithm) Header Parameter value "ECDH-ES" is
   used in the Direct Key Agreement mode.</t>
        <t>
   In Key Agreement with Key Wrapping mode, the output of the Concat KDF
   MUST be a key of the length needed for the specified key wrapping
   algorithm.  In this case, the JWE Encrypted Key is the CEK wrapped
   with the agreed-upon key.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWE Encrypted Key is the result of encrypting the
   CEK using the result of the key agreement algorithm as the key
   encryption key for the corresponding key wrapping algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Key Management Algorithm </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ECDH-ES+A128KW</td>
              <td align="left">ECDH-ES using Concat KDF and CEK wrapped with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">"A128KW"</td>
            </tr>
            <tr>
              <td align="left">ECDH-ES+A192KW</td>
              <td align="left">ECDH-ES using Concat KDF and CEK wrapped with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">"A192KW"</td>
            </tr>
            <tr>
              <td align="left">ECDH-ES+A256KW</td>
              <td align="left">ECDH-ES using Concat KDF and CEK wrapped with</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">"A256KW"</td>
            </tr>
          </tbody>
        </table>
        <section anchor="sect-4.6.1" numbered="true" toc="default">
          <name>Header Parameters Used for ECDH Key Agreement</name>
          <t>
   The following Header Parameter names are used for key agreement as
   defined below.</t>
          <section anchor="sect-4.6.1.1" numbered="true" toc="default">
            <name>"epk" (Ephemeral Public Key) Header Parameter</name>
            <t>
   The "epk" (ephemeral public key) value created by the originator for
   the use in key agreement algorithms.  This key is represented as a
   JSON Web Key <xref target="JWK" format="default"/> public key value.  It MUST contain only public key
   parameters and SHOULD contain only the minimum JWK parameters
   necessary to represent the key; other JWK parameters included can be
   checked for consistency and honored, or they can be ignored.  This
   Header Parameter MUST be present and MUST be understood and processed
   by implementations when these algorithms are used.</t>
          </section>
          <section anchor="sect-4.6.1.2" numbered="true" toc="default">
            <name>"apu" (Agreement PartyUInfo) Header Parameter</name>
            <t>
   The "apu" (agreement PartyUInfo) value for key agreement algorithms
   using it (such as "ECDH-ES"), represented as a base64url-encoded
   string.  When used, the PartyUInfo value contains information about
   the producer.  Use of this Header Parameter is OPTIONAL.  This Header
   Parameter MUST be understood and processed by implementations when
   these algorithms are used.</t>
          </section>
          <section anchor="sect-4.6.1.3" numbered="true" toc="default">
            <name>"apv" (Agreement PartyVInfo) Header Parameter</name>
            <t>
   The "apv" (agreement PartyVInfo) value for key agreement algorithms
   using it (such as "ECDH-ES"), represented as a base64url encoded
   string.  When used, the PartyVInfo value contains information about
   the recipient.  Use of this Header Parameter is OPTIONAL.  This
   Header Parameter MUST be understood and processed by implementations
   when these algorithms are used.</t>
          </section>
        </section>
        <section anchor="sect-4.6.2" numbered="true" toc="default">
          <name>Key Derivation for ECDH Key Agreement</name>
          <t>
   The key derivation process derives the agreed-upon key from the
   shared secret Z established through the ECDH algorithm, per
   Section 6.2.2.2 of [NIST.800-56A].</t>
          <t>
   Key derivation is performed using the Concat KDF, as defined in
   Section 5.8.1 of [NIST.800-56A], where the Digest Method is SHA-256.
   The Concat KDF parameters are set as follows:</t>
          <ul empty="true" spacing="normal">
            <li>
              <t>   Z
      This is set to the representation of the shared secret Z as an
      octet sequence.</t>
              <dl newline="true" spacing="normal" indent="3">
                <dt>keydatalen</dt>
                <dd>
	This is set to the number of bits in the desired output key.  For
      "ECDH-ES", this is length of the key used by the "enc" algorithm.
      For "ECDH-ES+A128KW", "ECDH-ES+A192KW", and "ECDH-ES+A256KW", this
      is 128, 192, and 256, respectively.
	</dd>
                <dt>AlgorithmID</dt>
                <dd>
	The AlgorithmID value is of the form Datalen || Data, where Data
      is a variable-length string of zero or more octets, and Datalen is
      a fixed-length, big-endian 32-bit counter that indicates the
      length (in octets) of Data.  In the Direct Key Agreement case,
      Data is set to the octets of the ASCII representation of the "enc"
      Header Parameter value.  In the Key Agreement with Key Wrapping
      case, Data is set to the octets of the ASCII representation of the
      "alg" (algorithm) Header Parameter value.
	</dd>
                <dt>PartyUInfo</dt>
                <dd>
	The PartyUInfo value is of the form Datalen || Data, where Data is
      a variable-length string of zero or more octets, and Datalen is a
      fixed-length, big-endian 32-bit counter that indicates the length
      (in octets) of Data.  If an "apu" (agreement PartyUInfo) Header
      Parameter is present, Data is set to the result of base64url
      decoding the "apu" value and Datalen is set to the number of
      octets in Data.  Otherwise, Datalen is set to 0 and Data is set to
      the empty octet sequence.
	</dd>
                <dt>PartyVInfo</dt>
                <dd>
	The PartyVInfo value is of the form Datalen || Data, where Data is
      a variable-length string of zero or more octets, and Datalen is a
      fixed-length, big-endian 32-bit counter that indicates the length
      (in octets) of Data.  If an "apv" (agreement PartyVInfo) Header
      Parameter is present, Data is set to the result of base64url
      decoding the "apv" value and Datalen is set to the number of
      octets in Data.  Otherwise, Datalen is set to 0 and Data is set to
      the empty octet sequence.
	</dd>
                <dt>SuppPubInfo</dt>
                <dd>
	This is set to the keydatalen represented as a 32-bit big-endian
      integer.
	</dd>
                <dt>SuppPrivInfo</dt>
                <dd>
	This is set to the empty octet sequence.
	</dd>
              </dl>
            </li>
          </ul>
          <t>
   Applications need to specify how the "apu" and "apv" Header
   Parameters are used for that application.  The "apu" and "apv" values
   MUST be distinct, when used.  Applications wishing to conform to
   [NIST.800-56A] need to provide values that meet the requirements of
   that document, e.g., by using values that identify the producer and
   consumer.  Alternatively, applications MAY conduct key derivation in
   a manner similar to "Diffie-Hellman Key Agreement Method" <xref target="RFC2631" format="default"/>:
   in that case, the "apu" parameter MAY either be omitted or represent
   a random 512-bit value (analogous to PartyAInfo in Ephemeral-Static
   mode in RFC 2631) and the "apv" parameter SHOULD NOT be present.</t>
          <t>
   See Appendix C for an example key agreement computation using this
   method.</t>
        </section>
      </section>
      <section anchor="sect-4.7" numbered="true" toc="default">
        <name>Key Encryption with AES GCM</name>
        <t>
   This section defines the specifics of encrypting a JWE Content
   Encryption Key (CEK) with Advanced Encryption Standard (AES) in
   Galois/Counter Mode (GCM) ([AES] and [NIST.800-38D]).</t>
        <t>
   Use of an Initialization Vector (IV) of size 96 bits is REQUIRED with
   this algorithm.  The IV is represented in base64url-encoded form as
   the "iv" (initialization vector) Header Parameter value.</t>
        <t>
   The Additional Authenticated Data value used is the empty octet
   string.</t>
        <t>
   The requested size of the Authentication Tag output MUST be 128 bits,
   regardless of the key size.</t>
        <t>
   The JWE Encrypted Key value is the ciphertext output.</t>
        <t>
   The Authentication Tag output is represented in base64url-encoded
   form as the "tag" (authentication tag) Header Parameter value.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWE Encrypted Key is the result of encrypting the
   CEK using the corresponding algorithm and key size:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Key Management Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">A128GCMKW</td>
              <td align="left">Key wrapping with AES GCM using 128-bit key</td>
            </tr>
            <tr>
              <td align="left">A192GCMKW</td>
              <td align="left">Key wrapping with AES GCM using 192-bit key</td>
            </tr>
            <tr>
              <td align="left">A256GCMKW</td>
              <td align="left">Key wrapping with AES GCM using 256-bit key</td>
            </tr>
          </tbody>
        </table>
        <section anchor="sect-4.7.1" numbered="true" toc="default">
          <name>Header Parameters Used for AES GCM Key Encryption</name>
          <t>
   The following Header Parameters are used for AES GCM key encryption.</t>
          <section anchor="sect-4.7.1.1" numbered="true" toc="default">
            <name>"iv" (Initialization Vector) Header Parameter</name>
            <t>
   The "iv" (initialization vector) Header Parameter value is the
   base64url-encoded representation of the 96-bit IV value used for the
   key encryption operation.  This Header Parameter MUST be present and
   MUST be understood and processed by implementations when these
   algorithms are used.</t>
          </section>
          <section anchor="sect-4.7.1.2" numbered="true" toc="default">
            <name>"tag" (Authentication Tag) Header Parameter</name>
            <t>
   The "tag" (authentication tag) Header Parameter value is the
   base64url-encoded representation of the 128-bit Authentication Tag
   value resulting from the key encryption operation.  This Header
   Parameter MUST be present and MUST be understood and processed by
   implementations when these algorithms are used.</t>
          </section>
        </section>
      </section>
      <section anchor="sect-4.8" numbered="true" toc="default">
        <name>Key Encryption with PBES2</name>
        <t>
   This section defines the specifics of performing password-based
   encryption of a JWE CEK, by first deriving a key encryption key from
   a user-supplied password using PBES2 schemes as specified in
   Section 6.2 of <xref target="RFC2898" format="default"/>, then by encrypting the JWE CEK using the
   derived key.</t>
        <t>
   These algorithms use HMAC SHA-2 algorithms as the Pseudorandom
   Function (PRF) for the PBKDF2 key derivation and AES Key Wrap
   <xref target="RFC3394" format="default"/> for the encryption scheme.  The PBES2 password input is an
   octet sequence; if the password to be used is represented as a text
   string rather than an octet sequence, the UTF-8 encoding of the text
   string MUST be used as the octet sequence.  The salt parameter MUST
   be computed from the "p2s" (PBES2 salt input) Header Parameter value
   and the "alg" (algorithm) Header Parameter value as specified in the
   "p2s" definition below.  The iteration count parameter MUST be
   provided as the "p2c" (PBES2 count) Header Parameter value.  The
   algorithms respectively use HMAC SHA-256, HMAC SHA-384, and HMAC
   SHA-512 as the PRF and use 128-, 192-, and 256-bit AES Key Wrap keys.
   Their derived-key lengths respectively are 16, 24, and 32 octets.</t>
        <t>
   The following "alg" (algorithm) Header Parameter values are used to
   indicate that the JWE Encrypted Key is the result of encrypting the
   CEK using the result of the corresponding password-based encryption
   algorithm as the key encryption key for the corresponding key
   wrapping algorithm:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "alg" Param Value</th>
              <th align="left"> Key Management Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">PBES2-HS256+A128KW</td>
              <td align="left">PBES2 with HMAC SHA-256 and "A128KW"</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">wrapping</td>
            </tr>
            <tr>
              <td align="left">PBES2-HS384+A192KW</td>
              <td align="left">PBES2 with HMAC SHA-384 and "A192KW"</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">wrapping</td>
            </tr>
            <tr>
              <td align="left">PBES2-HS512+A256KW</td>
              <td align="left">PBES2 with HMAC SHA-512 and "A256KW"</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">wrapping</td>
            </tr>
          </tbody>
        </table>
        <t>
   See Appendix C of the JWK specification <xref target="JWK" format="default"/> for an example key
   encryption computation using "PBES2-HS256+A128KW".</t>
        <section anchor="sect-4.8.1" numbered="true" toc="default">
          <name>Header Parameters Used for PBES2 Key Encryption</name>
          <t>
   The following Header Parameters are used for Key Encryption with
   PBES2.</t>
          <section anchor="sect-4.8.1.1" numbered="true" toc="default">
            <name>"p2s" (PBES2 Salt Input) Header Parameter</name>
            <t>
   The "p2s" (PBES2 salt input) Header Parameter encodes a Salt Input
   value, which is used as part of the PBKDF2 salt value.  The "p2s"
   value is BASE64URL(Salt Input).  This Header Parameter MUST be
   present and MUST be understood and processed by implementations when
   these algorithms are used.</t>
            <t>
   The salt expands the possible keys that can be derived from a given
   password.  A Salt Input value containing 8 or more octets MUST be
   used.  A new Salt Input value MUST be generated randomly for every
   encryption operation; see RFC 4086 <xref target="RFC4086" format="default"/> for considerations on
   generating random values.  The salt value used is (UTF8(Alg) || 0x00
   || Salt Input), where Alg is the "alg" (algorithm) Header Parameter
   value.</t>
          </section>
          <section anchor="sect-4.8.1.2" numbered="true" toc="default">
            <name>"p2c" (PBES2 Count) Header Parameter</name>
            <t>
   The "p2c" (PBES2 count) Header Parameter contains the PBKDF2
   iteration count, represented as a positive JSON integer.  This Header
   Parameter MUST be present and MUST be understood and processed by
   implementations when these algorithms are used.</t>
            <t>
   The iteration count adds computational expense, ideally compounded by
   the possible range of keys introduced by the salt.  A minimum
   iteration count of 1000 is RECOMMENDED.</t>
          </section>
        </section>
      </section>
    </section>
    <section anchor="sect-5" numbered="true" toc="default">
      <name>Cryptographic Algorithms for Content Encryption</name>
      <t>
   JWE uses cryptographic algorithms to encrypt and integrity-protect
   the plaintext and to integrity-protect the Additional Authenticated
   Data.</t>
      <section anchor="sect-5.1" numbered="true" toc="default">
        <name>"enc" (Encryption Algorithm) Header Parameter Values for JWE</name>
        <t>
   The table below is the set of "enc" (encryption algorithm) Header
   Parameter values that are defined by this specification for use with
   JWE.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "enc" Param Value</th>
              <th align="left"> Content Encryption Algorithm </th>
              <th align="left"> Implementation Requirements</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">A128CBC-HS256</td>
              <td align="left">AES_128_CBC_HMAC_SHA_256</td>
              <td align="left">Required</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">authenticated encryption</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">algorithm, as defined in Section</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">5.2.3</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A192CBC-HS384</td>
              <td align="left">AES_192_CBC_HMAC_SHA_384</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">authenticated encryption</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">algorithm, as defined in Section</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">5.2.4</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A256CBC-HS512</td>
              <td align="left">AES_256_CBC_HMAC_SHA_512</td>
              <td align="left">Required</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">authenticated encryption</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">algorithm, as defined in Section</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">5.2.5</td>
              <td align="left"/>
            </tr>
            <tr>
              <td align="left">A128GCM</td>
              <td align="left">AES GCM using 128-bit key</td>
              <td align="left">Recommended</td>
            </tr>
            <tr>
              <td align="left">A192GCM</td>
              <td align="left">AES GCM using 192-bit key</td>
              <td align="left">Optional</td>
            </tr>
            <tr>
              <td align="left">A256GCM</td>
              <td align="left">AES GCM using 256-bit key</td>
              <td align="left">Recommended</td>
            </tr>
          </tbody>
        </table>
        <t>
   All also use a JWE Initialization Vector value and produce JWE
   Ciphertext and JWE Authentication Tag values.</t>
        <t>
   See Appendix A.3 for a table cross-referencing the JWE "enc"
   (encryption algorithm) values defined in this specification with the
   equivalent identifiers used by other standards and software packages.</t>
      </section>
      <section anchor="sect-5.2" numbered="true" toc="default">
        <name>AES_CBC_HMAC_SHA2 Algorithms</name>
        <t>
   This section defines a family of authenticated encryption algorithms
   built using a composition of AES [AES] in Cipher Block Chaining (CBC)
   mode [NIST.800-38A] with PKCS #7 padding operations per Section 6.3
   of <xref target="RFC5652" format="default"/> and HMAC (<xref target="RFC2104" format="default"/> and [SHS]) operations.  This
   algorithm family is called AES_CBC_HMAC_SHA2.  It also defines three
   instances of this family: the first using 128-bit CBC keys and HMAC
   SHA-256, the second using 192-bit CBC keys and HMAC SHA-384, and the
   third using 256-bit CBC keys and HMAC SHA-512.  Test cases for these
   algorithms can be found in Appendix B.</t>
        <t>
   These algorithms are based upon "Authenticated Encryption with AES-CBC and HMAC-SHA" <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2" format="default"/>, performing the same cryptographic
   computations, but with the Initialization Vector (IV) and
   Authentication Tag values remaining separate, rather than being
   concatenated with the ciphertext value in the output representation.
   This option is discussed in Appendix B of that specification.  This
   algorithm family is a generalization of the algorithm family in
   <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2" format="default"/> and can be used to implement those algorithms.</t>
        <section anchor="sect-5.2.1" numbered="true" toc="default">
          <name>Conventions Used in Defining AES_CBC_HMAC_SHA2</name>
          <dl newline="true" spacing="normal" indent="3">
            <dt>We use the following notational conventions.</dt>
            <dd>
	CBC-PKCS7-ENC(X, P) denotes the AES-CBC encryption of P using PKCS
      #7 padding utilizing the cipher with the key X.
      MAC(Y, M) denotes the application of the MAC to the message M
      using the key Y.
	</dd>
          </dl>
        </section>
        <section anchor="sect-5.2.2" numbered="true" toc="default">
          <name>Generic AES_CBC_HMAC_SHA2 Algorithm</name>
          <t>
   This section defines AES_CBC_HMAC_SHA2 in a manner that is
   independent of the AES-CBC key size or hash function to be used.
   Sections 5.2.2.1 and 5.2.2.2 define the generic encryption and
   decryption algorithms.  Sections 5.2.3 through 5.2.5 define instances
   of AES_CBC_HMAC_SHA2 that specify those details.</t>
          <section anchor="sect-5.2.2.1" numbered="true" toc="default">
            <name>AES_CBC_HMAC_SHA2 Encryption</name>
            <t>
   The authenticated encryption algorithm takes as input four octet
   strings: a secret key K, a plaintext P, Additional Authenticated Data
   A, and an Initialization Vector IV.  The authenticated ciphertext
   value E and the Authentication Tag value T are provided as outputs.
   The data in the plaintext are encrypted and authenticated, and the
   Additional Authenticated Data are authenticated, but not encrypted.</t>
            <t>
   The encryption process is as follows, or uses an equivalent set of
   steps:</t>
            <ol spacing="normal" type="1"><li>The secondary keys MAC_KEY and ENC_KEY are generated from the
       input key K as follows.  Each of these two keys is an octet
       string.</li>
            </ol>
            <artwork name="" type="" align="left" alt=""><![CDATA[
       MAC_KEY consists of the initial MAC_KEY_LEN octets of K, in
       order.
       ENC_KEY consists of the final ENC_KEY_LEN octets of K, in
       order.
]]></artwork>
            <dl newline="false" spacing="normal" indent="4">
              <dt/>
              <dd>
       The number of octets in the input key K MUST be the sum of
       MAC_KEY_LEN and ENC_KEY_LEN.  The values of these parameters are
       specified by the Authenticated Encryption algorithms in Sections
       5.2.3 through 5.2.5.  Note that the MAC key comes before the
       encryption key in the input key K; this is in the opposite order
       of the algorithm names in the identifier "AES_CBC_HMAC_SHA2".</dd>
            </dl>
            <ol spacing="normal" type="1"><li>The IV used is a 128-bit value generated randomly or
       pseudorandomly for use in the cipher.</li>
              <li>The plaintext is CBC encrypted using PKCS #7 padding using
       ENC_KEY as the key and the IV.  We denote the ciphertext output
       from this step as E.</li>
              <li>The octet string AL is equal to the number of bits in the
       Additional Authenticated Data A expressed as a 64-bit unsigned
       big-endian integer.</li>
              <li>A message Authentication Tag T is computed by applying HMAC
       <xref target="RFC2104" format="default"/> to the following data, in order:</li>
            </ol>
            <artwork name="" type="" align="left" alt=""><![CDATA[
       the Additional Authenticated Data A,
       the Initialization Vector IV,
       the ciphertext E computed in the previous step, and
       the octet string AL defined above.
]]></artwork>
            <dl newline="false" spacing="normal" indent="4">
              <dt/>
              <dd>
       The string MAC_KEY is used as the MAC key.  We denote the output
       of the MAC computed in this step as M.  The first T_LEN octets of
       M are used as T.</dd>
            </dl>
            <ol spacing="normal" type="1"><li>The ciphertext E and the Authentication Tag T are returned as the
       outputs of the authenticated encryption.</li>
            </ol>
            <t>
   The encryption process can be illustrated as follows.  Here K, P, A,
   IV, and E denote the key, plaintext, Additional Authenticated Data,
   Initialization Vector, and ciphertext, respectively.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
   MAC_KEY = initial MAC_KEY_LEN octets of K,
   ENC_KEY = final ENC_KEY_LEN octets of K,
   E = CBC-PKCS7-ENC(ENC_KEY, P),
   M = MAC(MAC_KEY, A || IV || E || AL),
   T = initial T_LEN octets of M.
]]></artwork>
          </section>
          <section anchor="sect-5.2.2.2" numbered="true" toc="default">
            <name>AES_CBC_HMAC_SHA2 Decryption</name>
            <t>
   The authenticated decryption operation has five inputs: K, A, IV, E,
   and T as defined above.  It has only a single output: either a
   plaintext value P or a special symbol FAIL that indicates that the
   inputs are not authentic.  The authenticated decryption algorithm is
   as follows, or uses an equivalent set of steps:</t>
            <ol spacing="normal" type="1"><li>The secondary keys MAC_KEY and ENC_KEY are generated from the
       input key K as in Step 1 of <xref target="sect-5.2.2.1" format="default"/>.</li>
              <li>The integrity and authenticity of A and E are checked by
       computing an HMAC with the inputs as in Step 5 of
       <xref target="sect-5.2.2.1" format="default"/>.  The value T, from the previous step, is
       compared to the first MAC_KEY length bits of the HMAC output.  If
       those values are identical, then A and E are considered valid,
       and processing is continued.  Otherwise, all of the data used in
       the MAC validation are discarded, and the authenticated
       decryption operation returns an indication that it failed, and
       the operation halts.  (But see Section 11.5 of <xref target="JWE" format="default"/> for security
       considerations on thwarting timing attacks.)</li>
              <li>The value E is decrypted and the PKCS #7 padding is checked and
       removed.  The value IV is used as the Initialization Vector.  The
       value ENC_KEY is used as the decryption key.</li>
              <li>The plaintext value is returned.</li>
            </ol>
          </section>
        </section>
        <section anchor="sect-5.2.3" numbered="true" toc="default">
          <name>AES_128_CBC_HMAC_SHA_256</name>
          <t>
   This algorithm is a concrete instantiation of the generic
   AES_CBC_HMAC_SHA2 algorithm above.  It uses the HMAC message
   authentication code <xref target="RFC2104" format="default"/> with the SHA-256 hash function [SHS] to
   provide message authentication, with the HMAC output truncated to 128
   bits, corresponding to the HMAC-SHA-256-128 algorithm defined in
   <xref target="RFC4868" format="default"/>.  For encryption, it uses AES in the CBC mode of operation
   as defined in Section 6.2 of [NIST.800-38A], with PKCS #7 padding and
   a 128-bit IV value.</t>
          <t>
   The AES_CBC_HMAC_SHA2 parameters specific to AES_128_CBC_HMAC_SHA_256
   are:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   The input key K is 32 octets long.
   ENC_KEY_LEN is 16 octets.
   MAC_KEY_LEN is 16 octets.
   The SHA-256 hash algorithm is used for the HMAC.
   The HMAC-SHA-256 output is truncated to T_LEN=16 octets, by
   stripping off the final 16 octets.
]]></artwork>
        </section>
        <section anchor="sect-5.2.4" numbered="true" toc="default">
          <name>AES_192_CBC_HMAC_SHA_384</name>
          <t>
   AES_192_CBC_HMAC_SHA_384 is based on AES_128_CBC_HMAC_SHA_256, but
   with the following differences:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   The input key K is 48 octets long instead of 32.
   ENC_KEY_LEN is 24 octets instead of 16.
   MAC_KEY_LEN is 24 octets instead of 16.
   SHA-384 is used for the HMAC instead of SHA-256.
   The HMAC SHA-384 value is truncated to T_LEN=24 octets instead of
   16.
]]></artwork>
        </section>
        <section anchor="sect-5.2.5" numbered="true" toc="default">
          <name>AES_256_CBC_HMAC_SHA_512</name>
          <t>
   AES_256_CBC_HMAC_SHA_512 is based on AES_128_CBC_HMAC_SHA_256, but
   with the following differences:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
   The input key K is 64 octets long instead of 32.
   ENC_KEY_LEN is 32 octets instead of 16.
   MAC_KEY_LEN is 32 octets instead of 16.
   SHA-512 is used for the HMAC instead of SHA-256.
   The HMAC SHA-512 value is truncated to T_LEN=32 octets instead of
   16.
]]></artwork>
        </section>
        <section anchor="sect-5.2.6" numbered="true" toc="default">
          <name>Content Encryption with AES_CBC_HMAC_SHA2</name>
          <t>
   This section defines the specifics of performing authenticated
   encryption with the AES_CBC_HMAC_SHA2 algorithms.</t>
          <t>
   The CEK is used as the secret key K.</t>
          <t>
   The following "enc" (encryption algorithm) Header Parameter values
   are used to indicate that the JWE Ciphertext and JWE Authentication
   Tag values have been computed using the corresponding algorithm:</t>
          <table align="center">
            <thead>
              <tr>
                <th align="left"> "enc" Param Value</th>
                <th align="left"> Content Encryption Algorithm </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td align="left">A128CBC-HS256</td>
                <td align="left">AES_128_CBC_HMAC_SHA_256 authenticated encryption</td>
              </tr>
              <tr>
                <td align="left"/>
                <td align="left">algorithm, as defined in Section 5.2.3</td>
              </tr>
              <tr>
                <td align="left">A192CBC-HS384</td>
                <td align="left">AES_192_CBC_HMAC_SHA_384 authenticated encryption</td>
              </tr>
              <tr>
                <td align="left"/>
                <td align="left">algorithm, as defined in Section 5.2.4</td>
              </tr>
              <tr>
                <td align="left">A256CBC-HS512</td>
                <td align="left">AES_256_CBC_HMAC_SHA_512 authenticated encryption</td>
              </tr>
              <tr>
                <td align="left"/>
                <td align="left">algorithm, as defined in Section 5.2.5</td>
              </tr>
            </tbody>
          </table>
        </section>
      </section>
      <section anchor="sect-5.3" numbered="true" toc="default">
        <name>Content Encryption with AES GCM</name>
        <t>
   This section defines the specifics of performing authenticated
   encryption with AES in Galois/Counter Mode (GCM) ([AES] and
   [NIST.800-38D]).</t>
        <t>
   The CEK is used as the encryption key.</t>
        <t>
   Use of an IV of size 96 bits is REQUIRED with this algorithm.</t>
        <t>
   The requested size of the Authentication Tag output MUST be 128 bits,
   regardless of the key size.</t>
        <t>
   The following "enc" (encryption algorithm) Header Parameter values
   are used to indicate that the JWE Ciphertext and JWE Authentication
   Tag values have been computed using the corresponding algorithm and
   key size:</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "enc" Param Value</th>
              <th align="left"> Content Encryption Algorithm</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">A128GCM</td>
              <td align="left">AES GCM using 128-bit key</td>
            </tr>
            <tr>
              <td align="left">A192GCM</td>
              <td align="left">AES GCM using 192-bit key</td>
            </tr>
            <tr>
              <td align="left">A256GCM</td>
              <td align="left">AES GCM using 256-bit key</td>
            </tr>
          </tbody>
        </table>
        <t keepWithPrevious="true">   An example using this algorithm is shown in Appendix A.1 of [JWE].</t>
      </section>
    </section>
    <section anchor="sect-6" numbered="true" toc="default">
      <name>Cryptographic Algorithms for Keys</name>
      <t>
   A JSON Web Key (JWK) <xref target="JWK" format="default"/> is a JSON data structure that represents a
   cryptographic key.  These keys can be either asymmetric or symmetric.
   They can hold both public and private information about the key.
   This section defines the parameters for keys using the algorithms
   specified by this document.</t>
      <section anchor="sect-6.1" numbered="true" toc="default">
        <name>"kty" (Key Type) Parameter Values</name>
        <t>
   The table below is the set of "kty" (key type) parameter values that
   are defined by this specification for use in JWKs.</t>
        <table align="center">
          <thead>
            <tr>
              <th align="left"> "kty" Param Value</th>
              <th align="left"> Key Type </th>
              <th align="left"> Implementation Requirements</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">EC</td>
              <td align="left">Elliptic Curve [DSS]</td>
              <td align="left">Recommended+</td>
            </tr>
            <tr>
              <td align="left">RSA</td>
              <td align="left">RSA [RFC3447]</td>
              <td align="left">Required</td>
            </tr>
            <tr>
              <td align="left">oct</td>
              <td align="left">Octet sequence (used to</td>
              <td align="left">Required</td>
            </tr>
            <tr>
              <td align="left"/>
              <td align="left">represent symmetric keys)</td>
              <td align="left"/>
            </tr>
          </tbody>
        </table>
        <t>
   The use of "+" in the Implementation Requirements column indicates
   that the requirement strength is likely to be increased in a future
   version of the specification.</t>
      </section>
      <section anchor="sect-6.2" numbered="true" toc="default">
        <name>Parameters for Elliptic Curve Keys</name>
        <t>
   JWKs can represent Elliptic Curve [DSS] keys.  In this case, the
   "kty" member value is "EC".</t>
        <section anchor="sect-6.2.1" numbered="true" toc="default">
          <name>Parameters for Elliptic Curve Public Keys</name>
          <t>
   An Elliptic Curve public key is represented by a pair of coordinates
   drawn from a finite field, which together define a point on an
   Elliptic Curve.  The following members MUST be present for all
   Elliptic Curve public keys:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
o  "crv"
o  "x"
]]></artwork>
          <t>
   The following member MUST also be present for Elliptic Curve public
   keys for the three curves defined in the following section:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
o  "y"
]]></artwork>
          <section anchor="sect-6.2.1.1" numbered="true" toc="default">
            <name>"crv" (Curve) Parameter</name>
            <t>
   The "crv" (curve) parameter identifies the cryptographic curve used
   with the key.  Curve values from [DSS] used by this specification
   are:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
o  "P-256"
o  "P-384"
o  "P-521"
]]></artwork>
            <t>
   These values are registered in the IANA "JSON Web Key Elliptic Curve"
   registry defined in <xref target="sect-7.6" format="default"/>.  Additional "crv" values can be
   registered by other specifications.  Specifications registering
   additional curves must define what parameters are used to represent
   keys for the curves registered.  The "crv" value is a case-sensitive
   string.</t>
            <t>
   SEC1 <xref target="SEC1" format="default"/> point compression is not supported for any of these three
   curves.</t>
          </section>
          <section anchor="sect-6.2.1.2" numbered="true" toc="default">
            <name>"x" (X Coordinate) Parameter</name>
            <t>
   The "x" (x coordinate) parameter contains the x coordinate for the
   Elliptic Curve point.  It is represented as the base64url encoding of
   the octet string representation of the coordinate, as defined in
   Section 2.3.5 of SEC1 <xref target="SEC1" format="default"/>.  The length of this octet string MUST
   be the full size of a coordinate for the curve specified in the "crv"
   parameter.  For example, if the value of "crv" is "P-521", the octet
   string must be 66 octets long.</t>
          </section>
          <section anchor="sect-6.2.1.3" numbered="true" toc="default">
            <name>"y" (Y Coordinate) Parameter</name>
            <t>
   The "y" (y coordinate) parameter contains the y coordinate for the
   Elliptic Curve point.  It is represented as the base64url encoding of
   the octet string representation of the coordinate, as defined in
   Section 2.3.5 of SEC1 <xref target="SEC1" format="default"/>.  The length of this octet string MUST
   be the full size of a coordinate for the curve specified in the "crv"
   parameter.  For example, if the value of "crv" is "P-521", the octet
   string must be 66 octets long.</t>
          </section>
        </section>
        <section anchor="sect-6.2.2" numbered="true" toc="default">
          <name>Parameters for Elliptic Curve Private Keys</name>
          <t>
   In addition to the members used to represent Elliptic Curve public
   keys, the following member MUST be present to represent Elliptic
   Curve private keys.</t>
          <section anchor="sect-6.2.2.1" numbered="true" toc="default">
            <name>"d" (ECC Private Key) Parameter</name>
            <t>
   The "d" (ECC private key) parameter contains the Elliptic Curve
   private key value.  It is represented as the base64url encoding of
   the octet string representation of the private key value, as defined
   in Section 2.3.7 of SEC1 <xref target="SEC1" format="default"/>.  The length of this octet string
   MUST be ceiling(log-base-2(n)/8) octets (where n is the order of the
   curve).</t>
          </section>
        </section>
      </section>
      <section anchor="sect-6.3" numbered="true" toc="default">
        <name>Parameters for RSA Keys</name>
        <t>
   JWKs can represent RSA <xref target="RFC3447" format="default"/> keys.  In this case, the "kty"
   member value is "RSA".  The semantics of the parameters defined below
   are the same as those defined in Sections 3.1 and 3.2 of RFC 3447.</t>
        <section anchor="sect-6.3.1" numbered="true" toc="default">
          <name>Parameters for RSA Public Keys</name>
          <t>
   The following members MUST be present for RSA public keys.</t>
          <section anchor="sect-6.3.1.1" numbered="true" toc="default">
            <name>"n" (Modulus) Parameter</name>
            <t>
   The "n" (modulus) parameter contains the modulus value for the RSA
   public key.  It is represented as a Base64urlUInt-encoded value.</t>
            <t>
   Note that implementers have found that some cryptographic libraries
   prefix an extra zero-valued octet to the modulus representations they
   return, for instance, returning 257 octets for a 2048-bit key, rather
   than 256.  Implementations using such libraries will need to take
   care to omit the extra octet from the base64url-encoded
   representation.</t>
          </section>
          <section anchor="sect-6.3.1.2" numbered="true" toc="default">
            <name>"e" (Exponent) Parameter</name>
            <t>
   The "e" (exponent) parameter contains the exponent value for the RSA
   public key.  It is represented as a Base64urlUInt-encoded value.</t>
            <t>
   For instance, when representing the value 65537, the octet sequence
   to be base64url-encoded MUST consist of the three octets [1, 0, 1];
   the resulting representation for this value is "AQAB".</t>
          </section>
        </section>
        <section anchor="sect-6.3.2" numbered="true" toc="default">
          <name>Parameters for RSA Private Keys</name>
          <t>
   In addition to the members used to represent RSA public keys, the
   following members are used to represent RSA private keys.  The
   parameter "d" is REQUIRED for RSA private keys.  The others enable
   optimizations and SHOULD be included by producers of JWKs
   representing RSA private keys.  If the producer includes any of the
   other private key parameters, then all of the others MUST be present,
   with the exception of "oth", which MUST only be present when more
   than two prime factors were used.</t>
          <section anchor="sect-6.3.2.1" numbered="true" toc="default">
            <name>"d" (Private Exponent) Parameter</name>
            <t>
   The "d" (private exponent) parameter contains the private exponent
   value for the RSA private key.  It is represented as a Base64urlUInt-
   encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.2" numbered="true" toc="default">
            <name>"p" (First Prime Factor) Parameter</name>
            <t>
   The "p" (first prime factor) parameter contains the first prime
   factor.  It is represented as a Base64urlUInt-encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.3" numbered="true" toc="default">
            <name>"q" (Second Prime Factor) Parameter</name>
            <t>
   The "q" (second prime factor) parameter contains the second prime
   factor.  It is represented as a Base64urlUInt-encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.4" numbered="true" toc="default">
            <name>"dp" (First Factor CRT Exponent) Parameter</name>
            <t>
   The "dp" (first factor CRT exponent) parameter contains the Chinese
   Remainder Theorem (CRT) exponent of the first factor.  It is
   represented as a Base64urlUInt-encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.5" numbered="true" toc="default">
            <name>"dq" (Second Factor CRT Exponent) Parameter</name>
            <t>
   The "dq" (second factor CRT exponent) parameter contains the CRT
   exponent of the second factor.  It is represented as a Base64urlUInt-
   encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.6" numbered="true" toc="default">
            <name>"qi" (First CRT Coefficient) Parameter</name>
            <t>
   The "qi" (first CRT coefficient) parameter contains the CRT
   coefficient of the second factor.  It is represented as a
   Base64urlUInt-encoded value.</t>
          </section>
          <section anchor="sect-6.3.2.7" numbered="true" toc="default">
            <name>"oth" (Other Primes Info) Parameter</name>
            <t>
   The "oth" (other primes info) parameter contains an array of
   information about any third and subsequent primes, should they exist.
   When only two primes have been used (the normal case), this parameter
   MUST be omitted.  When three or more primes have been used, the
   number of array elements MUST be the number of primes used minus two.
   For more information on this case, see the description of the
   OtherPrimeInfo parameters in Appendix A.1.2 of RFC 3447 <xref target="RFC3447" format="default"/>,
   upon which the following parameters are modeled.  If the consumer of
   a JWK does not support private keys with more than two primes and it
   encounters a private key that includes the "oth" parameter, then it
   MUST NOT use the key.  Each array element MUST be an object with the
   following members.</t>
            <section anchor="sect-6.3.2.7.1" numbered="true" toc="default">
              <name>"r" (Prime Factor)</name>
              <t>
   The "r" (prime factor) parameter within an "oth" array member
   represents the value of a subsequent prime factor.  It is represented
   as a Base64urlUInt-encoded value.</t>
            </section>
            <section anchor="sect-6.3.2.7.2" numbered="true" toc="default">
              <name>"d" (Factor CRT Exponent)</name>
              <t>
   The "d" (factor CRT exponent) parameter within an "oth" array member
   represents the CRT exponent of the corresponding prime factor.  It is
   represented as a Base64urlUInt-encoded value.</t>
            </section>
            <section anchor="sect-6.3.2.7.3" numbered="true" toc="default">
              <name>"t" (Factor CRT Coefficient)</name>
              <t>
   The "t" (factor CRT coefficient) parameter within an "oth" array
   member represents the CRT coefficient of the corresponding prime
   factor.  It is represented as a Base64urlUInt-encoded value.</t>
            </section>
          </section>
        </section>
      </section>
      <section anchor="sect-6.4" numbered="true" toc="default">
        <name>Parameters for Symmetric Keys</name>
        <t>
   When the JWK "kty" member value is "oct" (octet sequence), the member
   "k" (see <xref target="sect-6.4.1" format="default"/>) is used to represent a symmetric key (or
   another key whose value is a single octet sequence).  An "alg" member
   SHOULD also be present to identify the algorithm intended to be used
   with the key, unless the application uses another means or convention
   to determine the algorithm used.</t>
        <section anchor="sect-6.4.1" numbered="true" toc="default">
          <name>"k" (Key Value) Parameter</name>
          <t>
   The "k" (key value) parameter contains the value of the symmetric (or
   other single-valued) key.  It is represented as the base64url
   encoding of the octet sequence containing the key value.</t>
        </section>
      </section>
    </section>
    <section anchor="sect-7" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>
   The following registration procedure is used for all the registries
   established by this specification.</t>
      <t>
   The registration procedure for values is Specification Required
   <xref target="RFC5226" format="default"/> after a three-week review period on the
   jose-reg-review@ietf.org mailing list, on the advice of one or more
   Designated Experts.  However, to allow for the allocation of values
   prior to publication, the Designated Experts may approve registration
   once they are satisfied that such a specification will be published.</t>
      <t>
   Registration requests sent to the mailing list for review should use
   an appropriate subject (e.g., "Request to register algorithm: example").</t>
      <t>
   Within the review period, the Designated Experts will either approve
   or deny the registration request, communicating this decision to the
   review list and IANA.  Denials should include an explanation and, if
   applicable, suggestions as to how to make the request successful.</t>
      <t>
   Registration requests that are undetermined for a period longer than
   21 days can be brought to the IESG's attention (using the
   iesg@ietf.org mailing list) for resolution.</t>
      <t>
   Criteria that should be applied by the Designated Experts include
   determining whether the proposed registration duplicates existing
   functionality, whether it is likely to be of general applicability or
   useful only for a single application, and whether the registration
   description is clear.</t>
      <t>
   IANA must only accept registry updates from the Designated Experts
   and should direct all requests for registration to the review mailing
   list.</t>
      <t>
   It is suggested that multiple Designated Experts be appointed who are
   able to represent the perspectives of different applications using
   this specification, in order to enable broadly informed review of
   registration decisions.  In cases where a registration decision could
   be perceived as creating a conflict of interest for a particular
   Expert, that Expert should defer to the judgment of the other
   Experts.</t>
      <section anchor="sect-7.1" numbered="true" toc="default">
        <name>JSON Web Signature and Encryption Algorithms Registry</name>
        <t>
   This specification establishes the IANA "JSON Web Signature and Encryption Algorithms" registry for values of the JWS and JWE "alg"
   (algorithm) and "enc" (encryption algorithm) Header Parameters.  The
   registry records the algorithm name, the algorithm description, the
   algorithm usage locations, the implementation requirements, the
   change controller, and a reference to the specification that defines
   it.  The same algorithm name can be registered multiple times,
   provided that the sets of usage locations are disjoint.</t>
        <t>
   It is suggested that the length of the key be included in the
   algorithm name when multiple variations of algorithms are being
   registered that use keys of different lengths and the key lengths for
   each need to be fixed (for instance, because they will be created by
   key derivation functions).  This allows readers of the JSON text to
   more easily make security decisions.</t>
        <t>
   The Designated Experts should perform reasonable due diligence that
   algorithms being registered either are currently considered
   cryptographically credible or are being registered as Deprecated or
   Prohibited.</t>
        <t>
   The implementation requirements of an algorithm may be changed over
   time as the cryptographic landscape evolves, for instance, to change
   the status of an algorithm to Deprecated or to change the status of
   an algorithm from Optional to Recommended+ or Required.  Changes of
   implementation requirements are only permitted on a Specification
   Required basis after review by the Designated Experts, with the new
   specification defining the revised implementation requirements level.</t>
        <section anchor="sect-7.1.1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="true" spacing="normal" indent="3">
            <dt>Algorithm Name:</dt>
            <dd>
	The name requested (e.g., "HS256").  This name is a case-sensitive
      ASCII string.  Names may not match other registered names in a
      case-insensitive manner unless the Designated Experts state that
      there is a compelling reason to allow an exception.
	</dd>
            <dt>Algorithm Description:</dt>
            <dd>
	Brief description of the algorithm (e.g., "HMAC using SHA-256").
	</dd>
            <dt>Algorithm Usage Location(s):</dt>
            <dd>
	The algorithm usage locations.  This must be one or more of the
      values "alg" or "enc" if the algorithm is to be used with JWS or
      JWE.  The value "JWK" is used if the algorithm identifier will be
      used as a JWK "alg" member value, but will not be used with JWS or
      JWE; this could be the case, for instance, for non-authenticated
      encryption algorithms.  Other values may be used with the approval
      of a Designated Expert.
	</dd>
            <dt>JOSE Implementation Requirements:</dt>
            <dd>
	The algorithm implementation requirements for JWS and JWE, which
      must be one the words Required, Recommended, Optional, Deprecated,
      or Prohibited.  Optionally, the word can be followed by a "+" or
      "-".  The use of "+" indicates that the requirement strength is
      likely to be increased in a future version of the specification.
      The use of "-" indicates that the requirement strength is likely
      to be decreased in a future version of the specification.  Any
      identifiers registered for non-authenticated encryption algorithms
      or other algorithms that are otherwise unsuitable for direct use
      as JWS or JWE algorithms must be registered as "Prohibited".
	</dd>
            <dt>Change Controller:</dt>
            <dd>
	For Standards Track RFCs, list the "IESG".  For others, give the
      name of the responsible party.  Other details (e.g., postal
      address, email address, home page URI) may also be included.
	</dd>
            <dt>Specification Document(s):</dt>
            <dd>
	Reference to the document or documents that specify the parameter,
      preferably including URIs that can be used to retrieve copies of
      the documents.  An indication of the relevant sections may also be
      included but is not required.
	</dd>
            <dt>Algorithm Analysis Documents(s):</dt>
            <dd>
	References to a publication or publications in well-known
      cryptographic conferences, by national standards bodies, or by
      other authoritative sources analyzing the cryptographic soundness
      of the algorithm to be registered.  The Designated Experts may
      require convincing evidence of the cryptographic soundness of a
      new algorithm to be provided with the registration request unless
      the algorithm is being registered as Deprecated or Prohibited.
      Having gone through working group and IETF review, the initial
      registrations made by this document are exempt from the need to
      provide this information.
	</dd>
          </dl>
        </section>
        <section anchor="sect-7.1.2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <ul spacing="normal">
            <li>Algorithm Name: "HS256"</li>
            <li>Algorithm Description: HMAC using SHA-256</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Required</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.2 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "HS384"</li>
            <li>Algorithm Description: HMAC using SHA-384</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.2 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "HS512"</li>
            <li>Algorithm Description: HMAC using SHA-512</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.2 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RS256"</li>
            <li>Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-256</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RS384"</li>
            <li>Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-384</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RS512"</li>
            <li>Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-512</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ES256"</li>
            <li>Algorithm Description: ECDSA using P-256 and SHA-256</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended+</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ES384"</li>
            <li>Algorithm Description: ECDSA using P-384 and SHA-384</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ES512"</li>
            <li>Algorithm Description: ECDSA using P-521 and SHA-512</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PS256"</li>
            <li>Algorithm Description: RSASSA-PSS using SHA-256 and MGF1 with
      SHA-256</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.5 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PS384"</li>
            <li>Algorithm Description: RSASSA-PSS using SHA-384 and MGF1 with
      SHA-384</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.5 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PS512"</li>
            <li>Algorithm Description: RSASSA-PSS using SHA-512 and MGF1 with
      SHA-512</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.5 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "none"</li>
            <li>Algorithm Description: No digital signature or MAC performed</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 3.6 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RSA1_5"</li>
            <li>Algorithm Description: RSAES-PKCS1-v1_5</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended-</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.2 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RSA-OAEP"</li>
            <li>Algorithm Description: RSAES OAEP using default parameters</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended+</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "RSA-OAEP-256"</li>
            <li>Algorithm Description: RSAES OAEP using SHA-256 and MGF1 with
      SHA-256</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A128KW"</li>
            <li>Algorithm Description: AES Key Wrap using 128-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A192KW"</li>
            <li>Algorithm Description: AES Key Wrap using 192-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A256KW"</li>
            <li>Algorithm Description: AES Key Wrap using 256-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "dir"</li>
            <li>Algorithm Description: Direct use of a shared symmetric key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.5 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ECDH-ES"</li>
            <li>Algorithm Description: ECDH-ES using Concat KDF</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended+</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ECDH-ES+A128KW"</li>
            <li>Algorithm Description: ECDH-ES using Concat KDF and "A128KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ECDH-ES+A192KW"</li>
            <li>Algorithm Description: ECDH-ES using Concat KDF and "A192KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "ECDH-ES+A256KW"</li>
            <li>Algorithm Description: ECDH-ES using Concat KDF and "A256KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A128GCMKW"</li>
            <li>Algorithm Description: Key wrapping with AES GCM using 128-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.7 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A192GCMKW"</li>
            <li>Algorithm Description: Key wrapping with AES GCM using 192-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.7 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A256GCMKW"</li>
            <li>Algorithm Description: Key wrapping with AES GCM using 256-bit key</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.7 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PBES2-HS256+A128KW"</li>
            <li>Algorithm Description: PBES2 with HMAC SHA-256 and "A128KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.8 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PBES2-HS384+A192KW"</li>
            <li>Algorithm Description: PBES2 with HMAC SHA-384 and "A192KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.8 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "PBES2-HS512+A256KW"</li>
            <li>Algorithm Description: PBES2 with HMAC SHA-512 and "A256KW"
      wrapping</li>
            <li>Algorithm Usage Location(s): "alg"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.8 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A128CBC-HS256"</li>
            <li>Algorithm Description: AES_128_CBC_HMAC_SHA_256 authenticated
      encryption algorithm</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Required</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.2.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A192CBC-HS384"</li>
            <li>Algorithm Description: AES_192_CBC_HMAC_SHA_384 authenticated
      encryption algorithm</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.2.4 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A256CBC-HS512"</li>
            <li>Algorithm Description: AES_256_CBC_HMAC_SHA_512 authenticated
      encryption algorithm</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Required</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.2.5 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A128GCM"</li>
            <li>Algorithm Description: AES GCM using 128-bit key</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A192GCM"</li>
            <li>Algorithm Description: AES GCM using 192-bit key</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
            <li>Algorithm Name: "A256GCM"</li>
            <li>Algorithm Description: AES GCM using 256-bit key</li>
            <li>Algorithm Usage Location(s): "enc"</li>
            <li>JOSE Implementation Requirements: Recommended</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 5.3 of RFC 7518</li>
            <li>Algorithm Analysis Documents(s): n/a</li>
          </ul>
        </section>
      </section>
      <section anchor="sect-7.2" numbered="true" toc="default">
        <name>Header Parameter Names Registration</name>
        <t>
   This section registers the Header Parameter names defined in Sections
   4.6.1, 4.7.1, and 4.8.1 of this specification in the IANA "JSON Web Signature and Encryption Header Parameters" registry established by
   <xref target="JWS" format="default"/>.</t>
        <section anchor="sect-7.2.1" numbered="true" toc="default">
          <name>Registry Contents</name>
          <ul spacing="normal">
            <li>Header Parameter Name: "epk"</li>
            <li>Header Parameter Description: Ephemeral Public Key</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6.1.1 of RFC 7518</li>
            <li>Header Parameter Name: "apu"</li>
            <li>Header Parameter Description: Agreement PartyUInfo</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6.1.2 of RFC 7518</li>
            <li>Header Parameter Name: "apv"</li>
            <li>Header Parameter Description: Agreement PartyVInfo</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.6.1.3 of RFC 7518</li>
            <li>Header Parameter Name: "iv"</li>
            <li>Header Parameter Description: Initialization Vector</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.7.1.1 of RFC 7518</li>
            <li>Header Parameter Name: "tag"</li>
            <li>Header Parameter Description: Authentication Tag</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.7.1.2 of RFC 7518</li>
            <li>Header Parameter Name: "p2s"</li>
            <li>Header Parameter Description: PBES2 Salt Input</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.8.1.1 of RFC 7518</li>
            <li>Header Parameter Name: "p2c"</li>
            <li>Header Parameter Description: PBES2 Count</li>
            <li>Header Parameter Usage Location(s): JWE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 4.8.1.2 of RFC 7518</li>
          </ul>
        </section>
      </section>
      <section anchor="sect-7.3" numbered="true" toc="default">
        <name>JSON Web Encryption Compression Algorithms Registry</name>
        <t>
   This specification establishes the IANA "JSON Web Encryption Compression Algorithms" registry for JWE "zip" member values.  The
   registry records the compression algorithm value and a reference to
   the specification that defines it.</t>
        <section anchor="sect-7.3.1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="true" spacing="normal" indent="3">
            <dt>Compression Algorithm Value:</dt>
            <dd>
	The name requested (e.g., "DEF").  Because a core goal of this
      specification is for the resulting representations to be compact,
      it is RECOMMENDED that the name be short -- not to exceed 8
      characters without a compelling reason to do so.  This name is
      case sensitive.  Names may not match other registered names in a
      case-insensitive manner unless the Designated Experts state that
      there is a compelling reason to allow an exception.
	</dd>
            <dt>Compression Algorithm Description:</dt>
            <dd>
	Brief description of the compression algorithm (e.g., "DEFLATE").
	</dd>
            <dt>Change Controller:</dt>
            <dd>
	For Standards Track RFCs, list "IESG".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      email address, home page URI) may also be included.
	</dd>
            <dt>Specification Document(s):</dt>
            <dd>
	Reference to the document or documents that specify the parameter,
      preferably including URIs that can be used to retrieve copies of
      the documents.  An indication of the relevant sections may also be
      included but is not required.
	</dd>
          </dl>
        </section>
        <section anchor="sect-7.3.2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <ul spacing="normal">
            <li>Compression Algorithm Value: "DEF"</li>
            <li>Compression Algorithm Description: DEFLATE</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): JSON Web Encryption (JWE) <xref target="JWE" format="default"/></li>
          </ul>
        </section>
      </section>
      <section anchor="sect-7.4" numbered="true" toc="default">
        <name>JSON Web Key Types Registry</name>
        <t>
   This specification establishes the IANA "JSON Web Key Types" registry
   for values of the JWK "kty" (key type) parameter.  The registry
   records the "kty" value, implementation requirements, and a reference
   to the specification that defines it.</t>
        <t>
   The implementation requirements of a key type may be changed over
   time as the cryptographic landscape evolves, for instance, to change
   the status of a key type to Deprecated or to change the status of a
   key type from Optional to Recommended+ or Required.  Changes of
   implementation requirements are only permitted on a Specification
   Required basis after review by the Designated Experts, with the new
   specification defining the revised implementation requirements level.</t>
        <section anchor="sect-7.4.1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="true" spacing="normal" indent="3">
            <dt>"kty" Parameter Value:</dt>
            <dd>
	The name requested (e.g., "EC").  Because a core goal of this
      specification is for the resulting representations to be compact,
      it is RECOMMENDED that the name be short -- not to exceed 8
      characters without a compelling reason to do so.  This name is
      case sensitive.  Names may not match other registered names in a
      case-insensitive manner unless the Designated Experts state that
      there is a compelling reason to allow an exception.
	</dd>
            <dt>Key Type Description:</dt>
            <dd>
	Brief description of the Key Type (e.g., "Elliptic Curve").
	</dd>
            <dt>Change Controller:</dt>
            <dd>
	For Standards Track RFCs, list "IESG".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      email address, home page URI) may also be included.
	</dd>
            <dt>JOSE Implementation Requirements:</dt>
            <dd>
	The key type implementation requirements for JWS and JWE, which
      must be one the words Required, Recommended, Optional, Deprecated,
      or Prohibited.  Optionally, the word can be followed by a "+" or
      "-".  The use of "+" indicates that the requirement strength is
      likely to be increased in a future version of the specification.
      The use of "-" indicates that the requirement strength is likely
      to be decreased in a future version of the specification.
	</dd>
            <dt>Specification Document(s):</dt>
            <dd>
	Reference to the document or documents that specify the parameter,
      preferably including URIs that can be used to retrieve copies of
      the documents.  An indication of the relevant sections may also be
      included but is not required.
	</dd>
          </dl>
        </section>
        <section anchor="sect-7.4.2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>
   This section registers the values defined in <xref target="sect-6.1" format="default"/>.</t>
          <ul spacing="normal">
            <li>"kty" Parameter Value: "EC"</li>
            <li>Key Type Description: Elliptic Curve</li>
            <li>JOSE Implementation Requirements: Recommended+</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2 of RFC 7518</li>
            <li>"kty" Parameter Value: "RSA"</li>
            <li>Key Type Description: RSA</li>
            <li>JOSE Implementation Requirements: Required</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3 of RFC 7518</li>
            <li>"kty" Parameter Value: "oct"</li>
            <li>Key Type Description: Octet Sequence</li>
            <li>JOSE Implementation Requirements: Required</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.4 of RFC 7518</li>
          </ul>
        </section>
      </section>
      <section anchor="sect-7.5" numbered="true" toc="default">
        <name>JSON Web Key Parameters Registration</name>
        <t>
   This section registers the parameter names defined in Sections 6.2,
   6.3, and 6.4 of this specification in the IANA "JSON Web Key Parameters" registry established by <xref target="JWK" format="default"/>.</t>
        <section anchor="sect-7.5.1" numbered="true" toc="default">
          <name>Registry Contents</name>
          <ul spacing="normal">
            <li>Parameter Name: "crv"</li>
            <li>Parameter Description: Curve</li>
            <li>Used with "kty" Value(s): "EC"</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.1 of RFC 7518</li>
            <li>Parameter Name: "x"</li>
            <li>Parameter Description: X Coordinate</li>
            <li>Used with "kty" Value(s): "EC"</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.2 of RFC 7518</li>
            <li>Parameter Name: "y"</li>
            <li>Parameter Description: Y Coordinate</li>
            <li>Used with "kty" Value(s): "EC"</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.3 of RFC 7518</li>
            <li>Parameter Name: "d"</li>
            <li>Parameter Description: ECC Private Key</li>
            <li>Used with "kty" Value(s): "EC"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.2.1 of RFC 7518</li>
            <li>Parameter Name: "n"</li>
            <li>Parameter Description: Modulus</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.1.1 of RFC 7518</li>
            <li>Parameter Name: "e"</li>
            <li>Parameter Description: Exponent</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Public</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.1.2 of RFC 7518</li>
            <li>Parameter Name: "d"</li>
            <li>Parameter Description: Private Exponent</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.1 of RFC 7518</li>
            <li>Parameter Name: "p"</li>
            <li>Parameter Description: First Prime Factor</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.2 of RFC 7518</li>
            <li>Parameter Name: "q"</li>
            <li>Parameter Description: Second Prime Factor</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.3 of RFC 7518</li>
            <li>Parameter Name: "dp"</li>
            <li>Parameter Description: First Factor CRT Exponent</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.4 of RFC 7518</li>
            <li>Parameter Name: "dq"</li>
            <li>Parameter Description: Second Factor CRT Exponent</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.5 of RFC 7518</li>
            <li>Parameter Name: "qi"</li>
            <li>Parameter Description: First CRT Coefficient</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.6 of RFC 7518</li>
            <li>Parameter Name: "oth"</li>
            <li>Parameter Description: Other Primes Info</li>
            <li>Used with "kty" Value(s): "RSA"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.3.2.7 of RFC 7518</li>
            <li>Parameter Name: "k"</li>
            <li>Parameter Description: Key Value</li>
            <li>Used with "kty" Value(s): "oct"</li>
            <li>Parameter Information Class: Private</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.4.1 of RFC 7518</li>
          </ul>
        </section>
      </section>
      <section anchor="sect-7.6" numbered="true" toc="default">
        <name>JSON Web Key Elliptic Curve Registry</name>
        <t>
   This section establishes the IANA "JSON Web Key Elliptic Curve"
   registry for JWK "crv" member values.  The registry records the curve
   name, implementation requirements, and a reference to the
   specification that defines it.  This specification registers the
   parameter names defined in <xref target="sect-6.2.1.1" format="default"/>.</t>
        <t>
   The implementation requirements of a curve may be changed over time
   as the cryptographic landscape evolves, for instance, to change the
   status of a curve to Deprecated or to change the status of a curve
   from Optional to Recommended+ or Required.  Changes of implementation
   requirements are only permitted on a Specification Required basis
   after review by the Designated Experts, with the new specification
   defining the revised implementation requirements level.</t>
        <section anchor="sect-7.6.1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="true" spacing="normal" indent="3">
            <dt>Curve Name:</dt>
            <dd>
	The name requested (e.g., "P-256").  Because a core goal of this
      specification is for the resulting representations to be compact,
      it is RECOMMENDED that the name be short -- not to exceed 8
      characters without a compelling reason to do so.  This name is
      case sensitive.  Names may not match other registered names in a
      case-insensitive manner unless the Designated Experts state that
      there is a compelling reason to allow an exception.
	</dd>
            <dt>Curve Description:</dt>
            <dd>
	Brief description of the curve (e.g., "P-256 Curve").
	</dd>
            <dt>JOSE Implementation Requirements:</dt>
            <dd>
              <t>
	The curve implementation requirements for JWS and JWE, which must
      be one the words Required, Recommended, Optional, Deprecated, or
      Prohibited.  Optionally, the word can be followed by a "+" or "-".
              </t>
              <t>
	The use of "+" indicates that the requirement strength is likely
      to be increased in a future version of the specification.  The use
      of "-" indicates that the requirement strength is likely to be
      decreased in a future version of the specification.
              </t>
            </dd>
            <dt>Change Controller:</dt>
            <dd>
	For Standards Track RFCs, list "IESG".  For others, give the name
      of the responsible party.  Other details (e.g., postal address,
      email address, home page URI) may also be included.
	</dd>
            <dt>Specification Document(s):</dt>
            <dd>
	Reference to the document or documents that specify the parameter,
      preferably including URIs that can be used to retrieve copies of
      the documents.  An indication of the relevant sections may also be
      included but is not required.
	</dd>
          </dl>
        </section>
        <section anchor="sect-7.6.2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <ul spacing="normal">
            <li>Curve Name: "P-256"</li>
            <li>Curve Description: P-256 Curve</li>
            <li>JOSE Implementation Requirements: Recommended+</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.1 of RFC 7518</li>
            <li>Curve Name: "P-384"</li>
            <li>Curve Description: P-384 Curve</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.1 of RFC 7518</li>
            <li>Curve Name: "P-521"</li>
            <li>Curve Description: P-521 Curve</li>
            <li>JOSE Implementation Requirements: Optional</li>
            <li>Change Controller: IESG</li>
            <li>Specification Document(s): Section 6.2.1.1 of RFC 7518</li>
          </ul>
        </section>
      </section>
    </section>
    <section anchor="sect-8" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>
   All of the security issues that are pertinent to any cryptographic
   application must be addressed by JWS/JWE/JWK agents.  Among these
   issues are protecting the user's asymmetric private and symmetric
   secret keys and employing countermeasures to various attacks.</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
The security considerations in [AES], [DSS], [JWE], [JWK], [JWS],
[NIST.800-38D], [NIST.800-56A], [NIST.800-107], [RFC2104], [RFC3394],
[RFC3447], [RFC5116], [RFC6090], and [SHS] apply to this
specification.
]]></artwork>
      <section anchor="sect-8.1" numbered="true" toc="default">
        <name>Cryptographic Agility</name>
        <t>
   Implementers should be aware that cryptographic algorithms become
   weaker with time.  As new cryptanalysis techniques are developed and
   computing performance improves, the work factor to break a particular
   cryptographic algorithm will be reduced.  Therefore, implementers and
   deployments must be prepared for the set of algorithms that are
   supported and used to change over time.  Thus, cryptographic
   algorithm implementations should be modular, allowing new algorithms
   to be readily inserted.</t>
      </section>
      <section anchor="sect-8.2" numbered="true" toc="default">
        <name>Key Lifetimes</name>
        <t>
   Many algorithms have associated security considerations related to
   key lifetimes and/or the number of times that a key may be used.
   Those security considerations continue to apply when using those
   algorithms with JOSE data structures.  See NIST SP 800-57
   [NIST.800-57] for specific guidance on key lifetimes.</t>
      </section>
      <section anchor="sect-8.3" numbered="true" toc="default">
        <name>RSAES-PKCS1-v1_5 Security Considerations</name>
        <t>
   While Section 8 of RFC 3447 <xref target="RFC3447" format="default"/> explicitly calls for people not
   to adopt RSASSA-PKCS1-v1_5 for new applications and instead requests
   that people transition to RSASSA-PSS, this specification does include
   RSASSA-PKCS1-v1_5, for interoperability reasons, because it is
   commonly implemented.</t>
        <t>
   Keys used with RSAES-PKCS1-v1_5 must follow the constraints in
   Section 7.2 of RFC 3447.  Also, keys with a low public key exponent
   value, as described in Section 3 of "Twenty Years of Attacks on the RSA Cryptosystem" [Boneh99], must not be used.</t>
      </section>
      <section anchor="sect-8.4" numbered="true" toc="default">
        <name>AES GCM Security Considerations</name>
        <t>
   Keys used with AES GCM must follow the constraints in Section 8.3 of
   [NIST.800-38D], which states: "The total number of invocations of the authenticated encryption function shall not exceed 2^32, including all IV lengths and all instances of the authenticated encryption function with the given key".  In accordance with this rule, AES GCM
   MUST NOT be used with the same key value more than 2^32 times.</t>
        <t>
   An IV value MUST NOT ever be used multiple times with the same AES
   GCM key.  One way to prevent this is to store a counter with the key
   and increment it with every use.  The counter can also be used to
   prevent exceeding the 2^32 limit above.</t>
        <t>
   This security consideration does not apply to the composite AES-CBC
   HMAC SHA-2 or AES Key Wrap algorithms.</t>
      </section>
      <section anchor="sect-8.5" numbered="true" toc="default">
        <name>Unsecured JWS Security Considerations</name>
        <t>
   Unsecured JWSs (JWSs that use the "alg" value "none") provide no
   integrity protection.  Thus, they must only be used in contexts in
   which the payload is secured by means other than a digital signature
   or MAC value, or they need not be secured.</t>
        <t>
   An example means of preventing accepting Unsecured JWSs by default is
   for the "verify" method of a hypothetical JWS software library to
   have a Boolean "acceptUnsecured" parameter that indicates "none" is
   an acceptable "alg" value.  As another example, the "verify" method
   might take a list of algorithms that are acceptable to the
   application as a parameter and would reject Unsecured JWS values if
   "none" is not in that list.</t>
        <t>
   The following example illustrates the reasons for not accepting
   Unsecured JWSs at a global level.  Suppose an application accepts
   JWSs over two channels, (1) HTTP and (2) HTTPS with client
   authentication.  It requires a JWS Signature on objects received over
   HTTP, but accepts Unsecured JWSs over HTTPS.  If the application were
   to globally indicate that "none" is acceptable, then an attacker
   could provide it with an Unsecured JWS over HTTP and still have that
   object successfully validate.  Instead, the application needs to
   indicate acceptance of "none" for each object received over HTTPS
   (e.g., by setting "acceptUnsecured" to "true" for the first
   hypothetical JWS software library above), but not for each object
   received over HTTP.</t>
      </section>
      <section anchor="sect-8.6" numbered="true" toc="default">
        <name>Denial-of-Service Attacks</name>
        <t>
   Receiving agents that validate signatures and sending agents that
   encrypt messages need to be cautious of cryptographic processing
   usage when validating signatures and encrypting messages using keys
   larger than those mandated in this specification.  An attacker could
   supply content using keys that would result in excessive
   cryptographic processing, for example, keys larger than those
   mandated in this specification.  Implementations should set and
   enforce upper limits on the key sizes they accept.  Section 5.6.1
   (Comparable Algorithm Strengths) of NIST SP 800-57 [NIST.800-57]
   contains statements on largest approved key sizes that may be
   applicable.</t>
      </section>
      <section anchor="sect-8.7" numbered="true" toc="default">
        <name>Reusing Key Material when Encrypting Keys</name>
        <t>
   It is NOT RECOMMENDED to reuse the same entire set of key material
   (Key Encryption Key, Content Encryption Key, Initialization Vector,
   etc.) to encrypt multiple JWK or JWK Set objects, or to encrypt the
   same JWK or JWK Set object multiple times.  One suggestion for
   preventing reuse is to always generate at least one new piece of key
   material for each encryption operation (e.g., a new Content
   Encryption Key, a new IV, and/or a new PBES2 Salt), based on the
   considerations noted in this document as well as from RFC 4086
   <xref target="RFC4086" format="default"/>.</t>
      </section>
      <section anchor="sect-8.8" numbered="true" toc="default">
        <name>Password Considerations</name>
        <t>
   Passwords are vulnerable to a number of attacks.  To help mitigate
   some of these limitations, this document applies principles from RFC
   2898 <xref target="RFC2898" format="default"/> to derive cryptographic keys from user-supplied
   passwords.</t>
        <t>
   However, the strength of the password still has a significant impact.
   A high-entropy password has greater resistance to dictionary attacks.
   [NIST.800-63-2] contains guidelines for estimating password entropy,
   which can help applications and users generate stronger passwords.</t>
        <t>
   An ideal password is one that is as large as (or larger than) the
   derived key length.  However, passwords larger than a certain
   algorithm-specific size are first hashed, which reduces an attacker's
   effective search space to the length of the hash algorithm.  It is
   RECOMMENDED that a password used for "PBES2-HS256+A128KW" be no
   shorter than 16 octets and no longer than 128 octets and a password
   used for "PBES2-HS512+A256KW" be no shorter than 32 octets and no
   longer than 128 octets long.</t>
        <t>
   Still, care needs to be taken in where and how password-based
   encryption is used.  These algorithms can still be susceptible to
   dictionary-based attacks if the iteration count is too small; this is
   of particular concern if these algorithms are used to protect data
   that an attacker can have indefinite number of attempts to circumvent
   the protection, such as protected data stored on a file system.</t>
      </section>
      <section anchor="sect-8.9" numbered="true" toc="default">
        <name>Key Entropy and Random Values</name>
        <t>
   See Section 10.1 of <xref target="JWS" format="default"/> for security considerations on key entropy
   and random values.</t>
      </section>
      <section anchor="sect-8.10" numbered="true" toc="default">
        <name>Differences between Digital Signatures and MACs</name>
        <t>
   See Section 10.5 of <xref target="JWS" format="default"/> for security considerations on differences
   between digital signatures and MACs.</t>
      </section>
      <section anchor="sect-8.11" numbered="true" toc="default">
        <name>Using Matching Algorithm Strengths</name>
        <t>
   See Section 11.3 of <xref target="JWE" format="default"/> for security considerations on using
   matching algorithm strengths.</t>
      </section>
      <section anchor="sect-8.12" numbered="true" toc="default">
        <name>Adaptive Chosen-Ciphertext Attacks</name>
        <t>
   See Section 11.4 of <xref target="JWE" format="default"/> for security considerations on adaptive
   chosen-ciphertext attacks.</t>
      </section>
      <section anchor="sect-8.13" numbered="true" toc="default">
        <name>Timing Attacks</name>
        <t>
   See Section 10.9 of <xref target="JWS" format="default"/> and Section 11.5 of <xref target="JWE" format="default"/> for security
   considerations on timing attacks.</t>
      </section>
      <section anchor="sect-8.14" numbered="true" toc="default">
        <name>RSA Private Key Representations and Blinding</name>
        <t>
   See Section 9.3 of <xref target="JWK" format="default"/> for security considerations on RSA private
   key representations and blinding.</t>
      </section>
    </section>
    <section anchor="sect-9" numbered="true" toc="default">
      <name>Internationalization Considerations</name>
      <t>
   Passwords obtained from users are likely to require preparation and
   normalization to account for differences of octet sequences generated
   by different input devices, locales, etc.  It is RECOMMENDED that
   applications perform the steps outlined in <xref target="I-D.ietf-precis-saslprepbis" format="default"/> to prepare a
   password supplied directly by a user before performing key derivation
   and encryption.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference>
          <front>
            <!--
   rfc7518.txt(2952): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [AES]      National Institute of Standards and Technology (NIST),
              "Advanced Encryption Standard (AES)", FIPS PUB 197,
              November 2001, <http://csrc.nist.gov/publications/
              fips/fips197/fips-197.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(2957): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [Boneh99]  "Twenty Years of Attacks on the RSA Cryptosystem", Notices
              of the American Mathematical Society (AMS), Vol. 46,
              No. 2, pp. 203-213, 1999, <http://crypto.stanford.edu/
              ~dabo/pubs/papers/RSA-survey.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(2975): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [DSS]      National Institute of Standards and Technology (NIST),
              "Digital Signature Standard (DSS)", FIPS PUB 186-4, July
              2013, <http://nvlpubs.nist.gov/nistpubs/FIPS/
              NIST.FIPS.186-4.pdf>.
   -->
          </front>
        </reference>
        <reference anchor="JWE" target="http://www.rfc-editor.org/info/rfc7516">
          <front>
            <title>JSON Web Encryption (JWE)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
	</author>
            <author initials="J." surname="Hildebrand" fullname="J. Hildebrand">
	</author>
            <date month="May" year="2015"/>
          </front>
          <seriesInfo name="RFC" value="7516"/>
          <seriesInfo name="DOI" value="10.17487/RFC7516"/>
        </reference>
        <reference anchor="JWK" target="http://www.rfc-editor.org/info/rfc7517">
          <front>
            <title>JSON Web Key (JWK)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
	</author>
            <date month="May" year="2015"/>
          </front>
          <seriesInfo name="RFC" value="7517"/>
          <seriesInfo name="DOI" value="10.17487/RFC7517"/>
        </reference>
        <reference anchor="JWS" target="http://www.rfc-editor.org/info/rfc7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author initials="M." surname="Jones" fullname="M. Jones">
	</author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
	</author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
	</author>
            <date month="May" year="2015"/>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(2992): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-38A]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Block Cipher Modes of Operation", NIST
              Special Publication 800-38A, December 2001,
              <http://csrc.nist.gov/publications/nistpubs/800-38a/
              sp800-38a.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(2999): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-38D]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Block Cipher Modes of Operation:
              Galois/Counter Mode (GCM) and GMAC", NIST Special
              Publication 800-38D, December 2001,
              <http://csrc.nist.gov/publications/nistpubs/800-38D/
              SP-800-38D.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3007): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-56A]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Pair-Wise Key Establishment Schemes
              Using Discrete Logarithm Cryptography", NIST Special
              Publication 800-56A, Revision 2, May 2013,
              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/
              NIST.SP.800-56Ar2.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3015): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-57]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Key Management - Part 1: General
              (Revision 3)", NIST Special Publication 800-57, Part 1,
              Revision 3, July 2012, <http://csrc.nist.gov/publications/
              nistpubs/800-57/sp800-57_part1_rev3_general.pdf>.
   -->
          </front>
        </reference>
        <reference anchor="RFC0020" target="https://www.rfc-editor.org/info/rfc20" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.0020.xml">
          <front>
            <title>ASCII format for network interchange</title>
            <author fullname="V.G. Cerf" initials="V.G." surname="Cerf"/>
            <date month="October" year="1969"/>
          </front>
          <seriesInfo name="STD" value="80"/>
          <seriesInfo name="RFC" value="20"/>
          <seriesInfo name="DOI" value="10.17487/RFC0020"/>
        </reference>
        <reference anchor="RFC2104" target="https://www.rfc-editor.org/info/rfc2104" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2104.xml">
          <front>
            <title>HMAC: Keyed-Hashing for Message Authentication</title>
            <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
            <author fullname="M. Bellare" initials="M." surname="Bellare"/>
            <author fullname="R. Canetti" initials="R." surname="Canetti"/>
            <date month="February" year="1997"/>
            <abstract>
              <t>This document describes HMAC, a mechanism for message authentication using cryptographic hash functions.  HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key.  The cryptographic strength of HMAC depends on the properties of the underlying hash function.  This memo provides information for the Internet community.  This memo does not specify an Internet standard of any kind</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2104"/>
          <seriesInfo name="DOI" value="10.17487/RFC2104"/>
        </reference>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC2898" target="https://www.rfc-editor.org/info/rfc2898" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2898.xml">
          <front>
            <title>PKCS #5: Password-Based Cryptography Specification Version 2.0</title>
            <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
            <date month="September" year="2000"/>
            <abstract>
              <t>This document provides recommendations for the implementation of password-based cryptography, covering key derivation functions, encryption schemes, message-authentication schemes, and ASN.1 syntax identifying the techniques.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2898"/>
          <seriesInfo name="DOI" value="10.17487/RFC2898"/>
        </reference>
        <reference anchor="RFC3394" target="https://www.rfc-editor.org/info/rfc3394" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3394.xml">
          <front>
            <title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2002"/>
          </front>
          <seriesInfo name="RFC" value="3394"/>
          <seriesInfo name="DOI" value="10.17487/RFC3394"/>
        </reference>
        <reference anchor="RFC3447" target="https://www.rfc-editor.org/info/rfc3447" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3447.xml">
          <front>
            <title>Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1</title>
            <author fullname="J. Jonsson" initials="J." surname="Jonsson"/>
            <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
            <date month="February" year="2003"/>
            <abstract>
              <t>This memo represents a republication of PKCS #1 v2.1 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document is taken directly from the PKCS #1 v2.1 document, with certain corrections made during the publication process.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3447"/>
          <seriesInfo name="DOI" value="10.17487/RFC3447"/>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <author fullname="F. Yergeau" initials="F." surname="Yergeau"/>
            <date month="November" year="2003"/>
            <abstract>
              <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="63"/>
          <seriesInfo name="RFC" value="3629"/>
          <seriesInfo name="DOI" value="10.17487/RFC3629"/>
        </reference>
        <reference anchor="RFC4868" target="https://www.rfc-editor.org/info/rfc4868" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4868.xml">
          <front>
            <title>Using HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512 with IPsec</title>
            <author fullname="S. Kelly" initials="S." surname="Kelly"/>
            <author fullname="S. Frankel" initials="S." surname="Frankel"/>
            <date month="May" year="2007"/>
            <abstract>
              <t>This specification describes the use of Hashed Message Authentication Mode (HMAC) in conjunction with the SHA-256, SHA-384, and SHA-512 algorithms in IPsec.  These algorithms may be used as the basis for data origin authentication and integrity verification mechanisms for the Authentication Header (AH), Encapsulating Security Payload (ESP), Internet Key Exchange Protocol (IKE), and IKEv2 protocols, and also as Pseudo-Random Functions (PRFs) for IKE and IKEv2.  Truncated output lengths are specified for the authentication-related variants, with the corresponding algorithms designated as HMAC-SHA-256-128, HMAC-SHA-384-192, and HMAC-SHA-512-256.  The PRF variants are not truncated, and are called PRF-HMAC-SHA-256, PRF-HMAC-SHA-384, and PRF-HMAC-SHA-512. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4868"/>
          <seriesInfo name="DOI" value="10.17487/RFC4868"/>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security.  The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026).  The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC5652" target="https://www.rfc-editor.org/info/rfc5652" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5652.xml">
          <front>
            <title>Cryptographic Message Syntax (CMS)</title>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="September" year="2009"/>
            <abstract>
              <t>This document describes the Cryptographic Message Syntax (CMS).  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary message content. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="70"/>
          <seriesInfo name="RFC" value="5652"/>
          <seriesInfo name="DOI" value="10.17487/RFC5652"/>
        </reference>
        <reference anchor="RFC6090" target="https://www.rfc-editor.org/info/rfc6090" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.6090.xml">
          <front>
            <title>Fundamental Elliptic Curve Cryptography Algorithms</title>
            <author fullname="D. McGrew" initials="D." surname="McGrew"/>
            <author fullname="K. Igoe" initials="K." surname="Igoe"/>
            <author fullname="M. Salter" initials="M." surname="Salter"/>
            <date month="February" year="2011"/>
            <abstract>
              <t>This note describes the fundamental algorithms of Elliptic Curve Cryptography (ECC) as they were defined in some seminal references from 1994 and earlier.  These descriptions may be useful for implementing the fundamental algorithms without using any of the specialized methods that were developed in following years.  Only elliptic curves defined over fields of characteristic greater than three are in scope; these curves are those used in Suite B.  This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6090"/>
          <seriesInfo name="DOI" value="10.17487/RFC6090"/>
        </reference>
        <reference anchor="RFC7159" target="https://www.rfc-editor.org/info/rfc7159" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7159.xml">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="March" year="2014"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7159"/>
          <seriesInfo name="DOI" value="10.17487/RFC7159"/>
        </reference>
        <reference anchor="SEC1" target="http://www.secg.org/sec1-v2.pdf">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <author>
              <organization>Standards for Efficient Cryptography Group</organization>
            </author>
            <date month="May" year="2009"/>
          </front>
          <seriesInfo name="Version" value="2.0"/>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3100): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [SHS]      National Institute of Standards and Technology (NIST),
              "Secure Hash Standard (SHS)", FIPS PUB 180-4, March 2012,
              <http://csrc.nist.gov/publications/fips/fips180-4/
              fips-180-4.pdf>.
   -->
          </front>
        </reference>
        <reference anchor="UNICODE" target="http://www.unicode.org/versions/latest/">
          <front>
            <title>The Unicode Standard</title>
            <author>
              <organization>The Unicode Consortium</organization>
            </author>
            <date/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="I-D.mcgrew-aead-aes-cbc-hmac-sha2" target="https://www.ietf.org/archive/id/draft-mcgrew-aead-aes-cbc-hmac-sha2-05.txt" xml:base="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.mcgrew-aead-aes-cbc-hmac-sha2.xml">
          <front>
            <title>Authenticated Encryption with AES-CBC and HMAC-SHA</title>
            <author fullname="David McGrew" initials="D." surname="McGrew">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="John Foley" initials="J." surname="Foley">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Kenny Paterson" initials="K." surname="Paterson">
              <organization>Royal Holloway</organization>
            </author>
            <date day="4" month="July" year="2014"/>
            <abstract>
              <t>This document specifies algorithms for authenticated encryption with associated data (AEAD) that are based on the composition of the Advanced Encryption Standard (AES) in the Cipher Block Chaining (CBC) mode of operation for encryption, and the HMAC-SHA message authentication code (MAC). These are randomized encryption algorithms, and thus are suitable for use with applications that cannot provide distinct nonces to each invocation of the AEAD encrypt operation.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-mcgrew-aead-aes-cbc-hmac-sha2-05"/>
        </reference>
        <reference anchor="CanvasApp" target="http://developers.facebook.com/docs/authentication/canvas">
          <front>
            <title>Canvas Applications</title>
            <author>
              <organization>Facebook</organization>
            </author>
            <date year="2010"/>
          </front>
        </reference>
        <reference anchor="JCA" target="http://docs.oracle">
          <front>
            <title>Java Cryptography Architecture (JCA) Reference Guide</title>
            <author>
              <organization>Oracle</organization>
            </author>
            <date year="2014"/>
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3124): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [JSE]      Bradley, J. and N. Sakimura (editor), "JSON Simple
              Encryption", September 2010,
              <http://jsonenc.info/enc/1.0/>.
   -->
          </front>
        </reference>
        <reference anchor="I-D.rescorla-jsms" target="https://www.ietf.org/archive/id/draft-rescorla-jsms-00.txt" xml:base="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.rescorla-jsms.xml">
          <front>
            <title>JavaScript Message Security Format</title>
            <author fullname="Eric Rescorla" initials="E." surname="Rescorla">
              <organization>RTFM, Inc.</organization>
            </author>
            <author fullname="Joe Hildebrand" initials="J." surname="Hildebrand">
              <organization>Cisco Systems</organization>
            </author>
            <date day="7" month="March" year="2011"/>
            <abstract>
              <t>Many applications require the ability to send cryptographically secured messages. While the IETF has defined a number of formats for such messages (e.g. CMS) those formats use encodings which are not congenial for Web applications. This document describes a new cryptographic message format which is based on JavaScript Object Notation (JSON) and thus is easy for Web applications to generate and parse.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-rescorla-jsms-00"/>
        </reference>
        <reference anchor="JSS" target="http://jsonenc.info/jss/1.0/">
          <front>
            <title>JSON Simple Sign 1.0</title>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
	</author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
	</author>
            <date month="September" year="2010"/>
          </front>
          <seriesInfo name="Draft" value="01"/>
        </reference>
        <reference anchor="I-D.miller-jose-jwe-protected-jwk" target="https://www.ietf.org/archive/id/draft-miller-jose-jwe-protected-jwk-02.txt" xml:base="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.miller-jose-jwe-protected-jwk.xml">
          <front>
            <title>Using JavaScript Object Notation (JSON) Web Encryption (JWE) for Protecting JSON Web Key (JWK) Objects</title>
            <author fullname="Matthew A. Miller" initials="M. A." surname="Miller">
              <organization>Cisco Systems</organization>
            </author>
            <date day="13" month="June" year="2013"/>
            <abstract>
              <t>This document specifies an approach to protecting a private key formatted as a JavaScript Syntax Object Notation (JSON) Web Key (JWK) object using JSON Web Encryption (JWE). This document also specifies a set of algorithms for protecting such content using password-based cryptography.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-miller-jose-jwe-protected-jwk-02"/>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3154): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-107]
              National Institute of Standards and Technology (NIST),
              "Recommendation for Applications Using Approved Hash
              Algorithms", NIST Special Publication 800-107, Revision 1,
              August 2012, <http://csrc.nist.gov/publications/
              nistpubs/800-107-rev1/sp800-107-rev1.pdf>.
   -->
          </front>
        </reference>
        <reference>
          <front>
            <!--
   rfc7518.txt(3161): Warning: Failed parsing a reference.  Are all elements
   separated by commas (not periods, not just spaces)?:
   [NIST.800-63-2]
              National Institute of Standards and Technology (NIST),
              "Electronic Authentication Guideline", NIST Special
              Publication 800-63-2, August 2013,
              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/
              NIST.SP.800-63-2.pdf>.
   -->
          </front>
        </reference>
        <reference anchor="I-D.ietf-precis-saslprepbis" target="https://www.ietf.org/archive/id/draft-ietf-precis-saslprepbis-18.txt" xml:base="https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-precis-saslprepbis.xml">
          <front>
            <title>Preparation, Enforcement, and Comparison of Internationalized Strings Representing Usernames and Passwords</title>
            <author fullname="Peter Saint-Andre" initials="P." surname="Saint-Andre"/>
            <author fullname="Alexey Melnikov" initials="A." surname="Melnikov">
              <organization>Isode Ltd</organization>
            </author>
            <date day="28" month="May" year="2015"/>
            <abstract>
              <t>This document describes updated methods for handling Unicode strings representing usernames and passwords. The previous approach was known as SASLprep (RFC 4013) and was based on stringprep (RFC 3454). The methods specified in this document provide a more sustainable approach to the handling of internationalized usernames and passwords. The preparation, enforcement, and comparison of internationalized strings (PRECIS) framework, RFC 7564, obsoletes RFC 3454, and this document obsoletes RFC 4013.</t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-precis-saslprepbis-18"/>
        </reference>
        <reference anchor="RFC2631" target="https://www.rfc-editor.org/info/rfc2631" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2631.xml">
          <front>
            <title>Diffie-Hellman Key Agreement Method</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="June" year="1999"/>
            <abstract>
              <t>This document standardizes one particular Diffie-Hellman variant, based on the ANSI X9.42 draft, developed by the ANSI X9F1 working group. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2631"/>
          <seriesInfo name="DOI" value="10.17487/RFC2631"/>
        </reference>
        <reference anchor="RFC3275" target="https://www.rfc-editor.org/info/rfc3275" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3275.xml">
          <front>
            <title>(Extensible Markup Language) XML-Signature Syntax and Processing</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="J. Reagle" initials="J." surname="Reagle"/>
            <author fullname="D. Solo" initials="D." surname="Solo"/>
            <date month="March" year="2002"/>
            <abstract>
              <t>This document specifies XML (Extensible Markup Language) digital signature processing rules and syntax. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3275"/>
          <seriesInfo name="DOI" value="10.17487/RFC3275"/>
        </reference>
        <reference anchor="RFC4086" target="https://www.rfc-editor.org/info/rfc4086" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.4086.xml">
          <front>
            <title>Randomness Requirements for Security</title>
            <author fullname="D. Eastlake 3rd" initials="D." surname="Eastlake 3rd"/>
            <author fullname="J. Schiller" initials="J." surname="Schiller"/>
            <author fullname="S. Crocker" initials="S." surname="Crocker"/>
            <date month="June" year="2005"/>
            <abstract>
              <t>Security systems are built on strong cryptographic algorithms that foil pattern analysis attempts. However, the security of these systems is dependent on generating secret quantities for passwords, cryptographic keys, and similar quantities. The use of pseudo-random processes to generate secret quantities can result in pseudo-security. A sophisticated attacker may find it easier to reproduce the environment that produced the secret quantities and to search the resulting small set of possibilities than to locate the quantities in the whole of the potential number space.</t>
              <t>Choosing random quantities to foil a resourceful and motivated adversary is surprisingly difficult. This document points out many pitfalls in using poor entropy sources or traditional pseudo-random number generation techniques for generating such quantities. It recommends the use of truly random hardware techniques and shows that the existing hardware on many systems can be used for this purpose. It provides suggestions to ameliorate the problem when a hardware solution is not available, and it gives examples of how large such quantities need to be for some applications. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="106"/>
          <seriesInfo name="RFC" value="4086"/>
          <seriesInfo name="DOI" value="10.17487/RFC4086"/>
        </reference>
        <reference anchor="RFC5116" target="https://www.rfc-editor.org/info/rfc5116" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5116.xml">
          <front>
            <title>An Interface and Algorithms for Authenticated Encryption</title>
            <author fullname="D. McGrew" initials="D." surname="McGrew"/>
            <date month="January" year="2008"/>
            <abstract>
              <t>This document defines algorithms for Authenticated Encryption with Associated Data (AEAD), and defines a uniform interface and a registry for such algorithms.  The interface and registry can be used as an application-independent set of cryptoalgorithm suites.  This approach provides advantages in efficiency and security, and promotes the reuse of crypto implementations. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5116"/>
          <seriesInfo name="DOI" value="10.17487/RFC5116"/>
        </reference>
        <reference anchor="RFC5226" target="https://www.rfc-editor.org/info/rfc5226" xml:base="https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <author fullname="H. Alvestrand" initials="H." surname="Alvestrand"/>
            <date month="May" year="2008"/>
            <abstract>
              <t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t>
              <t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t>
              <t>This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5226"/>
          <seriesInfo name="DOI" value="10.17487/RFC5226"/>
        </reference>
        <reference anchor="W3C.NOTE-xmldsig-core2-20130411" target="http://www.w3.org/TR/2013/NOTE-xmldsig-core2-20130411/" xml:base="https://bib.ietf.org/public/rfc/bibxml4/reference.W3C.NOTE-xmldsig-core2-20130411.xml">
          <front>
            <title>XML Signature Syntax and Processing Version 2.0</title>
            <author fullname="David Solo" role="editor"/>
            <author fullname="Donald Eastlake" role="editor"/>
            <author fullname="Frederick Hirsch" role="editor"/>
            <author fullname="Joseph Reagle" role="editor"/>
            <author fullname="Kelvin Yiu" role="editor"/>
            <author fullname="Pratik Datta" role="editor"/>
            <author fullname="Scott Cantor" role="editor"/>
            <author fullname="Thomas Roessler" role="editor"/>
            <date day="11" month="April" year="2013"/>
          </front>
          <seriesInfo name="W3C NOTE" value="NOTE-xmldsig-core2-20130411"/>
          <seriesInfo name="W3C" value="NOTE-xmldsig-core2-20130411"/>
        </reference>
        <reference anchor="W3C.REC-xmlenc-core-20021210" target="https://www.w3.org/TR/2002/REC-xmlenc-core-20021210/" xml:base="https://bib.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core-20021210.xml">
          <front>
            <title>XML Encryption Syntax and Processing</title>
            <author fullname="Donald Eastlake" role="editor"/>
            <author fullname="Joseph Reagle" role="editor"/>
            <date day="10" month="December" year="2002"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-xmlenc-core-20021210"/>
          <seriesInfo name="W3C" value="REC-xmlenc-core-20021210"/>
        </reference>
        <reference anchor="W3C.REC-xmlenc-core1-20130411" target="https://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/" xml:base="https://bib.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xmlenc-core1-20130411.xml">
          <front>
            <title>XML Encryption Syntax and Processing Version 1.1</title>
            <author fullname="Donald Eastlake" role="editor"/>
            <author fullname="Frederick Hirsch" role="editor"/>
            <author fullname="Joseph Reagle" role="editor"/>
            <author fullname="Thomas Roessler" role="editor"/>
            <date day="11" month="April" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-xmlenc-core1-20130411"/>
          <seriesInfo name="W3C" value="REC-xmlenc-core1-20130411"/>
        </reference>
      </references>
    </references>
    <section anchor="sect-a" numbered="true" toc="default">
      <name>Algorithm Identifier Cross-Reference</name>
      <artwork name="" type="" align="left" alt=""><![CDATA[
This appendix contains tables cross-referencing the cryptographic
algorithm identifier values defined in this specification with the
equivalent identifiers used by other standards and software packages.
See XML DSIG [RFC3275], XML DSIG 2.0
[W3C.NOTE-xmldsig-core2-20130411], XML Encryption
[W3C.REC-xmlenc-core-20021210], XML Encryption 1.1
[W3C.REC-xmlenc-core1-20130411], and Java Cryptography Architecture
[JCA] for more information about the names defined by those
documents.
]]></artwork>
      <section anchor="sect-a.1" numbered="true" toc="default">
        <name>Digital Signature/MAC Algorithm Identifier Cross-Reference</name>
        <t>
   This section contains a table cross-referencing the JWS digital
   signature and MAC "alg" (algorithm) values defined in this
   specification with the equivalent identifiers used by other standards
   and software packages.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
+-------------------------------------------------------------------+
| JWS      | XML DSIG                                               |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| HS256    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha256     |
| | HmacSHA256                            | 1.2.840.113549.2.9      |
+-------------------------------------------------------------------+
| HS384    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha384     |
| | HmacSHA384                            | 1.2.840.113549.2.10     |
+-------------------------------------------------------------------+
| HS512    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha512     |
| | HmacSHA512                            | 1.2.840.113549.2.11     |
+-------------------------------------------------------------------+
| RS256    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha256      |
| | SHA256withRSA                         | 1.2.840.113549.1.1.11   |
+-------------------------------------------------------------------+
| RS384    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha384      |
| | SHA384withRSA                         | 1.2.840.113549.1.1.12   |
+-------------------------------------------------------------------+
| RS512    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha512      |
| | SHA512withRSA                         | 1.2.840.113549.1.1.13   |
+-------------------------------------------------------------------+
| ES256    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256    |
| | SHA256withECDSA                       | 1.2.840.10045.4.3.2     |
+-------------------------------------------------------------------+
| ES384    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384    |
| | SHA384withECDSA                       | 1.2.840.10045.4.3.3     |
+-------------------------------------------------------------------+
| ES512    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512    |
| | SHA512withECDSA                       | 1.2.840.10045.4.3.4     |
+-------------------------------------------------------------------+
| PS256    | http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1 |
| | SHA256withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
| PS384    | http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1 |
| | SHA384withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
| PS512    | http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1 |
| | SHA512withRSAandMGF1                  | 1.2.840.113549.1.1.10   |
+-------------------------------------------------------------------+
]]></artwork>
      </section>
      <section anchor="sect-a.2" numbered="true" toc="default">
        <name>Key Management Algorithm Identifier Cross-Reference</name>
        <t>
   This section contains a table cross-referencing the JWE "alg"
   (algorithm) values defined in this specification with the equivalent
   identifiers used by other standards and software packages.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
+-------------------------------------------------------------------+
| JWE           | XML ENC                                           |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| RSA1_5        | http://www.w3.org/2001/04/xmlenc#rsa-1_5          |
| | RSA/ECB/PKCS1Padding                  | 1.2.840.113549.1.1.1    |
+-------------------------------------------------------------------+
| RSA-OAEP      | http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p   |
| | RSA/ECB/OAEPWithSHA-1AndMGF1Padding   | 1.2.840.113549.1.1.7    |
+-------------------------------------------------------------------+
| RSA-OAEP-256  | http://www.w3.org/2009/xmlenc11#rsa-oaep          |
|               | & http://www.w3.org/2009/xmlenc11#mgf1sha256      |
| | RSA/ECB/OAEPWithSHA-256AndMGF1Padding |                         |
| | & MGF1ParameterSpec.SHA256            | 1.2.840.113549.1.1.7    |
+-------------------------------------------------------------------+
| ECDH-ES       | http://www.w3.org/2009/xmlenc11#ECDH-ES           |
| | ECDH                                  | 1.3.132.1.12            |
+-------------------------------------------------------------------+
| A128KW        | http://www.w3.org/2001/04/xmlenc#kw-aes128        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.5  |
+-------------------------------------------------------------------+
| A192KW        | http://www.w3.org/2001/04/xmlenc#kw-aes192        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.25 |
+-------------------------------------------------------------------+
| A256KW        | http://www.w3.org/2001/04/xmlenc#kw-aes256        |
| | AESWrap                               | 2.16.840.1.101.3.4.1.45 |
+-------------------------------------------------------------------+
]]></artwork>
      </section>
      <section anchor="sect-a.3" numbered="true" toc="default">
        <name>Content Encryption Algorithm Identifier Cross-Reference</name>
        <t>
   This section contains a table cross-referencing the JWE "enc"
   (encryption algorithm) values defined in this specification with the
   equivalent identifiers used by other standards and software packages.</t>
        <t>
   For the composite algorithms "A128CBC-HS256", "A192CBC-HS384", and
   "A256CBC-HS512", the corresponding AES-CBC algorithm identifiers are
   listed.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
+-------------------------------------------------------------------+
| JWE           | XML ENC                                           |
| | JCA                                   | OID                     |
+-------------------------------------------------------------------+
| A128CBC-HS256 | http://www.w3.org/2001/04/xmlenc#aes128-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.2  |
+-------------------------------------------------------------------+
| A192CBC-HS384 | http://www.w3.org/2001/04/xmlenc#aes192-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.22 |
+-------------------------------------------------------------------+
| A256CBC-HS512 | http://www.w3.org/2001/04/xmlenc#aes256-cbc       |
| | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.42 |
+-------------------------------------------------------------------+
| A128GCM       | http://www.w3.org/2009/xmlenc11#aes128-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.6  |
+-------------------------------------------------------------------+
| A192GCM       | http://www.w3.org/2009/xmlenc11#aes192-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.26 |
+-------------------------------------------------------------------+
| A256GCM       | http://www.w3.org/2009/xmlenc11#aes256-gcm        |
| | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.46 |
+-------------------------------------------------------------------+
]]></artwork>
      </section>
    </section>
    <section anchor="sect-b" numbered="true" toc="default">
      <name>Test Cases for AES_CBC_HMAC_SHA2 Algorithms</name>
      <t>
   The following test cases can be used to validate implementations of
   the AES_CBC_HMAC_SHA2 algorithms defined in <xref target="sect-5.2" format="default"/>.  They are
   also intended to correspond to test cases that may appear in a future
   version of <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2" format="default"/>, demonstrating that the cryptographic
   computations performed are the same.</t>
      <t>
   The variable names are those defined in <xref target="sect-5.2" format="default"/>.  All values are
   hexadecimal.</t>
      <section anchor="sect-b.1" numbered="true" toc="default">
        <name>Test Cases for AES_128_CBC_HMAC_SHA_256</name>
        <dl newline="true" spacing="normal" indent="-1">
          <dt>AES_128_CBC_HMAC_SHA_256</dt>
          <dd/>
        </dl>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f

  ENC_KEY = 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       c8 0e df a3 2d df 39 d5 ef 00 c0 b4 68 83 42 79
            a2 e4 6a 1b 80 49 f7 92 f7 6b fe 54 b9 03 a9 c9
            a9 4a c9 b4 7a d2 65 5c 5f 10 f9 ae f7 14 27 e2
            fc 6f 9b 3f 39 9a 22 14 89 f1 63 62 c7 03 23 36
            09 d4 5a c6 98 64 e3 32 1c f8 29 35 ac 40 96 c8
            6e 13 33 14 c5 40 19 e8 ca 79 80 df a4 b9 cf 1b
            38 4c 48 6f 3a 54 c5 10 78 15 8e e5 d7 9d e5 9f
            bd 34 d8 48 b3 d6 95 50 a6 76 46 34 44 27 ad e5
            4b 88 51 ff b5 98 f7 f8 00 74 b9 47 3c 82 e2 db

  M =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
            e6 e5 45 82 47 65 15 f0 ad 9f 75 a2 b7 1c 73 ef

  T =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4
]]></artwork>
      </section>
      <section anchor="sect-b.2" numbered="true" toc="default">
        <name>Test Cases for AES_192_CBC_HMAC_SHA_384</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17

  ENC_KEY = 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23 24 25 26 27
            28 29 2a 2b 2c 2d 2e 2f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       ea 65 da 6b 59 e6 1e db 41 9b e6 2d 19 71 2a e5
            d3 03 ee b5 00 52 d0 df d6 69 7f 77 22 4c 8e db
            00 0d 27 9b dc 14 c1 07 26 54 bd 30 94 42 30 c6
            57 be d4 ca 0c 9f 4a 84 66 f2 2b 22 6d 17 46 21
            4b f8 cf c2 40 0a dd 9f 51 26 e4 79 66 3f c9 0b
            3b ed 78 7a 2f 0f fc bf 39 04 be 2a 64 1d 5c 21
            05 bf e5 91 ba e2 3b 1d 74 49 e5 32 ee f6 0a 9a
            c8 bb 6c 6b 01 d3 5d 49 78 7b cd 57 ef 48 49 27
            f2 80 ad c9 1a c0 c4 e7 9c 7b 11 ef c6 00 54 e3

  M =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7 45 94 f8 86 b3 fa af d4
            86 f2 5c 71 31 e3 28 1e 36 c7 a2 d1 30 af de 57

  T =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20
            75 16 80 39 cc c7 33 d7
]]></artwork>
      </section>
      <section anchor="sect-b.3" numbered="true" toc="default">
        <name>Test Cases for AES_256_CBC_HMAC_SHA_512</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
  K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
            20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
            10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f

  ENC_KEY = 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
            30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f

  P =       41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20
            6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75
            69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65
            74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62
            65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20 69
            6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66
            20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f
            75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65

  IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04

  A =       54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63
            69 70 6c 65 20 6f 66 20 41 75 67 75 73 74 65 20
            4b 65 72 63 6b 68 6f 66 66 73

  AL =      00 00 00 00 00 00 01 50

  E =       4a ff aa ad b7 8c 31 c5 da 4b 1b 59 0d 10 ff bd
            3d d8 d5 d3 02 42 35 26 91 2d a0 37 ec bc c7 bd
            82 2c 30 1d d6 7c 37 3b cc b5 84 ad 3e 92 79 c2
            e6 d1 2a 13 74 b7 7f 07 75 53 df 82 94 10 44 6b
            36 eb d9 70 66 29 6a e6 42 7e a7 5c 2e 08 46 a1
            1a 09 cc f5 37 0d c8 0b fe cb ad 28 c7 3f 09 b3
            a3 b7 5e 66 2a 25 94 41 0a e4 96 b2 e2 e6 60 9e
            31 e6 e0 2c c8 37 f0 53 d2 1f 37 ff 4f 51 95 0b
            be 26 38 d0 9d d7 a4 93 09 30 80 6d 07 03 b1 f6

  M =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
            fd 30 a5 65 c6 16 ff b2 f3 64 ba ec e6 8f c4 07
            53 bc fc 02 5d de 36 93 75 4a a1 f5 c3 37 3b 9c

  T =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf
            2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5
]]></artwork>
      </section>
    </section>
    <section anchor="sect-c" numbered="true" toc="default">
      <name>Example ECDH-ES Key Agreement Computation</name>
      <t>
   This example uses ECDH-ES Key Agreement and the Concat KDF to derive
   the CEK in the manner described in <xref target="sect-4.6" format="default"/>.  In this example, the
   ECDH-ES Direct Key Agreement mode ("alg" value "ECDH-ES") is used to
   produce an agreed-upon key for AES GCM with a 128-bit key ("enc"
   value "A128GCM").</t>
      <t>
   In this example, a producer Alice is encrypting content to a consumer
   Bob.  The producer (Alice) generates an ephemeral key for the key
   agreement computation.  Alice's ephemeral key (in JWK format) used
   for the key agreement computation in this example (including the
   private part) is:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
   "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps",
   "d":"0_NxaRPUMQoAJt50Gz8YiTr8gRTwyEaCumd-MToTmIo"
  }
]]></artwork>
      <t>
   The consumer's (Bob's) key (in JWK format) used for the key agreement
   computation in this example (including the private part) is:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
  {"kty":"EC",
   "crv":"P-256",
   "x":"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ",
   "y":"e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck",
   "d":"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw"
  }
]]></artwork>
      <t>
   Header Parameter values used in this example are as follows.  The
   "apu" (agreement PartyUInfo) Header Parameter value is the base64url
   encoding of the UTF-8 string "Alice" and the "apv" (agreement
   PartyVInfo) Header Parameter value is the base64url encoding of the
   UTF-8 string "Bob".  The "epk" (ephemeral public key) Header
   Parameter is used to communicate the producer's (Alice's) ephemeral
   public key value to the consumer (Bob).</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
  {"alg":"ECDH-ES",
   "enc":"A128GCM",
   "apu":"QWxpY2U",
   "apv":"Qm9i",
   "epk":
    {"kty":"EC",
     "crv":"P-256",
     "x":"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0",
     "y":"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps"
    }
  }

The resulting Concat KDF [NIST.800-56A] parameter values are:
]]></artwork>
      <ul empty="true" spacing="normal">
        <li>
          <t>   Z
      This is set to the ECDH-ES key agreement output.  (This value is
      often not directly exposed by libraries, due to NIST security
      requirements, and only serves as an input to a KDF.)  In this
      example, Z is following the octet sequence (using JSON array
      notation):
      [158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38, 156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140, 254, 144, 196].</t>
          <dl newline="true" spacing="normal" indent="3">
            <dt>keydatalen</dt>
            <dd>
	This value is 128 - the number of bits in the desired output key
      (because "A128GCM" uses a 128-bit key).
	</dd>
            <dt>AlgorithmID</dt>
            <dd>
	This is set to the octets representing the 32-bit big-endian value
      7 - [0, 0, 0, 7] - the number of octets in the AlgorithmID content
      "A128GCM", followed, by the octets representing the ASCII string
      "A128GCM" - [65, 49, 50, 56, 71, 67, 77].
	</dd>
            <dt>PartyUInfo</dt>
            <dd>
	This is set to the octets representing the 32-bit big-endian value
      5 - [0, 0, 0, 5] - the number of octets in the PartyUInfo content
      "Alice", followed, by the octets representing the UTF-8 string
      "Alice" - [65, 108, 105, 99, 101].
	</dd>
            <dt>PartyVInfo</dt>
            <dd>
	This is set to the octets representing the 32-bit big-endian value
      3 - [0, 0, 0, 3] - the number of octets in the PartyUInfo content
      "Bob", followed, by the octets representing the UTF-8 string "Bob"
      - [66, 111, 98].
	</dd>
            <dt>SuppPubInfo</dt>
            <dd>
	This is set to the octets representing the 32-bit big-endian value
      128 - [0, 0, 0, 128] - the keydatalen value.
	</dd>
            <dt>SuppPrivInfo</dt>
            <dd>
	This is set to the empty octet sequence.
	</dd>
          </dl>
        </li>
      </ul>
      <artwork name="" type="" align="left" alt=""><![CDATA[
Concatenating the parameters AlgorithmID through SuppPubInfo results
in an OtherInfo value of:
[0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105,
99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]

Concatenating the round number 1 ([0, 0, 0, 1]), Z, and the OtherInfo
value results in the Concat KDF round 1 hash input of:
[0, 0, 0, 1,
158, 86, 217, 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132, 38,
156, 251, 49, 110, 163, 218, 128, 106, 72, 246, 218, 167, 121, 140,
254, 144, 196,
0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99,
101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]

The resulting derived key, which is the first 128 bits of the round 1
hash output is:
[86, 170, 141, 234, 248, 35, 109, 32, 92, 34, 40, 205, 113, 167, 16,
26]

The base64url-encoded representation of this derived key is:

  VqqN6vgjbSBcIijNcacQGg
]]></artwork>
    </section>
    <section numbered="false" anchor="acknowledgements" toc="default">
      <name>Acknowledgements</name>
      <t>
   Solutions for signing and encrypting JSON content were previously
   explored by "Magic Signatures" <xref target="I-D.panzer-magicsig" format="default"/>, "JSON Simple Sign 1.0" <xref target="JSS" format="default"/>, "Canvas Applications" <xref target="CanvasApp" format="default"/>, "JSON Simple Encryption" [JSE], and "JavaScript Message Security Format" <xref target="I-D.rescorla-jsms" format="default"/>,
   all of which influenced this document.</t>
      <t>
   The "Authenticated Encryption with AES-CBC and HMAC-SHA"
   <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2" format="default"/> specification, upon which the AES_CBC_HMAC_SHA2
   algorithms are based, was written by David A. McGrew and Kenny
   Paterson.  The test cases for AES_CBC_HMAC_SHA2 are based upon those
   for <xref target="I-D.mcgrew-aead-aes-cbc-hmac-sha2" format="default"/> by John Foley.</t>
      <t>
   Matt Miller wrote "Using JavaScript Object Notation (JSON) Web Encryption (JWE) for Protecting JSON Web Key (JWK) Objects"
   <xref target="I-D.miller-jose-jwe-protected-jwk" format="default"/>, upon which the password-based encryption content of this
   document is based.</t>
      <t>
   This specification is the work of the JOSE working group, which
   includes dozens of active and dedicated participants.  In particular,
   the following individuals contributed ideas, feedback, and wording
   that influenced this specification:</t>
      <t>
   Dirk Balfanz, Richard Barnes, Carsten Bormann, John Bradley, Brian
   Campbell, Alissa Cooper, Breno de Medeiros, Vladimir Dzhuvinov, Roni
   Even, Stephen Farrell, Yaron Y. Goland, Dick Hardt, Joe Hildebrand,
   Jeff Hodges, Edmund Jay, Charlie Kaufman, Barry Leiba, James Manger,
   Matt Miller, Kathleen Moriarty, Tony Nadalin, Axel Nennker, John
   Panzer, Emmanuel Raviart, Eric Rescorla, Pete Resnick, Nat Sakimura,
   Jim Schaad, Hannes Tschofenig, and Sean Turner.</t>
      <t>
   Jim Schaad and Karen O'Donoghue chaired the JOSE working group and
   Sean Turner, Stephen Farrell, and Kathleen Moriarty served as
   Security Area Directors during the creation of this specification.</t>
    </section>
  </back>
</rfc>
