<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" docName="draft-ietf-babel-yang-model-13" number="9647" ipr="trust200902" obsoletes="" updates="" submissionType="IETF" category="std" consensus="true" xml:lang="en" tocInclude="true" tocDepth="3" symRefs="true" sortRefs="true" prepTime="2024-10-10T16:34:49" indexInclude="true" scripts="Common,Latin">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-babel-yang-model-13" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9647" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="YANG Data Model for Babel">A YANG Data Model for Babel</title>
    <seriesInfo name="RFC" value="9647" stream="IETF"/>
    <author fullname="Mahesh Jethanandani" initials="M." surname="Jethanandani">
      <organization showOnFrontPage="true">Kloud Services</organization>
      <address>
        <postal>
          <street/>
          <city/>
          <code/>
          <region>California</region>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>mjethanandani@gmail.com</email>
      </address>
    </author>
    <author fullname="Barbara Stark" initials="B." surname="Stark">
      <organization showOnFrontPage="true">AT&amp;T</organization>
      <address>
        <postal>
          <street/>
          <city>Atlanta</city>
          <region>GA</region>
          <code/>
          <country>United States of America</country>
        </postal>
        <phone/>
        <email>barbara.stark@att.com</email>
        <uri/>
      </address>
    </author>
    <date month="10" year="2024"/>
    <area>Routing</area>
    <workgroup>Babel</workgroup>
    <keyword>babel</keyword>
    <keyword>YANG</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document defines a data model for the Babel routing protocol. The data model is defined using the YANG data modeling language.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9647" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2024 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-requirements-language">Requirements Language</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tree-diagram-annotations">Tree Diagram Annotations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-babel-module">Babel Module</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.2.2">
              <li pn="section-toc.1-1.2.2.1">
                <t indent="0" pn="section-toc.1-1.2.2.1.1"><xref derivedContent="2.1" format="counter" sectionFormat="of" target="section-2.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-information-model">Information Model</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.2">
                <t indent="0" pn="section-toc.1-1.2.2.2.1"><xref derivedContent="2.2" format="counter" sectionFormat="of" target="section-2.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tree-diagram">Tree Diagram</xref></t>
              </li>
              <li pn="section-toc.1-1.2.2.3">
                <t indent="0" pn="section-toc.1-1.2.2.3.1"><xref derivedContent="2.3" format="counter" sectionFormat="of" target="section-2.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-yang-module">YANG Module</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-uri-registration">URI Registration</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-yang-module-name-registrati">YANG Module Name Registration</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-tree-diagram-and-example-co">Tree Diagram and Example Configurations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-appendix.a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-complete-tree-diagram">Complete Tree Diagram</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-appendix.a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-statistics-gathering-enable">Statistics Gathering Enabled</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="A.3" format="counter" sectionFormat="of" target="section-appendix.a.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-automatic-detection-of-prop">Automatic Detection of Properties</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.4">
                <t indent="0" pn="section-toc.1-1.6.2.4.1"><xref derivedContent="A.4" format="counter" sectionFormat="of" target="section-appendix.a.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-override-default-properties">Override Default Properties</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.5">
                <t indent="0" pn="section-toc.1-1.6.2.5.1"><xref derivedContent="A.5" format="counter" sectionFormat="of" target="section-appendix.a.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-configuring-other-propertie">Configuring Other Properties</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.b"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgements">Acknowledgements</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.c"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <t indent="0" pn="section-1-1">This document defines a data model for the <xref target="RFC8966" format="default" sectionFormat="of" derivedContent="RFC8966">Babel routing protocol</xref>. The data model is defined using <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950">YANG 1.1</xref> and is compatible with <xref target="RFC8342" format="default" sectionFormat="of" derivedContent="RFC8342">Network Management Datastore Architecture (NMDA)</xref>. It is based on the <xref target="RFC9046" format="default" sectionFormat="of" derivedContent="RFC9046">Babel information model</xref>. The data model only includes data nodes that are useful for managing Babel over IPv6.</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-1.1">
        <name slugifiedName="name-requirements-language">Requirements Language</name>
        <t indent="0" pn="section-1.1-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>",
    "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>",
    "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>",
    "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be
    interpreted as described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> when, and only when, they appear in all capitals, as
    shown here.
        </t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-1.2">
        <name slugifiedName="name-tree-diagram-annotations">Tree Diagram Annotations</name>
        <t indent="0" pn="section-1.2-1">For a reference to the annotations used in tree diagrams included in this document, please see "YANG Tree Diagrams" <xref target="RFC8340" format="default" sectionFormat="of" derivedContent="RFC8340"/>.</t>
      </section>
    </section>
    <section numbered="true" toc="include" removeInRFC="false" pn="section-2">
      <name slugifiedName="name-babel-module">Babel Module</name>
      <t indent="0" pn="section-2-1">This document defines a <xref target="RFC7950" format="default" sectionFormat="of" derivedContent="RFC7950">YANG 1.1</xref> data model for the configuration and management of Babel. The YANG module is based on the <xref target="RFC9046" format="default" sectionFormat="of" derivedContent="RFC9046">Babel information model</xref>.</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-2.1">
        <name slugifiedName="name-information-model">Information Model</name>
        <t indent="0" pn="section-2.1-1">It's worth noting a few differences between the Babel information model and this data module. The information model mandates the definition of some of the attributes, e.g.,
        "babel-implementation-version" or the "babel-self-router-id". These attributes are marked as read-only objects in the information module as well as in this data module. However, there is no way
        in the data module to mandate that a read-only attribute be present. It is up to the implementation of this data module to make sure that the attributes that are marked "read only" and are
        mandatory are indeed present.</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-2.2">
        <name slugifiedName="name-tree-diagram">Tree Diagram</name>
        <t indent="0" pn="section-2.2-1">The following diagram illustrates a top-level hierarchy of the model. In addition to the version implemented by this device, the model contains subtrees on
        "constants", "interfaces", "mac-key-set", "dtls", and "routes".</t>
        <sourcecode name="" type="yangtree" markers="false" pn="section-2.2-2">
module: ietf-babel

  augment /rt:routing/rt:control-plane-protocols
            /rt:control-plane-protocol:
    +--rw babel!
       +--ro version?              string
       +--rw enable                boolean
       +--ro router-id?            binary
       +--ro seqno?                uint16
       +--rw statistics-enabled?   boolean
       +--rw constants
       |     ...
       +--rw interfaces* [reference]
       |     ...
       +--rw mac-key-set* [name]
       |     ...
       +--rw dtls* [name]
       |     ...
       +--ro routes* [prefix]
             ...
</sourcecode>
        <t indent="0" pn="section-2.2-3">The "interfaces" subtree describes attributes such as the "interface" object that is being referenced; the type of link, e.g., wired, wireless, or tunnel, as enumerated by "metric-algorithm" and
        "split-horizon"; and whether the interface is enabled or not.</t>
        <t indent="0" pn="section-2.2-4">The "constants" subtree describes the UDP port used for sending and receiving Babel messages and the multicast group used to send and receive announcements on IPv6.</t>
        <t indent="0" pn="section-2.2-5">The "routes" subtree describes objects such as the prefix for which the route is advertised, a reference to the neighboring route, and the "next-hop" address.</t>
        <t indent="0" pn="section-2.2-6">Finally, for security, two subtrees are defined to contain Message Authentication Code (MAC) keys and DTLS certificates. The "mac-key-set" subtree contains keys used with the MAC security mechanism. The boolean flag
        "default-apply" indicates whether the set of MAC keys is automatically applied to new interfaces. The "dtls" subtree contains certificates used with the DTLS security mechanism. Similar to the MAC
        mechanism, the boolean flag "default-apply" indicates whether the set of DTLS certificates is automatically applied to new interfaces.</t>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-2.3">
        <name slugifiedName="name-yang-module">YANG Module</name>
        <t indent="0" pn="section-2.3-1">This YANG module augments the YANG routing management module <xref target="RFC8349" format="default" sectionFormat="of" derivedContent="RFC8349"/> to provide a common framework for all routing subsystems. By augmenting the module, it provides a
        common building block for routes and Routing Information Bases (RIBs). It also has a reference to an interface defined by "A YANG Data Model for Interface Management" <xref target="RFC8343" format="default" sectionFormat="of" derivedContent="RFC8343"/>.</t>
        <t indent="0" pn="section-2.3-2">A router running the Babel routing protocol can sometimes determine the parameters it needs to use for an interface based on the interface name. For example, it can detect that eth0 is a wired interface
        and that wlan0 is a wireless interface. This is not true for a tunnel interface, where the link parameters need to be configured explicitly.</t>
        <t indent="0" pn="section-2.3-3">For a wired interface, it will assume "two-out-of-three" is set for "metric-algorithm" and "split-horizon" is set to true. On the other hand, for a wireless interface, it will assume "etx" is set for
        "metric-algorithm" and "split-horizon" is set to false. However, if the wired link is connected to a wireless radio, the values can be overridden by setting "metric-algorithm" to "etx" and
        "split-horizon" to false. Similarly, an interface that is a metered 3G link and is used for fallback connectivity needs much higher default time constants, e.g., "mcast-hello-interval" and
        "update-interval", in order to avoid carrying control traffic as much as possible.</t>
        <t indent="0" pn="section-2.3-4">In addition to the modules used above, this module imports
        definitions from "Common YANG Data Types" <xref target="RFC6991" format="default" sectionFormat="of" derivedContent="RFC6991"/> and references "HMAC:
        Keyed-Hashing for Message Authentication" <xref target="RFC2104" format="default" sectionFormat="of" derivedContent="RFC2104"/>, "Using HMAC-SHA-256,
        HMAC-SHA-384, and HMAC-SHA-512 with IPsec" <xref target="RFC4868" format="default" sectionFormat="of" derivedContent="RFC4868"/>, "Textual Encodings of
        PKIX, PKCS, and CMS Structures" <xref target="RFC7468" format="default" sectionFormat="of" derivedContent="RFC7468"/>, "The BLAKE2 Cryptographic Hash and Message
        Authentication Code (MAC)" <xref target="RFC7693" format="default" sectionFormat="of" derivedContent="RFC7693"/>,  "Network Configuration
        Access Control Model" <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341"/>, "The Babel Routing
        Protocol" <xref target="RFC8966" format="default" sectionFormat="of" derivedContent="RFC8966"/>, 
        "MAC Authentication for the Babel
        Routing Protocol" <xref target="RFC8967" format="default" sectionFormat="of" derivedContent="RFC8967"/>, "Babel Information Model" <xref target="RFC9046" format="default" sectionFormat="of" derivedContent="RFC9046"/>, "The Datagram Transport
        Layer Security (DTLS) Protocol Version 1.3" <xref target="RFC9147" format="default" sectionFormat="of" derivedContent="RFC9147"/>, and "YANG
        Data Types and Groupings for Cryptography" <xref target="RFC9640" format="default" sectionFormat="of" derivedContent="RFC9640"/>.</t>
        <sourcecode name="ietf-babel@2024-10-10.yang" type="yang" markers="true" pn="section-2.3-5">
module ietf-babel {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-babel";
  prefix babel;

  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types";
  }
  import ietf-interfaces {
    prefix if;
    reference
      "RFC 8343: A YANG Data Model for Interface Management";
  }
  import ietf-routing {
    prefix rt;
    reference
      "RFC 8349: A YANG Data Model for Routing Management (NMDA
       Version)";
  }
  import ietf-crypto-types {
    prefix ct;
    reference
      "RFC 9640: YANG Data Types and Groupings
       for Cryptography";
  }
  import ietf-netconf-acm {
    prefix nacm;
    reference
      "RFC 8341: Network Configuration Access Control Model";
  }

  organization
    "IETF Babel routing protocol Working Group";

  contact
    "WG Web:  https://datatracker.ietf.org/wg/babel/
     WG List: babel@ietf.org

     Editor: Mahesh Jethanandani
             mjethanandani@gmail.com
     Editor: Barbara Stark
             bs7652@att.com";

  description
    "This YANG module defines a model for the Babel routing
     protocol.

     The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
     NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
     'MAY', and 'OPTIONAL' in this document are to be interpreted as
     described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
     they appear in all capitals, as shown here.

     Copyright (c) 2024 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject to
     the license terms contained in, the Revised BSD License set
     forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC 9647
     (https://www.rfc-editor.org/info/rfc9647); see the RFC itself
     for full legal notices.";

  revision 2024-10-10 {
    description
      "Initial version.";
    reference
      "RFC 9647: A YANG Data Model for Babel";
  }

  /*
   * Features
   */

  feature two-out-of-three-supported {
    description
      "This implementation supports the '2-out-of-3'
       computation algorithm.";
  }

  feature etx-supported {
    description
      "This implementation supports the Expected Transmission Count
       (ETX) metric computation algorithm.";
  }

  feature mac-supported {
    description
      "This implementation supports MAC-based security.";
    reference
      "RFC 8967: MAC Authentication for the Babel Routing
       Protocol";
  }

  feature dtls-supported {
    description
      "This implementation supports DTLS-based security.";
    reference
      "RFC 8968: Babel Routing Protocol over Datagram
       Transport Layer Security";
  }

  feature hmac-sha256-supported {
    description
      "This implementation supports the HMAC-SHA256 MAC algorithm.";
    reference
      "RFC 8967: MAC Authentication for the Babel Routing
       Protocol";
  }

  feature blake2s-supported {
    description
      "This implementation supports BLAKE2s MAC algorithms.";
    reference
      "RFC 8967: MAC Authentication for the Babel Routing
       Protocol";
  }

  feature x-509-supported {
    description
      "This implementation supports the X.509 certificate type.";
    reference
      "RFC 8968: Babel Routing Protocol over Datagram
       Transport Layer Security";
  }

  feature raw-public-key-supported {
    description
      "This implementation supports the raw public key certificate
       type.";
    reference
      "RFC 8968: Babel Routing Protocol over Datagram
       Transport Layer Security";
  }

  /*
   * Identities
   */

  identity metric-comp-algorithms {
    description
      "Base identity from which all Babel metric computation
       algorithms MUST be derived.";
  }

  identity two-out-of-three {
    if-feature "two-out-of-three-supported";
    base metric-comp-algorithms;
    description
      "2-out-of-3 algorithm.";
    reference
      "RFC 8966: The Babel Routing Protocol, Section A.2.1";
  }

  identity etx {
    if-feature "etx-supported";
    base metric-comp-algorithms;
    description
      "Expected Transmission Count (ETX) metric computation
       algorithm.";
    reference
      "RFC 8966: The Babel Routing Protocol, Section A.2.2";
  }

  /*
   * Babel MAC algorithms identities.
   */

  identity mac-algorithms {
    description
      "Base identity for all Babel MAC algorithms.";
  }

  identity hmac-sha256 {
    if-feature "mac-supported";
    if-feature "hmac-sha256-supported";
    base mac-algorithms;
    description
      "HMAC-SHA256 algorithm supported.";
    reference
      "RFC 4868: Using HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512
       with IPsec";
  }

  identity blake2s {
    if-feature "mac-supported";
    if-feature "blake2s-supported";
    base mac-algorithms;
    description
      "BLAKE2s algorithms supported. Specifically, BLAKE2-128 is
       supported.";
    reference
      "RFC 7693: The BLAKE2 Cryptographic Hash and Message
       Authentication Code (MAC)";
  }

  /*
   * Babel Cert Types
   */

  identity dtls-cert-types {
    description
      "Base identity for Babel DTLS certificate types.";
  }

  identity x-509 {
    if-feature "dtls-supported";
    if-feature "x-509-supported";
    base dtls-cert-types;
    description
      "X.509 certificate type.";
  }

  identity raw-public-key {
    if-feature "dtls-supported";
    if-feature "raw-public-key-supported";
    base dtls-cert-types;
    description
      "Raw public key certificate type.";
  }

  /*
   * Babel routing protocol identity.
   */

  identity babel {
    base rt:routing-protocol;
    description
      "Babel routing protocol";
  }

  /*
   * Groupings
   */

  grouping routes {
    list routes {
      key "prefix";
      config false;

      leaf prefix {
        type inet:ip-prefix;
        description
          "Prefix (expressed in ip-address/prefix-length format) for
           which this route is advertised.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }

      leaf router-id {
        type binary {
          length "8";
        }
        description
          "router-id of the source router for which this route is
           advertised.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }

      leaf neighbor {
        type leafref {
          path "/rt:routing/rt:control-plane-protocols/"
             + "rt:control-plane-protocol/babel/interfaces/"
             + "neighbor-objects/neighbor-address";
        }
        description
          "Reference to the neighbor-objects entry for the neighbor
           that advertised this route.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }

      leaf received-metric {
        type union {
          type enumeration {
            enum null {
              description
                "Route was not received from a neighbor.";
            }
          }
          type uint16;
        }
        description
          "The metric with which this route was advertised by the
           neighbor, or maximum value (infinity) to indicate the
           route was recently retracted and is temporarily
           unreachable. This metric will be NULL if the
           route was not received from a neighbor but instead was
           injected through means external to the Babel routing
           protocol. At least one of calculated-metric or
           received-metric MUST be non-NULL.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6
           RFC 8966: The Babel Routing Protocol, Section 2.1";
      }

      leaf calculated-metric {
        type union {
          type enumeration {
            enum null {
              description
                "Route has not been calculated.";
            }
          }
          type uint16;
        }
        description
          "A calculated metric for this route. How the metric is
           calculated is implementation specific. Maximum value
           (infinity) indicates the route was recently retracted
           and is temporarily unreachable. At least one of
           calculated-metric or received-metric MUST be non-NULL.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6
           RFC 8966: The Babel Routing Protocol, Section 2.1";
      }

      leaf seqno {
        type uint16;
        description
          "The sequence number with which this route was
           advertised.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }

      leaf next-hop {
        type union {
          type enumeration {
            enum null {
              description
                "Route has no next-hop address.";
            }
          }
          type inet:ip-address;
        }
        description
          "The next-hop address of this route. This will be NULL
           if this route has no next-hop address.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }

      leaf feasible {
        type boolean;
        description
          "A boolean flag indicating whether this route is
           feasible.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6
           RFC 8966, The Babel Routing Protocol, Section 3.5.1";
      }

      leaf selected {
        type boolean;
        description
          "A boolean flag indicating whether this route is selected,
           i.e., whether it is currently being used for forwarding
           and is being advertised.";
        reference
          "RFC 9046: Babel Information Model, Section 3.6";
      }
      description
        "A set of babel-route-obj objects. Contains routes known to
         this node.";
      reference
        "RFC 9046: Babel Information Model, Section 3.6";
    }
    description
      "Common grouping for routing used in RIB.";
  }

  /*
   * Data model
   */

  augment "/rt:routing/rt:control-plane-protocols/"
        + "rt:control-plane-protocol" {
    when "derived-from-or-self(rt:type, 'babel')" {
      description
        "Augmentation is valid only when the instance of the routing
         type is of type 'babel'.";
    }
    description
      "Augments the routing module to support a common structure
       between routing protocols.";
    reference
      "RFC 8349: A YANG Data Model for Routing Management (NMDA
       Version)";

    container babel {
      presence "A Babel container.";
      description
        "Babel information objects.";
      reference
        "RFC 9046: Babel Information Model, Section 3";

      leaf version {
        type string;
        config false;
        description
          "The name and version of this implementation of the Babel
           protocol.";
        reference
          "RFC 9046: Babel Information Model, Section 3.1";
      }

      leaf enable {
        type boolean;
        mandatory true;
        description
          "When written, it configures whether the protocol should be
           enabled. A read from the &lt;running&gt; or &lt;intended&gt; datastore
           therefore indicates the configured administrative value of
           whether the protocol is enabled or not.

           A read from the &lt;operational&gt; datastore indicates whether
           the protocol is actually running or not, i.e., it
           indicates the operational state of the protocol.";
        reference
          "RFC 9046: Babel Information Model, Section 3.1";
      }

      leaf router-id {
        type binary;
        must '../enable = "true"';
        config false;
        description
          "Every Babel speaker is assigned a router-id, which is an
           arbitrary string of 8 octets that is assumed to be unique
           across the routing domain.

           The router-id is valid only if the protocol is enabled,
           at which time a non-zero value is assigned.";
        reference
          "RFC 9046: Babel Information Model, Section 3.1
           RFC 8966: The Babel Routing Protocol, Section 3";
      }

      leaf seqno {
        type uint16;
        config false;
        description
          "Sequence number included in route updates for routes
           originated by this node.";
        reference
          "RFC 9046: Babel Information Model, Section 3.1";
      }

      leaf statistics-enabled {
        type boolean;
        description
          "Indicates whether statistics collection is enabled
           ('true') or disabled ('false') on all interfaces.
           On transition to enabled, existing statistics
           values are not cleared and will be incremented as
           new packets are counted.";
      }

      container constants {
        description
          "Babel constants object.";
        reference
          "RFC 9046: Babel Information Model, Section 3.1";

        leaf udp-port {
          type inet:port-number;
          default "6696";
          description
            "UDP port for sending and receiving Babel messages. The
             default port is 6696.";
          reference
            "RFC 9046: Babel Information Model, Section 3.2";
        }

        leaf mcast-group {
          type inet:ip-address;
          default "ff02::1:6";
          description
            "Multicast group for sending and receiving multicast
             announcements on IPv6.";
          reference
            "RFC 9046: Babel Information Model, Section 3.2";
        }
      }

      list interfaces {
        key "reference";

        description
          "A set of Babel interface objects.";
        reference
          "RFC 9046: Babel Information Model, Section 3.3";

        leaf reference {
          type if:interface-ref;
          description
            "References the name of the interface over which Babel
             packets are sent and received.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf enable {
          type boolean;
          default "true";
          description
            "If 'true', Babel sends and receives messages on this
             interface. If 'false', Babel messages received on
             this interface are ignored and none are sent.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf metric-algorithm {
          type identityref {
            base metric-comp-algorithms;
          }
          mandatory true;
          description
            "Indicates the metric computation algorithm used on this
             interface. The value MUST be one of those identities
             based on 'metric-comp-algorithms'.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf split-horizon {
          type boolean;
          description
            "Indicates whether or not the split-horizon optimization
             is used when calculating metrics on this interface.
             A value of 'true' indicates the split-horizon
             optimization is used.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf mcast-hello-seqno {
          type uint16;
          config false;
          description
            "The current sequence number in use for multicast Hellos
             sent on this interface.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf mcast-hello-interval {
          type uint16;
          units "centiseconds";
          description
            "The current multicast Hello interval in use for Hellos
             sent on this interface.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf update-interval {
          type uint16;
          units "centiseconds";
          description
            "The current update interval in use for this interface.
             Units are centiseconds.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf mac-enable {
          type boolean;
          description
            "Indicates whether the MAC security mechanism is enabled
             ('true') or disabled ('false').";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf-list mac-key-sets {
          type leafref {
            path "../../mac-key-set/name";
          }
          description
            "List of references to the MAC entries that apply
             to this interface. When an interface instance is
             created, all MAC instances with default-apply 'true'
             will be included in this list.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf mac-verify {
          type boolean;
          description
            "A boolean flag indicating whether MACs in
             incoming Babel packets are required to be present and
             are verified.  If this parameter is 'true', incoming
             packets are required to have a valid MAC.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf dtls-enable {
          type boolean;
          description
            "Indicates whether the DTLS security mechanism is enabled
             ('true') or disabled ('false').";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf-list dtls-certs {
          type leafref {
            path "../../dtls/name";
          }
          description
            "List of references to the dtls entries that apply to
             this interface.  When an interface instance
             is created, all dtls instances with default-apply
             'true' will be included in this list.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf dtls-cached-info {
          type boolean;
          description
            "Indicates whether the cached_info extension is enabled.
             The extension is enabled for inclusion in ClientHello
             and ServerHello messages if the value is 'true'.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3
             RFC 8968: Babel Routing Protocol over
             Datagram Transport Layer Security, Appendix A";
        }

        leaf-list dtls-cert-prefer {
          type leafref {
            path "../../dtls/certs/type";
          }
          ordered-by user;
          description
            "List of supported certificate types, in order of
             preference. The values MUST be the 'type' attribute
             in the list 'certs' of the list 'dtls'
             (../../dtls/certs/type). This list is used to populate
             the server_certificate_type extension in a ClientHello.
             Values that are present in at least one instance in the
             certs object under dtls of a referenced dtls instance
             and that have a non-empty private key will be used to
             populate the client_certificate_type extension in a
             ClientHello.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3
             RFC 8968: Babel Routing Protocol over
             Datagram Transport Layer Security, Appendix A";
        }

        leaf packet-log-enable {
          type boolean;
          description
            "If 'true', logging of babel packets received on this
             interface is enabled; if 'false', babel packets are
             not logged.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3";
        }

        leaf packet-log {
          type inet:uri;
          config false;
          description
            "A reference or url link to a file that contains a
             timestamped log of packets received and sent on
             udp-port on this interface. The [libpcap] file
             format with .pcap file extension SHOULD be supported for
             packet log files. Logging is enabled / disabled by
             packet-log-enable.";
          reference
            "RFC 9046: Babel Information Model, Section 3.3
             libpcap: Libpcap File Format, Wireshark Foundation";
        }

        container statistics {
          config false;
          description
            "Statistics collection object for this interface.";
          reference
            "RFC 9046: Babel Information Model, Section 3.4";

          leaf discontinuity-time {
            type yang:date-and-time;
            mandatory true;
            description
              "The time on the most recent occasion at which any one
               or more of counters suffered a discontinuity. If no
               such discontinuities have occurred since the last
               re-initialization of the local management subsystem,
               then this node contains the time the local management
               subsystem re-initialized itself.";
          }

          leaf sent-mcast-hello {
            type yang:counter32;
            description
              "A count of the number of multicast Hello packets sent
               on this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          leaf sent-mcast-update {
            type yang:counter32;
            description
              "A count of the number of multicast update packets sent
               on this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          leaf sent-ucast-hello {
            type yang:counter32;
            description
              "A count of the number of unicast Hello packets sent
               on this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          leaf sent-ucast-update {
            type yang:counter32;
            description
              "A count of the number of unicast update packets sent
               on this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          leaf sent-ihu {
            type yang:counter32;
            description
              "A count of the number of 'I Heard You' (IHU) packets
               sent on this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          leaf received-packets {
            type yang:counter32;
            description
              "A count of the number of Babel packets received on
               this interface.";
            reference
              "RFC 9046: Babel Information Model, Section 3.4";
          }

          action reset {
            description
              "The information model (RFC 9046) defines reset
               action as a system-wide reset of Babel statistics.
               In YANG, the reset action is associated with the
               container where the action is defined. In this case,
               the action is associated with the statistics container
               inside an interface. The action will therefore
               reset statistics at an interface level.

               Implementations that want to support a system-wide
               reset of Babel statistics need to call this action
               for every instance of the interface.";
            reference
              "RFC 9046: Babel Information Model";

            input {
              leaf reset-at {
                type yang:date-and-time;
                description
                  "The time when the reset was issued.";
              }
            }

            output {
              leaf reset-finished-at {
                type yang:date-and-time;
                description
                  "The time when the reset finished.";
              }
            }
          }
        }

        list neighbor-objects {
          key "neighbor-address";
          config false;
          description
            "A set of babel neighbor objects.";
          reference
            "RFC 9046: Babel Information Model, Section 3.5";

          leaf neighbor-address {
            type inet:ip-address;
            description
              "The IPv4 or IPv6 address from which the neighbor sends
               packets.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf hello-mcast-history {
            type string;
            description
              "The multicast Hello history of whether or not the
               multicast Hello packets prior to exp-mcast-
               hello-seqno were received, with a '1' for the most
               recent Hello placed in the most significant bit and
               prior Hellos shifted right (with '0' bits placed
               between prior Hellos and the most recent Hello for any
               Hellos not received); represented as a string of
               hex digits encoded in utf-8. A bit that is set
               indicates that the corresponding Hello was received,
               and a bit that is cleared indicates that the
               corresponding Hello was not received.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf hello-ucast-history {
            type string;
            description
              "The unicast Hello history of whether or not the
               unicast Hello packets prior to exp-ucast-hello-seqno
               were received, with a '1' for the most
               recent Hello placed in the most significant bit and
               prior Hellos shifted right (with '0' bits placed
               between prior Hellos and the most recent Hello for any
               Hellos not received); represented as a string using
               hex digits encoded in utf-8 where a '1' bit = Hello
               received and a '0' bit = Hello not received.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf txcost {
            type int32;
            default "0";
            description
              "Transmission cost value from the last IHU packet
               received from this neighbor, or maximum value
               (infinity) to indicate the IHU hold timer for this
               neighbor has an expired description.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf exp-mcast-hello-seqno {
            type union {
              type enumeration {
                enum null {
                  description
                    "Multicast Hello packets are not expected, or
                     processing of multicast packets is not
                     enabled.";
                }
              }
              type uint16;
            }
            description
              "Expected multicast Hello sequence number of next Hello
               to be received from this neighbor; if multicast Hello
               packets are not expected, or processing of multicast
               packets is not enabled, this MUST be NULL.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf exp-ucast-hello-seqno {
            type union {
              type enumeration {
                enum null {
                  description
                    "Unicast Hello packets are not expected, or
                     processing of unicast packets is not enabled.";
                }
              }
              type uint16;
            }
            default "null";
            description
              "Expected unicast Hello sequence number of next Hello
               to be received from this neighbor; if unicast Hello
               packets are not expected, or processing of unicast
               packets is not enabled, this MUST be NULL.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf ucast-hello-seqno {
            type union {
              type enumeration {
                enum null {
                  description
                    "Unicast Hello packets are not being sent.";
                }
              }
              type uint16;
            }
            default "null";
            description
              "The current sequence number in use for unicast Hellos
               sent to this neighbor. If unicast Hellos are not being
               sent, this MUST be NULL.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf ucast-hello-interval {
            type uint16;
            units "centiseconds";
            description
              "The current interval in use for unicast Hellos sent to
               this neighbor. Units are centiseconds.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf rxcost {
            type uint16;
            description
              "Reception cost calculated for this neighbor. This
               value is usually derived from the Hello history, which
               may be combined with other data, such as statistics
               maintained by the link layer. The rxcost is sent to a
               neighbor in each IHU.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }

          leaf cost {
            type int32;
            description
              "Link cost is computed from the values maintained in
               the neighbor table. The statistics are kept in the
               neighbor table about the reception of Hellos, and the
               txcost is computed from received IHU packets.";
            reference
              "RFC 9046: Babel Information Model, Section 3.5";
          }
        }
      }

      list mac-key-set {
        key "name";

        description
          "A MAC key set object. If this object is implemented, it
           provides access to parameters related to the MAC security
           mechanism.";
        reference
          "RFC 9046: Babel Information Model, Section 3.7";

        leaf name {
          type string;
          description
            "A string that uniquely identifies the MAC object.";
        }

        leaf default-apply {
          type boolean;
          description
            "A boolean flag indicating whether this object
             instance is applied to all new interfaces, by default.
             If 'true', this instance is applied to new babel-
             interfaces instances at the time they are created
             by including it in the mac-key-sets list under
             the interface. If 'false', this instance is not applied
             to new interface instances when they are created.";
          reference
            "RFC 9046: Babel Information Model, Section 3.7";
        }

        list keys {
          key "name";
          min-elements 1;
          description
            "A set of keys objects.";
          reference
            "RFC 9046: Babel Information Model, Section 3.8";

          leaf name {
            type string;
            description
              "A unique name for this MAC key that can be used to
               identify the key in this object instance since the
               key value is not allowed to be read. This value can
               only be provided when this instance is created and is
               not subsequently writable.";
            reference
              "RFC 9046: Babel Information Model, Section 3.8";
          }

          leaf use-send {
            type boolean;
            mandatory true;
            description
              "Indicates whether this key value is used to compute a
               MAC and include that MAC in the sent Babel packet. A
               MAC for sent packets is computed using this key if the
               value is 'true'. If the value is 'false', this key is
               not used to compute a MAC to include in sent Babel
               packets.";
            reference
              "RFC 9046: Babel Information Model, Section 3.8";
          }

          leaf use-verify {
            type boolean;
            mandatory true;
            description
              "Indicates whether this key value is used to verify
               incoming Babel packets. This key is used to verify
               incoming packets if the value is 'true'. If the value
               is 'false', no MAC is computed from this key for
               comparing an incoming packet.";
            reference
              "RFC 9046: Babel Information Model, Section 3.8";
          }

          leaf value {
            nacm:default-deny-all;
            type binary;
            mandatory true;
            description
              "The value of the MAC key.

               This value is of a length suitable for the associated
               babel-mac-key-algorithm.  If the algorithm is based on
               the Hashed Message Authentication Code (HMAC)
               construction (RFC 2104), the length MUST be between 0
               and an upper limit that is at least the size of the
               output length (where the 'HMAC-SHA256' output length
               is 32 octets as described in RFC 4868). Longer lengths
               MAY be supported but are not necessary if the
               management system has the ability to generate a
               suitably random value (e.g., by randomly generating a
               value or by using a key derivation technique as
               recommended in the security considerations of RFC
               8967. If the algorithm is 'BLAKE2s-128', the length
               MUST be between 0 and 32 bytes inclusive as specified
               by RFC 7693.";
            reference
              "RFC 9046: Babel Information Model, Section 3.8
               RFC 2104: HMAC: Keyed-Hashing for Message
                         Authentication
               RFC 4868: Using HMAC-SHA-256, HMAC-SHA-384, and
                         HMAC-SHA-512 with IPsec
               RFC 7693: The BLAKE2 Cryptographic Hash and Message
                         Authentication Code (MAC)
               RFC 8967:  MAC Authentication for Babel";
          }

          leaf algorithm {
            type identityref {
              base mac-algorithms;
            }
            mandatory true;
            description
              "The MAC algorithm used with this key. The
               value MUST be one of the identities
               listed with the base of 'mac-algorithms'.";
            reference
              "RFC 9046: Babel Information Model, Section 3.8";
          }

          action test {
            description
              "An operation that allows the MAC key and MAC
               algorithm to be tested to see if they produce an
               expected outcome. Input to this operation is a
               binary string and a calculated MAC (also in the
               format of a binary string) for the binary string.
               The implementation is expected to create a MAC over
               the binary string using the value and algorithm.
               The output of this operation is a binary indication
               that the calculated MAC matched the input MAC
               ('true') or the MACs did not match ('false').";
            reference
              "RFC 9046: Babel Information Model, Section 3.8";

            input {
              leaf test-string {
                type binary;
                mandatory true;
                description
                  "Input to this operation is a binary string.
                   The implementation is expected to create
                   a MAC over this string using the value and
                   the algorithm defined as part of the
                   mac-key-set.";
                reference
                  "RFC 9046: Babel Information Model, Section 3.8";
              }

              leaf mac {
                type binary;
                mandatory true;
                description
                  "Input to this operation includes a MAC.
                   The implementation is expected to calculate a MAC
                   over the string using the value and algorithm of
                   this key object and compare its calculated MAC to
                   this input MAC.";
                reference
                  "RFC 9046: Babel Information Model, Section 3.8";
              }
            }

            output {
              leaf indication {
                type boolean;
                mandatory true;
                description
                  "The output of this operation is a binary
                   indication that the calculated MAC matched the
                   input MAC ('true') or the MACs did not match
                   ('false').";
                reference
                  "RFC 9046: Babel Information Model, Section 3.8";
              }
            }
          }
        }
      }

      list dtls {
        key "name";

        description
          "A dtls object. If this object is implemented,
           it provides access to parameters related to the DTLS
           security mechanism.";
        reference
          "RFC 9046: Babel Information Model, Section 3.9";

        leaf name {
          type string;
          description
            "A string that uniquely identifies a dtls object.";
        }

        leaf default-apply {
          type boolean;
          mandatory true;
          description
            "A boolean flag indicating whether this object
             instance is applied to all new interfaces, by default.
             If 'true', this instance is applied to new interface
             instances at the time they are created by including it
             in the dtls-certs list under the interface. If 'false',
             this instance is not applied to new interface
             instances when they are created.";
          reference
            "RFC 9046: Babel Information Model, Section 3.9";
        }

        list certs {
          key "name";

          min-elements 1;
          description
            "A set of cert objects. This contains
             both certificates for this implementation to present
             for authentication and to accept from others.
             Certificates with a non-empty private key
             can be presented by this implementation for
             authentication.";
          reference
            "RFC 9046: Babel Information Model, Section 3.10";

          leaf name {
            type string;
            description
              "A unique name for this certificate that can be
               used to identify the certificate in this object
               instance, since the value is too long to be useful
               for identification. This value MUST NOT be empty
               and can only be provided when this instance is created
               (i.e., it is not subsequently writable).";
            reference
              "RFC 9046: Babel Information Model, Section 3.10";
          }

          leaf value {
            nacm:default-deny-write;
            type string;
            mandatory true;
            description
              "The certificate in Privacy-Enhanced Mail (PEM) format
               (RFC 7468). This value can only be provided when this
               instance is created and is not subsequently
               writable.";
            reference
              "RFC 9046: Babel Information Model, Section 3.10
               RFC 7468: Textual Encodings of PKIX, PKCS, and CMS
                         Structures";
          }

          leaf type {
            nacm:default-deny-write;
            type identityref {
              base dtls-cert-types;
            }
            mandatory true;
            description
              "The certificate type of this object instance.
               The value MUST be the same as one of the
               identities listed with the base 'dtls-cert-types'.
               This value can only be provided when this
               instance is created and is not subsequently
               writable.";
            reference
              "RFC 9046: Babel Information Model, Section 3.10";
          }

          leaf private-key {
            nacm:default-deny-all;
            type binary;
            mandatory true;
            description
              "The value of the private key. If this is non-empty,
               this certificate can be used by this implementation to
               provide a certificate during DTLS handshaking.";
            reference
              "RFC 9046: Babel Information Model, Section 3.10";
          }

          leaf algorithm {
            nacm:default-deny-write;
            type identityref {
              base ct:private-key-format;
            }
            mandatory true;
            description
              "Identifies the algorithm identity with which the
               private key has been encoded. This value can only be
               provided when this instance is created and is not
               subsequently writable.";
          }
        }
      }
      uses routes;
    }
  }
}

</sourcecode>
      </section>
    </section>
    <section anchor="IANA" numbered="true" toc="include" removeInRFC="false" pn="section-3">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-3.1">
        <name slugifiedName="name-uri-registration">URI Registration</name>
        <t indent="0" pn="section-3.1-1">IANA has registered the following URI in the "ns" registry                             
          of the "IETF XML Registry" <xref target="RFC3688" format="default" sectionFormat="of" derivedContent="RFC3688"/>.</t>
        <dl newline="false" spacing="compact" indent="3" pn="section-3.1-2">
          <dt pn="section-3.1-2.1">URI:</dt>
          <dd pn="section-3.1-2.2">urn:ietf:params:xml:ns:yang:ietf-babel</dd>
          <dt pn="section-3.1-2.3">Registrant Contact:</dt>
          <dd pn="section-3.1-2.4">The IESG</dd>
          <dt pn="section-3.1-2.5">XML:</dt>
          <dd pn="section-3.1-2.6">N/A; the requested URI is an XML namespace.</dd>
        </dl>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-3.2">
        <name slugifiedName="name-yang-module-name-registrati">YANG Module Name Registration</name>
        <t indent="0" pn="section-3.2-1">IANA has registered the following in the "YANG Module Names" registry <xref target="RFC6020" format="default" sectionFormat="of" derivedContent="RFC6020"/>.</t>
        <dl spacing="compact" indent="3" newline="false" pn="section-3.2-2">
          <dt pn="section-3.2-2.1">Name:</dt>
          <dd pn="section-3.2-2.2"> ietf-babel</dd>
          <dt pn="section-3.2-2.3">Namespace:</dt>
          <dd pn="section-3.2-2.4"> urn:ietf:params:xml:ns:yang:ietf-babel</dd>
          <dt pn="section-3.2-2.5">Prefix:</dt>
          <dd pn="section-3.2-2.6">babel</dd>
          <dt pn="section-3.2-2.7">Reference:</dt>
          <dd pn="section-3.2-2.8">RFC 9647</dd>
        </dl>
      </section>
    </section>
    <section anchor="Security" numbered="true" toc="include" removeInRFC="false" pn="section-4">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <t indent="0" pn="section-4-1">This section is modeled after the template defined in <xref section="3.7.1" target="RFC8407" format="default" sectionFormat="of" derivedLink="https://rfc-editor.org/rfc/rfc8407#section-3.7.1" derivedContent="RFC8407"/>.</t>
      <t indent="0" pn="section-4-2">The "ietf-babel" YANG module defines a data model that is designed to be accessed via YANG-based management
          protocols, such as NETCONF <xref target="RFC6241" format="default" sectionFormat="of" derivedContent="RFC6241"/> and RESTCONF
          <xref target="RFC8040" format="default" sectionFormat="of" derivedContent="RFC8040"/>. These
   protocols have mandatory-to-implement secure transport layers (e.g., Secure Shell (SSH) <xref target="RFC4252" format="default" sectionFormat="of" derivedContent="RFC4252"/>, TLS <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/>, and QUIC <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/>) and mandatory-to-implement mutual authentication. 
      </t>
      <t indent="0" pn="section-4-3">The <xref target="RFC8341" format="default" sectionFormat="of" derivedContent="RFC8341">Network Configuration Access Control Model (NACM)</xref> provides the means to restrict access for particular NETCONF users to a preconfigured subset of all available NETCONF
      protocol operations and content.</t>
      <t indent="0" pn="section-4-4">The security considerations outlined here are specific to the YANG data model and do not cover security considerations of the Babel protocol or its security mechanisms in "The Babel Routing Protocol" <xref target="RFC8966" format="default" sectionFormat="of" derivedContent="RFC8966"/>, "MAC Authentication for the Babel Routing Protocol" <xref target="RFC8967" format="default" sectionFormat="of" derivedContent="RFC8967"/>, and "Babel Routing Protocol over Datagram Transport Layer Security" <xref target="RFC8968" format="default" sectionFormat="of" derivedContent="RFC8968"/>. Each of these has its own Security Considerations section for considerations that are specific to it.</t>
      <t indent="0" pn="section-4-5">There are a number of data nodes defined in the YANG module that are writable/created/deleted (i.e., config true, which is the default). These data nodes may be considered sensitive or
      vulnerable in some network environments. Write operations (e.g., &lt;edit-config&gt;) to these data nodes without proper protection can have a negative effect on network operations.
      These are
      the subtrees and data nodes and their sensitivity/vulnerability from a config true perspective:</t>
      <dl indent="3" newline="false" spacing="normal" pn="section-4-6">
        <dt pn="section-4-6.1">'babel':</dt>
        <dd pn="section-4-6.2"> This container includes an 'enable' parameter that can be used to enable or disable use of Babel on a router.</dd>
        <dt pn="section-4-6.3">'babel/constants':</dt>
        <dd pn="section-4-6.4"> This container includes configuration parameters that can prevent reachability if misconfigured.</dd>
        <dt pn="section-4-6.5">'babel/interfaces':</dt>
        <dd pn="section-4-6.6"> This leaf-list has configuration parameters that can enable/disable security mechanisms and change performance characteristics of the Babel protocol. For example, enabling logging of packets and giving unintended access to the log files gives an attacker detailed knowledge of the network and allows it to launch an attack on the traffic traversing the network device.</dd>
        <dt pn="section-4-6.7">'babel/hmac' and 'babel/dtls':</dt>
        <dd pn="section-4-6.8"> These contain security credentials that influence whether incoming packets are trusted and whether outgoing packets are produced in such a way that the receiver will treat them as trusted.</dd>
      </dl>
      <t indent="0" pn="section-4-7">Some of the readable data or config false nodes in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control read access (e.g.,
      via get, get-config, or notification) to these data nodes. These are the subtrees and data nodes and their sensitivity/vulnerability from a config false perspective:</t>
      <dl indent="3" newline="false" spacing="normal" pn="section-4-8">
        <dt pn="section-4-8.1">'babel':</dt>
        <dd pn="section-4-8.2"> Access to the information in the various nodes can disclose the network topology. Additionally, the routes used by a network device may be used to mount a subsequent attack on
      traffic traversing the network device.</dd>
        <dt pn="section-4-8.3">'babel/hmac' and 'babel/dtls':</dt>
        <dd pn="section-4-8.4"> These contain security credentials, including private credentials of the router; however, it is required that these values not be readable.</dd>
      </dl>
      <t indent="0" pn="section-4-9">Some of the RPC operations in this YANG module may be considered sensitive or vulnerable in some network environments. It is thus important to control access to these operations. These are
      the operations and their sensitivity/vulnerability from an RPC operation perspective:</t>
      <t indent="0" pn="section-4-10">This model defines two actions. Resetting the statistics within an interface container would be visible to any monitoring processes, which should be designed to account for the possibility of such a reset. The "test" action allows for validation that a MAC key and MAC algorithm have been properly configured.

      The MAC key is a sensitive piece of information, and it is important to prevent an attacker that does not know the MAC key from being able to determine the MAC value by trying different input parameters. The "test" action has been designed to not reveal such information directly. Such information might also be revealed indirectly due to side channels such as the time it takes to produce a response to the action. Implementations <bcp14>SHOULD</bcp14> use a constant-time comparison between the input MAC and the locally generated MAC value for comparison in order to avoid such side channel leakage.</t>
    </section>
  </middle>
  <back>
    <references pn="section-5">
      <name slugifiedName="name-references">References</name>
      <references pn="section-5.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC4252" target="https://www.rfc-editor.org/info/rfc4252" quoteTitle="true" derivedAnchor="RFC4252">
          <front>
            <title>The Secure Shell (SSH) Authentication Protocol</title>
            <author fullname="T. Ylonen" initials="T." surname="Ylonen"/>
            <author fullname="C. Lonvick" initials="C." role="editor" surname="Lonvick"/>
            <date month="January" year="2006"/>
            <abstract>
              <t indent="0">The Secure Shell Protocol (SSH) is a protocol for secure remote login and other secure network services over an insecure network. This document describes the SSH authentication protocol framework and public key, password, and host-based client authentication methods. Additional authentication methods are described in separate documents. The SSH authentication protocol runs on top of the SSH transport layer protocol and provides a single authenticated tunnel for the SSH connection protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4252"/>
          <seriesInfo name="DOI" value="10.17487/RFC4252"/>
        </reference>
        <reference anchor="RFC4868" target="https://www.rfc-editor.org/info/rfc4868" quoteTitle="true" derivedAnchor="RFC4868">
          <front>
            <title>Using HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512 with IPsec</title>
            <author fullname="S. Kelly" initials="S." surname="Kelly"/>
            <author fullname="S. Frankel" initials="S." surname="Frankel"/>
            <date month="May" year="2007"/>
            <abstract>
              <t indent="0">This specification describes the use of Hashed Message Authentication Mode (HMAC) in conjunction with the SHA-256, SHA-384, and SHA-512 algorithms in IPsec. These algorithms may be used as the basis for data origin authentication and integrity verification mechanisms for the Authentication Header (AH), Encapsulating Security Payload (ESP), Internet Key Exchange Protocol (IKE), and IKEv2 protocols, and also as Pseudo-Random Functions (PRFs) for IKE and IKEv2. Truncated output lengths are specified for the authentication-related variants, with the corresponding algorithms designated as HMAC-SHA-256-128, HMAC-SHA-384-192, and HMAC-SHA-512-256. The PRF variants are not truncated, and are called PRF-HMAC-SHA-256, PRF-HMAC-SHA-384, and PRF-HMAC-SHA-512. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4868"/>
          <seriesInfo name="DOI" value="10.17487/RFC4868"/>
        </reference>
        <reference anchor="RFC6241" target="https://www.rfc-editor.org/info/rfc6241" quoteTitle="true" derivedAnchor="RFC6241">
          <front>
            <title>Network Configuration Protocol (NETCONF)</title>
            <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
            <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
            <date month="June" year="2011"/>
            <abstract>
              <t indent="0">The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6241"/>
          <seriesInfo name="DOI" value="10.17487/RFC6241"/>
        </reference>
        <reference anchor="RFC6991" target="https://www.rfc-editor.org/info/rfc6991" quoteTitle="true" derivedAnchor="RFC6991">
          <front>
            <title>Common YANG Data Types</title>
            <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
            <date month="July" year="2013"/>
            <abstract>
              <t indent="0">This document introduces a collection of common data types to be used with the YANG data modeling language. This document obsoletes RFC 6021.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6991"/>
          <seriesInfo name="DOI" value="10.17487/RFC6991"/>
        </reference>
        <reference anchor="RFC7693" target="https://www.rfc-editor.org/info/rfc7693" quoteTitle="true" derivedAnchor="RFC7693">
          <front>
            <title>The BLAKE2 Cryptographic Hash and Message Authentication Code (MAC)</title>
            <author fullname="M-J. Saarinen" role="editor" surname="M-J. Saarinen"/>
            <author fullname="J-P. Aumasson" surname="J-P. Aumasson"/>
            <date month="November" year="2015"/>
            <abstract>
              <t indent="0">This document describes the cryptographic hash function BLAKE2 and makes the algorithm specification and C source code conveniently available to the Internet community. BLAKE2 comes in two main flavors: BLAKE2b is optimized for 64-bit platforms and BLAKE2s for smaller architectures. BLAKE2 can be directly keyed, making it functionally equivalent to a Message Authentication Code (MAC).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7693"/>
          <seriesInfo name="DOI" value="10.17487/RFC7693"/>
        </reference>
        <reference anchor="RFC7950" target="https://www.rfc-editor.org/info/rfc7950" quoteTitle="true" derivedAnchor="RFC7950">
          <front>
            <title>The YANG 1.1 Data Modeling Language</title>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <date month="August" year="2016"/>
            <abstract>
              <t indent="0">YANG is a data modeling language used to model configuration data, state data, Remote Procedure Calls, and notifications for network management protocols. This document describes the syntax and semantics of version 1.1 of the YANG language. YANG version 1.1 is a maintenance release of the YANG language, addressing ambiguities and defects in the original specification. There are a small number of backward incompatibilities from YANG version 1. This document also specifies the YANG mappings to the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7950"/>
          <seriesInfo name="DOI" value="10.17487/RFC7950"/>
        </reference>
        <reference anchor="RFC8040" target="https://www.rfc-editor.org/info/rfc8040" quoteTitle="true" derivedAnchor="RFC8040">
          <front>
            <title>RESTCONF Protocol</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <date month="January" year="2017"/>
            <abstract>
              <t indent="0">This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8040"/>
          <seriesInfo name="DOI" value="10.17487/RFC8040"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8341" target="https://www.rfc-editor.org/info/rfc8341" quoteTitle="true" derivedAnchor="RFC8341">
          <front>
            <title>Network Configuration Access Control Model</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">The standardization of network configuration interfaces for use with the Network Configuration Protocol (NETCONF) or the RESTCONF protocol requires a structured and secure operating environment that promotes human usability and multi-vendor interoperability. There is a need for standard mechanisms to restrict NETCONF or RESTCONF protocol access for particular users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content. This document defines such an access control model.</t>
              <t indent="0">This document obsoletes RFC 6536.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="91"/>
          <seriesInfo name="RFC" value="8341"/>
          <seriesInfo name="DOI" value="10.17487/RFC8341"/>
        </reference>
        <reference anchor="RFC8343" target="https://www.rfc-editor.org/info/rfc8343" quoteTitle="true" derivedAnchor="RFC8343">
          <front>
            <title>A YANG Data Model for Interface Management</title>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">This document defines a YANG data model for the management of network interfaces. It is expected that interface-type-specific data models augment the generic interfaces data model defined in this document. The data model includes definitions for configuration and system state (status information and counters for the collection of statistics).</t>
              <t indent="0">The YANG data model in this document conforms to the Network Management Datastore Architecture (NMDA) defined in RFC 8342.</t>
              <t indent="0">This document obsoletes RFC 7223.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8343"/>
          <seriesInfo name="DOI" value="10.17487/RFC8343"/>
        </reference>
        <reference anchor="RFC8349" target="https://www.rfc-editor.org/info/rfc8349" quoteTitle="true" derivedAnchor="RFC8349">
          <front>
            <title>A YANG Data Model for Routing Management (NMDA Version)</title>
            <author fullname="L. Lhotka" initials="L." surname="Lhotka"/>
            <author fullname="A. Lindem" initials="A." surname="Lindem"/>
            <author fullname="Y. Qu" initials="Y." surname="Qu"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">This document specifies three YANG modules and one submodule. Together, they form the core routing data model that serves as a framework for configuring and managing a routing subsystem. It is expected that these modules will be augmented by additional YANG modules defining data models for control-plane protocols, route filters, and other functions. The core routing data model provides common building blocks for such extensions -- routes, Routing Information Bases (RIBs), and control-plane protocols.</t>
              <t indent="0">The YANG modules in this document conform to the Network Management Datastore Architecture (NMDA). This document obsoletes RFC 8022.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8349"/>
          <seriesInfo name="DOI" value="10.17487/RFC8349"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8966" target="https://www.rfc-editor.org/info/rfc8966" quoteTitle="true" derivedAnchor="RFC8966">
          <front>
            <title>The Babel Routing Protocol</title>
            <author fullname="J. Chroboczek" initials="J." surname="Chroboczek"/>
            <author fullname="D. Schinazi" initials="D." surname="Schinazi"/>
            <date month="January" year="2021"/>
            <abstract>
              <t indent="0">Babel is a loop-avoiding, distance-vector routing protocol that is robust and efficient both in ordinary wired networks and in wireless mesh networks. This document describes the Babel routing protocol and obsoletes RFC 6126 and RFC 7557.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8966"/>
          <seriesInfo name="DOI" value="10.17487/RFC8966"/>
        </reference>
        <reference anchor="RFC8967" target="https://www.rfc-editor.org/info/rfc8967" quoteTitle="true" derivedAnchor="RFC8967">
          <front>
            <title>MAC Authentication for the Babel Routing Protocol</title>
            <author fullname="C. Dô" initials="C." surname="Dô"/>
            <author fullname="W. Kolodziejak" initials="W." surname="Kolodziejak"/>
            <author fullname="J. Chroboczek" initials="J." surname="Chroboczek"/>
            <date month="January" year="2021"/>
            <abstract>
              <t indent="0">This document describes a cryptographic authentication mechanism for the Babel routing protocol that has provisions for replay avoidance. This document obsoletes RFC 7298.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8967"/>
          <seriesInfo name="DOI" value="10.17487/RFC8967"/>
        </reference>
        <reference anchor="RFC8968" target="https://www.rfc-editor.org/info/rfc8968" quoteTitle="true" derivedAnchor="RFC8968">
          <front>
            <title>Babel Routing Protocol over Datagram Transport Layer Security</title>
            <author fullname="A. Décimo" initials="A." surname="Décimo"/>
            <author fullname="D. Schinazi" initials="D." surname="Schinazi"/>
            <author fullname="J. Chroboczek" initials="J." surname="Chroboczek"/>
            <date month="January" year="2021"/>
            <abstract>
              <t indent="0">The Babel Routing Protocol does not contain any means to authenticate neighbours or provide integrity or confidentiality for messages sent between them. This document specifies a mechanism to ensure these properties using Datagram Transport Layer Security (DTLS).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8968"/>
          <seriesInfo name="DOI" value="10.17487/RFC8968"/>
        </reference>
        <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" quoteTitle="true" derivedAnchor="RFC9000">
          <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <date month="May" year="2021"/>
            <abstract>
              <t indent="0">This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9000"/>
          <seriesInfo name="DOI" value="10.17487/RFC9000"/>
        </reference>
        <reference anchor="RFC9046" target="https://www.rfc-editor.org/info/rfc9046" quoteTitle="true" derivedAnchor="RFC9046">
          <front>
            <title>Babel Information Model</title>
            <author fullname="B. Stark" initials="B." surname="Stark"/>
            <author fullname="M. Jethanandani" initials="M." surname="Jethanandani"/>
            <date month="June" year="2021"/>
            <abstract>
              <t indent="0">The Babel information model provides structured data elements for a Babel implementation reporting its current state and may allow limited configuration of some such data elements. This information model can be used as a basis for creating data models under various data modeling regimes. This information model only includes parameters and parameter values useful for managing Babel over IPv6.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9046"/>
          <seriesInfo name="DOI" value="10.17487/RFC9046"/>
        </reference>
        <reference anchor="RFC9147" target="https://www.rfc-editor.org/info/rfc9147" quoteTitle="true" derivedAnchor="RFC9147">
          <front>
            <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
            <date month="April" year="2022"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
              <t indent="0">This document obsoletes RFC 6347.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9147"/>
          <seriesInfo name="DOI" value="10.17487/RFC9147"/>
        </reference>
        <reference anchor="RFC9640" target="https://www.rfc-editor.org/info/rfc9640" quoteTitle="true" derivedAnchor="RFC9640">
          <front>
            <title>YANG Data Types and Groupings for Cryptography</title>
            <author initials="K" surname="Watsen" fullname="Kent Watsen">
              <organization showOnFrontPage="true"/>
            </author>
            <date month="October" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9640"/>
          <seriesInfo name="DOI" value="10.17487/RFC9640"/>
        </reference>
      </references>
      <references pn="section-5.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="RFC2104" target="https://www.rfc-editor.org/info/rfc2104" quoteTitle="true" derivedAnchor="RFC2104">
          <front>
            <title>HMAC: Keyed-Hashing for Message Authentication</title>
            <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
            <author fullname="M. Bellare" initials="M." surname="Bellare"/>
            <author fullname="R. Canetti" initials="R." surname="Canetti"/>
            <date month="February" year="1997"/>
            <abstract>
              <t indent="0">This document describes HMAC, a mechanism for message authentication using cryptographic hash functions. HMAC can be used with any iterative cryptographic hash function, e.g., MD5, SHA-1, in combination with a secret shared key. The cryptographic strength of HMAC depends on the properties of the underlying hash function. This memo provides information for the Internet community. This memo does not specify an Internet standard of any kind</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2104"/>
          <seriesInfo name="DOI" value="10.17487/RFC2104"/>
        </reference>
        <reference anchor="RFC3688" target="https://www.rfc-editor.org/info/rfc3688" quoteTitle="true" derivedAnchor="RFC3688">
          <front>
            <title>The IETF XML Registry</title>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <date month="January" year="2004"/>
            <abstract>
              <t indent="0">This document describes an IANA maintained registry for IETF standards which use Extensible Markup Language (XML) related items such as Namespaces, Document Type Declarations (DTDs), Schemas, and Resource Description Framework (RDF) Schemas.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="81"/>
          <seriesInfo name="RFC" value="3688"/>
          <seriesInfo name="DOI" value="10.17487/RFC3688"/>
        </reference>
        <reference anchor="RFC6020" target="https://www.rfc-editor.org/info/rfc6020" quoteTitle="true" derivedAnchor="RFC6020">
          <front>
            <title>YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</title>
            <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
            <date month="October" year="2010"/>
            <abstract>
              <t indent="0">YANG is a data modeling language used to model configuration and state data manipulated by the Network Configuration Protocol (NETCONF), NETCONF remote procedure calls, and NETCONF notifications. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6020"/>
          <seriesInfo name="DOI" value="10.17487/RFC6020"/>
        </reference>
        <reference anchor="RFC7468" target="https://www.rfc-editor.org/info/rfc7468" quoteTitle="true" derivedAnchor="RFC7468">
          <front>
            <title>Textual Encodings of PKIX, PKCS, and CMS Structures</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <author fullname="S. Leonard" initials="S." surname="Leonard"/>
            <date month="April" year="2015"/>
            <abstract>
              <t indent="0">This document describes and discusses the textual encodings of the Public-Key Infrastructure X.509 (PKIX), Public-Key Cryptography Standards (PKCS), and Cryptographic Message Syntax (CMS). The textual encodings are well-known, are implemented by several applications and libraries, and are widely deployed. This document articulates the de facto rules by which existing implementations operate and defines them so that future implementations can interoperate.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7468"/>
          <seriesInfo name="DOI" value="10.17487/RFC7468"/>
        </reference>
        <reference anchor="RFC8340" target="https://www.rfc-editor.org/info/rfc8340" quoteTitle="true" derivedAnchor="RFC8340">
          <front>
            <title>YANG Tree Diagrams</title>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="L. Berger" initials="L." role="editor" surname="Berger"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">This document captures the current syntax used in YANG module tree diagrams. The purpose of this document is to provide a single location for this definition. This syntax may be updated from time to time based on the evolution of the YANG language.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="215"/>
          <seriesInfo name="RFC" value="8340"/>
          <seriesInfo name="DOI" value="10.17487/RFC8340"/>
        </reference>
        <reference anchor="RFC8342" target="https://www.rfc-editor.org/info/rfc8342" quoteTitle="true" derivedAnchor="RFC8342">
          <front>
            <title>Network Management Datastore Architecture (NMDA)</title>
            <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
            <author fullname="J. Schoenwaelder" initials="J." surname="Schoenwaelder"/>
            <author fullname="P. Shafer" initials="P." surname="Shafer"/>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="R. Wilton" initials="R." surname="Wilton"/>
            <date month="March" year="2018"/>
            <abstract>
              <t indent="0">Datastores are a fundamental concept binding the data models written in the YANG data modeling language to network management protocols such as the Network Configuration Protocol (NETCONF) and RESTCONF. This document defines an architectural framework for datastores based on the experience gained with the initial simpler model, addressing requirements that were not well supported in the initial model. This document updates RFC 7950.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8342"/>
          <seriesInfo name="DOI" value="10.17487/RFC8342"/>
        </reference>
        <reference anchor="RFC8407" target="https://www.rfc-editor.org/info/rfc8407" quoteTitle="true" derivedAnchor="RFC8407">
          <front>
            <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
            <author fullname="A. Bierman" initials="A." surname="Bierman"/>
            <date month="October" year="2018"/>
            <abstract>
              <t indent="0">This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="216"/>
          <seriesInfo name="RFC" value="8407"/>
          <seriesInfo name="DOI" value="10.17487/RFC8407"/>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="https://www.w3.org/TR/xml/" quoteTitle="true" derivedAnchor="W3C.REC-xml-20081126">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <author initials="T." surname="Bray"/>
            <author initials="J." surname="Paoli"/>
            <author initials="C. M." surname="Sperberg-McQueen"/>
            <author initials="E." surname="Maler"/>
            <author initials="F." surname="Yergeau"/>
            <date month="November" year="2008"/>
          </front>
          <refcontent>W3C Recommendation REC-xml-20081126</refcontent>
        </reference>
      </references>
    </references>
    <section numbered="true" toc="include" anchor="appendix" removeInRFC="false" pn="section-appendix.a">
      <name slugifiedName="name-tree-diagram-and-example-co">Tree Diagram and Example Configurations</name>
      <t indent="0" pn="section-appendix.a-1">This section is devoted to including a complete tree diagram and
      examples that demonstrate how Babel can be configured.</t>
      <t indent="0" pn="section-appendix.a-2">
  Note that various examples are encoded using Extensible Markup
  Language (XML) <xref target="W3C.REC-xml-20081126" format="default" sectionFormat="of" derivedContent="W3C.REC-xml-20081126"/>.
</t>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a.1">
        <name slugifiedName="name-complete-tree-diagram">Complete Tree Diagram</name>
        <t indent="0" pn="section-appendix.a.1-1">This section includes the complete tree diagram for
	the Babel YANG module.
        </t>
        <sourcecode name="" type="yangtree" markers="false" pn="section-appendix.a.1-2">
module: ietf-babel

  augment /rt:routing/rt:control-plane-protocols
            /rt:control-plane-protocol:
    +--rw babel!
       +--ro version?              string
       +--rw enable                boolean
       +--ro router-id?            binary
       +--ro seqno?                uint16
       +--rw statistics-enabled?   boolean
       +--rw constants
       |  +--rw udp-port?      inet:port-number
       |  +--rw mcast-group?   inet:ip-address
       +--rw interfaces* [reference]
       |  +--rw reference               if:interface-ref
       |  +--rw enable?                 boolean
       |  +--rw metric-algorithm        identityref
       |  +--rw split-horizon?          boolean
       |  +--ro mcast-hello-seqno?      uint16
       |  +--rw mcast-hello-interval?   uint16
       |  +--rw update-interval?        uint16
       |  +--rw mac-enable?             boolean
       |  +--rw mac-key-sets*           -&gt; ../../mac-key-set/name
       |  +--rw mac-verify?             boolean
       |  +--rw dtls-enable?            boolean
       |  +--rw dtls-certs*             -&gt; ../../dtls/name
       |  +--rw dtls-cached-info?       boolean
       |  +--rw dtls-cert-prefer*       -&gt; ../../dtls/certs/type
       |  +--rw packet-log-enable?      boolean
       |  +--ro packet-log?             inet:uri
       |  +--ro statistics
       |  |  +--ro discontinuity-time    yang:date-and-time
       |  |  +--ro sent-mcast-hello?     yang:counter32
       |  |  +--ro sent-mcast-update?    yang:counter32
       |  |  +--ro sent-ucast-hello?     yang:counter32
       |  |  +--ro sent-ucast-update?    yang:counter32
       |  |  +--ro sent-ihu?             yang:counter32
       |  |  +--ro received-packets?     yang:counter32
       |  |  +---x reset
       |  |     +---w input
       |  |     |  +---w reset-at?   yang:date-and-time
       |  |     +--ro output
       |  |        +--ro reset-finished-at?   yang:date-and-time
       |  +--ro neighbor-objects* [neighbor-address]
       |     +--ro neighbor-address         inet:ip-address
       |     +--ro hello-mcast-history?     string
       |     +--ro hello-ucast-history?     string
       |     +--ro txcost?                  int32
       |     +--ro exp-mcast-hello-seqno?   union
       |     +--ro exp-ucast-hello-seqno?   union
       |     +--ro ucast-hello-seqno?       union
       |     +--ro ucast-hello-interval?    uint16
       |     +--ro rxcost?                  uint16
       |     +--ro cost?                    int32
       +--rw mac-key-set* [name]
       |  +--rw name             string
       |  +--rw default-apply?   boolean
       |  +--rw keys* [name]
       |     +--rw name          string
       |     +--rw use-send      boolean
       |     +--rw use-verify    boolean
       |     +--rw value         binary
       |     +--rw algorithm     identityref
       |     +---x test
       |        +---w input
       |        |  +---w test-string    binary
       |        |  +---w mac            binary
       |        +--ro output
       |           +--ro indication    boolean
       +--rw dtls* [name]
       |  +--rw name             string
       |  +--rw default-apply    boolean
       |  +--rw certs* [name]
       |     +--rw name           string
       |     +--rw value          string
       |     +--rw type           identityref
       |     +--rw private-key    binary
       |     +--rw algorithm      identityref
       +--ro routes* [prefix]
          +--ro prefix               inet:ip-prefix
          +--ro router-id?           binary
          +--ro neighbor?            leafref
          +--ro received-metric?     union
          +--ro calculated-metric?   union
          +--ro seqno?               uint16
          +--ro next-hop?            union
          +--ro feasible?            boolean
          +--ro selected?            boolean
</sourcecode>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a.2">
        <name slugifiedName="name-statistics-gathering-enable">Statistics Gathering Enabled</name>
        <t indent="0" pn="section-appendix.a.2-1">In this example, interface eth0 is being configured for routing protocol Babel, and statistics gathering is enabled. For security, HMAC-SHA256 is supported. Every sent Babel packet is
        signed with the key value provided, and every received Babel packet is verified with the same key value. 
        </t>
        <sourcecode type="xml" markers="false" pn="section-appendix.a.2-2">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
            xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
  &lt;interface&gt;
    &lt;name&gt;eth0&lt;/name&gt;
    &lt;type&gt;ianaift:ethernetCsmacd&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
&lt;/interfaces&gt;
&lt;routing
    xmlns="urn:ietf:params:xml:ns:yang:ietf-routing"&gt;
  &lt;control-plane-protocols&gt;
    &lt;control-plane-protocol&gt;
      &lt;type
          xmlns:babel=
          "urn:ietf:params:xml:ns:yang:ietf-babel"&gt;babel:babel&lt;/type&gt;
      &lt;name&gt;name:babel&lt;/name&gt;
      &lt;babel
          xmlns="urn:ietf:params:xml:ns:yang:ietf-babel"&gt;
        &lt;enable&gt;true&lt;/enable&gt;
        &lt;statistics-enabled&gt;true&lt;/statistics-enabled&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;eth0&lt;/reference&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;true&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
        &lt;mac-key-set&gt;
          &lt;name&gt;hmac-sha256&lt;/name&gt;
          &lt;keys&gt;
            &lt;name&gt;hmac-sha256-keys&lt;/name&gt;
            &lt;use-send&gt;true&lt;/use-send&gt;
            &lt;use-verify&gt;true&lt;/use-verify&gt;
            &lt;value&gt;base64encodedvalue==&lt;/value&gt;
            &lt;algorithm&gt;hmac-sha256&lt;/algorithm&gt;
          &lt;/keys&gt;
        &lt;/mac-key-set&gt;
      &lt;/babel&gt;
    &lt;/control-plane-protocol&gt;
  &lt;/control-plane-protocols&gt;
&lt;/routing&gt;
</sourcecode>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a.3">
        <name slugifiedName="name-automatic-detection-of-prop">Automatic Detection of Properties</name>
        <t indent="0" pn="section-appendix.a.3-1">
 In this example, babeld is configured on two interfaces:</t>
        <ul empty="true" spacing="compact" bare="false" indent="3" pn="section-appendix.a.3-2">
          <li pn="section-appendix.a.3-2.1">interface eth0</li>
          <li pn="section-appendix.a.3-2.2">interface wlan0</li>
        </ul>
        <t indent="0" pn="section-appendix.a.3-3">
   This says to run Babel on interfaces eth0 and wlan0.  Babeld will
   automatically detect that eth0 is wired and wlan0 is wireless and
   will configure the right parameters automatically.
        </t>
        <sourcecode type="xml" markers="false" pn="section-appendix.a.3-4">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
            xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
  &lt;interface&gt;
    &lt;name&gt;eth0&lt;/name&gt;
    &lt;type&gt;ianaift:ethernetCsmacd&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
  &lt;interface&gt;
    &lt;name&gt;wlan0&lt;/name&gt;
    &lt;type&gt;ianaift:ieee80211&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
&lt;/interfaces&gt;
&lt;routing
    xmlns="urn:ietf:params:xml:ns:yang:ietf-routing"&gt;
  &lt;control-plane-protocols&gt;
    &lt;control-plane-protocol&gt;
      &lt;type
          xmlns:babel=
          "urn:ietf:params:xml:ns:yang:ietf-babel"&gt;babel:babel&lt;/type&gt;
      &lt;name&gt;name:babel&lt;/name&gt;
      &lt;babel
          xmlns="urn:ietf:params:xml:ns:yang:ietf-babel"&gt;
        &lt;enable&gt;true&lt;/enable&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;eth0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;true&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;wlan0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;etx&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;false&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
      &lt;/babel&gt;
    &lt;/control-plane-protocol&gt;
  &lt;/control-plane-protocols&gt;
&lt;/routing&gt;
</sourcecode>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a.4">
        <name slugifiedName="name-override-default-properties">Override Default Properties</name>
        <t indent="0" pn="section-appendix.a.4-1">In this example, babeld is configured on three interfaces:</t>
        <ul empty="true" spacing="compact" bare="false" indent="3" pn="section-appendix.a.4-2">
          <li pn="section-appendix.a.4-2.1"> interface eth0</li>
          <li pn="section-appendix.a.4-2.2"> interface eth1 type wireless</li>
          <li pn="section-appendix.a.4-2.3"> interface tun0 type tunnel</li>
        </ul>
        <t indent="0" pn="section-appendix.a.4-3">
 Here, interface eth1 is an Ethernet bridged to a wireless radio, so
 babeld's autodetection fails, and the interface type needs to be
 configured manually.  Tunnels are not detected automatically,
 so this needs to be specified.</t>
        <t indent="0" pn="section-appendix.a.4-4">
 This is equivalent to the following:</t>
        <ul empty="true" spacing="compact" bare="false" indent="3" pn="section-appendix.a.4-5">
          <li pn="section-appendix.a.4-5.1"> interface eth0 metric-algorithm 2-out-of-3 split-horizon true</li>
          <li pn="section-appendix.a.4-5.2"> interface eth1 metric-algorithm etx split-horizon false</li>
          <li pn="section-appendix.a.4-5.3"> interface tun0 metric-algorithm 2-out-of-3 split-horizon true</li>
        </ul>
        <sourcecode type="xml" markers="false" pn="section-appendix.a.4-6">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
            xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
  &lt;interface&gt;
    &lt;name&gt;eth0&lt;/name&gt;
    &lt;type&gt;ianaift:ethernetCsmacd&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
  &lt;interface&gt;
    &lt;name&gt;eth1&lt;/name&gt;
    &lt;type&gt;ianaift:ethernetCsmacd&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
  &lt;interface&gt;
    &lt;name&gt;tun0&lt;/name&gt;
    &lt;type&gt;ianaift:tunnel&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
&lt;/interfaces&gt;
&lt;routing
    xmlns="urn:ietf:params:xml:ns:yang:ietf-routing"&gt;
  &lt;control-plane-protocols&gt;
    &lt;control-plane-protocol&gt;
      &lt;type
          xmlns:babel=
          "urn:ietf:params:xml:ns:yang:ietf-babel"&gt;babel:babel&lt;/type&gt;
      &lt;name&gt;name:babel&lt;/name&gt;
      &lt;babel
          xmlns="urn:ietf:params:xml:ns:yang:ietf-babel"&gt;
        &lt;enable&gt;true&lt;/enable&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;eth0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;true&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;eth1&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;etx&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;false&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;tun0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;true&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
      &lt;/babel&gt;
    &lt;/control-plane-protocol&gt;
  &lt;/control-plane-protocols&gt;
&lt;/routing&gt;
</sourcecode>
      </section>
      <section numbered="true" toc="include" removeInRFC="false" pn="section-appendix.a.5">
        <name slugifiedName="name-configuring-other-propertie">Configuring Other Properties</name>
        <t indent="0" pn="section-appendix.a.5-1">
 In this example, two interfaces are configured for babeld:</t>
        <ul spacing="compact" empty="true" bare="false" indent="3" pn="section-appendix.a.5-2">
          <li pn="section-appendix.a.5-2.1"> interface eth0</li>
          <li pn="section-appendix.a.5-2.2"> interface ppp0 hello-interval 30 update-interval 120</li>
        </ul>
        <t indent="0" pn="section-appendix.a.5-3">
 Here, ppp0 is a metered 3G link used for fallback connectivity.
 It runs with much higher than default time constants in order to
 avoid control traffic as much as possible.
</t>
        <sourcecode type="xml" markers="false" pn="section-appendix.a.5-4">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interfaces xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces"
            xmlns:ianaift="urn:ietf:params:xml:ns:yang:iana-if-type"&gt;
  &lt;interface&gt;
    &lt;name&gt;eth0&lt;/name&gt;
    &lt;type&gt;ianaift:ethernetCsmacd&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
  &lt;interface&gt;
    &lt;name&gt;ppp0&lt;/name&gt;
    &lt;type&gt;ianaift:ppp&lt;/type&gt;
    &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;/interface&gt;
&lt;/interfaces&gt;
&lt;routing
    xmlns="urn:ietf:params:xml:ns:yang:ietf-routing"&gt;
  &lt;control-plane-protocols&gt;
    &lt;control-plane-protocol&gt;
      &lt;type
          xmlns:babel=
          "urn:ietf:params:xml:ns:yang:ietf-babel"&gt;babel:babel&lt;/type&gt;
      &lt;name&gt;name:babel&lt;/name&gt;
      &lt;babel
          xmlns="urn:ietf:params:xml:ns:yang:ietf-babel"&gt;
        &lt;enable&gt;true&lt;/enable&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;eth0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
          &lt;split-horizon&gt;true&lt;/split-horizon&gt;
        &lt;/interfaces&gt;
        &lt;interfaces&gt;
          &lt;reference&gt;ppp0&lt;/reference&gt;
          &lt;enable&gt;true&lt;/enable&gt;
          &lt;mcast-hello-interval&gt;30&lt;/mcast-hello-interval&gt;
          &lt;update-interval&gt;120&lt;/update-interval&gt;
          &lt;metric-algorithm&gt;two-out-of-three&lt;/metric-algorithm&gt;
        &lt;/interfaces&gt;
      &lt;/babel&gt;
    &lt;/control-plane-protocol&gt;
  &lt;/control-plane-protocols&gt;
&lt;/routing&gt;
</sourcecode>
      </section>
    </section>
    <section anchor="Acknowledgements" numbered="false" toc="include" removeInRFC="false" pn="section-appendix.b">
      <name slugifiedName="name-acknowledgements">Acknowledgements</name>
      <t indent="0" pn="section-appendix.b-1"><contact fullname="Juliusz Chroboczek"/> provided most of the example configurations for babel that are shown in <xref target="appendix" format="default" sectionFormat="of" derivedContent="Appendix A"/>.</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author fullname="Mahesh Jethanandani" initials="M." surname="Jethanandani">
        <organization showOnFrontPage="true">Kloud Services</organization>
        <address>
          <postal>
            <street/>
            <city/>
            <code/>
            <region>California</region>
            <country>United States of America</country>
          </postal>
          <phone/>
          <email>mjethanandani@gmail.com</email>
        </address>
      </author>
      <author fullname="Barbara Stark" initials="B." surname="Stark">
        <organization showOnFrontPage="true">AT&amp;T</organization>
        <address>
          <postal>
            <street/>
            <city>Atlanta</city>
            <region>GA</region>
            <code/>
            <country>United States of America</country>
          </postal>
          <phone/>
          <email>barbara.stark@att.com</email>
          <uri/>
        </address>
      </author>
    </section>
  </back>
</rfc>
