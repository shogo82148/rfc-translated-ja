<?xml version='1.0' encoding='utf-8'?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" version="3" ipr="trust200902" docName="draft-ietf-lake-edhoc-23" number="9528" submissionType="IETF" category="std" consensus="true" tocDepth="2" tocInclude="true" sortRefs="true" symRefs="true" updates="" obsoletes="" xml:lang="en" prepTime="2024-03-20T00:31:13" indexInclude="true" scripts="Common,Latin">
  <link href="https://datatracker.ietf.org/doc/draft-ietf-lake-edhoc-23" rel="prev"/>
  <link href="https://dx.doi.org/10.17487/rfc9528" rel="alternate"/>
  <link href="urn:issn:2070-1721" rel="alternate"/>
  <front>
    <title abbrev="EDHOC">Ephemeral Diffie-Hellman Over COSE (EDHOC)</title>
    <seriesInfo name="RFC" value="9528" stream="IETF"/>
    <author initials="G." surname="Selander" fullname="Göran Selander">
      <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
      <address>
        <postal>
          <code>164 80</code>
          <city>Stockholm</city>
          <country>Sweden</country>
        </postal>
        <email>goran.selander@ericsson.com</email>
      </address>
    </author>
    <author initials="J" surname="Preuß Mattsson" fullname="John Preuß Mattsson">
      <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
      <address>
        <postal>
          <code>164 80</code>
          <city>Stockholm</city>
          <country>Sweden</country>
        </postal>
        <email>john.mattsson@ericsson.com</email>
      </address>
    </author>
    <author initials="F." surname="Palombini" fullname="Francesca Palombini">
      <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
      <address>
        <postal>
          <code>164 80</code>
          <city>Stockholm</city>
          <country>Sweden</country>
        </postal>
        <email>francesca.palombini@ericsson.com</email>
      </address>
    </author>
    <date month="03" year="2024"/>
    <area>sec</area>
    <workgroup>lake</workgroup>
    <keyword>AKE</keyword>
    <keyword>LAKE</keyword>
    <keyword>COSE</keyword>
    <keyword>OSCORE</keyword>
    <keyword>lightweight authenticated key exchange</keyword>
    <keyword>constrained node networks</keyword>
    <keyword>IoT security</keyword>
    <abstract pn="section-abstract">
      <t indent="0" pn="section-abstract-1">This document specifies Ephemeral Diffie-Hellman Over COSE (EDHOC), a very compact and lightweight authenticated Diffie-Hellman key exchange with ephemeral keys. EDHOC provides mutual authentication, forward secrecy, and identity protection. EDHOC is intended for usage in constrained scenarios, and a main use case is to establish an Object Security for Constrained RESTful Environments (OSCORE) security context. By reusing CBOR Object Signing and Encryption (COSE) for cryptography, Concise Binary Object Representation (CBOR) for encoding, and Constrained Application Protocol (CoAP) for transport, the additional code size can be kept very low.</t>
    </abstract>
    <boilerplate>
      <section anchor="status-of-memo" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.1">
        <name slugifiedName="name-status-of-this-memo">Status of This Memo</name>
        <t indent="0" pn="section-boilerplate.1-1">
            This is an Internet Standards Track document.
        </t>
        <t indent="0" pn="section-boilerplate.1-2">
            This document is a product of the Internet Engineering Task Force
            (IETF).  It represents the consensus of the IETF community.  It has
            received public review and has been approved for publication by
            the Internet Engineering Steering Group (IESG).  Further
            information on Internet Standards is available in Section 2 of 
            RFC 7841.
        </t>
        <t indent="0" pn="section-boilerplate.1-3">
            Information about the current status of this document, any
            errata, and how to provide feedback on it may be obtained at
            <eref target="https://www.rfc-editor.org/info/rfc9528" brackets="none"/>.
        </t>
      </section>
      <section anchor="copyright" numbered="false" removeInRFC="false" toc="exclude" pn="section-boilerplate.2">
        <name slugifiedName="name-copyright-notice">Copyright Notice</name>
        <t indent="0" pn="section-boilerplate.2-1">
            Copyright (c) 2024 IETF Trust and the persons identified as the
            document authors. All rights reserved.
        </t>
        <t indent="0" pn="section-boilerplate.2-2">
            This document is subject to BCP 78 and the IETF Trust's Legal
            Provisions Relating to IETF Documents
            (<eref target="https://trustee.ietf.org/license-info" brackets="none"/>) in effect on the date of
            publication of this document. Please review these documents
            carefully, as they describe your rights and restrictions with
            respect to this document. Code Components extracted from this
            document must include Revised BSD License text as described in
            Section 4.e of the Trust Legal Provisions and are provided without
            warranty as described in the Revised BSD License.
        </t>
      </section>
    </boilerplate>
    <toc>
      <section anchor="toc" numbered="false" removeInRFC="false" toc="exclude" pn="section-toc.1">
        <name slugifiedName="name-table-of-contents">Table of Contents</name>
        <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1">
          <li pn="section-toc.1-1.1">
            <t indent="0" pn="section-toc.1-1.1.1"><xref derivedContent="1" format="counter" sectionFormat="of" target="section-1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-introduction">Introduction</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.1.2">
              <li pn="section-toc.1-1.1.2.1">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.1.1"><xref derivedContent="1.1" format="counter" sectionFormat="of" target="section-1.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-motivation">Motivation</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.2">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.2.1"><xref derivedContent="1.2" format="counter" sectionFormat="of" target="section-1.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-size-examples">Message Size Examples</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.3">
                <t indent="0" keepWithNext="true" pn="section-toc.1-1.1.2.3.1"><xref derivedContent="1.3" format="counter" sectionFormat="of" target="section-1.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-document-structure">Document Structure</xref></t>
              </li>
              <li pn="section-toc.1-1.1.2.4">
                <t indent="0" pn="section-toc.1-1.1.2.4.1"><xref derivedContent="1.4" format="counter" sectionFormat="of" target="section-1.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-terminology-and-requirement">Terminology and Requirements Language</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.2">
            <t indent="0" pn="section-toc.1-1.2.1"><xref derivedContent="2" format="counter" sectionFormat="of" target="section-2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-outline">EDHOC Outline</xref></t>
          </li>
          <li pn="section-toc.1-1.3">
            <t indent="0" pn="section-toc.1-1.3.1"><xref derivedContent="3" format="counter" sectionFormat="of" target="section-3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-protocol-elements">Protocol Elements</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.3.2">
              <li pn="section-toc.1-1.3.2.1">
                <t indent="0" pn="section-toc.1-1.3.2.1.1"><xref derivedContent="3.1" format="counter" sectionFormat="of" target="section-3.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-general">General</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.2">
                <t indent="0" pn="section-toc.1-1.3.2.2.1"><xref derivedContent="3.2" format="counter" sectionFormat="of" target="section-3.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-method">Method</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.3">
                <t indent="0" pn="section-toc.1-1.3.2.3.1"><xref derivedContent="3.3" format="counter" sectionFormat="of" target="section-3.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-connection-identifiers">Connection Identifiers</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.4">
                <t indent="0" pn="section-toc.1-1.3.2.4.1"><xref derivedContent="3.4" format="counter" sectionFormat="of" target="section-3.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transport">Transport</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.5">
                <t indent="0" pn="section-toc.1-1.3.2.5.1"><xref derivedContent="3.5" format="counter" sectionFormat="of" target="section-3.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authentication-parameters">Authentication Parameters</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.6">
                <t indent="0" pn="section-toc.1-1.3.2.6.1"><xref derivedContent="3.6" format="counter" sectionFormat="of" target="section-3.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cipher-suites">Cipher Suites</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.7">
                <t indent="0" pn="section-toc.1-1.3.2.7.1"><xref derivedContent="3.7" format="counter" sectionFormat="of" target="section-3.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-ephemeral-public-keys">Ephemeral Public Keys</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.8">
                <t indent="0" pn="section-toc.1-1.3.2.8.1"><xref derivedContent="3.8" format="counter" sectionFormat="of" target="section-3.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-external-authorization-data">External Authorization Data (EAD)</xref></t>
              </li>
              <li pn="section-toc.1-1.3.2.9">
                <t indent="0" pn="section-toc.1-1.3.2.9.1"><xref derivedContent="3.9" format="counter" sectionFormat="of" target="section-3.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-application-profile">Application Profile</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.4">
            <t indent="0" pn="section-toc.1-1.4.1"><xref derivedContent="4" format="counter" sectionFormat="of" target="section-4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-key-derivation">Key Derivation</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.4.2">
              <li pn="section-toc.1-1.4.2.1">
                <t indent="0" pn="section-toc.1-1.4.2.1.1"><xref derivedContent="4.1" format="counter" sectionFormat="of" target="section-4.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-keys-for-edhoc-message-proc">Keys for EDHOC Message Processing</xref></t>
              </li>
              <li pn="section-toc.1-1.4.2.2">
                <t indent="0" pn="section-toc.1-1.4.2.2.1"><xref derivedContent="4.2" format="counter" sectionFormat="of" target="section-4.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-keys-for-edhoc-applications">Keys for EDHOC Applications</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.5">
            <t indent="0" pn="section-toc.1-1.5.1"><xref derivedContent="5" format="counter" sectionFormat="of" target="section-5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-message-formatting-and-proc">Message Formatting and Processing</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.5.2">
              <li pn="section-toc.1-1.5.2.1">
                <t indent="0" pn="section-toc.1-1.5.2.1.1"><xref derivedContent="5.1" format="counter" sectionFormat="of" target="section-5.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-processing-ou">EDHOC Message Processing Outline</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.2">
                <t indent="0" pn="section-toc.1-1.5.2.2.1"><xref derivedContent="5.2" format="counter" sectionFormat="of" target="section-5.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-1">EDHOC Message 1</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.3">
                <t indent="0" pn="section-toc.1-1.5.2.3.1"><xref derivedContent="5.3" format="counter" sectionFormat="of" target="section-5.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-2">EDHOC Message 2</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.4">
                <t indent="0" pn="section-toc.1-1.5.2.4.1"><xref derivedContent="5.4" format="counter" sectionFormat="of" target="section-5.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-3">EDHOC Message 3</xref></t>
              </li>
              <li pn="section-toc.1-1.5.2.5">
                <t indent="0" pn="section-toc.1-1.5.2.5.1"><xref derivedContent="5.5" format="counter" sectionFormat="of" target="section-5.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-4">EDHOC Message 4</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.6">
            <t indent="0" pn="section-toc.1-1.6.1"><xref derivedContent="6" format="counter" sectionFormat="of" target="section-6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-error-handling">Error Handling</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.6.2">
              <li pn="section-toc.1-1.6.2.1">
                <t indent="0" pn="section-toc.1-1.6.2.1.1"><xref derivedContent="6.1" format="counter" sectionFormat="of" target="section-6.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-success">Success</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.2">
                <t indent="0" pn="section-toc.1-1.6.2.2.1"><xref derivedContent="6.2" format="counter" sectionFormat="of" target="section-6.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unspecified-error">Unspecified Error</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.3">
                <t indent="0" pn="section-toc.1-1.6.2.3.1"><xref derivedContent="6.3" format="counter" sectionFormat="of" target="section-6.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-wrong-selected-cipher-suite">Wrong Selected Cipher Suite</xref></t>
              </li>
              <li pn="section-toc.1-1.6.2.4">
                <t indent="0" pn="section-toc.1-1.6.2.4.1"><xref derivedContent="6.4" format="counter" sectionFormat="of" target="section-6.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unknown-credential-referenc">Unknown Credential Referenced</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.7">
            <t indent="0" pn="section-toc.1-1.7.1"><xref derivedContent="7" format="counter" sectionFormat="of" target="section-7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-message-deduplication">EDHOC Message Deduplication</xref></t>
          </li>
          <li pn="section-toc.1-1.8">
            <t indent="0" pn="section-toc.1-1.8.1"><xref derivedContent="8" format="counter" sectionFormat="of" target="section-8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-compliance-requirements">Compliance Requirements</xref></t>
          </li>
          <li pn="section-toc.1-1.9">
            <t indent="0" pn="section-toc.1-1.9.1"><xref derivedContent="9" format="counter" sectionFormat="of" target="section-9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-considerations">Security Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.9.2">
              <li pn="section-toc.1-1.9.2.1">
                <t indent="0" pn="section-toc.1-1.9.2.1.1"><xref derivedContent="9.1" format="counter" sectionFormat="of" target="section-9.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-security-properties">Security Properties</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.2">
                <t indent="0" pn="section-toc.1-1.9.2.2.1"><xref derivedContent="9.2" format="counter" sectionFormat="of" target="section-9.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cryptographic-consideration">Cryptographic Considerations</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.3">
                <t indent="0" pn="section-toc.1-1.9.2.3.1"><xref derivedContent="9.3" format="counter" sectionFormat="of" target="section-9.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cipher-suites-and-cryptogra">Cipher Suites and Cryptographic Algorithms</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.4">
                <t indent="0" pn="section-toc.1-1.9.2.4.1"><xref derivedContent="9.4" format="counter" sectionFormat="of" target="section-9.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-post-quantum-considerations">Post-Quantum Considerations</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.5">
                <t indent="0" pn="section-toc.1-1.9.2.5.1"><xref derivedContent="9.5" format="counter" sectionFormat="of" target="section-9.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unprotected-data-and-privac">Unprotected Data and Privacy</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.6">
                <t indent="0" pn="section-toc.1-1.9.2.6.1"><xref derivedContent="9.6" format="counter" sectionFormat="of" target="section-9.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-updated-internet-threat-mod">Updated Internet Threat Model Considerations</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.7">
                <t indent="0" pn="section-toc.1-1.9.2.7.1"><xref derivedContent="9.7" format="counter" sectionFormat="of" target="section-9.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-denial-of-service">Denial of Service</xref></t>
              </li>
              <li pn="section-toc.1-1.9.2.8">
                <t indent="0" pn="section-toc.1-1.9.2.8.1"><xref derivedContent="9.8" format="counter" sectionFormat="of" target="section-9.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-implementation-consideratio">Implementation Considerations</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.10">
            <t indent="0" pn="section-toc.1-1.10.1"><xref derivedContent="10" format="counter" sectionFormat="of" target="section-10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-iana-considerations">IANA Considerations</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.10.2">
              <li pn="section-toc.1-1.10.2.1">
                <t indent="0" pn="section-toc.1-1.10.2.1.1"><xref derivedContent="10.1" format="counter" sectionFormat="of" target="section-10.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-exporter-label-regist">EDHOC Exporter Label Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.2">
                <t indent="0" pn="section-toc.1-1.10.2.2.1"><xref derivedContent="10.2" format="counter" sectionFormat="of" target="section-10.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-cipher-suites-registr">EDHOC Cipher Suites Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.3">
                <t indent="0" pn="section-toc.1-1.10.2.3.1"><xref derivedContent="10.3" format="counter" sectionFormat="of" target="section-10.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-method-type-registry">EDHOC Method Type Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.4">
                <t indent="0" pn="section-toc.1-1.10.2.4.1"><xref derivedContent="10.4" format="counter" sectionFormat="of" target="section-10.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-error-codes-registry">EDHOC Error Codes Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.5">
                <t indent="0" pn="section-toc.1-1.10.2.5.1"><xref derivedContent="10.5" format="counter" sectionFormat="of" target="section-10.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc-external-authorizatio">EDHOC External Authorization Data Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.6">
                <t indent="0" pn="section-toc.1-1.10.2.6.1"><xref derivedContent="10.6" format="counter" sectionFormat="of" target="section-10.6"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose-header-parameters-regi">COSE Header Parameters Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.7">
                <t indent="0" pn="section-toc.1-1.10.2.7.1"><xref derivedContent="10.7" format="counter" sectionFormat="of" target="section-10.7"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-well-known-uri-registry">Well-Known URI Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.8">
                <t indent="0" pn="section-toc.1-1.10.2.8.1"><xref derivedContent="10.8" format="counter" sectionFormat="of" target="section-10.8"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-media-types-registry">Media Types Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.9">
                <t indent="0" pn="section-toc.1-1.10.2.9.1"><xref derivedContent="10.9" format="counter" sectionFormat="of" target="section-10.9"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-coap-content-formats-regist">CoAP Content-Formats Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.10">
                <t indent="0" pn="section-toc.1-1.10.2.10.1"><xref derivedContent="10.10" format="counter" sectionFormat="of" target="section-10.10"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-resource-type-rt-link-targe">Resource Type (rt=) Link Target Attribute Values Registry</xref></t>
              </li>
              <li pn="section-toc.1-1.10.2.11">
                <t indent="0" pn="section-toc.1-1.10.2.11.1"><xref derivedContent="10.11" format="counter" sectionFormat="of" target="section-10.11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-expert-review-instructions">Expert Review Instructions</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.11">
            <t indent="0" pn="section-toc.1-1.11.1"><xref derivedContent="11" format="counter" sectionFormat="of" target="section-11"/>. <xref derivedContent="" format="title" sectionFormat="of" target="name-references">References</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.11.2">
              <li pn="section-toc.1-1.11.2.1">
                <t indent="0" pn="section-toc.1-1.11.2.1.1"><xref derivedContent="11.1" format="counter" sectionFormat="of" target="section-11.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-normative-references">Normative References</xref></t>
              </li>
              <li pn="section-toc.1-1.11.2.2">
                <t indent="0" pn="section-toc.1-1.11.2.2.1"><xref derivedContent="11.2" format="counter" sectionFormat="of" target="section-11.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-informative-references">Informative References</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.12">
            <t indent="0" pn="section-toc.1-1.12.1"><xref derivedContent="Appendix A" format="default" sectionFormat="of" target="section-appendix.a"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-use-with-oscore-and-transfe">Use with OSCORE and Transfer over CoAP</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.12.2">
              <li pn="section-toc.1-1.12.2.1">
                <t indent="0" pn="section-toc.1-1.12.2.1.1"><xref derivedContent="A.1" format="counter" sectionFormat="of" target="section-appendix.a.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-deriving-the-oscore-securit">Deriving the OSCORE Security Context</xref></t>
              </li>
              <li pn="section-toc.1-1.12.2.2">
                <t indent="0" pn="section-toc.1-1.12.2.2.1"><xref derivedContent="A.2" format="counter" sectionFormat="of" target="section-appendix.a.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-transferring-edhoc-over-coa">Transferring EDHOC over CoAP</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.13">
            <t indent="0" pn="section-toc.1-1.13.1"><xref derivedContent="Appendix B" format="default" sectionFormat="of" target="section-appendix.b"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-compact-representation">Compact Representation</xref></t>
          </li>
          <li pn="section-toc.1-1.14">
            <t indent="0" pn="section-toc.1-1.14.1"><xref derivedContent="Appendix C" format="default" sectionFormat="of" target="section-appendix.c"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-use-of-cbor-cddl-and-cose-i">Use of CBOR, CDDL, and COSE in EDHOC</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.14.2">
              <li pn="section-toc.1-1.14.2.1">
                <t indent="0" pn="section-toc.1-1.14.2.1.1"><xref derivedContent="C.1" format="counter" sectionFormat="of" target="section-appendix.c.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cbor-and-cddl">CBOR and CDDL</xref></t>
              </li>
              <li pn="section-toc.1-1.14.2.2">
                <t indent="0" pn="section-toc.1-1.14.2.2.1"><xref derivedContent="C.2" format="counter" sectionFormat="of" target="section-appendix.c.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cddl-definitions">CDDL Definitions</xref></t>
              </li>
              <li pn="section-toc.1-1.14.2.3">
                <t indent="0" pn="section-toc.1-1.14.2.3.1"><xref derivedContent="C.3" format="counter" sectionFormat="of" target="section-appendix.c.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-cose">COSE</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.15">
            <t indent="0" pn="section-toc.1-1.15.1"><xref derivedContent="Appendix D" format="default" sectionFormat="of" target="section-appendix.d"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-authentication-related-veri">Authentication-Related Verifications</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.15.2">
              <li pn="section-toc.1-1.15.2.1">
                <t indent="0" pn="section-toc.1-1.15.2.1.1"><xref derivedContent="D.1" format="counter" sectionFormat="of" target="section-appendix.d.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-validating-the-authenticati">Validating the Authentication Credential</xref></t>
              </li>
              <li pn="section-toc.1-1.15.2.2">
                <t indent="0" pn="section-toc.1-1.15.2.2.1"><xref derivedContent="D.2" format="counter" sectionFormat="of" target="section-appendix.d.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-identities">Identities</xref></t>
              </li>
              <li pn="section-toc.1-1.15.2.3">
                <t indent="0" pn="section-toc.1-1.15.2.3.1"><xref derivedContent="D.3" format="counter" sectionFormat="of" target="section-appendix.d.3"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-certification-path-and-trus">Certification Path and Trust Anchors</xref></t>
              </li>
              <li pn="section-toc.1-1.15.2.4">
                <t indent="0" pn="section-toc.1-1.15.2.4.1"><xref derivedContent="D.4" format="counter" sectionFormat="of" target="section-appendix.d.4"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-revocation-status">Revocation Status</xref></t>
              </li>
              <li pn="section-toc.1-1.15.2.5">
                <t indent="0" pn="section-toc.1-1.15.2.5.1"><xref derivedContent="D.5" format="counter" sectionFormat="of" target="section-appendix.d.5"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-unauthenticated-operation">Unauthenticated Operation</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.16">
            <t indent="0" pn="section-toc.1-1.16.1"><xref derivedContent="Appendix E" format="default" sectionFormat="of" target="section-appendix.e"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-use-of-external-authorizati">Use of External Authorization Data</xref></t>
          </li>
          <li pn="section-toc.1-1.17">
            <t indent="0" pn="section-toc.1-1.17.1"><xref derivedContent="Appendix F" format="default" sectionFormat="of" target="section-appendix.f"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-application-profile-example">Application Profile Example</xref></t>
          </li>
          <li pn="section-toc.1-1.18">
            <t indent="0" pn="section-toc.1-1.18.1"><xref derivedContent="Appendix G" format="default" sectionFormat="of" target="section-appendix.g"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-long-plaintext_2">Long PLAINTEXT_2</xref></t>
          </li>
          <li pn="section-toc.1-1.19">
            <t indent="0" pn="section-toc.1-1.19.1"><xref derivedContent="Appendix H" format="default" sectionFormat="of" target="section-appendix.h"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-edhoc_keyupdate">EDHOC_KeyUpdate</xref></t>
          </li>
          <li pn="section-toc.1-1.20">
            <t indent="0" pn="section-toc.1-1.20.1"><xref derivedContent="Appendix I" format="default" sectionFormat="of" target="section-appendix.i"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-example-protocol-state-mach">Example Protocol State Machine</xref></t>
            <ul bare="true" empty="true" indent="2" spacing="compact" pn="section-toc.1-1.20.2">
              <li pn="section-toc.1-1.20.2.1">
                <t indent="0" pn="section-toc.1-1.20.2.1.1"><xref derivedContent="I.1" format="counter" sectionFormat="of" target="section-appendix.i.1"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-initiator-state-machine">Initiator State Machine</xref></t>
              </li>
              <li pn="section-toc.1-1.20.2.2">
                <t indent="0" pn="section-toc.1-1.20.2.2.1"><xref derivedContent="I.2" format="counter" sectionFormat="of" target="section-appendix.i.2"/>.  <xref derivedContent="" format="title" sectionFormat="of" target="name-responder-state-machine">Responder State Machine</xref></t>
              </li>
            </ul>
          </li>
          <li pn="section-toc.1-1.21">
            <t indent="0" pn="section-toc.1-1.21.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.j"/><xref derivedContent="" format="title" sectionFormat="of" target="name-acknowledgments">Acknowledgments</xref></t>
          </li>
          <li pn="section-toc.1-1.22">
            <t indent="0" pn="section-toc.1-1.22.1"><xref derivedContent="" format="none" sectionFormat="of" target="section-appendix.k"/><xref derivedContent="" format="title" sectionFormat="of" target="name-authors-addresses">Authors' Addresses</xref></t>
          </li>
        </ul>
      </section>
    </toc>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" removeInRFC="false" toc="include" pn="section-1">
      <name slugifiedName="name-introduction">Introduction</name>
      <section anchor="motivation" numbered="true" removeInRFC="false" toc="include" pn="section-1.1">
        <name slugifiedName="name-motivation">Motivation</name>
        <t indent="0" pn="section-1.1-1">Many Internet of Things (IoT) deployments require technologies that are highly performant in constrained environments <xref target="RFC7228" format="default" sectionFormat="of" derivedContent="RFC7228"/>. IoT devices may be constrained in various ways, including memory, storage, processing capacity, and power. The connectivity for these settings may also exhibit constraints, such as unreliable and lossy channels, highly restricted bandwidth, and dynamic topology. The IETF has acknowledged this problem by standardizing a range of lightweight protocols and enablers designed for the IoT, including CoAP <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/>, CBOR <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>, and Static Context Header Compression (SCHC) <xref target="RFC8724" format="default" sectionFormat="of" derivedContent="RFC8724"/>.</t>
        <t indent="0" pn="section-1.1-2">The need for special protocols targeting constrained IoT deployments extends also to the security domain <xref target="I-D.ietf-lake-reqs" format="default" sectionFormat="of" derivedContent="LAKE-REQS"/>. Important characteristics in constrained environments are the number of round trips and protocol message sizes, which (if kept low) can contribute to good performance by enabling transport over a small number of radio frames, reducing latency due to fragmentation, duty cycles, etc. Another important criterion is code size, which may be prohibitively large for certain deployments due to device capabilities or network load during firmware updates. Some IoT deployments also need to support a variety of underlying transport technologies, potentially even with a single connection.</t>
        <t indent="0" pn="section-1.1-3">Some security solutions for such settings exist already. COSE <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/> specifies basic application-layer security services efficiently encoded in CBOR. Another example is OSCORE  <xref target="RFC8613" format="default" sectionFormat="of" derivedContent="RFC8613"/>, which is a lightweight communication security extension to CoAP using CBOR and COSE. In order to establish good quality cryptographic keys for security protocols such as COSE and OSCORE, the two endpoints may run an authenticated Diffie-Hellman key exchange protocol, from which shared secret keying material can be derived. Such a key exchange protocol should also be lightweight to prevent bad performance in case of repeated use, e.g., due to device rebooting or frequent rekeying for security reasons or to avoid latencies in a network formation setting with many devices authenticating at the same time.</t>
        <t indent="0" pn="section-1.1-4">This document specifies Ephemeral Diffie-Hellman Over COSE (EDHOC), a lightweight authenticated key exchange protocol providing good security properties including forward secrecy, identity protection, and cipher suite negotiation. Authentication can be based on raw public keys (RPKs) or public key certificates and requires the application to provide input on how to verify that endpoints are trusted. This specification supports the referencing of credentials in order to reduce message overhead, but credentials may alternatively be embedded in the messages.
EDHOC does not currently support Pre-Shared Key (PSK) authentication as authentication with static Diffie-Hellman (DH) public keys by reference produces equally small message sizes but with much simpler key distribution and identity protection.</t>
        <t indent="0" pn="section-1.1-5">EDHOC makes use of known protocol constructions, such as SIGn-and-MAc <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, the Noise XX pattern <xref target="Noise" format="default" sectionFormat="of" derivedContent="Noise"/>, and Extract-and-Expand <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/>. EDHOC uses COSE for cryptography and identification of credentials (including COSE_Key, CBOR Web Token (CWT), CWT Claims Set (CCS), X.509, and CBOR-encoded X.509 (C509) certificates; see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>). COSE provides crypto agility and enables the use of future algorithms and credential types targeting IoT.</t>
        <t indent="0" pn="section-1.1-6">EDHOC is designed for highly constrained settings, making it especially suitable for low-power networks <xref target="RFC8376" format="default" sectionFormat="of" derivedContent="RFC8376"/> such as Cellular IoT, IPv6 over the TSCH mode of IEEE 802.15.4e (6TiSCH), and LoRaWAN. A main objective for EDHOC is to be a lightweight authenticated key exchange for OSCORE, i.e., to provide authentication and session key establishment for IoT use cases such as those built on CoAP <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/> involving 'things' with embedded microcontrollers, sensors, and actuators. By reusing the same lightweight primitives as OSCORE (CBOR, COSE, and CoAP), the additional code size can be kept very low. Note that while CBOR and COSE primitives are built into the protocol messages, EDHOC is not bound to a particular transport.</t>
        <t indent="0" pn="section-1.1-7">A typical setting is when one of the endpoints is constrained or in a constrained network and the other endpoint is a node on the Internet (such as a mobile phone). Thing-to-thing interactions over constrained networks are also relevant since both endpoints would then benefit from the lightweight properties of the protocol. EDHOC could, e.g., be run when a device connects for the first time or to establish fresh keys that are not revealed by a later compromise of the long-term keys.</t>
      </section>
      <section anchor="message-size-examples" numbered="true" removeInRFC="false" toc="include" pn="section-1.2">
        <name slugifiedName="name-message-size-examples">Message Size Examples</name>
        <t indent="0" pn="section-1.2-1">Examples of EDHOC message sizes are shown in <xref target="tab-sizes" format="default" sectionFormat="of" derivedContent="Table 1"/>, which use different kinds of authentication keys and COSE header parameters for identification, including static Diffie-Hellman keys or signature keys, either in CWT/CCS <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/> identified by a key identifier using 'kid' <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/> or in X.509 certificates identified by a hash value using 'x5t' <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/>. EDHOC always uses ephemeral-ephemeral key exchange. As a comparison, in the case of RPK authentication and when transferred in CoAP, the EDHOC message size can be less than 1/7 of the DTLS 1.3 handshake <xref target="RFC9147" format="default" sectionFormat="of" derivedContent="RFC9147"/> with Ephemeral Elliptic Curve Diffie-Hellman (ECDHE) and connection ID; see <xref target="I-D.ietf-iotops-security-protocol-comparison" format="default" sectionFormat="of" derivedContent="CoAP-SEC-PROT"/>.</t>
        <table anchor="tab-sizes" align="center" pn="table-1">
          <name slugifiedName="name-examples-of-edhoc-message-s">Examples of EDHOC Message Sizes in Bytes</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1"/>
              <th colspan="2" align="left" rowspan="1">Static DH Keys</th>
              <th colspan="2" align="left" rowspan="1">Signature Keys</th>
            </tr>
            <tr>
              <th align="left" colspan="1" rowspan="1"/>
              <th align="right" colspan="1" rowspan="1">kid</th>
              <th align="right" colspan="1" rowspan="1">x5t</th>
              <th align="right" colspan="1" rowspan="1">kid</th>
              <th align="right" colspan="1" rowspan="1">x5t</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">message_1</td>
              <td align="right" colspan="1" rowspan="1">37</td>
              <td align="right" colspan="1" rowspan="1">37</td>
              <td align="right" colspan="1" rowspan="1">37</td>
              <td align="right" colspan="1" rowspan="1">37</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">message_2</td>
              <td align="right" colspan="1" rowspan="1">45</td>
              <td align="right" colspan="1" rowspan="1">58</td>
              <td align="right" colspan="1" rowspan="1">102</td>
              <td align="right" colspan="1" rowspan="1">115</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">message_3</td>
              <td align="right" colspan="1" rowspan="1">19</td>
              <td align="right" colspan="1" rowspan="1">33</td>
              <td align="right" colspan="1" rowspan="1">77</td>
              <td align="right" colspan="1" rowspan="1">90</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">Total</td>
              <td align="right" colspan="1" rowspan="1">101</td>
              <td align="right" colspan="1" rowspan="1">128</td>
              <td align="right" colspan="1" rowspan="1">216</td>
              <td align="right" colspan="1" rowspan="1">242</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="document-structure" numbered="true" removeInRFC="false" toc="include" pn="section-1.3">
        <name slugifiedName="name-document-structure">Document Structure</name>
        <t indent="0" pn="section-1.3-1">The remainder of the document is organized as follows: <xref target="background" format="default" sectionFormat="of" derivedContent="Section 2"/> outlines EDHOC authenticated with signature keys; <xref target="overview" format="default" sectionFormat="of" derivedContent="Section 3"/> describes the protocol elements of EDHOC, including formatting of the ephemeral public keys; <xref target="key-der" format="default" sectionFormat="of" derivedContent="Section 4"/> specifies the key derivation; <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/> specifies message processing for EDHOC authenticated with signature keys or static Diffie-Hellman keys; <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/> describes the error messages; <xref target="duplication" format="default" sectionFormat="of" derivedContent="Section 7"/> describes EDHOC support for transport that does not handle message duplication; and <xref target="mti" format="default" sectionFormat="of" derivedContent="Section 8"/> lists compliance requirements. Note that normative text is also used in appendices, in particular <xref target="transfer" format="default" sectionFormat="of" derivedContent="Appendix A"/>.</t>
      </section>
      <section anchor="term" numbered="true" removeInRFC="false" toc="include" pn="section-1.4">
        <name slugifiedName="name-terminology-and-requirement">Terminology and Requirements Language</name>
        <t indent="0" pn="section-1.4-1">
    The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
    "<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
    described in BCP 14 <xref target="RFC2119" format="default" sectionFormat="of" derivedContent="RFC2119"/> <xref target="RFC8174" format="default" sectionFormat="of" derivedContent="RFC8174"/> 
    when, and only when, they appear in all capitals, as shown here.
        </t>
        <t indent="0" pn="section-1.4-2">Readers are expected to be familiar with the terms and
        concepts described in CBOR <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>, CBOR
        Sequences <xref target="RFC8742" format="default" sectionFormat="of" derivedContent="RFC8742"/>, COSE Structures and
        Processing <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, COSE Algorithms <xref target="RFC9053" format="default" sectionFormat="of" derivedContent="RFC9053"/>, CWT and CCS <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/>, and the Concise Data Definition Language
        (CDDL) <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/>, which is used to express
        CBOR data structures. Examples of CBOR and CDDL are provided
        in <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>. When referring to CBOR, this
        specification always refers to Deterministically Encoded CBOR,
        as specified in Sections <xref target="RFC8949" section="4.2.1" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8949#section-4.2.1" derivedContent="RFC8949"/> and <xref target="RFC8949" section="4.2.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8949#section-4.2.2" derivedContent="RFC8949"/> of <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>. The single output from authenticated
        encryption (including the authentication tag) is called
        "ciphertext", following <xref target="RFC5116" format="default" sectionFormat="of" derivedContent="RFC5116"/>.</t>
      </section>
    </section>
    <section anchor="background" numbered="true" removeInRFC="false" toc="include" pn="section-2">
      <name slugifiedName="name-edhoc-outline">EDHOC Outline</name>
      <t indent="0" pn="section-2-1">EDHOC supports different authentication methods of the ephemeral-ephemeral Diffie-Hellman key exchange. This document specifies authentication methods based on signature keys and static Diffie-Hellman keys. This section outlines the signature-key-based method. Further details of protocol elements and other authentication methods are provided in the remainder of this document.</t>
      <t indent="0" pn="section-2-2">SIGn-and-MAc (SIGMA) is a family of theoretical protocols with a number of variants <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>. Like in Internet Key Exchange Protocol Version 2 (IKEv2) <xref target="RFC7296" format="default" sectionFormat="of" derivedContent="RFC7296"/> and (D)TLS 1.3 <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/> <xref target="RFC9147" format="default" sectionFormat="of" derivedContent="RFC9147"/>, EDHOC authenticated with signature keys is built on a variant of the SIGMA protocol, SIGMA-I, which provides identity protection against active attacks on the party initiating the protocol. Also like IKEv2, EDHOC implements the MAC-then-Sign variant of the SIGMA-I protocol. The message flow (excluding an optional fourth message) is shown in <xref target="fig-sigma" format="default" sectionFormat="of" derivedContent="Figure 1"/>.</t>
      <figure anchor="fig-sigma" align="left" suppress-title="false" pn="figure-1">
        <name slugifiedName="name-mac-then-sign-variant-of-th">MAC-then-Sign Variant of the SIGMA-I Protocol Used by the EDHOC Method 0</name>
        <artset pn="section-2-3.1">
          <artwork type="svg" align="center" pn="section-2-3.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 560 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
              <path d="M 8,48 L 8,176" fill="none" stroke="black"/>
              <path d="M 552,48 L 552,176" fill="none" stroke="black"/>
              <path d="M 8,64 L 544,64" fill="none" stroke="black"/>
              <path d="M 16,112 L 552,112" fill="none" stroke="black"/>
              <path d="M 8,160 L 544,160" fill="none" stroke="black"/>
              <polygon class="arrowhead" points="552,160 540,154.4 540,165.6" fill="black" transform="rotate(0,544,160)"/>
              <polygon class="arrowhead" points="552,64 540,58.4 540,69.6" fill="black" transform="rotate(0,544,64)"/>
              <polygon class="arrowhead" points="24,112 12,106.4 12,117.6" fill="black" transform="rotate(180,16,112)"/>
              <g class="text">
                <text x="40" y="36">Initiator</text>
                <text x="520" y="36">Responder</text>
                <text x="280" y="52">G_X</text>
                <text x="76" y="100">G_Y,</text>
                <text x="116" y="100">Enc(</text>
                <text x="180" y="100">ID_CRED_R,</text>
                <text x="244" y="100">Sig(</text>
                <text x="276" y="100">R;</text>
                <text x="308" y="100">MAC(</text>
                <text x="360" y="100">CRED_R,</text>
                <text x="412" y="100">G_X,</text>
                <text x="448" y="100">G_Y</text>
                <text x="472" y="100">)</text>
                <text x="488" y="100">)</text>
                <text x="504" y="100">)</text>
                <text x="96" y="148">AEAD(</text>
                <text x="164" y="148">ID_CRED_I,</text>
                <text x="228" y="148">Sig(</text>
                <text x="260" y="148">I;</text>
                <text x="292" y="148">MAC(</text>
                <text x="344" y="148">CRED_I,</text>
                <text x="396" y="148">G_Y,</text>
                <text x="432" y="148">G_X</text>
                <text x="456" y="148">)</text>
                <text x="472" y="148">)</text>
                <text x="488" y="148">)</text>
              </g>
            </svg>
          </artwork>
          <artwork type="ascii-art" align="center" pn="section-2-3.1.2">
Initiator                                                   Responder
|                                G_X                                |
+------------------------------------------------------------------&gt;|
|                                                                   |
|      G_Y, Enc( ID_CRED_R, Sig( R; MAC( CRED_R, G_X, G_Y ) ) )     |
|&lt;------------------------------------------------------------------+
|                                                                   |
|        AEAD( ID_CRED_I, Sig( I; MAC( CRED_I, G_Y, G_X ) ) )       |
+------------------------------------------------------------------&gt;|
|                                                                   |
</artwork>
        </artset>
      </figure>
      <t indent="0" pn="section-2-4">The parties exchanging messages in an EDHOC session are called the Initiator (I) and the Responder (R), where the Initiator sends message_1 (see <xref target="overview" format="default" sectionFormat="of" derivedContent="Section 3"/>). They exchange ephemeral public keys, compute a shared secret session key PRK_out, and derive symmetric application keys used to protect application data.</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2-5">
        <li pn="section-2-5.1">G_X and G_Y are the Elliptic Curve Diffie-Hellman (ECDH) ephemeral public keys of I and R, respectively.</li>
        <li pn="section-2-5.2">CRED_I and CRED_R are the authentication credentials containing the public authentication keys of I and R, respectively.</li>
        <li pn="section-2-5.3">ID_CRED_I and ID_CRED_R are used to identify and optionally transport the credentials of I and R, respectively.</li>
        <li pn="section-2-5.4">Sig(I; . ) and Sig(R; . ) denote signatures made with the private authentication key of I and R, respectively.</li>
        <li pn="section-2-5.5">Enc(), AEAD(), and MAC() denote encryption, Authenticated Encryption with Associated Data, and Message Authentication Code -- crypto algorithms applied with keys derived from one or more shared secrets calculated during the protocol.</li>
      </ul>
      <t indent="0" pn="section-2-6">In order to create a "full-fledged" protocol, some additional protocol elements are needed. This specification adds:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-2-7">
        <li pn="section-2-7.1">transcript hashes (hashes of message data), TH_2, TH_3, and TH_4, used for key derivation and as additional authenticated data,</li>
        <li pn="section-2-7.2">computationally independent keys derived from the ECDH shared secret and used for authenticated encryption of different messages,</li>
        <li pn="section-2-7.3">an optional fourth message giving key confirmation to I in deployments where no protected application data is sent from R to I,</li>
        <li pn="section-2-7.4">a keying material exporter and a key update function with forward secrecy,</li>
        <li pn="section-2-7.5">secure negotiation of the cipher suite,</li>
        <li pn="section-2-7.6">method types, error handling, and padding,</li>
        <li pn="section-2-7.7">the selection of connection identifiers, C_I and C_R, which may be used in EDHOC to identify the protocol state, and</li>
        <li pn="section-2-7.8">transport of external authorization data.</li>
      </ul>
      <t indent="0" pn="section-2-8">EDHOC is designed to encrypt and integrity protect as much information as possible. Symmetric keys and random material used in EDHOC are derived using EDHOC_KDF with as much previous information as possible; see <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>. EDHOC is furthermore designed to be as compact and lightweight as possible, in terms of message sizes, processing, and the ability to reuse already existing CBOR, COSE, and CoAP libraries. Like in (D)TLS, authentication is the responsibility of the application. EDHOC identifies (and optionally transports) authentication credentials and provides proof-of-possession of the private authentication key.</t>
      <t indent="0" pn="section-2-9">To simplify for implementors, the use of CBOR, CDDL, and COSE in EDHOC is summarized in <xref target="CBORandCOSE" format="default" sectionFormat="of" derivedContent="Appendix C"/>. Test vectors, including CBOR diagnostic notation, are provided in <xref target="RFC9529" format="default" sectionFormat="of" derivedContent="RFC9529"/>.</t>
    </section>
    <section anchor="overview" numbered="true" removeInRFC="false" toc="include" pn="section-3">
      <name slugifiedName="name-protocol-elements">Protocol Elements</name>
      <section anchor="general" numbered="true" removeInRFC="false" toc="include" pn="section-3.1">
        <name slugifiedName="name-general">General</name>
        <t indent="0" pn="section-3.1-1">The EDHOC protocol consists of three mandatory messages (message_1, message_2, and message_3), an optional fourth message (message_4), and an error message, between an Initiator (I) and a Responder (R). The odd messages are sent by I, the even by R. Both I and R can send error messages.
The roles have slightly different security properties that should be considered when the roles are assigned; see <xref target="sec-prop" format="default" sectionFormat="of" derivedContent="Section 9.1"/>.
All EDHOC messages are CBOR Sequences <xref target="RFC8742" format="default" sectionFormat="of" derivedContent="RFC8742"/> and are defined to be deterministically encoded CBOR as specified in <xref target="RFC8949" sectionFormat="of" section="4.2.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8949#section-4.2.1" derivedContent="RFC8949"/>. <xref target="fig-flow" format="default" sectionFormat="of" derivedContent="Figure 2"/> illustrates an EDHOC message flow with the optional fourth message as well as the content of each message. The protocol elements in the figure are introduced in Sections <xref target="overview" format="counter" sectionFormat="of" derivedContent="3"/> and <xref target="asym" format="counter" sectionFormat="of" derivedContent="5"/>. Message formatting and processing are specified in Sections <xref target="asym" format="counter" sectionFormat="of" derivedContent="5"/> and <xref target="error" format="counter" sectionFormat="of" derivedContent="6"/>.</t>
        <t indent="0" pn="section-3.1-2">Application data may be protected using the agreed application algorithms (AEAD, hash) in the selected cipher suite (see <xref target="cs" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), and the application can make use of the established connection identifiers C_I and C_R (see <xref target="ci" format="default" sectionFormat="of" derivedContent="Section 3.3"/>). Media types that may be used for EDHOC are defined in <xref target="media-type" format="default" sectionFormat="of" derivedContent="Section 10.8"/>.</t>
        <t indent="0" pn="section-3.1-3">The Initiator can derive symmetric application keys after creating EDHOC message_3; see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>. Protected application data can therefore be sent in parallel or together with EDHOC message_3. EDHOC message_4 is typically not sent.</t>
        <figure anchor="fig-flow" align="left" suppress-title="false" pn="figure-2">
          <name slugifiedName="name-edhoc-message-flow-includin">EDHOC Message Flow Including the Optional Fourth Message</name>
          <artset pn="section-3.1-4.1">
            <artwork type="svg" align="center" pn="section-3.1-4.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 560 288" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                <path d="M 8,48 L 8,272" fill="none" stroke="black"/>
                <path d="M 552,48 L 552,272" fill="none" stroke="black"/>
                <path d="M 8,64 L 544,64" fill="none" stroke="black"/>
                <path d="M 16,128 L 552,128" fill="none" stroke="black"/>
                <path d="M 8,192 L 544,192" fill="none" stroke="black"/>
                <polygon class="arrowhead" points="552,192 540,186.4 540,197.6" fill="black" transform="rotate(0,544,192)"/>
                <polygon class="arrowhead" points="552,64 540,58.4 540,69.6" fill="black" transform="rotate(0,544,64)"/>
                <polygon class="arrowhead" points="24,128 12,122.4 12,133.6" fill="black" transform="rotate(180,16,128)"/>
                <g class="text">
                  <text x="40" y="36">Initiator</text>
                  <text x="520" y="36">Responder</text>
                  <text x="176" y="52">METHOD,</text>
                  <text x="248" y="52">SUITES_I,</text>
                  <text x="308" y="52">G_X,</text>
                  <text x="348" y="52">C_I,</text>
                  <text x="392" y="52">EAD_1</text>
                  <text x="280" y="84">message_1</text>
                  <text x="84" y="116">G_Y,</text>
                  <text x="124" y="116">Enc(</text>
                  <text x="164" y="116">C_R,</text>
                  <text x="228" y="116">ID_CRED_R,</text>
                  <text x="352" y="116">Signature_or_MAC_2,</text>
                  <text x="456" y="116">EAD_2</text>
                  <text x="488" y="116">)</text>
                  <text x="280" y="148">message_2</text>
                  <text x="128" y="180">AEAD(</text>
                  <text x="196" y="180">ID_CRED_I,</text>
                  <text x="320" y="180">Signature_or_MAC_3,</text>
                  <text x="424" y="180">EAD_3</text>
                  <text x="456" y="180">)</text>
                  <text x="280" y="212">message_3</text>
                  <text x="248" y="244">AEAD(</text>
                  <text x="296" y="244">EAD_4</text>
                  <text x="328" y="244">)</text>
                  <text x="20" y="260">&lt;-</text>
                  <text x="40" y="260">-</text>
                  <text x="56" y="260">-</text>
                  <text x="72" y="260">-</text>
                  <text x="88" y="260">-</text>
                  <text x="104" y="260">-</text>
                  <text x="120" y="260">-</text>
                  <text x="136" y="260">-</text>
                  <text x="152" y="260">-</text>
                  <text x="168" y="260">-</text>
                  <text x="184" y="260">-</text>
                  <text x="200" y="260">-</text>
                  <text x="216" y="260">-</text>
                  <text x="232" y="260">-</text>
                  <text x="248" y="260">-</text>
                  <text x="264" y="260">-</text>
                  <text x="280" y="260">-</text>
                  <text x="296" y="260">-</text>
                  <text x="312" y="260">-</text>
                  <text x="328" y="260">-</text>
                  <text x="344" y="260">-</text>
                  <text x="360" y="260">-</text>
                  <text x="376" y="260">-</text>
                  <text x="392" y="260">-</text>
                  <text x="408" y="260">-</text>
                  <text x="424" y="260">-</text>
                  <text x="440" y="260">-</text>
                  <text x="456" y="260">-</text>
                  <text x="472" y="260">-</text>
                  <text x="488" y="260">-</text>
                  <text x="504" y="260">-</text>
                  <text x="520" y="260">-</text>
                  <text x="536" y="260">-</text>
                  <text x="280" y="276">message_4</text>
                </g>
              </svg>
            </artwork>
            <artwork type="ascii-art" align="center" pn="section-3.1-4.1.2">
Initiator                                                   Responder
|                 METHOD, SUITES_I, G_X, C_I, EAD_1                 |
+------------------------------------------------------------------&gt;|
|                             message_1                             |
|                                                                   |
|       G_Y, Enc( C_R, ID_CRED_R, Signature_or_MAC_2, EAD_2 )       |
|&lt;------------------------------------------------------------------+
|                             message_2                             |
|                                                                   |
|            AEAD( ID_CRED_I, Signature_or_MAC_3, EAD_3 )           |
+------------------------------------------------------------------&gt;|
|                             message_3                             |
|                                                                   |
|                           AEAD( EAD_4 )                           |
|&lt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
|                             message_4                             |
</artwork>
          </artset>
        </figure>
      </section>
      <section anchor="method" numbered="true" removeInRFC="false" toc="include" pn="section-3.2">
        <name slugifiedName="name-method">Method</name>
        <t indent="0" pn="section-3.2-1">The data item METHOD in message_1 (see <xref target="asym-msg1-form" format="default" sectionFormat="of" derivedContent="Section 5.2.1"/>) is an integer specifying the authentication method. EDHOC currently supports authentication with signature or static Diffie-Hellman keys, as defined in the four authentication methods: 0, 1, 2, and 3; see <xref target="tab-method-types" format="default" sectionFormat="of" derivedContent="Table 2"/>. When using a static Diffie-Hellman key, the authentication is provided by a Message Authentication Code (MAC) computed from an ephemeral-static ECDH shared secret that enables significant reductions in message sizes. Note that, also in the static Diffie-Hellman-based authentication methods, there is an ephemeral-ephemeral Diffie-Hellman key exchange.</t>
        <t indent="0" pn="section-3.2-2">The Initiator and Responder need to have agreed on a single method to be used for EDHOC; see <xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>.</t>
        <table anchor="tab-method-types" align="center" pn="table-2">
          <name slugifiedName="name-authentication-keys-for-met">Authentication Keys for Method Types</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Method Type Value</th>
              <th align="left" colspan="1" rowspan="1">Initiator Authentication Key</th>
              <th align="left" colspan="1" rowspan="1">Responder Authentication Key</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="right" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">Signature Key</td>
              <td align="left" colspan="1" rowspan="1">Signature Key</td>
            </tr>
            <tr>
              <td align="right" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">Signature Key</td>
              <td align="left" colspan="1" rowspan="1">Static DH Key</td>
            </tr>
            <tr>
              <td align="right" colspan="1" rowspan="1">2</td>
              <td align="left" colspan="1" rowspan="1">Static DH Key</td>
              <td align="left" colspan="1" rowspan="1">Signature Key</td>
            </tr>
            <tr>
              <td align="right" colspan="1" rowspan="1">3</td>
              <td align="left" colspan="1" rowspan="1">Static DH Key</td>
              <td align="left" colspan="1" rowspan="1">Static DH Key</td>
            </tr>
            <tr>
              <td align="right" colspan="1" rowspan="1">23</td>
              <td align="left" colspan="1" rowspan="1">Reserved</td>
              <td align="left" colspan="1" rowspan="1">Reserved</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-3.2-4">EDHOC does not have a dedicated message field to indicate the protocol version. Breaking changes to EDHOC can be introduced by specifying and registering new methods.</t>
      </section>
      <section anchor="ci" numbered="true" removeInRFC="false" toc="include" pn="section-3.3">
        <name slugifiedName="name-connection-identifiers">Connection Identifiers</name>
        <t indent="0" pn="section-3.3-1">EDHOC includes the selection of connection identifiers (C_I and C_R) identifying a connection for which keys are agreed.</t>
        <t indent="0" pn="section-3.3-2">Connection identifiers may be used to correlate EDHOC messages and facilitate the retrieval of protocol state during an EDHOC session (see <xref target="transport" format="default" sectionFormat="of" derivedContent="Section 3.4"/>) or may be used in applications of EDHOC, e.g., in OSCORE (see <xref target="ci-oscore" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/>). The connection identifiers do not have any cryptographic purpose in EDHOC and only facilitate the retrieval of security data associated with the protocol state.</t>
        <t indent="0" pn="section-3.3-3">Connection identifiers in EDHOC are intrinsically byte strings. Most constrained devices only have a few connections for which short identifiers may be sufficient. In some cases, minimum length identifiers are necessary to comply with overhead requirements. However, CBOR byte strings -- with the exception of the empty byte string h'', which encodes as one byte (0x40) -- are encoded as two or more bytes. To enable one-byte encoding of certain byte strings while maintaining CBOR encoding, EDHOC represents certain identifiers as CBOR integers on the wire; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>.</t>
        <section anchor="selection-of-connection-identifiers" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.3.1">
          <name slugifiedName="name-selection-of-connection-ide">Selection of Connection Identifiers</name>
          <t indent="0" pn="section-3.3.1-1">C_I and C_R are chosen by I and R, respectively. The Initiator selects C_I and sends it in message_1 for the Responder to use as a reference to the connection in communications with the Initiator. The Responder selects C_R and sends it in message_2 for the Initiator to use as a reference to the connection in communications with the Responder.</t>
          <t indent="0" pn="section-3.3.1-2">If connection identifiers are used by an application protocol for which EDHOC establishes keys, then the selected connection identifiers <bcp14>SHALL</bcp14> adhere to the requirements for that protocol; see <xref target="ci-oscore" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/> for an example.</t>
        </section>
        <section anchor="bstr-repr" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.3.2">
          <name slugifiedName="name-representation-of-byte-stri">Representation of Byte String Identifiers</name>
          <t indent="0" pn="section-3.3.2-1">To allow identifiers with minimal overhead on the wire, certain byte strings used in connection identifiers and credential identifiers (see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>) are defined to have integer representations.</t>
          <t indent="0" pn="section-3.3.2-2">The integers with one-byte CBOR encoding are -24, ..., 23; see <xref target="fig-int-one-byte" format="default" sectionFormat="of" derivedContent="Figure 3"/>.</t>
          <figure anchor="fig-int-one-byte" align="left" suppress-title="false" pn="figure-3">
            <name slugifiedName="name-one-byte-cbor-encoded-integ">One-Byte CBOR-Encoded Integers</name>
            <artwork align="center" pn="section-3.3.2-3.1">
Integer:  -24  -23  ... -11  ...  -2   -1    0    1  ...  15  ...  23
Encoding:  37   36  ...  2A  ...  21   20   00   01  ...  0F  ...  17
</artwork>
          </figure>
          <t indent="0" pn="section-3.3.2-4">The byte strings that coincide with a one-byte CBOR encoding of an integer <bcp14>MUST</bcp14> be represented by the CBOR encoding of that integer. Other byte strings are simply encoded as CBOR byte strings.</t>
          <t indent="0" pn="section-3.3.2-5">For example:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.2-6">
            <li pn="section-3.3.2-6.1">0x21 is represented by 0x21 (CBOR encoding of the integer -2), not by 0x4121 (CBOR encoding of the byte string 0x21).</li>
            <li pn="section-3.3.2-6.2">0x0D is represented by 0x0D (CBOR encoding of the integer 13), not by 0x410D (CBOR encoding of the byte string 0x0D).</li>
            <li pn="section-3.3.2-6.3">0x18 is represented by 0x4118 (CBOR encoding of the byte string 0x18).</li>
            <li pn="section-3.3.2-6.4">0x38 is represented by 0x4138 (CBOR encoding of the byte string 0x38).</li>
            <li pn="section-3.3.2-6.5">0xABCD is represented by 0x42ABCD (CBOR encoding of the byte string 0xABCD).</li>
          </ul>
          <t indent="0" pn="section-3.3.2-7">One may view this representation of byte strings as a transport encoding, i.e., a byte string that parses as the one-byte CBOR encoding of an integer (i.e., integer in the interval -24, ..., 23) is just copied directly into the message, and a byte string that does not is encoded as a CBOR byte string during transport.</t>
          <aside pn="section-3.3.2-8">
            <t indent="0" pn="section-3.3.2-8.1">Implementation Note: When implementing the byte string identifier representation, in some programming languages, it can help to define a new type or other data structure, which (in its user-facing API) behaves like a byte string but when serializing to CBOR produces a CBOR byte string or a CBOR integer depending on its value.</t>
          </aside>
        </section>
        <section anchor="ci-oscore" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.3.3">
          <name slugifiedName="name-use-of-connection-identifie">Use of Connection Identifiers with OSCORE</name>
          <t indent="0" pn="section-3.3.3-1">For OSCORE, the choice of connection identifier results in the endpoint selecting its Recipient ID (see <xref target="RFC8613" section="3.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8613#section-3.1" derivedContent="RFC8613"/>) for which certain uniqueness requirements apply (see <xref target="RFC8613" section="3.3" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8613#section-3.3" derivedContent="RFC8613"/>). Therefore, the Initiator and Responder <bcp14>MUST NOT</bcp14> select connection identifiers such that it results in the same OSCORE Recipient ID. Since the connection identifier is a byte string, it is converted to an OSCORE Recipient ID equal to the byte string.</t>
          <t indent="0" pn="section-3.3.3-2">Examples:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.3.3-3">
            <li pn="section-3.3.3-3.1">A connection identifier 0xFF (represented in the EDHOC message as 0x41FF; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>) is converted to the OSCORE Recipient ID 0xFF.</li>
            <li pn="section-3.3.3-3.2">A connection identifier 0x21 (represented in the EDHOC message as 0x21; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>) is converted to the OSCORE Recipient ID 0x21.</li>
          </ul>
        </section>
      </section>
      <section anchor="transport" numbered="true" removeInRFC="false" toc="include" pn="section-3.4">
        <name slugifiedName="name-transport">Transport</name>
        <t indent="0" pn="section-3.4-1">Cryptographically, EDHOC does not put requirements on the underlying layers. Received messages are processed as the expected next message according to the protocol state; see <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/>. If processing fails for any reason, then typically an error message is attempted to be sent and the EDHOC session is aborted.</t>
        <t indent="0" pn="section-3.4-2">EDHOC is not bound to a particular transport layer and can even be used in environments without IP. Ultimately, the application is free to choose how to transport EDHOC messages including errors. In order to avoid unnecessary message processing or protocol termination, it is <bcp14>RECOMMENDED</bcp14> to use reliable transport, such as CoAP in reliable mode, which is the default transport; see <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>. In general, the transport <bcp14>SHOULD</bcp14> handle:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.4-3">
          <li pn="section-3.4-3.1">message loss,</li>
          <li pn="section-3.4-3.2">message duplication (see <xref target="duplication" format="default" sectionFormat="of" derivedContent="Section 7"/> for an alternative),</li>
          <li pn="section-3.4-3.3">flow control,</li>
          <li pn="section-3.4-3.4">congestion control,</li>
          <li pn="section-3.4-3.5">fragmentation and reassembly,</li>
          <li pn="section-3.4-3.6">demultiplexing EDHOC messages from other types of messages,</li>
          <li pn="section-3.4-3.7">denial-of-service mitigation, and</li>
          <li pn="section-3.4-3.8">message correlation (see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>).</li>
        </ul>
        <t indent="0" pn="section-3.4-4">EDHOC does not require error-free transport since a change in message content is detected through the transcript hashes in a subsequent integrity verification; see <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/>. The transport does not require additional means to handle message reordering because of the lockstep processing of EDHOC.</t>
        <t indent="0" pn="section-3.4-5">EDHOC is designed to enable an authenticated key exchange with small messages, where the minimum message sizes are of the order illustrated in the first column of <xref target="tab-sizes" format="default" sectionFormat="of" derivedContent="Table 1"/>. There is no maximum message size specified by the protocol; for example, this is dependent on the size of the authentication credentials (if they are transported, see <xref target="auth-key-id" format="default" sectionFormat="of" derivedContent="Section 3.5"/>). The encryption of very large content in message_2 when using certain hash algorithms is described in <xref target="large-plaintext_2" format="default" sectionFormat="of" derivedContent="Appendix G"/>.</t>
        <t indent="0" pn="section-3.4-6">The use of transport is specified in the application profile, which in particular, may specify limitations in message sizes; see <xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>.</t>
        <section anchor="ci-edhoc" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.4.1">
          <name slugifiedName="name-edhoc-message-correlation">EDHOC Message Correlation</name>
          <t indent="0" pn="section-3.4.1-1">Correlation between EDHOC messages is needed to facilitate the retrieval of the protocol state and security context during an EDHOC session. It is also helpful for the Responder to get an indication that a received EDHOC message is the beginning of a new EDHOC session, such that no existing protocol state or security context needs to be retrieved.</t>
          <t indent="0" pn="section-3.4.1-2">Correlation may be based on existing mechanisms in the transport protocol; for example, the CoAP Token may be used to correlate EDHOC messages in a CoAP response and in an associated CoAP request. The connection identifiers may also be used to correlate EDHOC messages.</t>
          <t indent="0" pn="section-3.4.1-3">If correlation between consecutive messages is not provided by other means, then the transport binding <bcp14>SHOULD</bcp14> mandate prepending of an appropriate connection identifier (when available from the EDHOC protocol) to the EDHOC message. If message_1 indication is not provided by other means, then the transport binding <bcp14>SHOULD</bcp14> mandate prepending of message_1 with the CBOR simple value <tt>true</tt> (0xf5).</t>
          <t indent="0" pn="section-3.4.1-4">Transport of EDHOC in CoAP payloads is described in <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>, including how to use connection identifiers and message_1 indication with CoAP. A similar construction is possible for other client-server protocols. Protocols that do not provide any correlation at all can prescribe prepending of the peer's connection identifier to all messages.</t>
          <t indent="0" pn="section-3.4.1-5">Note that correlation between EDHOC messages may be obtained without transport support or connection identifiers, for example, if the endpoints only accept a single instance of the protocol at a time and execute conditionally on a correct sequence of messages.</t>
        </section>
      </section>
      <section anchor="auth-key-id" numbered="true" removeInRFC="false" toc="include" pn="section-3.5">
        <name slugifiedName="name-authentication-parameters">Authentication Parameters</name>
        <t indent="0" pn="section-3.5-1">EDHOC supports various settings for how the other endpoint's public key for authentication may be transported, identified, and trusted. We shall use the term "authentication key" to mean key used for authentication in general, or specifically, the public key, when there is no risk for confusion.</t>
        <t indent="0" pn="section-3.5-2">EDHOC performs the following authentication-related operations:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5-3">
          <li pn="section-3.5-3.1">EDHOC transports information about credentials in ID_CRED_I and ID_CRED_R (described in <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>). Based on this information, the authentication credentials CRED_I and CRED_R (described in <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>) can be obtained. EDHOC may also transport certain authentication-related information as external authorization data (see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>).</li>
          <li pn="section-3.5-3.2">
            <t indent="0" pn="section-3.5-3.2.1">EDHOC uses the authentication credentials in two ways (see Sections <xref target="asym-msg2-proc" format="counter" sectionFormat="of" derivedContent="5.3.2"/> and <xref target="asym-msg3-proc" format="counter" sectionFormat="of" derivedContent="5.4.2"/>):
            </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5-3.2.2">
              <li pn="section-3.5-3.2.2.1">The authentication credential is input to the integrity verification using the MAC fields.</li>
              <li pn="section-3.5-3.2.2.2">The authentication key of the authentication credential is used with the Signature_or_MAC field to verify proof-of-possession of the private key.</li>
            </ul>
          </li>
        </ul>
        <t indent="0" pn="section-3.5-4">Other authentication-related verifications are out of scope for EDHOC and are the responsibility of the application. In particular, the authentication credential needs to be validated in the context of the connection for which EDHOC is used; see <xref target="auth-validation" format="default" sectionFormat="of" derivedContent="Appendix D"/>. EDHOC <bcp14>MUST</bcp14> allow the application to read received information about credentials in ID_CRED_R and ID_CRED_I. EDHOC <bcp14>MUST</bcp14> have access to the authentication key and the authentication credential.</t>
        <t indent="0" pn="section-3.5-5">Note that the type of authentication key, the type of authentication credential, and the identification of the credential have a large impact on the message size. For example, the Signature_or_MAC field is much smaller with a static DH key than with a signature key. A CWT Claims Set (CCS) is much smaller than a self-signed certificate / CWT, but if it is possible to reference the credential with a COSE header like 'kid', then that is in turn much smaller than a CCS.</t>
        <section anchor="auth-keys" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.5.1">
          <name slugifiedName="name-authentication-keys">Authentication Keys</name>
          <t indent="0" pn="section-3.5.1-1">The authentication key <bcp14>MUST</bcp14> be a signature key or a static Diffie-Hellman key. The Initiator and Responder <bcp14>MAY</bcp14> use different types of authentication keys, e.g., one uses a signature key and the other uses a static Diffie-Hellman key.</t>
          <t indent="0" pn="section-3.5.1-2">The authentication key algorithm needs to be compatible with the method and the selected cipher suite (see <xref target="cs" format="default" sectionFormat="of" derivedContent="Section 3.6"/>). The authentication key algorithm needs to be compatible with the EDHOC key exchange algorithm when static Diffie-Hellman authentication is used and compatible with the EDHOC signature algorithm when signature authentication is used.</t>
          <t indent="0" pn="section-3.5.1-3">Note that for most signature algorithms, the signature is determined jointly by the signature algorithm and the authentication key algorithm. When using static Diffie-Hellman keys, the Initiator's and the Responder's private authentication keys are denoted as I and R, respectively, and the public authentication keys are denoted G_I and G_R, respectively.</t>
          <t indent="0" pn="section-3.5.1-4">For X.509 certificates, the authentication key is represented by a SubjectPublicKeyInfo field, which also contains information about authentication key algorithm. For CWT and CCS (see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>), the authentication key is represented by a 'cnf' claim <xref target="RFC8747" format="default" sectionFormat="of" derivedContent="RFC8747"/> containing a COSE_Key <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, which contains information about authentication key algorithm. In EDHOC, a raw public key (RPK) is an authentication key encoded as a COSE_Key wrapped in a CCS, an example is given in <xref target="fig-ccs" format="default" sectionFormat="of" derivedContent="Figure 4"/>.</t>
        </section>
        <section anchor="auth-cred" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.5.2">
          <name slugifiedName="name-authentication-credentials">Authentication Credentials</name>
          <t indent="0" pn="section-3.5.2-1">The authentication credentials, CRED_I and CRED_R, contain the public authentication key of the Initiator and Responder, respectively.
We use the notation CRED_x to refer to CRED_I or CRED_R.
Requirements on CRED_x applies both to CRED_I and to CRED_R.
The authentication credential typically also contains other parameters that needs to be verified by the application (see <xref target="auth-validation" format="default" sectionFormat="of" derivedContent="Appendix D"/>) and in particular information about the identity ("subject") of the endpoint to prevent misbinding attacks (see <xref target="identities" format="default" sectionFormat="of" derivedContent="Appendix D.2"/>).</t>
          <t indent="0" pn="section-3.5.2-2">EDHOC relies on COSE for identification of credentials (see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>), for example, X.509 certificates <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/>, C509 certificates <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>, CWTs <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/>, and CCSs <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/>. When the identified credential is a chain or a bag, the authentication credential CRED_x is just the end entity X.509 or C509 certificate / CWT. In the choice between a chain or a bag, it is <bcp14>RECOMMENDED</bcp14> to use a chain, since the certificates in a bag are unordered and may contain self-signed and extraneous certificates, which can add complexity to the process of extracting the end entity certificate. The Initiator and Responder <bcp14>MAY</bcp14> use different types of authentication credentials, e.g., one uses an RPK and the other uses a public key certificate.</t>
          <t indent="0" pn="section-3.5.2-3">Since CRED_R is used in the integrity verification (see <xref target="asym-msg2-proc" format="default" sectionFormat="of" derivedContent="Section 5.3.2"/>), it needs to be specified such that it is identical when used by the Initiator or Responder. Similarly for CRED_I, see <xref target="asym-msg3-proc" format="default" sectionFormat="of" derivedContent="Section 5.4.2"/>. The Initiator and Responder are expected to agree on the specific encoding of the authentication credentials; see <xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>. It is <bcp14>RECOMMENDED</bcp14> that the COSE 'kid' parameter, when used to identify the authentication credential, refers to such a specific encoding of the authentication credential. The Initiator and Responder <bcp14>SHOULD</bcp14> use an available authentication credential without re-encoding, i.e. an authentication credential transported in EDHOC by value, or otherwise provisioned, <bcp14>SHOULD</bcp14> be used as is. If for some reason re-encoding of an authentication credential passed by reference may occur, then a potential common encoding for CBOR-based credentials is deterministically encoded CBOR, as specified in Sections <xref target="RFC8949" section="4.2.1" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8949#section-4.2.1" derivedContent="RFC8949"/> and <xref target="RFC8949" section="4.2.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8949#section-4.2.2" derivedContent="RFC8949"/> of <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>.</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.2-4">
            <li pn="section-3.5.2-4.1">When the authentication credential is an X.509 certificate, CRED_x <bcp14>SHALL</bcp14> be the DER-encoded certificate, encoded as a bstr <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/>.</li>
            <li pn="section-3.5.2-4.2">When the authentication credential is a C509 certificate, CRED_x <bcp14>SHALL</bcp14> be the C509 certificate <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>.</li>
            <li pn="section-3.5.2-4.3">When the authentication credential is a CWT including a COSE_Key, CRED_x <bcp14>SHALL</bcp14> be the untagged CWT.</li>
            <li pn="section-3.5.2-4.4">
              <t indent="0" pn="section-3.5.2-4.4.1">When the authentication credential includes a COSE_Key but is not in a CWT, CRED_x <bcp14>SHALL</bcp14> be an untagged CCS. This is how RPKs are encoded, see <xref target="fig-ccs" format="default" sectionFormat="of" derivedContent="Figure 4"/> for an example.
              </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.2-4.4.2">
                <li pn="section-3.5.2-4.4.2.1">Naked COSE_Keys are thus dressed as CCS when used in EDHOC, in its simplest form by prefixing the COSE_Key with 0xA108A101 (a map with a 'cnf' claim). In that case, the resulting authentication credential contains no other identity than the public key itself; see <xref target="identities" format="default" sectionFormat="of" derivedContent="Appendix D.2"/>.</li>
              </ul>
            </li>
          </ul>
          <t indent="0" pn="section-3.5.2-5">An example of CRED_x is shown below:</t>
          <figure anchor="fig-ccs" align="left" suppress-title="false" pn="figure-4">
            <name slugifiedName="name-ccs-containing-an-x25519-st">CCS Containing an X25519 Static Diffie-Hellman Key and an EUI-64 Identity</name>
            <artwork align="left" pn="section-3.5.2-6.1">
{                                              /CCS/
  2 : "42-50-31-FF-EF-37-32-39",               /sub/
  8 : {                                        /cnf/
    1 : {                                      /COSE_Key/
      1 : 1,                                   /kty/
      2 : h'00',                               /kid/
     -1 : 4,                                   /crv/
     -2 : h'b1a3e89460e88d3a8d54211dc95f0b90   /x/
            3ff205eb71912d6db8f4af980d2db83a'
    }
  }
}
</artwork>
          </figure>
        </section>
        <section anchor="id_cred" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.5.3">
          <name slugifiedName="name-identification-of-credentia">Identification of Credentials</name>
          <t indent="0" pn="section-3.5.3-1">The ID_CRED fields, ID_CRED_R and ID_CRED_I, are transported in message_2 and message_3, respectively; see Sections <xref target="asym-msg2-proc" format="counter" sectionFormat="of" derivedContent="5.3.2"/> and <xref target="asym-msg3-proc" format="counter" sectionFormat="of" derivedContent="5.4.2"/>.
We use the notation ID_CRED_x to refer to ID_CRED_I or ID_CRED_R.
Requirements on ID_CRED_x applies both to ID_CRED_I and to ID_CRED_R.
The ID_CRED fields are used to identify and optionally transport credentials:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.3-2">
            <li pn="section-3.5.3-2.1">ID_CRED_R is intended to facilitate for the Initiator retrieving the authentication credential CRED_R and the authentication key of R.</li>
            <li pn="section-3.5.3-2.2">ID_CRED_I is intended to facilitate for the Responder retrieving the authentication credential CRED_I and the authentication key of I.</li>
          </ul>
          <t indent="0" pn="section-3.5.3-3">ID_CRED_x may contain the authentication credential CRED_x, for x = I or R, but for many settings, it is not necessary to transport the authentication credential within EDHOC. For example, it may be pre-provisioned or acquired out-of-band over less constrained links. ID_CRED_I and ID_CRED_R do not have any cryptographic purpose in EDHOC since the authentication credentials are integrity protected by the Signature_or_MAC field.</t>
          <t indent="0" pn="section-3.5.3-4">EDHOC relies on COSE for identification of credentials and supports all credential types for which COSE header parameters are defined, including X.509 certificates <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/>, C509 certificates <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>, CWTs (<xref target="new-header-param" format="default" sectionFormat="of" derivedContent="Section 3.5.3.1"/>) and CCSs (<xref target="new-header-param" format="default" sectionFormat="of" derivedContent="Section 3.5.3.1"/>).</t>
          <t indent="0" pn="section-3.5.3-5">ID_CRED_I and ID_CRED_R are of type COSE header_map, as defined in <xref target="RFC9052" section="3" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-3" derivedContent="RFC9052"/>, and contain one or more COSE header parameters. If a map contains several header parameters, the labels do not need to be sorted in bytewise lexicographic order. ID_CRED_I and ID_CRED_R <bcp14>MAY</bcp14> contain different header parameters. The header parameters typically provide some information about the format of the credential.</t>
          <t indent="0" pn="section-3.5.3-6">Example: X.509 certificates can be identified by a hash value using the 'x5t' parameter; see <xref target="RFC9360" section="2" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9360#section-2" derivedContent="RFC9360"/>:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.3-7">
            <li pn="section-3.5.3-7.1">ID_CRED_x = { 34 : COSE_CertHash }, for x = I or R</li>
          </ul>
          <t indent="0" pn="section-3.5.3-8">Example: CWT or CCS can be identified by a key identifier using the 'kid' parameter; see <xref target="RFC9052" section="3.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-3.1" derivedContent="RFC9052"/>:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.3-9">
            <li pn="section-3.5.3-9.1">ID_CRED_x = { 4 : kid_x }, where kid_x : kid, for x = I or R</li>
          </ul>
          <t indent="0" pn="section-3.5.3-10">Note that COSE header parameters in ID_CRED_x are used to identify the message sender's credential. Therefore, there is no reason to use the "-sender" header parameters, such as x5t-sender, defined in <xref target="RFC9360" section="3" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9360#section-3" derivedContent="RFC9360"/>. Instead, the corresponding parameter without "-sender", such as x5t, <bcp14>SHOULD</bcp14> be used.</t>
          <t indent="0" pn="section-3.5.3-11">As stated in <xref target="RFC9052" section="3.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-3.1" derivedContent="RFC9052"/>, applications <bcp14>MUST NOT</bcp14> assume that 'kid' values are unique and several keys associated with a 'kid' may need to be checked before the correct one is found. Applications might use additional information such as 'kid context' or lower layers to determine which key to try first. Applications should strive to make ID_CRED_x as unique as possible, since the recipient may otherwise have to try several keys.</t>
          <t indent="0" pn="section-3.5.3-12">See <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/> for more examples.</t>
          <section anchor="new-header-param" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.5.3.1">
            <name slugifiedName="name-cose-header-parameters-for-">COSE Header Parameters for CWT and CWT Claims Set</name>
            <t indent="0" pn="section-3.5.3.1-1">This document registers two new COSE header parameters, 'kcwt' and 'kccs', for use with CBOR Web Token (CWT) <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/> and CWT Claims Set (CCS) <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/>, respectively. The CWT/CCS <bcp14>MUST</bcp14> contain a COSE_Key in a 'cnf' claim <xref target="RFC8747" format="default" sectionFormat="of" derivedContent="RFC8747"/>. There may be any number of additional claims present in the CWT/CCS.</t>
            <t indent="0" pn="section-3.5.3.1-2">CWTs sent in 'kcwt' are protected using a MAC or a signature and are similar to a certificate (when used with public key cryptography) or a Kerberos ticket (when used with symmetric key cryptography). CCSs sent in 'kccs' are not protected and are therefore similar to raw public keys or self-signed certificates.</t>
            <t indent="0" pn="section-3.5.3.1-3">Security considerations for 'kcwt' and 'kccs' are made in <xref target="impl-cons" format="default" sectionFormat="of" derivedContent="Section 9.8"/>.</t>
          </section>
          <section anchor="compact-kid" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.5.3.2">
            <name slugifiedName="name-compact-encoding-of-id_cred">Compact Encoding of ID_CRED Fields for 'kid'</name>
            <t indent="0" pn="section-3.5.3.2-1">To comply with the Lightweight Authenticated Key Exchange (LAKE) message size requirements (see <xref target="I-D.ietf-lake-reqs" format="default" sectionFormat="of" derivedContent="LAKE-REQS"/>), two optimizations are made for the case when ID_CRED_x, for x = I or R, contains a single 'kid' parameter.</t>
            <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-3.5.3.2-2"><li pn="section-3.5.3.2-2.1" derivedCounter="1.">The CBOR map { 4 : kid_x } is replaced by the byte string kid_x.</li>
              <li pn="section-3.5.3.2-2.2" derivedCounter="2.">The representation of identifiers specified in <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/> is applied to kid_x.</li>
            </ol>
            <t indent="0" pn="section-3.5.3.2-3">These optimizations <bcp14>MUST</bcp14> be applied if and only if ID_CRED_x = { 4 : kid_x } and ID_CRED_x in PLAINTEXT_y of message_y, y = 2 or 3; see Sections <xref target="asym-msg2-proc" format="counter" sectionFormat="of" derivedContent="5.3.2"/> and <xref target="asym-msg3-proc" format="counter" sectionFormat="of" derivedContent="5.4.2"/>. Note that these optimizations are not applied to instances of ID_CRED_x that have no impact on message size, e.g., context_y, or the COSE protected header. For example:</t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.5.3.2-4">
              <li pn="section-3.5.3.2-4.1">For ID_CRED_x = { 4 : h'FF' }, the encoding in PLAINTEXT_y is not the CBOR map 0xA10441FF but the CBOR byte string h'FF', i.e., 0x41FF.</li>
              <li pn="section-3.5.3.2-4.2">For ID_CRED_x = { 4 : h'21' }, the encoding in PLAINTEXT_y is neither the CBOR map 0xA1044121 nor the CBOR byte string h'21', i.e., 0x4121, but the CBOR integer 0x21.</li>
            </ul>
          </section>
        </section>
      </section>
      <section anchor="cs" numbered="true" removeInRFC="false" toc="include" pn="section-3.6">
        <name slugifiedName="name-cipher-suites">Cipher Suites</name>
        <t indent="0" pn="section-3.6-1">An EDHOC cipher suite consists of an ordered set of algorithms from the "COSE Algorithms" and "COSE Elliptic Curves" registries as well as the EDHOC MAC length. All algorithm names and definitions follow COSE Algorithms <xref target="RFC9053" format="default" sectionFormat="of" derivedContent="RFC9053"/>. Note that COSE sometimes uses peculiar names such as ES256 for Elliptic Curve Digital Signature Algorithm (ECDSA) with SHA-256, A128 for AES-128, and Ed25519 for the curve edwards25519. Algorithms need to be specified with enough parameters to make them completely determined. The EDHOC MAC length <bcp14>MUST</bcp14> be at least 8 bytes. Any cryptographic algorithm used in the COSE header parameters in ID_CRED fields is selected independently of the selected cipher suite. EDHOC is currently only specified for use with key exchange algorithms of type ECDH curves, but any Key Encapsulation Mechanism (KEM), including Post-Quantum Cryptography (PQC) KEMs, can be used in method 0; see <xref target="pqc" format="default" sectionFormat="of" derivedContent="Section 9.4"/>. Use of other types of key exchange algorithms to replace static DH authentication (methods 1, 2, and 3) would likely require a specification updating EDHOC with new methods.</t>
        <t indent="0" pn="section-3.6-2">EDHOC supports all signature algorithms defined by COSE. Just like in (D)TLS 1.3 <xref target="RFC8446" format="default" sectionFormat="of" derivedContent="RFC8446"/> <xref target="RFC9147" format="default" sectionFormat="of" derivedContent="RFC9147"/> and IKEv2 <xref target="RFC7296" format="default" sectionFormat="of" derivedContent="RFC7296"/>, a signature in COSE is determined jointly by the signature algorithm and the authentication key algorithm; see <xref target="auth-keys" format="default" sectionFormat="of" derivedContent="Section 3.5.1"/>. The exact details of the authentication key algorithm depend on the type of authentication credential. COSE supports different formats for storing the public authentication keys including COSE_Key and X.509, which use different names and ways to represent the authentication key and the authentication key algorithm.</t>
        <t indent="0" pn="section-3.6-3">An EDHOC cipher suite consists of the following parameters:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.6-4">
          <li pn="section-3.6-4.1">EDHOC AEAD algorithm,</li>
          <li pn="section-3.6-4.2">EDHOC hash algorithm,</li>
          <li pn="section-3.6-4.3">EDHOC MAC length in bytes (Static DH),</li>
          <li pn="section-3.6-4.4">EDHOC key exchange algorithm (ECDH curve),</li>
          <li pn="section-3.6-4.5">EDHOC signature algorithm,</li>
          <li pn="section-3.6-4.6">application AEAD algorithm, and</li>
          <li pn="section-3.6-4.7">application hash algorithm.</li>
        </ul>
        <t indent="0" pn="section-3.6-5">Each cipher suite is identified with a predefined integer label.</t>
        <t indent="0" pn="section-3.6-6">EDHOC can be used with all algorithms and curves defined for COSE. Implementations can either use any combination of COSE algorithms and parameters to define their own private cipher suite or use one of the predefined cipher suites. Private cipher suites can be identified with any of the four values: -24, -23, -22, and -21. The predefined cipher suites are listed in the IANA registry (<xref target="suites-registry" format="default" sectionFormat="of" derivedContent="Section 10.2"/>) with the initial content outlined here:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.6-7">
          <li pn="section-3.6-7.1">
            <t indent="0" pn="section-3.6-7.1.1">Cipher suites 0-3, based on AES-CCM, are intended for constrained IoT where message overhead is a very important factor. Note that AES-CCM-16-64-128 and AES-CCM-16-128-128 are compatible with the IEEE AES-CCM* mode of operation defined in Annex B of <xref target="IEEE.802.15.4-2015" format="default" sectionFormat="of" derivedContent="IEEE.802.15.4-2015"/>.
            </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.6-7.1.2">
              <li pn="section-3.6-7.1.2.1">Cipher suites 1 and 3 use a larger tag length (128 bits) in EDHOC than in the application AEAD algorithm (64 bits).</li>
            </ul>
          </li>
          <li pn="section-3.6-7.2">Cipher suites 4 and 5, based on ChaCha20, are intended for less constrained applications and only use 128-bit tag lengths.</li>
          <li pn="section-3.6-7.3">Cipher suite 6, based on AES-GCM, is for general non-constrained applications. It consists of high-performance algorithms that are widely used in non-constrained applications.</li>
          <li pn="section-3.6-7.4">Cipher suites 24 and 25 are intended for high security applications such as government use and financial applications. These cipher suites do not share any algorithms. Cipher suite 24 consists of algorithms from the Commercial National Security Algorithm (CNSA) 1.0 suite <xref target="CNSA" format="default" sectionFormat="of" derivedContent="CNSA"/>.</li>
        </ul>
        <t indent="0" pn="section-3.6-8">The different methods (<xref target="method" format="default" sectionFormat="of" derivedContent="Section 3.2"/>) use the same cipher suites, but some algorithms are not used in some methods. The EDHOC signature algorithm is not used in methods without signature authentication.</t>
        <t indent="0" pn="section-3.6-9">The Initiator needs to have a list of cipher suites it supports in order of preference. The Responder needs to have a list of cipher suites it supports. SUITES_I contains cipher suites supported by the Initiator and formatted and processed as detailed in <xref target="asym-msg1-form" format="default" sectionFormat="of" derivedContent="Section 5.2.1"/> to secure the cipher suite negotiation. Examples of cipher suite negotiation are given in <xref target="ex-neg" format="default" sectionFormat="of" derivedContent="Section 6.3.2"/>.</t>
      </section>
      <section anchor="cose_key" numbered="true" removeInRFC="false" toc="include" pn="section-3.7">
        <name slugifiedName="name-ephemeral-public-keys">Ephemeral Public Keys</name>
        <t indent="0" pn="section-3.7-1">The ephemeral public keys in EDHOC (G_X and G_Y) use compact representation of elliptic curve points; see <xref target="comrep" format="default" sectionFormat="of" derivedContent="Appendix B"/>. In COSE, compact representation is achieved by formatting the ECDH ephemeral public keys as COSE_Keys of type EC2 or Octet Key Pair (OKP) according to Sections <xref target="RFC9053" section="7.1" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-7.1" derivedContent="RFC9053"/> and <xref target="RFC9053" section="7.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-7.2" derivedContent="RFC9053"/> of <xref target="RFC9053" format="default" sectionFormat="of" derivedContent="RFC9053"/> but only including the 'x' parameter in G_X and G_Y. For Elliptic Curve Keys of type EC2, compact representation <bcp14>MAY</bcp14> be used also in the COSE_Key. COSE always uses compact output for Elliptic Curve Keys of type EC2. If the COSE implementation requires a 'y' parameter, the value y = false or a calculated y-coordinate can be used; see <xref target="comrep" format="default" sectionFormat="of" derivedContent="Appendix B"/>.</t>
      </section>
      <section anchor="AD" numbered="true" removeInRFC="false" toc="include" pn="section-3.8">
        <name slugifiedName="name-external-authorization-data">External Authorization Data (EAD)</name>
        <t indent="0" pn="section-3.8-1">In order to reduce round trips and the number of messages or to simplify processing, external security applications may be integrated into EDHOC by transporting authorization-related data in the messages.</t>
        <t indent="0" pn="section-3.8-2">EDHOC allows processing of external authorization data (EAD) to be defined in a separate specification and sent in dedicated fields of the four EDHOC messages: EAD_1, EAD_2, EAD_3, and EAD_4. EAD is opaque data to EDHOC.</t>
        <t indent="0" pn="section-3.8-3">Each EAD field, EAD_x, for x = 1, 2, 3, or 4, is a CBOR sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>) consisting of one or more EAD items. EAD item ead is a CBOR sequence of an ead_label and an optional ead_value; see <xref target="fig-ead-item" format="default" sectionFormat="of" derivedContent="Figure 5"/> and  <xref target="CDDL" format="default" sectionFormat="of" derivedContent="Appendix C.2"/> for the CDDL definitions.</t>
        <figure anchor="fig-ead-item" align="left" suppress-title="false" pn="figure-5">
          <name slugifiedName="name-ead-item">EAD Item</name>
          <sourcecode type="CDDL" markers="false" pn="section-3.8-4.1">
ead = (
  ead_label : int,
  ? ead_value : bstr,
)
</sourcecode>
        </figure>
        <t indent="0" pn="section-3.8-5">A security application may register one or more EAD labels (see <xref target="iana-ead" format="default" sectionFormat="of" derivedContent="Section 10.5"/>) and specify the associated processing and security considerations. The IANA registry contains the absolute value of the ead_label, |ead_label|; the same ead_value applies independently of the sign of the ead_label.</t>
        <t indent="0" pn="section-3.8-6">An EAD item can be either critical or non-critical, determined by the sign of the ead_label in the EAD item transported in the EAD field. A negative value indicates that the EAD item is critical, and a nonnegative value indicates that the EAD item is non-critical.</t>
        <t indent="0" pn="section-3.8-7">If an endpoint receives a critical EAD item it does not recognize or a critical EAD item that contains information that it cannot process, then the endpoint <bcp14>MUST</bcp14> send an EDHOC error message back as defined in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, and the EDHOC session <bcp14>MUST</bcp14> be aborted. The EAD item specification defines the error processing. A non-critical EAD item can be ignored.</t>
        <t indent="0" pn="section-3.8-8">The security application registering a new EAD item needs to describe under what conditions the EAD item is critical or non-critical, and thus whether the ead_label is used with a negative or positive sign. ead_label = 0 is used for padding; see <xref target="padding" format="default" sectionFormat="of" derivedContent="Section 3.8.1"/>.</t>
        <t indent="0" pn="section-3.8-9">The security application may define multiple uses of certain EAD items, e.g., the same EAD item may be used in different EDHOC messages. Multiple occurrences of an EAD item in one EAD field may also be specified, but the criticality of the repeated EAD item is expected to be the same.</t>
        <t indent="0" pn="section-3.8-10">The EAD fields of EDHOC <bcp14>MUST</bcp14> only be used with registered EAD items; see <xref target="iana-ead" format="default" sectionFormat="of" derivedContent="Section 10.5"/>. Examples of the use of EAD are provided in <xref target="ead-appendix" format="default" sectionFormat="of" derivedContent="Appendix E"/>.</t>
        <section anchor="padding" numbered="true" removeInRFC="false" toc="exclude" pn="section-3.8.1">
          <name slugifiedName="name-padding">Padding</name>
          <t indent="0" pn="section-3.8.1-1">EDHOC message_1 and the plaintext of message_2, message_3, and message_4 can be padded with the use of the corresponding EAD_x field, for x = 1, 2, 3, or 4. Padding in EAD_1 mitigates amplification attacks (see <xref target="dos" format="default" sectionFormat="of" derivedContent="Section 9.7"/>), and padding in EAD_2, EAD_3, and EAD_4 hides the true length of the plaintext (see <xref target="internet-threat" format="default" sectionFormat="of" derivedContent="Section 9.6"/>). Padding <bcp14>MUST</bcp14> be ignored and discarded by the receiving application.</t>
          <t indent="0" pn="section-3.8.1-2">Padding is obtained by using an EAD item with ead_label = 0 and a (pseudo)randomly generated byte string of appropriate length as ead_value, noting that the ead_label and the CBOR encoding of ead_value also add bytes. For example:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-3.8.1-3">
            <li pn="section-3.8.1-3.1">
              <t indent="0" pn="section-3.8.1-3.1.1">One-byte padding (optional ead_value omitted):
              </t>
              <t indent="0" pn="section-3.8.1-3.1.2">EAD_x = 0x00</t>
            </li>
            <li pn="section-3.8.1-3.2">
              <t indent="0" pn="section-3.8.1-3.2.1">Two-byte padding, using the empty byte string (0x40) as ead_value:
              </t>
              <t indent="0" pn="section-3.8.1-3.2.2">EAD_x = 0x0040</t>
            </li>
            <li pn="section-3.8.1-3.3">
              <t indent="0" pn="section-3.8.1-3.3.1">Three-byte padding, constructed from the pseudorandomly generated ead_value 0xe9 encoded as byte string:
              </t>
              <t indent="0" pn="section-3.8.1-3.3.2">EAD_x = 0x0041e9</t>
            </li>
          </ul>
          <t indent="0" pn="section-3.8.1-4">Multiple occurrences of EAD items with ead_label = 0 are allowed. Certain padding lengths require the use of at least two such EAD items.</t>
          <t indent="0" pn="section-3.8.1-5">Note that padding is non-critical because the intended behavior when receiving is to ignore it.</t>
        </section>
      </section>
      <section anchor="applicability" numbered="true" removeInRFC="false" toc="include" pn="section-3.9">
        <name slugifiedName="name-application-profile">Application Profile</name>
        <t indent="0" pn="section-3.9-1">EDHOC requires certain parameters to be agreed upon between the Initiator and Responder. Some parameters can be negotiated through the protocol execution (specifically, cipher suite; see <xref target="cs" format="default" sectionFormat="of" derivedContent="Section 3.6"/>), but other parameters are only communicated and may not be negotiated (e.g., which authentication method is used; see <xref target="method" format="default" sectionFormat="of" derivedContent="Section 3.2"/>). Yet, other parameters need to be known out-of-band to ensure successful completion, e.g., whether message_4 is used or not. The application decides which endpoint is the Initiator and which is the Responder.</t>
        <t indent="0" pn="section-3.9-2">The purpose of an application profile is to describe the intended use of EDHOC to allow for the relevant processing and verifications to be made, including things like the following:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-3.9-3"><li pn="section-3.9-3.1" derivedCounter="1.">
            <t indent="0" pn="section-3.9-3.1.1">How the endpoint detects that an EDHOC message is received. This includes how EDHOC messages are transported, for example, in the payload of a CoAP message with a certain Uri-Path or Content-Format; see <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>.
            </t>
            <t indent="0" pn="section-3.9-3.1.2">The method of transporting EDHOC messages may also describe data carried along with the messages that are needed for the transport to satisfy the requirements of <xref target="transport" format="default" sectionFormat="of" derivedContent="Section 3.4"/>, e.g., connection identifiers used with certain messages; see <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>.</t>
          </li>
          <li pn="section-3.9-3.2" derivedCounter="2.">Authentication method (METHOD; see <xref target="method" format="default" sectionFormat="of" derivedContent="Section 3.2"/>).</li>
          <li pn="section-3.9-3.3" derivedCounter="3.">Profile for authentication credentials (CRED_I and CRED_R; see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>), e.g., profile for certificate or CCS, including supported authentication key algorithms (subject public key algorithm in X.509 or C509 certificate).</li>
          <li pn="section-3.9-3.4" derivedCounter="4.">Type used to identify credentials (ID_CRED_I and ID_CRED_R; see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>).</li>
          <li pn="section-3.9-3.5" derivedCounter="5.">Use and type of external authorization data (EAD_1, EAD_2, EAD_3, and EAD_4; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>).</li>
          <li pn="section-3.9-3.6" derivedCounter="6.">Identifier used as the identity of the endpoint; see <xref target="identities" format="default" sectionFormat="of" derivedContent="Appendix D.2"/>.</li>
          <li pn="section-3.9-3.7" derivedCounter="7.">If message_4 shall be sent/expected, and if not, how to ensure a protected application message is sent from the Responder to the Initiator; see <xref target="m4" format="default" sectionFormat="of" derivedContent="Section 5.5"/>.</li>
        </ol>
        <t indent="0" pn="section-3.9-4">The application profile may also contain information about supported cipher suites. The procedure for selecting and verifying a cipher suite is still performed as described in Sections <xref target="asym-msg1-form" format="counter" sectionFormat="of" derivedContent="5.2.1"/> and <xref target="wrong-selected" format="counter" sectionFormat="of" derivedContent="6.3"/>, but it may become simplified by this knowledge. EDHOC messages can be processed without the application profile, i.e., the EDHOC messages include information about the type and length of all fields.</t>
        <t indent="0" pn="section-3.9-5">An example of an application profile is shown in <xref target="appl-temp" format="default" sectionFormat="of" derivedContent="Appendix F"/>.</t>
        <t indent="0" pn="section-3.9-6">For some parameters, like METHOD, the type of the ID_CRED field, or EAD, the receiver of an EDHOC message is able to verify compliance with the application profile and, if it needs to fail because of the lack of compliance, to infer the reason why the EDHOC session failed.</t>
        <t indent="0" pn="section-3.9-7">For other encodings, like the profiling of CRED_x in the case that it is not transported, it may not be possible to verify that the lack of compliance with the application profile was the reason for failure. For example, integrity verification in message_2 or message_3 may fail not only because of a wrong credential. For example, in case the Initiator uses a public key certificate by reference (i.e., not transported within the protocol), then both endpoints need to use an identical data structure as CRED_I or else the integrity verification will fail.</t>
        <t indent="0" pn="section-3.9-8">Note that it is not necessary for the endpoints to specify a single transport for the EDHOC messages. For example, a mix of CoAP and HTTP may be used along the path, and this may still allow correlation between messages.</t>
        <t indent="0" pn="section-3.9-9">The application profile may be dependent on the identity of the other endpoint or other information carried in an EDHOC message, but it then applies only to the later phases of the protocol when such information is known. (The Initiator does not know the identity of the Responder before having verified message_2, and the Responder does not know the identity of the Initiator before having verified message_3.)</t>
        <t indent="0" pn="section-3.9-10">Other conditions may be part of the application profile, such as what is the target application or use (if there is more than one application/use) to the extent that EDHOC can distinguish between them. In case multiple application profiles are used, the receiver needs to be able to determine which is applicable for a given EDHOC session, for example, based on the URI to which the EDHOC message is sent, or external authorization data type.</t>
      </section>
    </section>
    <section anchor="key-der" numbered="true" removeInRFC="false" toc="include" pn="section-4">
      <name slugifiedName="name-key-derivation">Key Derivation</name>
      <section anchor="keys-for-edhoc-message-processing" numbered="true" removeInRFC="false" toc="include" pn="section-4.1">
        <name slugifiedName="name-keys-for-edhoc-message-proc">Keys for EDHOC Message Processing</name>
        <t indent="0" pn="section-4.1-1">EDHOC uses Extract-and-Expand <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/> with the EDHOC hash algorithm in the selected cipher suite to derive keys used in message processing. This section defines EDHOC_Extract (<xref target="extract" format="default" sectionFormat="of" derivedContent="Section 4.1.1"/>) and EDHOC_Expand (<xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>) and how to use them to derive PRK_out (<xref target="prkout" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>), which is the shared secret session key resulting from a completed EDHOC session.</t>
        <t indent="0" pn="section-4.1-2">EDHOC_Extract is used to derive fixed-length uniformly pseudorandom keys (PRKs) from ECDH shared secrets. EDHOC_Expand is used to define EDHOC_KDF for generating MACs and for deriving output keying material (OKM) from PRKs.</t>
        <t indent="0" pn="section-4.1-3">In EDHOC, a specific message is protected with a certain PRK, but how the key is derived depends on the authentication method (<xref target="method" format="default" sectionFormat="of" derivedContent="Section 3.2"/>), as detailed in <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/>.</t>
        <section anchor="extract" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1">
          <name slugifiedName="name-edhoc_extract">EDHOC_Extract</name>
          <t indent="0" pn="section-4.1.1-1">The pseudorandom keys (PRKs) used for EDHOC message processing are derived using EDHOC_Extract:</t>
          <artwork align="left" pn="section-4.1.1-2">
   PRK = EDHOC_Extract( salt, IKM )
</artwork>
          <t indent="0" pn="section-4.1.1-3">where the input keying material (IKM) and salt are defined for each PRK below.</t>
          <t indent="0" pn="section-4.1.1-4">The definition of EDHOC_Extract depends on the EDHOC hash algorithm of the selected cipher suite:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.1-5">
            <li pn="section-4.1.1-5.1">If the EDHOC hash algorithm is SHA-2, then EDHOC_Extract( salt, IKM ) = HKDF-Extract( salt, IKM ) <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/>.</li>
            <li pn="section-4.1.1-5.2">If the EDHOC hash algorithm is SHAKE128, then EDHOC_Extract( salt, IKM ) = KMAC128( salt, IKM, 256, "" ).</li>
            <li pn="section-4.1.1-5.3">If the EDHOC hash algorithm is SHAKE256, then EDHOC_Extract( salt, IKM ) = KMAC256( salt, IKM, 512, "" ).</li>
          </ul>
          <t indent="0" pn="section-4.1.1-6">where the Keccak Message Authentication Code (KMAC) is specified in <xref target="SP800-185" format="default" sectionFormat="of" derivedContent="SP800-185"/>.</t>
          <t indent="0" pn="section-4.1.1-7">The rest of the section defines the pseudorandom keys PRK_2e, PRK_3e2m, and PRK_4e3m; their use is shown in <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>. The index of a PRK indicates its use or in what message protection operation it is involved.  For example, PRK_3e2m is involved in the encryption of message 3 and in calculating the MAC of message 2.</t>
          <section anchor="prk2e" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.1">
            <name slugifiedName="name-prk_2e">PRK_2e</name>
            <t indent="0" pn="section-4.1.1.1-1">The pseudorandom key PRK_2e is derived with the following input:</t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.1.1-2">
              <li pn="section-4.1.1.1-2.1">The salt <bcp14>SHALL</bcp14> be TH_2.</li>
              <li pn="section-4.1.1.1-2.2">The IKM <bcp14>SHALL</bcp14> be the ephemeral-ephemeral ECDH shared secret G_XY (calculated from G_X and Y or G_Y and X) as defined in <xref section="6.3.1" sectionFormat="of" target="RFC9053" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-6.3.1" derivedContent="RFC9053"/>. The use of G_XY gives forward secrecy in the sense that compromise of the private authentication keys does not compromise past session keys.</li>
            </ul>
            <t indent="0" pn="section-4.1.1.1-3">Example: Assuming the use of curve25519, the ECDH shared secret G_XY is the output of the X25519 function <xref target="RFC7748" format="default" sectionFormat="of" derivedContent="RFC7748"/>:</t>
            <artwork align="left" pn="section-4.1.1.1-4">
   G_XY = X25519( Y, G_X ) = X25519( X, G_Y )
</artwork>
            <t indent="0" pn="section-4.1.1.1-5">Example: Assuming the use of SHA-256, the extract phase of the key derivation function is HKDF-Extract, which produces PRK_2e as follows:</t>
            <artwork align="left" pn="section-4.1.1.1-6">
   PRK_2e = HMAC-SHA-256( TH_2, G_XY )
</artwork>
          </section>
          <section anchor="prk3e2m" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.2">
            <name slugifiedName="name-prk_3e2m">PRK_3e2m</name>
            <t indent="0" pn="section-4.1.1.2-1">The pseudorandom key PRK_3e2m is derived as follows:</t>
            <t indent="0" pn="section-4.1.1.2-2">If the Responder authenticates with a static Diffie-Hellman key, then PRK_3e2m = EDHOC_Extract( SALT_3e2m, G_RX ), where</t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.1.2-3">
              <li pn="section-4.1.1.2-3.1">SALT_3e2m is derived from PRK_2e (see <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>) and</li>
              <li pn="section-4.1.1.2-3.2">G_RX is the ECDH shared secret calculated from G_R and X, or G_X and R (the Responder's private authentication key; see <xref target="auth-keys" format="default" sectionFormat="of" derivedContent="Section 3.5.1"/>),</li>
            </ul>
            <t indent="0" pn="section-4.1.1.2-4">else PRK_3e2m = PRK_2e.</t>
          </section>
          <section anchor="prk4e3m" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.1.3">
            <name slugifiedName="name-prk_4e3m">PRK_4e3m</name>
            <t indent="0" pn="section-4.1.1.3-1">The pseudorandom key PRK_4e3m is derived as follows:</t>
            <t indent="0" pn="section-4.1.1.3-2">If the Initiator authenticates with a static Diffie-Hellman key, then PRK_4e3m = EDHOC_Extract( SALT_4e3m, G_IY ), where</t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.1.3-3">
              <li pn="section-4.1.1.3-3.1">SALT_4e3m is derived from PRK_3e2m (see <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>) and</li>
              <li pn="section-4.1.1.3-3.2">G_IY is the ECDH shared secret calculated from G_I and Y, or G_Y and I (the Initiator's private authentication key; see <xref target="auth-keys" format="default" sectionFormat="of" derivedContent="Section 3.5.1"/>),</li>
            </ul>
            <t indent="0" pn="section-4.1.1.3-4">else PRK_4e3m = PRK_3e2m.</t>
          </section>
        </section>
        <section anchor="expand" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.2">
          <name slugifiedName="name-edhoc_expand-and-edhoc_kdf">EDHOC_Expand and EDHOC_KDF</name>
          <t indent="0" pn="section-4.1.2-1">The output keying material (OKM) -- including keys, initialization vectors (IVs), and salts -- are derived from the PRKs using the EDHOC_KDF, which is defined through EDHOC_Expand:</t>
          <artwork align="left" pn="section-4.1.2-2">
   OKM = EDHOC_KDF( PRK, info_label, context, length )
       = EDHOC_Expand( PRK, info, length )
</artwork>
          <t indent="0" pn="section-4.1.2-3">where info is encoded as the CBOR sequence:</t>
          <sourcecode type="cbor" markers="false" pn="section-4.1.2-4">
info = (
  info_label : int,
  context : bstr,
  length : uint,
)
</sourcecode>
          <t indent="0" pn="section-4.1.2-5">where:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.2-6">
            <li pn="section-4.1.2-6.1">info_label is an int,</li>
            <li pn="section-4.1.2-6.2">context is a bstr, and</li>
            <li pn="section-4.1.2-6.3">length is the length of OKM in bytes.</li>
          </ul>
          <t indent="0" pn="section-4.1.2-7">When EDHOC_KDF is used to derive OKM for EDHOC message processing, then the context includes one of the transcript hashes, TH_2, TH_3, or TH_4, defined in Sections <xref target="asym-msg2-proc" format="counter" sectionFormat="of" derivedContent="5.3.2"/> and <xref target="asym-msg3-proc" format="counter" sectionFormat="of" derivedContent="5.4.2"/>.</t>
          <t indent="0" pn="section-4.1.2-8">The definition of EDHOC_Expand depends on the EDHOC hash algorithm of the selected cipher suite:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.2-9">
            <li pn="section-4.1.2-9.1">If the EDHOC hash algorithm is SHA-2, then EDHOC_Expand( PRK, info, length ) = HKDF-Expand( PRK, info, length ) <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/>.</li>
            <li pn="section-4.1.2-9.2">If the EDHOC hash algorithm is SHAKE128, then EDHOC_Expand( PRK, info, length ) = KMAC128( PRK, info, L, "" ).</li>
            <li pn="section-4.1.2-9.3">If the EDHOC hash algorithm is SHAKE256, then EDHOC_Expand( PRK, info, length ) = KMAC256( PRK, info, L, "" ).</li>
          </ul>
          <t indent="0" pn="section-4.1.2-10">where L = 8 ⋅ length, the output length in bits.</t>
          <t indent="0" pn="section-4.1.2-11"><xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/> lists derivations made with EDHOC_KDF, where:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.1.2-12">
            <li pn="section-4.1.2-12.1">hash_length is the length of output size of the EDHOC hash algorithm of the selected cipher suite,</li>
            <li pn="section-4.1.2-12.2">key_length is the length of the encryption key of the EDHOC AEAD algorithm of the selected cipher suite, and</li>
            <li pn="section-4.1.2-12.3">iv_length is the length of the initialization vector of the EDHOC AEAD algorithm of the selected cipher suite</li>
          </ul>
          <t indent="0" pn="section-4.1.2-13">Further details of the key derivation and how the output keying material is used are specified in <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/>.</t>
          <figure anchor="fig-edhoc-kdf" align="left" suppress-title="false" pn="figure-6">
            <name slugifiedName="name-key-derivations-using-edhoc">Key Derivations Using EDHOC_KDF</name>
            <artwork align="center" pn="section-4.1.2-14.1">
KEYSTREAM_2   = EDHOC_KDF( PRK_2e,   0, TH_2,      plaintext_length )
SALT_3e2m     = EDHOC_KDF( PRK_2e,   1, TH_2,      hash_length )
MAC_2         = EDHOC_KDF( PRK_3e2m, 2, context_2, mac_length_2 )
K_3           = EDHOC_KDF( PRK_3e2m, 3, TH_3,      key_length )
IV_3          = EDHOC_KDF( PRK_3e2m, 4, TH_3,      iv_length )
SALT_4e3m     = EDHOC_KDF( PRK_3e2m, 5, TH_3,      hash_length )
MAC_3         = EDHOC_KDF( PRK_4e3m, 6, context_3, mac_length_3 )
PRK_out       = EDHOC_KDF( PRK_4e3m, 7, TH_4,      hash_length )
K_4           = EDHOC_KDF( PRK_4e3m, 8, TH_4,      key_length )
IV_4          = EDHOC_KDF( PRK_4e3m, 9, TH_4,      iv_length )
PRK_exporter  = EDHOC_KDF( PRK_out, 10, h'',       hash_length )
</artwork>
          </figure>
          <t indent="0" pn="section-4.1.2-15">h'' is CBOR diagnostic notation for the empty byte string, 0x40.</t>
        </section>
        <section anchor="prkout" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.1.3">
          <name slugifiedName="name-prk_out">PRK_out</name>
          <t indent="0" pn="section-4.1.3-1">The pseudorandom key PRK_out, derived as shown in <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>, is the output session key of a completed EDHOC session.</t>
          <t indent="0" pn="section-4.1.3-2">Keys for applications are derived using EDHOC_Exporter (see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>) from PRK_exporter, which in turn is derived from PRK_out as shown in <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>. For the purpose of generating application keys, it is sufficient to store PRK_out or PRK_exporter. (Note that the word "store" used here does not imply that the application has access to the plaintext PRK_out since that may be reserved for code within a Trusted Execution Environment (TEE); see <xref target="impl-cons" format="default" sectionFormat="of" derivedContent="Section 9.8"/>.)</t>
        </section>
      </section>
      <section anchor="keys-for-edhoc-applications" numbered="true" removeInRFC="false" toc="include" pn="section-4.2">
        <name slugifiedName="name-keys-for-edhoc-applications">Keys for EDHOC Applications</name>
        <t indent="0" pn="section-4.2-1">This section defines EDHOC_Exporter in terms of EDHOC_KDF and PRK_exporter. A key update function is defined in <xref target="keyupdate" format="default" sectionFormat="of" derivedContent="Appendix H"/>.</t>
        <section anchor="exporter" numbered="true" removeInRFC="false" toc="exclude" pn="section-4.2.1">
          <name slugifiedName="name-edhoc_exporter">EDHOC_Exporter</name>
          <t indent="0" pn="section-4.2.1-1">Keying material for the application can be derived using the EDHOC_Exporter interface defined as:</t>
          <artwork align="left" pn="section-4.2.1-2">
   EDHOC_Exporter(exporter_label, context, length)
     = EDHOC_KDF(PRK_exporter, exporter_label, context, length)
</artwork>
          <t indent="0" pn="section-4.2.1-3">where:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-4.2.1-4">
            <li pn="section-4.2.1-4.1">exporter_label is a registered uint from the "EDHOC Exporter Labels" registry (<xref target="exporter-label" format="default" sectionFormat="of" derivedContent="Section 10.1"/>),</li>
            <li pn="section-4.2.1-4.2">context is a bstr defined by the application, and</li>
            <li pn="section-4.2.1-4.3">length is a uint defined by the application.</li>
          </ul>
          <t indent="0" pn="section-4.2.1-5">The (exporter_label, context) pair used in EDHOC_Exporter must be unique, i.e., an (exporter_label, context) <bcp14>MUST NOT</bcp14> be used for two different purposes. However, an application can re-derive the same key several times as long as it is done securely. For example, in most encryption algorithms, the same key can be reused with different nonces. The context can, for example, be the empty CBOR byte string.</t>
          <t indent="0" pn="section-4.2.1-6">Examples of use of the EDHOC_Exporter are given in <xref target="transfer" format="default" sectionFormat="of" derivedContent="Appendix A"/>.</t>
        </section>
      </section>
    </section>
    <section anchor="asym" numbered="true" removeInRFC="false" toc="include" pn="section-5">
      <name slugifiedName="name-message-formatting-and-proc">Message Formatting and Processing</name>
      <t indent="0" pn="section-5-1">This section specifies formatting of the messages and processing steps. Error messages are specified in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>. Annotated traces of EDHOC sessions are provided in <xref target="RFC9529" format="default" sectionFormat="of" derivedContent="RFC9529"/>.</t>
      <t indent="0" pn="section-5-2">An EDHOC message is encoded as a sequence of CBOR data items (CBOR Sequence <xref target="RFC8742" format="default" sectionFormat="of" derivedContent="RFC8742"/>).
Additional optimizations are made to reduce message overhead.</t>
      <t indent="0" pn="section-5-3">While EDHOC uses the COSE_Key, COSE_Sign1, and COSE_Encrypt0 structures, only a subset of the parameters is included in the EDHOC messages; see <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/>. In order to recreate the COSE object, the recipient endpoint may need to add parameters to the COSE headers not included in the EDHOC message, for example, the parameter 'alg' to COSE_Sign1 or COSE_Encrypt0.</t>
      <section anchor="proc-outline" numbered="true" removeInRFC="false" toc="include" pn="section-5.1">
        <name slugifiedName="name-edhoc-message-processing-ou">EDHOC Message Processing Outline</name>
        <t indent="0" pn="section-5.1-1">For each new/ongoing EDHOC session, the endpoints are assumed to keep an associated protocol state containing identifiers, keying material, etc. used for subsequent processing of protocol-related data. The protocol state is assumed to be associated with an application profile (<xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>) that provides the context for how messages are transported, identified, and processed.</t>
        <t indent="0" pn="section-5.1-2">EDHOC messages <bcp14>SHALL</bcp14> be processed according to the current protocol state. The following steps are expected to be performed at reception of an EDHOC message:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.1-3"><li pn="section-5.1-3.1" derivedCounter="1.">Detect that an EDHOC message has been received, for example, by means of a port number, URI, or media type (<xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>).</li>
          <li pn="section-5.1-3.2" derivedCounter="2.">Retrieve the protocol state according to the message correlation; see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>. If there is no protocol state, in the case of message_1, a new protocol state is created. The Responder endpoint needs to make use of available denial-of-service mitigation (<xref target="dos" format="default" sectionFormat="of" derivedContent="Section 9.7"/>).</li>
          <li pn="section-5.1-3.3" derivedCounter="3.">If the message received is an error message, then process it according to <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, else process it as the expected next message according to the protocol state.</li>
        </ol>
        <t indent="0" pn="section-5.1-4">The message processing steps <bcp14>SHALL</bcp14> be processed in order, unless otherwise stated. If the processing fails for some reason, then typically an error message is sent, the EDHOC session is aborted, and the protocol state is erased. When the composition and sending of one message is completed and before the next message is received, error messages <bcp14>SHALL NOT</bcp14> be sent.</t>
        <t indent="0" pn="section-5.1-5">After having successfully processed the last message (message_3 or message_4 depending on application profile), the EDHOC session is completed; after which, no error messages are sent and EDHOC session output <bcp14>MAY</bcp14> be maintained even if error messages are received. Further details are provided in the following subsections and in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>.</t>
        <t indent="0" pn="section-5.1-6">Different instances of the same message <bcp14>MUST NOT</bcp14> be processed in one EDHOC session.  Note that processing will fail if the same message appears a second time for EDHOC processing in the same EDHOC session because the state of the protocol has moved on and now expects something else. Message deduplication <bcp14>MUST</bcp14> be done by the transport protocol (see <xref target="transport" format="default" sectionFormat="of" derivedContent="Section 3.4"/>) or, if not supported by the transport, as described in <xref target="duplication" format="default" sectionFormat="of" derivedContent="Section 7"/>.</t>
      </section>
      <section anchor="m1" numbered="true" removeInRFC="false" toc="include" pn="section-5.2">
        <name slugifiedName="name-edhoc-message-1">EDHOC Message 1</name>
        <section anchor="asym-msg1-form" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.2.1">
          <name slugifiedName="name-formatting-of-message-1">Formatting of Message 1</name>
          <t indent="0" pn="section-5.2.1-1">message_1 <bcp14>SHALL</bcp14> be a CBOR Sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>), as defined below.</t>
          <sourcecode type="cbor" markers="false" pn="section-5.2.1-2">
message_1 = (
  METHOD : int,
  SUITES_I : suites,
  G_X : bstr,
  C_I : bstr / -24..23,
  ? EAD_1,
)

suites = [ 2* int ] / int
EAD_1 = 1* ead
</sourcecode>
          <t indent="0" pn="section-5.2.1-3">where:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.2.1-4">
            <li pn="section-5.2.1-4.1">METHOD is an authentication method; see <xref target="method" format="default" sectionFormat="of" derivedContent="Section 3.2"/>,</li>
            <li pn="section-5.2.1-4.2">SUITES_I is an array of cipher suites that the Initiator supports constructed as specified in <xref target="init-proc-msg1" format="default" sectionFormat="of" derivedContent="Section 5.2.2"/>,</li>
            <li pn="section-5.2.1-4.3">G_X is the ephemeral public key of the Initiator, and</li>
            <li pn="section-5.2.1-4.4">C_I is a variable-length connection identifier (note that connection identifiers are byte strings but certain values are represented as integers in the message; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>), and</li>
            <li pn="section-5.2.1-4.5">EAD_1 is external authorization data; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>.</li>
          </ul>
        </section>
        <section anchor="init-proc-msg1" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.2.2">
          <name slugifiedName="name-initiator-composition-of-me">Initiator Composition of Message 1</name>
          <t indent="0" pn="section-5.2.2-1">The processing steps are detailed below and in <xref target="wrong-selected" format="default" sectionFormat="of" derivedContent="Section 6.3"/>.</t>
          <t indent="0" pn="section-5.2.2-2">The Initiator <bcp14>SHALL</bcp14> compose message_1 as follows:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.2.2-3">
            <li pn="section-5.2.2-3.1">
              <t indent="0" pn="section-5.2.2-3.1.1">Construct SUITES_I as an array of cipher suites supported by I in order of preference by I with the first cipher suite in the array being the most preferred by I and the last being the one selected by I for this EDHOC session. If the cipher suite most preferred by I is selected, then SUITES_I contains only that cipher suite and is encoded as an int. All cipher suites, if any, preferred by I over the selected one <bcp14>MUST</bcp14> be included. (See also <xref target="wrong-selected" format="default" sectionFormat="of" derivedContent="Section 6.3"/>.)
              </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.2.2-3.1.2">
                <li pn="section-5.2.2-3.1.2.1">The selected suite is based on what the Initiator can assume to be supported by the Responder; if the Initiator previously received from the Responder an error message with error code 2 containing SUITES_R (see <xref target="wrong-selected" format="default" sectionFormat="of" derivedContent="Section 6.3"/>) indicating cipher suites supported by the Responder, then the Initiator <bcp14>SHOULD</bcp14> select its most preferred supported cipher suite among those (bearing in mind that error messages may be forged).</li>
                <li pn="section-5.2.2-3.1.2.2">The Initiator <bcp14>MUST NOT</bcp14> change its order of preference for cipher suites and <bcp14>MUST NOT</bcp14> omit a cipher suite preferred to the selected one because of previous error messages received from the Responder.</li>
              </ul>
            </li>
            <li pn="section-5.2.2-3.2">Generate an ephemeral ECDH key pair using the curve in the selected cipher suite and format it as a COSE_Key. Let G_X be the 'x' parameter of the COSE_Key.</li>
            <li pn="section-5.2.2-3.3">Choose a connection identifier C_I and store it during the EDHOC session.</li>
            <li pn="section-5.2.2-3.4">Encode message_1 as a sequence of CBOR-encoded data items as specified in <xref target="asym-msg1-form" format="default" sectionFormat="of" derivedContent="Section 5.2.1"/></li>
          </ul>
        </section>
        <section anchor="resp-proc-msg1" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.2.3">
          <name slugifiedName="name-responder-processing-of-mes">Responder Processing of Message 1</name>
          <t indent="0" pn="section-5.2.3-1">The Responder <bcp14>SHALL</bcp14> process message_1 in the following order:</t>
          <ol spacing="normal" indent="adaptive" start="1" type="1" pn="section-5.2.3-2">
            <li pn="section-5.2.3-2.1" derivedCounter="1.">Decode message_1 (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>).</li>
            <li pn="section-5.2.3-2.2" derivedCounter="2.">Process message_1. In particular, verify that the selected cipher suite is supported and that no prior cipher suite as ordered in SUITES_I is supported.</li>
            <li pn="section-5.2.3-2.3" derivedCounter="3.">If all processing completed successfully, and if EAD_1 is present, then make it available to the application for EAD processing.</li>
          </ol>
          <t indent="0" pn="section-5.2.3-3">If any processing step fails, then the Responder <bcp14>MUST</bcp14> send an EDHOC error message back as defined in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, and the EDHOC session <bcp14>MUST</bcp14> be aborted.</t>
        </section>
      </section>
      <section anchor="m2" numbered="true" removeInRFC="false" toc="include" pn="section-5.3">
        <name slugifiedName="name-edhoc-message-2">EDHOC Message 2</name>
        <section anchor="asym-msg2-form" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.3.1">
          <name slugifiedName="name-formatting-of-message-2">Formatting of Message 2</name>
          <t indent="0" pn="section-5.3.1-1">message_2 <bcp14>SHALL</bcp14> be a CBOR Sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>), as defined below.</t>
          <sourcecode type="cbor" markers="false" pn="section-5.3.1-2">
message_2 = (
  G_Y_CIPHERTEXT_2 : bstr,
)
</sourcecode>
          <t indent="0" pn="section-5.3.1-3">where:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.1-4">
            <li pn="section-5.3.1-4.1">G_Y_CIPHERTEXT_2 is the concatenation of G_Y (i.e., the ephemeral public key of the Responder) and CIPHERTEXT_2.</li>
          </ul>
        </section>
        <section anchor="asym-msg2-proc" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.3.2">
          <name slugifiedName="name-responder-composition-of-me">Responder Composition of Message 2</name>
          <t indent="0" pn="section-5.3.2-1">The Responder <bcp14>SHALL</bcp14> compose message_2 as follows:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-2">
            <li pn="section-5.3.2-2.1">Generate an ephemeral ECDH key pair using the curve in the selected cipher suite and format it as a COSE_Key. Let G_Y be the 'x' parameter of the COSE_Key.</li>
            <li pn="section-5.3.2-2.2">Choose a connection identifier C_R and store it for the length of the EDHOC session.</li>
            <li pn="section-5.3.2-2.3">Compute the transcript hash TH_2 = H( G_Y, H(message_1) ), where H() is the EDHOC hash algorithm of the selected cipher suite. The input to the hash function is a CBOR Sequence. Note that H(message_1) can be computed and cached already in the processing of message_1.</li>
            <li pn="section-5.3.2-2.4">
              <t indent="0" pn="section-5.3.2-2.4.1">Compute MAC_2 as in <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/> with context_2 = &lt;&lt; C_R, ID_CRED_R, TH_2, CRED_R, ? EAD_2 &gt;&gt; (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/> for notation).
              </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-2.4.2">
                <li pn="section-5.3.2-2.4.2.1">If the Responder authenticates with a static Diffie-Hellman key (method equals 1 or 3), then mac_length_2 is the EDHOC MAC length of the selected cipher suite. If the Responder authenticates with a signature key (method equals 0 or 2), then mac_length_2 is equal to hash_length.</li>
                <li pn="section-5.3.2-2.4.2.2">C_R is a variable-length connection identifier.  Note that connection identifiers are byte strings but certain values are represented as integers in the message; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>.</li>
                <li pn="section-5.3.2-2.4.2.3">ID_CRED_R is an identifier to facilitate the retrieval of CRED_R; see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>.</li>
                <li pn="section-5.3.2-2.4.2.4">CRED_R is a CBOR item containing the authentication credential of the Responder; see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>.</li>
                <li pn="section-5.3.2-2.4.2.5">EAD_2 is external authorization data; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>.</li>
              </ul>
            </li>
            <li pn="section-5.3.2-2.5">
              <t indent="0" pn="section-5.3.2-2.5.1">If the Responder authenticates with a static Diffie-Hellman key (method equals 1 or 3), then Signature_or_MAC_2 is MAC_2. If the Responder authenticates with a signature key (method equals 0 or 2), then Signature_or_MAC_2 is the 'signature' field of a COSE_Sign1 object, computed as specified in <xref target="RFC9052" section="4.4" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-4.4" derivedContent="RFC9052"/> using the signature algorithm of the selected cipher suite, the private authentication key of the Responder, and the following parameters as input (see <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/> for an overview of COSE and <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/> for notation):  </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-2.5.2">
                <li pn="section-5.3.2-2.5.2.1">protected =  &lt;&lt; ID_CRED_R &gt;&gt;</li>
                <li pn="section-5.3.2-2.5.2.2">external_aad = &lt;&lt; TH_2, CRED_R, ? EAD_2 &gt;&gt;</li>
                <li pn="section-5.3.2-2.5.2.3">payload = MAC_2</li>
              </ul>
            </li>
            <li pn="section-5.3.2-2.6">
              <t indent="0" pn="section-5.3.2-2.6.1">CIPHERTEXT_2 is calculated with a binary additive stream cipher, using a keystream generated with EDHOC_Expand and the following plaintext:  </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-2.6.2">
                <li pn="section-5.3.2-2.6.2.1">
                  <t indent="0" pn="section-5.3.2-2.6.2.1.1">PLAINTEXT_2 = ( C_R, ID_CRED_R / bstr / -24..23, Signature_or_MAC_2, ? EAD_2 )      </t>
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.3.2-2.6.2.1.2">
                    <li pn="section-5.3.2-2.6.2.1.2.1">If ID_CRED_R contains a single 'kid' parameter, i.e., ID_CRED_R = { 4 : kid_R }, then the compact encoding is applied; see <xref target="compact-kid" format="default" sectionFormat="of" derivedContent="Section 3.5.3.2"/>.</li>
                    <li pn="section-5.3.2-2.6.2.1.2.2">C_R is the variable-length connection identifier. Note that connection identifiers are byte strings, but certain values are represented as integers in the message; see <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/>.</li>
                  </ul>
                </li>
                <li pn="section-5.3.2-2.6.2.2">Compute KEYSTREAM_2 as in <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>, where plaintext_length is the length of PLAINTEXT_2. For the case of plaintext_length exceeding the EDHOC_KDF output size, see <xref target="large-plaintext_2" format="default" sectionFormat="of" derivedContent="Appendix G"/>.</li>
                <li pn="section-5.3.2-2.6.2.3">CIPHERTEXT_2 = PLAINTEXT_2 XOR KEYSTREAM_2</li>
              </ul>
            </li>
            <li pn="section-5.3.2-2.7">Encode message_2 as a sequence of CBOR-encoded data items as specified in <xref target="asym-msg2-form" format="default" sectionFormat="of" derivedContent="Section 5.3.1"/>.</li>
          </ul>
        </section>
        <section anchor="initiator-processing-of-message-2" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.3.3">
          <name slugifiedName="name-initiator-processing-of-mes">Initiator Processing of Message 2</name>
          <t indent="0" pn="section-5.3.3-1">The Initiator <bcp14>SHALL</bcp14> process message_2 in the following order:</t>
          <ol spacing="normal" indent="adaptive" start="1" type="1" pn="section-5.3.3-2">
            <li pn="section-5.3.3-2.1" derivedCounter="1.">Decode message_2 (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>).</li>
            <li pn="section-5.3.3-2.2" derivedCounter="2.">Retrieve the protocol state using available message correlation (e.g., the CoAP Token, the 5-tuple, or the prepended C_I; see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>).</li>
            <li pn="section-5.3.3-2.3" derivedCounter="3.">Decrypt CIPHERTEXT_2; see <xref target="asym-msg2-proc" format="default" sectionFormat="of" derivedContent="Section 5.3.2"/>.</li>
            <li pn="section-5.3.3-2.4" derivedCounter="4.">If all processing is completed successfully, then make ID_CRED_R and (if present) EAD_2 available to the application for authentication and EAD processing. When and how to perform authentication is up to the application.</li>
            <li pn="section-5.3.3-2.5" derivedCounter="5.">Obtain the authentication credential (CRED_R) and the authentication key of R from the application (or by other means).</li>
            <li pn="section-5.3.3-2.6" derivedCounter="6.">Verify Signature_or_MAC_2 using the algorithm in the selected cipher suite. The verification process depends on the method; see <xref target="asym-msg2-proc" format="default" sectionFormat="of" derivedContent="Section 5.3.2"/>. Make the result of the verification available to the application.</li>
          </ol>
          <t indent="0" pn="section-5.3.3-3">If any processing step fails, then the Initiator <bcp14>MUST</bcp14> send an EDHOC error message back as defined in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, and the EDHOC session <bcp14>MUST</bcp14> be aborted.</t>
        </section>
      </section>
      <section anchor="m3" numbered="true" removeInRFC="false" toc="include" pn="section-5.4">
        <name slugifiedName="name-edhoc-message-3">EDHOC Message 3</name>
        <section anchor="asym-msg3-form" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.4.1">
          <name slugifiedName="name-formatting-of-message-3">Formatting of Message 3</name>
          <t indent="0" pn="section-5.4.1-1">message_3 <bcp14>SHALL</bcp14> be a CBOR Sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>), as defined below.</t>
          <sourcecode type="cbor" markers="false" pn="section-5.4.1-2">
message_3 = (
  CIPHERTEXT_3 : bstr,
)
</sourcecode>
        </section>
        <section anchor="asym-msg3-proc" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.4.2">
          <name slugifiedName="name-initiator-composition-of-mes">Initiator Composition of Message 3</name>
          <t indent="0" pn="section-5.4.2-1">The Initiator <bcp14>SHALL</bcp14> compose message_3 as follows:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.4.2-2">
            <li pn="section-5.4.2-2.1">Compute the transcript hash TH_3 = H(TH_2, PLAINTEXT_2, CRED_R), where H() is the EDHOC hash algorithm of the selected cipher suite. The input to the hash function is a CBOR Sequence. Note that TH_3 can be computed and cached already in the processing of message_2.</li>
            <li pn="section-5.4.2-2.2">
              <t indent="0" pn="section-5.4.2-2.2.1">Compute MAC_3 as in <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>, with context_3 = &lt;&lt; ID_CRED_I, TH_3, CRED_I, ? EAD_3 &gt;&gt;
              </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.4.2-2.2.2">
                <li pn="section-5.4.2-2.2.2.1">If the Initiator authenticates with a static Diffie-Hellman key (method equals 2 or 3), then mac_length_3 is the EDHOC MAC length of the selected cipher suite.  If the Initiator authenticates with a signature key (method equals 0 or 1), then mac_length_3 is equal to hash_length.</li>
                <li pn="section-5.4.2-2.2.2.2">ID_CRED_I is an identifier to facilitate the retrieval of CRED_I; see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>.</li>
                <li pn="section-5.4.2-2.2.2.3">CRED_I is a CBOR item containing the authentication credential of the Initiator; see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>.</li>
                <li pn="section-5.4.2-2.2.2.4">EAD_3 is external authorization data; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>.</li>
              </ul>
            </li>
            <li pn="section-5.4.2-2.3">
              <t indent="0" pn="section-5.4.2-2.3.1">If the Initiator authenticates with a static Diffie-Hellman key (method equals 2 or 3), then Signature_or_MAC_3 is MAC_3. If the Initiator authenticates with a signature key (method equals 0 or 1), then Signature_or_MAC_3 is the 'signature' field of a COSE_Sign1 object, computed as specified in <xref target="RFC9052" section="4.4" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-4.4" derivedContent="RFC9052"/> using the signature algorithm of the selected cipher suite, the private authentication key of the Initiator, and the following parameters as input (see <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/>):  </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.4.2-2.3.2">
                <li pn="section-5.4.2-2.3.2.1">protected =  &lt;&lt; ID_CRED_I &gt;&gt;</li>
                <li pn="section-5.4.2-2.3.2.2">external_aad = &lt;&lt; TH_3, CRED_I, ? EAD_3 &gt;&gt;</li>
                <li pn="section-5.4.2-2.3.2.3">payload = MAC_3</li>
              </ul>
            </li>
            <li pn="section-5.4.2-2.4">
              <t indent="0" pn="section-5.4.2-2.4.1">Compute a COSE_Encrypt0 object as defined in Sections <xref target="RFC9052" section="5.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.2" derivedContent="RFC9052"/> and <xref target="RFC9052" section="5.3" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.3" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, with the EDHOC AEAD algorithm of the selected cipher suite, using the encryption key K_3, the initialization vector IV_3 (if used by the AEAD algorithm), the plaintext PLAINTEXT_3, and the following parameters as input (see <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/>):  </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.4.2-2.4.2">
                <li pn="section-5.4.2-2.4.2.1">protected = h''</li>
                <li pn="section-5.4.2-2.4.2.2">external_aad = TH_3</li>
                <li pn="section-5.4.2-2.4.2.3">K_3 and IV_3 are defined in <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/></li>
                <li pn="section-5.4.2-2.4.2.4">
                  <t indent="0" pn="section-5.4.2-2.4.2.4.1">PLAINTEXT_3 = ( ID_CRED_I / bstr / -24..23, Signature_or_MAC_3, ? EAD_3 )      </t>
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.4.2-2.4.2.4.2">
                    <li pn="section-5.4.2-2.4.2.4.2.1">If ID_CRED_I contains a single 'kid' parameter, i.e., ID_CRED_I = { 4 : kid_I }, then the compact encoding is applied; see <xref target="compact-kid" format="default" sectionFormat="of" derivedContent="Section 3.5.3.2"/>.</li>
                  </ul>
                </li>
              </ul>
              <t indent="0" pn="section-5.4.2-2.4.3">
CIPHERTEXT_3 is the 'ciphertext' of COSE_Encrypt0.</t>
            </li>
            <li pn="section-5.4.2-2.5">Compute the transcript hash TH_4 = H(TH_3, PLAINTEXT_3, CRED_I), where H() is the EDHOC hash algorithm of the selected cipher suite. The input to the hash function is a CBOR Sequence.</li>
            <li pn="section-5.4.2-2.6">Calculate PRK_out as defined in <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>. The Initiator can now derive application keys using the EDHOC_Exporter interface; see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>.</li>
            <li pn="section-5.4.2-2.7">Encode message_3 as a CBOR data item as specified in <xref target="asym-msg3-form" format="default" sectionFormat="of" derivedContent="Section 5.4.1"/>.</li>
            <li pn="section-5.4.2-2.8">Make the connection identifiers (C_I and C_R) and the application algorithms in the selected cipher suite available to the application.</li>
          </ul>
          <t indent="0" pn="section-5.4.2-3">After creating message_3, the Initiator can compute PRK_out (see <xref target="prkout" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) and derive application keys using the EDHOC_Exporter interface (see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>). The Initiator <bcp14>SHOULD NOT</bcp14> persistently store PRK_out or application keys until the Initiator has verified message_4 or a message protected with a derived application key, such as an OSCORE message, from the Responder and the application has authenticated the Responder. This is similar to waiting for an acknowledgment (ACK) in a transport protocol. The Initiator <bcp14>SHOULD NOT</bcp14> send protected application data until the application has authenticated the Responder.</t>
        </section>
        <section anchor="responder-processing-of-message-3" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.4.3">
          <name slugifiedName="name-responder-processing-of-mess">Responder Processing of Message 3</name>
          <t indent="0" pn="section-5.4.3-1">The Responder <bcp14>SHALL</bcp14> process message_3 in the following order:</t>
          <ol spacing="normal" indent="adaptive" start="1" type="1" pn="section-5.4.3-2">
            <li pn="section-5.4.3-2.1" derivedCounter="1.">Decode message_3 (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>).</li>
            <li pn="section-5.4.3-2.2" derivedCounter="2.">Retrieve the protocol state using available message correlation (e.g., the CoAP Token, the 5-tuple, or the prepended C_R; see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>).</li>
            <li pn="section-5.4.3-2.3" derivedCounter="3.">Decrypt and verify the COSE_Encrypt0 as defined in Sections <xref target="RFC9052" section="5.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.2" derivedContent="RFC9052"/> and <xref target="RFC9052" section="5.3" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.3" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, with the EDHOC AEAD algorithm in the selected cipher suite and the parameters defined in <xref target="asym-msg3-proc" format="default" sectionFormat="of" derivedContent="Section 5.4.2"/>.</li>
            <li pn="section-5.4.3-2.4" derivedCounter="4.">If all processing completed successfully, then make ID_CRED_I and (if present) EAD_3 available to the application for authentication and EAD processing. When and how to perform authentication is up to the application.</li>
            <li pn="section-5.4.3-2.5" derivedCounter="5.">Obtain the authentication credential (CRED_I) and the authentication key of I from the application (or by other means).</li>
            <li pn="section-5.4.3-2.6" derivedCounter="6.">Verify Signature_or_MAC_3 using the algorithm in the selected cipher suite. The verification process depends on the method; see <xref target="asym-msg3-proc" format="default" sectionFormat="of" derivedContent="Section 5.4.2"/>. Make the result of the verification available to the application.</li>
            <li pn="section-5.4.3-2.7" derivedCounter="7.">Make the connection identifiers (C_I and C_R) and the application algorithms in the selected cipher suite available to the application.</li>
          </ol>
          <t indent="0" pn="section-5.4.3-3">After processing message_3, the Responder can compute PRK_out (see <xref target="prkout" format="default" sectionFormat="of" derivedContent="Section 4.1.3"/>) and derive application keys using the EDHOC_Exporter interface (see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>). The Responder <bcp14>SHOULD NOT</bcp14> persistently store PRK_out or application keys until the application has authenticated the Initiator. The Responder <bcp14>SHOULD NOT</bcp14> send protected application data until the application has authenticated the Initiator.</t>
          <t indent="0" pn="section-5.4.3-4">If any processing step fails, then the Responder <bcp14>MUST</bcp14> send an EDHOC error message back as defined in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, and the EDHOC session <bcp14>MUST</bcp14> be aborted.</t>
        </section>
      </section>
      <section anchor="m4" numbered="true" removeInRFC="false" toc="include" pn="section-5.5">
        <name slugifiedName="name-edhoc-message-4">EDHOC Message 4</name>
        <t indent="0" pn="section-5.5-1">This section specifies message_4, which is <bcp14>OPTIONAL</bcp14> to support. Key confirmation is normally provided by sending an application message from the Responder to the Initiator protected with a key derived with the EDHOC_Exporter, e.g., using OSCORE (see <xref target="transfer" format="default" sectionFormat="of" derivedContent="Appendix A"/>). In deployments where no protected application message is sent from the Responder to the Initiator, message_4 <bcp14>MUST</bcp14> be supported and <bcp14>MUST</bcp14> be used. Two examples of such deployments are:</t>
        <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-5.5-2"><li pn="section-5.5-2.1" derivedCounter="1.">when EDHOC is only used for authentication and no application data is sent and</li>
          <li pn="section-5.5-2.2" derivedCounter="2.">when application data is only sent from the Initiator to the Responder.</li>
        </ol>
        <t indent="0" pn="section-5.5-3">Further considerations about when to use message_4 are provided in Sections <xref target="applicability" format="counter" sectionFormat="of" derivedContent="3.9"/> and <xref target="sec-prop" format="counter" sectionFormat="of" derivedContent="9.1"/>.</t>
        <section anchor="asym-msg4-form" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.5.1">
          <name slugifiedName="name-formatting-of-message-4">Formatting of Message 4</name>
          <t indent="0" pn="section-5.5.1-1">message_4 <bcp14>SHALL</bcp14> be a CBOR Sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>), as defined below.</t>
          <sourcecode type="cbor" markers="false" pn="section-5.5.1-2">
message_4 = (
  CIPHERTEXT_4 : bstr,

)
</sourcecode>
        </section>
        <section anchor="asym-msg4-proc" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.5.2">
          <name slugifiedName="name-responder-composition-of-mes">Responder Composition of Message 4</name>
          <t indent="0" pn="section-5.5.2-1">The Responder <bcp14>SHALL</bcp14> compose message_4 as follows:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.5.2-2">
            <li pn="section-5.5.2-2.1">
              <t indent="0" pn="section-5.5.2-2.1.1">Compute a COSE_Encrypt0 as defined in Sections <xref target="RFC9052" section="5.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.2" derivedContent="RFC9052"/> and <xref target="RFC9052" section="5.3" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.3" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, with the EDHOC AEAD algorithm of the selected cipher suite, using the encryption key K_4, the initialization vector IV_4 (if used by the AEAD algorithm), the plaintext PLAINTEXT_4, and the following parameters as input (see <xref target="COSE" format="default" sectionFormat="of" derivedContent="Appendix C.3"/>):  </t>
              <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.5.2-2.1.2">
                <li pn="section-5.5.2-2.1.2.1">protected = h''</li>
                <li pn="section-5.5.2-2.1.2.2">external_aad = TH_4</li>
                <li pn="section-5.5.2-2.1.2.3">K_4 and IV_4 are defined in <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/></li>
                <li pn="section-5.5.2-2.1.2.4">
                  <t indent="0" pn="section-5.5.2-2.1.2.4.1">PLAINTEXT_4 = ( ? EAD_4 )
                  </t>
                  <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.5.2-2.1.2.4.2">
                    <li pn="section-5.5.2-2.1.2.4.2.1">EAD_4 is external authorization data; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>.</li>
                  </ul>
                </li>
              </ul>
              <t indent="0" pn="section-5.5.2-2.1.3">
CIPHERTEXT_4 is the 'ciphertext' of COSE_Encrypt0.</t>
            </li>
            <li pn="section-5.5.2-2.2">Encode message_4 as a CBOR data item as specified in <xref target="asym-msg4-form" format="default" sectionFormat="of" derivedContent="Section 5.5.1"/>.</li>
          </ul>
        </section>
        <section anchor="initiator-processing-of-message-4" numbered="true" removeInRFC="false" toc="exclude" pn="section-5.5.3">
          <name slugifiedName="name-initiator-processing-of-mess">Initiator Processing of Message 4</name>
          <t indent="0" pn="section-5.5.3-1">The Initiator <bcp14>SHALL</bcp14> process message_4 as follows:</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-5.5.3-2">
            <li pn="section-5.5.3-2.1">Decode message_4 (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>).</li>
            <li pn="section-5.5.3-2.2">Retrieve the protocol state using available message correlation (e.g., the CoAP Token, the 5-tuple, or the prepended C_I; see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>).</li>
            <li pn="section-5.5.3-2.3">Decrypt and verify the COSE_Encrypt0 as defined in Sections <xref target="RFC9052" section="5.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.2" derivedContent="RFC9052"/> and <xref target="RFC9052" section="5.3" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.3" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, with the EDHOC AEAD algorithm in the selected cipher suite and the parameters defined in <xref target="asym-msg4-proc" format="default" sectionFormat="of" derivedContent="Section 5.5.2"/>.</li>
            <li pn="section-5.5.3-2.4">Make (if present) EAD_4 available to the application for EAD processing.</li>
          </ul>
          <t indent="0" pn="section-5.5.3-3">If any processing step fails, then the Initiator <bcp14>MUST</bcp14> send an EDHOC error message back as defined in <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>, and the EDHOC session <bcp14>MUST</bcp14> be aborted.</t>
          <t indent="0" pn="section-5.5.3-4">After verifying message_4, the Initiator is assured that the Responder has calculated the key PRK_out (key confirmation) and that no other party can derive the key.</t>
        </section>
      </section>
    </section>
    <section anchor="error" numbered="true" removeInRFC="false" toc="include" pn="section-6">
      <name slugifiedName="name-error-handling">Error Handling</name>
      <t indent="0" pn="section-6-1">This section defines the format for error messages and the processing associated with the currently defined error codes. Additional error codes may be registered; see <xref target="error-code-reg" format="default" sectionFormat="of" derivedContent="Section 10.4"/>.</t>
      <t indent="0" pn="section-6-2">Many kinds of errors can occur during EDHOC processing. As in CoAP, an error can be triggered by errors in the received message or internal errors in the receiving endpoint. Except for processing and formatting errors, it is up to the application when to send an error message. Sending error messages is essential for debugging but <bcp14>MAY</bcp14> be skipped if, for example, an EDHOC session cannot be found or due to denial-of-service reasons; see <xref target="dos" format="default" sectionFormat="of" derivedContent="Section 9.7"/>. Error messages in EDHOC are always fatal. After sending an error message, the sender <bcp14>MUST</bcp14> abort the EDHOC session. The receiver <bcp14>SHOULD</bcp14> treat an error message as an indication that the other party likely has aborted the EDHOC session.  But since error messages might be forged, the receiver <bcp14>MAY</bcp14> try to continue the EDHOC session.</t>
      <t indent="0" pn="section-6-3">An EDHOC error message can be sent by either endpoint as a reply to any non-error EDHOC message. How errors at the EDHOC layer are transported depends on lower layers, which need to enable error messages to be sent and processed as intended.</t>
      <t indent="0" pn="section-6-4">error <bcp14>SHALL</bcp14> be a CBOR Sequence (see <xref target="CBOR" format="default" sectionFormat="of" derivedContent="Appendix C.1"/>), as defined below.</t>
      <figure anchor="fig-error-message" align="left" suppress-title="false" pn="figure-7">
        <name slugifiedName="name-edhoc-error-message">EDHOC Error Message</name>
        <sourcecode type="cbor" markers="false" pn="section-6-5.1">
error = (
  ERR_CODE : int,
  ERR_INFO : any,
)
</sourcecode>
      </figure>
      <t indent="0" pn="section-6-6">where:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-6-7">
        <li pn="section-6-7.1">ERR_CODE is an error code encoded as an integer. The value 0 is reserved for success and can only be used internally; all other values (negative or positive) indicate errors.</li>
        <li pn="section-6-7.2">ERR_INFO is error information. Content and encoding depend on the error code.</li>
      </ul>
      <t indent="0" pn="section-6-8">The remainder of this section specifies the currently defined error codes; see <xref target="tab-error-codes" format="default" sectionFormat="of" derivedContent="Table 3"/>. Additional error codes and corresponding error information may be specified.</t>
      <table anchor="tab-error-codes" align="center" pn="table-3">
        <name slugifiedName="name-edhoc-error-codes-and-error">EDHOC Error Codes and Error Information</name>
        <thead>
          <tr>
            <th align="left" colspan="1" rowspan="1">ERR_CODE</th>
            <th align="left" colspan="1" rowspan="1">ERR_INFO Type</th>
            <th align="left" colspan="1" rowspan="1">Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td align="right" colspan="1" rowspan="1">0</td>
            <td align="left" colspan="1" rowspan="1"/>
            <td align="left" colspan="1" rowspan="1">Reserved for success</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">1</td>
            <td align="left" colspan="1" rowspan="1">tstr</td>
            <td align="left" colspan="1" rowspan="1">Unspecified error</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">2</td>
            <td align="left" colspan="1" rowspan="1">suites</td>
            <td align="left" colspan="1" rowspan="1">Wrong selected cipher suite</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">3</td>
            <td align="left" colspan="1" rowspan="1">true</td>
            <td align="left" colspan="1" rowspan="1">Unknown credential referenced</td>
          </tr>
          <tr>
            <td align="right" colspan="1" rowspan="1">23</td>
            <td align="left" colspan="1" rowspan="1"/>
            <td align="left" colspan="1" rowspan="1">Reserved</td>
          </tr>
        </tbody>
      </table>
      <section anchor="success" numbered="true" removeInRFC="false" toc="include" pn="section-6.1">
        <name slugifiedName="name-success">Success</name>
        <t indent="0" pn="section-6.1-1">Error code 0 <bcp14>MAY</bcp14> be used internally in an application to indicate success, i.e., as a standard value in case of no error, e.g., in status reporting or log files. Error code 0 <bcp14>MUST NOT</bcp14> be used as part of the EDHOC message exchange. If an endpoint receives an error message with error code 0, then it <bcp14>MUST</bcp14> abort the EDHOC session and <bcp14>MUST NOT</bcp14> send an error message.</t>
      </section>
      <section anchor="unspecified-error" numbered="true" removeInRFC="false" toc="include" pn="section-6.2">
        <name slugifiedName="name-unspecified-error">Unspecified Error</name>
        <t indent="0" pn="section-6.2-1">Error code 1 is used for errors that do not have a specific error code defined. ERR_INFO <bcp14>MUST</bcp14> be a text string containing a human-readable diagnostic message that <bcp14>SHOULD</bcp14> be written in English, for example, "Method not supported". The diagnostic text message is mainly intended for software engineers who during debugging need to interpret it in the context of the EDHOC specification. The diagnostic message <bcp14>SHOULD</bcp14> be provided to the calling application where it <bcp14>SHOULD</bcp14> be logged.</t>
      </section>
      <section anchor="wrong-selected" numbered="true" removeInRFC="false" toc="include" pn="section-6.3">
        <name slugifiedName="name-wrong-selected-cipher-suite">Wrong Selected Cipher Suite</name>
        <t indent="0" pn="section-6.3-1">Error code 2 <bcp14>MUST</bcp14> only be used when replying to message_1 in case the cipher suite selected by the Initiator is not supported by the Responder or if the Responder supports a cipher suite more preferred by the Initiator than the selected cipher suite; see <xref target="resp-proc-msg1" format="default" sectionFormat="of" derivedContent="Section 5.2.3"/>. In this case, ERR_INFO = SUITES_R and is of type suites; see <xref target="asym-msg1-form" format="default" sectionFormat="of" derivedContent="Section 5.2.1"/>. If the Responder does not support the selected cipher suite, then SUITES_R <bcp14>MUST</bcp14> include one or more supported cipher suites. If the Responder supports a cipher suite in SUITES_I other than the selected cipher suite (independently of if the selected cipher suite is supported or not), then SUITES_R <bcp14>MUST</bcp14> include the supported cipher suite in SUITES_I, which is most preferred by the Initiator. SUITES_R <bcp14>MAY</bcp14> include a single cipher suite; in which case, it is encoded as an int. If the Responder does not support any cipher suite in SUITES_I, then it <bcp14>SHOULD</bcp14> include all its supported cipher suites in SUITES_R.</t>
        <t indent="0" pn="section-6.3-2">In contrast to SUITES_I, the order of the cipher suites in SUITES_R has no significance.</t>
        <section anchor="cipher-suite-negotiation" numbered="true" removeInRFC="false" toc="exclude" pn="section-6.3.1">
          <name slugifiedName="name-cipher-suite-negotiation">Cipher Suite Negotiation</name>
          <t indent="0" pn="section-6.3.1-1">After receiving SUITES_R, the Initiator can determine which cipher suite to select (if any) for the next EDHOC run with the Responder. The Initiator <bcp14>SHOULD</bcp14> remember which selected cipher suite to use until the next message_1 has been sent; otherwise, the Initiator and Responder will run into an infinite loop where the Initiator selects its most preferred cipher suite and the Responder sends an error with supported cipher suites.</t>
          <t indent="0" pn="section-6.3.1-2">After a completed EDHOC session, the Initiator <bcp14>MAY</bcp14> remember the selected cipher suite to use in future EDHOC sessions with this Responder. Note that if the Initiator or Responder is updated with new cipher suite policies, any cached information may be outdated.</t>
          <t indent="0" pn="section-6.3.1-3">Note that the Initiator's list of supported cipher suites and order of preference is fixed (see Sections <xref target="asym-msg1-form" format="counter" sectionFormat="of" derivedContent="5.2.1"/> and <xref target="init-proc-msg1" format="counter" sectionFormat="of" derivedContent="5.2.2"/>). Furthermore, the Responder <bcp14>SHALL</bcp14> only accept message_1 if the selected cipher suite is the first cipher suite in SUITES_I that the Responder also supports (see <xref target="resp-proc-msg1" format="default" sectionFormat="of" derivedContent="Section 5.2.3"/>). Following this procedure ensures that the selected cipher suite is the most preferred (by the Initiator) cipher suite supported by both parties. For examples, see <xref target="ex-neg" format="default" sectionFormat="of" derivedContent="Section 6.3.2"/>.</t>
          <t indent="0" pn="section-6.3.1-4">If the selected cipher suite is not the first cipher suite that the Responder supports in SUITES_I received in message_1, then the Responder <bcp14>MUST</bcp14> abort the EDHOC session; see <xref target="resp-proc-msg1" format="default" sectionFormat="of" derivedContent="Section 5.2.3"/>. If SUITES_I in message_1 is manipulated, then the integrity verification of message_2 containing the transcript hash TH_2 will fail and the Initiator will abort the EDHOC session.</t>
        </section>
        <section anchor="ex-neg" numbered="true" removeInRFC="false" toc="exclude" pn="section-6.3.2">
          <name slugifiedName="name-examples">Examples</name>
          <t indent="0" pn="section-6.3.2-1">Assume that the Initiator supports the five cipher suites, 5, 6, 7, 8, and 9, in decreasing order of preference. Figures <xref target="fig-error1" format="counter" sectionFormat="of" derivedContent="8"/> and <xref target="fig-error2" format="counter" sectionFormat="of" derivedContent="9"/> show two examples of how the Initiator can format SUITES_I and how SUITES_R is used by Responders to give the Initiator information about the cipher suites that the Responder supports.</t>
          <t indent="0" pn="section-6.3.2-2">In Example 1 (<xref target="fig-error1" format="default" sectionFormat="of" derivedContent="Figure 8"/>), the Responder supports cipher suite 6 but not the initially selected cipher suite 5. The Responder rejects the first message_1 with an error indicating support for suite 6 in SUITES_R. The Initiator also supports suite 6 and therefore selects suite 6 in the second message_1. The Initiator prepends in SUITES_I the selected suite 6 with the more preferred suites, in this case suite 5, to mitigate a potential attack on the cipher suite negotiation.</t>
          <figure anchor="fig-error1" align="left" suppress-title="false" pn="figure-8">
            <name slugifiedName="name-cipher-suite-negotiation-ex">Cipher Suite Negotiation Example 1</name>
            <artset pn="section-6.3.2-3.1">
              <artwork type="svg" align="center" pn="section-6.3.2-3.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 560 224" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                  <path d="M 8,48 L 8,208" fill="none" stroke="black"/>
                  <path d="M 552,48 L 552,208" fill="none" stroke="black"/>
                  <path d="M 8,64 L 544,64" fill="none" stroke="black"/>
                  <path d="M 16,128 L 552,128" fill="none" stroke="black"/>
                  <path d="M 8,192 L 544,192" fill="none" stroke="black"/>
                  <polygon class="arrowhead" points="552,192 540,186.4 540,197.6" fill="black" transform="rotate(0,544,192)"/>
                  <polygon class="arrowhead" points="552,64 540,58.4 540,69.6" fill="black" transform="rotate(0,544,64)"/>
                  <polygon class="arrowhead" points="24,128 12,122.4 12,133.6" fill="black" transform="rotate(180,16,128)"/>
                  <g class="text">
                    <text x="40" y="36">Initiator</text>
                    <text x="520" y="36">Responder</text>
                    <text x="152" y="52">METHOD,</text>
                    <text x="220" y="52">SUITES_I</text>
                    <text x="264" y="52">=</text>
                    <text x="284" y="52">5,</text>
                    <text x="316" y="52">G_X,</text>
                    <text x="356" y="52">C_I,</text>
                    <text x="400" y="52">EAD_1</text>
                    <text x="280" y="84">message_1</text>
                    <text x="196" y="116">ERR_CODE</text>
                    <text x="240" y="116">=</text>
                    <text x="260" y="116">2,</text>
                    <text x="308" y="116">SUITES_R</text>
                    <text x="352" y="116">=</text>
                    <text x="368" y="116">6</text>
                    <text x="280" y="148">error</text>
                    <text x="144" y="180">METHOD,</text>
                    <text x="212" y="180">SUITES_I</text>
                    <text x="256" y="180">=</text>
                    <text x="280" y="180">[5,</text>
                    <text x="312" y="180">6],</text>
                    <text x="348" y="180">G_X,</text>
                    <text x="388" y="180">C_I,</text>
                    <text x="432" y="180">EAD_1</text>
                    <text x="280" y="212">message_1</text>
                  </g>
                </svg>
              </artwork>
              <artwork type="ascii-art" align="center" pn="section-6.3.2-3.1.2">
Initiator                                                   Responder
|              METHOD, SUITES_I = 5, G_X, C_I, EAD_1                |
+------------------------------------------------------------------&gt;|
|                             message_1                             |
|                                                                   |
|                   ERR_CODE = 2, SUITES_R = 6                      |
|&lt;------------------------------------------------------------------+
|                               error                               |
|                                                                   |
|             METHOD, SUITES_I = [5, 6], G_X, C_I, EAD_1            |
+------------------------------------------------------------------&gt;|
|                             message_1                             |
</artwork>
            </artset>
          </figure>
          <t indent="0" pn="section-6.3.2-4">In Example 2 (<xref target="fig-error2" format="default" sectionFormat="of" derivedContent="Figure 9"/>), the Responder supports cipher suites 8 and 9 but not the more preferred (by the Initiator) cipher suites 5, 6 or 7. To illustrate the negotiation mechanics, we let the Initiator first make a guess that the Responder supports suite 6 but not suite 5. Since the Responder supports neither 5 nor 6, it rejects the first message_1 with an error indicating support for suites 8 and 9 in SUITES_R (in any order). The Initiator also supports suites 8 and 9, and prefers suite 8, so it  selects suite 8 in the second message_1. The Initiator prepends in SUITES_I the selected suite 8 with the more preferred suites in order of preference, in this case, suites 5, 6 and 7, to mitigate a potential attack on the cipher suite negotiation.</t>
          <ol type="Note %d." indent="adaptive" spacing="normal" start="1" pn="section-6.3.2-5">
          <li pn="section-6.3.2-5.1" derivedCounter="Note 1.">If the Responder had supported suite 5, then the first message_1 would not have been accepted either, since the Responder observes that suite 5 is more preferred by the Initiator than the selected suite 6. In that case, the Responder would have included suite 5 in SUITES_R of the response, and it would then have become the selected and only suite in the second message_1.</li>
            <li pn="section-6.3.2-5.2" derivedCounter="Note 2.">For each message_1, the Initiator <bcp14>MUST</bcp14> generate a new ephemeral ECDH key pair matching the selected cipher suite.</li>
          </ol>
          <figure anchor="fig-error2" align="left" suppress-title="false" pn="figure-9">
            <name slugifiedName="name-cipher-suite-negotiation-exa">Cipher Suite Negotiation Example 2</name>
            <artset pn="section-6.3.2-6.1">
              <artwork type="svg" align="center" pn="section-6.3.2-6.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 560 224" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                  <path d="M 8,48 L 8,208" fill="none" stroke="black"/>
                  <path d="M 552,48 L 552,208" fill="none" stroke="black"/>
                  <path d="M 8,64 L 544,64" fill="none" stroke="black"/>
                  <path d="M 16,128 L 552,128" fill="none" stroke="black"/>
                  <path d="M 8,192 L 544,192" fill="none" stroke="black"/>
                  <polygon class="arrowhead" points="552,192 540,186.4 540,197.6" fill="black" transform="rotate(0,544,192)"/>
                  <polygon class="arrowhead" points="552,64 540,58.4 540,69.6" fill="black" transform="rotate(0,544,64)"/>
                  <polygon class="arrowhead" points="24,128 12,122.4 12,133.6" fill="black" transform="rotate(180,16,128)"/>
                  <g class="text">
                    <text x="40" y="36">Initiator</text>
                    <text x="520" y="36">Responder</text>
                    <text x="136" y="52">METHOD,</text>
                    <text x="204" y="52">SUITES_I</text>
                    <text x="248" y="52">=</text>
                    <text x="272" y="52">[5,</text>
                    <text x="304" y="52">6],</text>
                    <text x="340" y="52">G_X,</text>
                    <text x="380" y="52">C_I,</text>
                    <text x="424" y="52">EAD_1</text>
                    <text x="280" y="84">message_1</text>
                    <text x="188" y="116">ERR_CODE</text>
                    <text x="232" y="116">=</text>
                    <text x="252" y="116">2,</text>
                    <text x="300" y="116">SUITES_R</text>
                    <text x="344" y="116">=</text>
                    <text x="368" y="116">[9,</text>
                    <text x="396" y="116">8]</text>
                    <text x="280" y="148">error</text>
                    <text x="128" y="180">METHOD,</text>
                    <text x="196" y="180">SUITES_I</text>
                    <text x="240" y="180">=</text>
                    <text x="264" y="180">[5,</text>
                    <text x="292" y="180">6,</text>
                    <text x="316" y="180">7,</text>
                    <text x="344" y="180">8],</text>
                    <text x="380" y="180">G_X,</text>
                    <text x="420" y="180">C_I,</text>
                    <text x="464" y="180">EAD_1</text>
                    <text x="280" y="212">message_1</text>
                  </g>
                </svg>
              </artwork>
              <artwork type="ascii-art" align="center" pn="section-6.3.2-6.1.2">
Initiator                                                   Responder
|            METHOD, SUITES_I = [5, 6], G_X, C_I, EAD_1             |
+------------------------------------------------------------------&gt;|
|                             message_1                             |
|                                                                   |
|                  ERR_CODE = 2, SUITES_R = [9, 8]                  |
|&lt;------------------------------------------------------------------+
|                               error                               |
|                                                                   |
|           METHOD, SUITES_I = [5, 6, 7, 8], G_X, C_I, EAD_1        |
+------------------------------------------------------------------&gt;|
|                             message_1                             |
</artwork>
            </artset>
          </figure>
        </section>
      </section>
      <section anchor="unknown-credential-referenced" numbered="true" removeInRFC="false" toc="include" pn="section-6.4">
        <name slugifiedName="name-unknown-credential-referenc">Unknown Credential Referenced</name>
        <t indent="0" pn="section-6.4-1">Error code 3 is used for errors due to a received credential identifier (ID_CRED_R in message_2 or ID_CRED_I message_3) containing a reference to a credential that the receiving endpoint does not have access to. The intent with this error code is that the endpoint who sent the credential identifier should, for the next EDHOC session, try another credential identifier supported according to the application profile.</t>
        <t indent="0" pn="section-6.4-2">For example, an application profile could list x5t and x5chain as supported credential identifiers and state that x5t should be used if it can be assumed that the X.509 certificate is available at the receiving side. This error code thus enables the certificate chain to be sent only when needed, bearing in mind that error messages are not protected so an adversary can try to cause unnecessary, large credential identifiers.</t>
        <t indent="0" pn="section-6.4-3">For the error code 3, the error information <bcp14>SHALL</bcp14> be the CBOR simple value <tt>true</tt> (0xf5). Error code 3 <bcp14>MUST NOT</bcp14> be used when the received credential identifier type is not supported.</t>
      </section>
    </section>
    <section anchor="duplication" numbered="true" removeInRFC="false" toc="include" pn="section-7">
      <name slugifiedName="name-edhoc-message-deduplication">EDHOC Message Deduplication</name>
      <t indent="0" pn="section-7-1">By default, EDHOC assumes that message duplication is handled by the transport (which is exemplified by CoAP in this section); see <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/>.</t>
      <t indent="0" pn="section-7-2">Deduplication of CoAP messages is described in <xref target="RFC7252" section="4.5" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7252#section-4.5" derivedContent="RFC7252"/>. This handles the case when the same Confirmable (CON) message is received multiple times due to missing acknowledgment on the CoAP messaging layer. The recommended processing in <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/> is that the duplicate message is acknowledged, but the received message is only processed once by the CoAP stack.</t>
      <t indent="0" pn="section-7-3">Message deduplication is resource demanding and therefore not supported in all CoAP implementations. Since EDHOC is targeting constrained environments, it is desirable that EDHOC can optionally support transport layers that do not handle message duplication. Special care is needed to avoid issues with duplicate messages; see <xref target="proc-outline" format="default" sectionFormat="of" derivedContent="Section 5.1"/>.</t>
      <t indent="0" pn="section-7-4">The guiding principle here is similar to the deduplication processing on the CoAP messaging layer, i.e., a received duplicate EDHOC message <bcp14>SHALL NOT</bcp14> result in another instance of the next EDHOC message. The result <bcp14>MAY</bcp14> be that a duplicate next EDHOC message is sent, provided it is still relevant with respect to the current protocol state. In any case, the received message <bcp14>MUST NOT</bcp14> be processed more than once in the same EDHOC session. This is called "EDHOC message deduplication".</t>
      <t indent="0" pn="section-7-5">An EDHOC implementation <bcp14>MAY</bcp14> store the previously sent EDHOC message to be able to resend it.</t>
      <t indent="0" pn="section-7-6">In principle, if the EDHOC implementation would deterministically regenerate the identical EDHOC message previously sent, it would be possible to instead store the protocol state to be able to recreate and resend the previously sent EDHOC message. However, even if the protocol state is fixed, the message generation may introduce differences that compromise security. For example, in the generation of message_3, if I is performing a (non-deterministic) ECDSA signature (say, method 0 or 1 and cipher suite 2 or 3), then PLAINTEXT_3 is randomized, but K_3 and IV_3 are the same, leading to a key and nonce reuse.</t>
      <t indent="0" pn="section-7-7">The EDHOC implementation <bcp14>MUST NOT</bcp14> store the previous protocol state and regenerate an EDHOC message if there is a risk that the same key and IV are used for two (or more) distinct messages.</t>
      <t indent="0" pn="section-7-8">The previous message or protocol state <bcp14>MUST NOT</bcp14> be kept longer than what is required for retransmission, for example, in the case of CoAP transport, no longer than the EXCHANGE_LIFETIME (see <xref target="RFC7252" section="4.8.2" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7252#section-4.8.2" derivedContent="RFC7252"/>).</t>
    </section>
    <section anchor="mti" numbered="true" removeInRFC="false" toc="include" pn="section-8">
      <name slugifiedName="name-compliance-requirements">Compliance Requirements</name>
      <t indent="0" pn="section-8-1">In the absence of an application profile specifying otherwise:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-8-2">
        <li pn="section-8-2.1">An implementation <bcp14>MAY</bcp14> support only an Initiator or only a Responder.</li>
        <li pn="section-8-2.2">An implementation <bcp14>MAY</bcp14> support only a single method. None of the methods are mandatory to implement.</li>
        <li pn="section-8-2.3">Implementations <bcp14>MUST</bcp14> support 'kid' parameters. None of the other COSE header parameters are mandatory to implement.</li>
        <li pn="section-8-2.4">An implementation <bcp14>MAY</bcp14> support only a single credential type (CCS, CWT, X.509, or C509). None of the credential types are mandatory to implement.</li>
        <li pn="section-8-2.5">Implementations <bcp14>MUST</bcp14> support the EDHOC_Exporter.</li>
        <li pn="section-8-2.6">Implementations <bcp14>MAY</bcp14> support message_4. Error codes (ERR_CODE) 1 and 2 <bcp14>MUST</bcp14> be supported.</li>
        <li pn="section-8-2.7">Implementations <bcp14>MUST</bcp14> support EAD.</li>
        <li pn="section-8-2.8">Implementations <bcp14>MUST</bcp14> support cipher suites 2 and 3. Cipher suites 2 (AES-CCM-16-64-128, SHA-256, 8, P-256, ES256, AES-CCM-16-64-128, SHA-256) and 3 (AES-CCM-16-128-128, SHA-256, 16, P-256, ES256, AES-CCM-16-64-128, SHA-256) only differ in the size of the MAC length, so supporting one or both of these is not significantly different. Implementations only need to implement the algorithms needed for their supported methods.</li>
      </ul>
    </section>
    <section anchor="security" numbered="true" removeInRFC="false" toc="include" pn="section-9">
      <name slugifiedName="name-security-considerations">Security Considerations</name>
      <section anchor="sec-prop" numbered="true" removeInRFC="false" toc="include" pn="section-9.1">
        <name slugifiedName="name-security-properties">Security Properties</name>
        <t indent="0" pn="section-9.1-1">EDHOC has similar security properties as can be expected from the theoretical SIGMA-I protocol <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/> and the Noise XX pattern <xref target="Noise" format="default" sectionFormat="of" derivedContent="Noise"/>, which are similar to methods 0 and 3, respectively. Proven security properties are detailed in the security analysis publications referenced at the end of this section.</t>
        <t indent="0" pn="section-9.1-2">Using the terminology from <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, EDHOC provides forward secrecy, mutual authentication with aliveness, consistency, and peer awareness. As described in <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, message_3 provides peer awareness to the Responder, while message_4 provides peer awareness to the Initiator.	By including the authentication credentials in the transcript hash, EDHOC protects against an identity misbinding attack like the Duplicate Signature Key Selection (DSKS) that the MAC-then-Sign variant of SIGMA-I is otherwise vulnerable to.</t>
        <t indent="0" pn="section-9.1-3">As described in <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, different levels of identity protection are provided to the Initiator and Responder. EDHOC provides identity protection of the Initiator against active attacks and identity protection of the Responder against passive attacks. An active attacker can get the credential identifier of the Responder by eavesdropping on the destination address used for transporting message_1 and then sending its own message_1 to the same address. The roles should be assigned to protect the most sensitive identity/identifier, typically that which is not possible to infer from routing information in the lower layers.</t>
        <t indent="0" pn="section-9.1-4">EDHOC messages might change in transit due to a noisy channel or through modification by an attacker. Changes in message_1 and message_2 (except Signature_or_MAC_2 when the signature scheme is not strongly unforgeable) are detected when verifying Signature_or_MAC_2. Changes to not strongly unforgeable Signature_or_MAC_2 and message_3 are detected when verifying CIPHERTEXT_3. Changes to message_4 are detected when verifying CIPHERTEXT_4.</t>
        <t indent="0" pn="section-9.1-5">Compared to <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, EDHOC adds an explicit method type and expands the message authentication coverage to additional elements such as algorithms, external authorization data, and previous plaintext messages. This protects against an attacker replaying messages or injecting messages from another EDHOC session.</t>
        <t indent="0" pn="section-9.1-6">EDHOC also adds the selection of connection identifiers and downgrade-protected negotiation of cryptographic parameters, i.e., an attacker cannot affect the negotiated parameters. A single session of EDHOC does not include negotiation of cipher suites, but it enables the Responder to verify that the selected cipher suite is the most preferred cipher suite by the Initiator that is supported by both the Initiator and Responder and to abort the EDHOC session if not.</t>
        <t indent="0" pn="section-9.1-7">As required by <xref target="RFC7258" format="default" sectionFormat="of" derivedContent="RFC7258"/>, IETF protocols need to mitigate pervasive monitoring when possible. Therefore, EDHOC only supports methods with ephemeral Diffie-Hellman and provides a key update function (see <xref target="keyupdate" format="default" sectionFormat="of" derivedContent="Appendix H"/>) for lightweight application protocol rekeying. Either of these provides forward secrecy, in the sense that compromise of the private authentication keys does not compromise past session keys (PRK_out) and compromise of a session key does not compromise past session keys. Frequently re-running EDHOC with ephemeral Diffie-Hellman forces attackers to perform dynamic key exfiltration where the attacker must have continuous interactions with the collaborator, which is a significant sustained attack.</t>
        <t indent="0" pn="section-9.1-8">To limit the effect of breaches, it is important to limit the use of symmetric group keys for bootstrapping. Therefore, EDHOC strives to make the additional cost of using raw public keys and self-signed certificates as small as possible. Raw public keys and self-signed certificates are not a replacement for a public key infrastructure but <bcp14>SHOULD</bcp14> be used instead of symmetric group keys for bootstrapping.</t>
        <t indent="0" pn="section-9.1-9">Compromise of the long-term keys (private signature or static DH keys) does not compromise the security of completed EDHOC sessions. Compromising the private authentication keys of one party lets an active attacker impersonate that compromised party in EDHOC sessions with other parties but does not let the attacker impersonate other parties in EDHOC sessions with the compromised party. Compromise of the long-term keys does not enable a passive attacker to compromise future session keys (PRK_out). Compromise of the HKDF input parameters (ECDH shared secret) leads to compromise of all session keys derived from that compromised shared secret. Compromise of one session key does not compromise other session keys. Compromise of PRK_out leads to compromise of all keying material derived with the EDHOC_Exporter.</t>
        <t indent="0" pn="section-9.1-10">Based on the cryptographic algorithm requirements (<xref target="sec_algs" format="default" sectionFormat="of" derivedContent="Section 9.3"/>), EDHOC provides a minimum of 64-bit security against online brute force attacks and a minimum of 128-bit security against offline brute force attacks. To break 64-bit security against online brute force, an attacker would on average have to send 4.3 billion messages per second for 68 years, which is infeasible in constrained IoT radio technologies. A forgery against a 64-bit MAC in EDHOC breaks the security of all future application data, while a forgery against a 64-bit MAC in the subsequent application protocol (e.g., OSCORE <xref target="RFC8613" format="default" sectionFormat="of" derivedContent="RFC8613"/>) typically only breaks the security of the data in the forged packet.</t>
        <t indent="0" pn="section-9.1-11">As the EDHOC session is aborted when verification fails, the security against online attacks is given by the sum of the strength of the verified signatures and MACs (including MAC in AEAD). As an example, if EDHOC is used with method 3, cipher suite 2, and message_4, the Responder is authenticated with 128-bit security against online attacks (the sum of the 64-bit MACs in message_2 and message_4). The same principle applies for MACs in an application protocol keyed by EDHOC as long as EDHOC is re-run when verification of the first MACs in the application protocol fails. As an example, if EDHOC with method 3 and cipher suite 2 is used as in Figure 2 of <xref target="I-D.ietf-core-oscore-edhoc" format="default" sectionFormat="of" derivedContent="EDHOC-CoAP-OSCORE"/>, 128-bit mutual authentication against online attacks can be achieved after completion of the first OSCORE request and response.</t>
        <t indent="0" pn="section-9.1-12">After sending message_3, the Initiator is assured that no other party than the Responder can compute the key PRK_out. While the Initiator can securely send protected application data, the Initiator <bcp14>SHOULD NOT</bcp14> persistently store the keying material PRK_out until the Initiator has verified message_4 or a message protected with a derived application key, such as an OSCORE message, from the Responder. After verifying message_3, the Responder is assured that an honest Initiator has computed the key PRK_out. The Responder can securely derive and store the keying material PRK_out and send protected application data.</t>
        <t indent="0" pn="section-9.1-13">External authorization data sent in message_1 (EAD_1) or message_2 (EAD_2) should be considered unprotected by EDHOC; see <xref target="unprot-data" format="default" sectionFormat="of" derivedContent="Section 9.5"/>. EAD_2 is encrypted, but the Responder has not yet authenticated the Initiator and the encryption does not provide confidentiality against active attacks.</t>
        <t indent="0" pn="section-9.1-14">External authorization data sent in message_3 (EAD_3) or message_4 (EAD_4) is protected between the Initiator and Responder by the protocol, but note that EAD fields may be used by the application before the message verification is completed; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>. Designing a secure mechanism that uses EAD is not necessarily straightforward. This document only provides the EAD transport mechanism, but the problem of agreeing on the surrounding context and the meaning of the information passed to and from the application remains. Any new uses of EAD should be subject to careful review.</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-9.1-15">
          <dt pn="section-9.1-15.1">Key Compromise Impersonation (KCI):</dt>
          <dd pn="section-9.1-15.2">In EDHOC authenticated with signature keys, EDHOC provides KCI protection against an attacker having access to the long-term key or the ephemeral secret key. With static Diffie-Hellman key authentication, KCI protection would be provided against an attacker having access to the long-term Diffie-Hellman key but not to an attacker having access to the ephemeral secret key. Note that the term KCI has typically been used for compromise of long-term keys and that an attacker with access to the ephemeral secret key can only attack that specific EDHOC session.</dd>
          <dt pn="section-9.1-15.3">Repudiation:</dt>
          <dd pn="section-9.1-15.4">If an endpoint authenticates with a signature, the other endpoint can prove that the endpoint performed a run of the protocol by presenting the data being signed as well as the signature itself. With static Diffie-Hellman key authentication, the authenticating endpoint can deny having participated in the protocol.</dd>
        </dl>
        <t indent="0" pn="section-9.1-16">Earlier versions of EDHOC have been formally analyzed <xref target="Bruni18" format="default" sectionFormat="of" derivedContent="Bruni18"/> <xref target="Norrman20" format="default" sectionFormat="of" derivedContent="Norrman20"/> <xref target="CottierPointcheval22" format="default" sectionFormat="of" derivedContent="CottierPointcheval22"/> <xref target="Jacomme23" format="default" sectionFormat="of" derivedContent="Jacomme23"/> <xref target="GuentherIlunga22" format="default" sectionFormat="of" derivedContent="GuentherIlunga22"/>, and the specification has been updated based on the analysis.</t>
      </section>
      <section anchor="crypto" numbered="true" removeInRFC="false" toc="include" pn="section-9.2">
        <name slugifiedName="name-cryptographic-consideration">Cryptographic Considerations</name>
        <t indent="0" pn="section-9.2-1">The SIGMA protocol requires that the encryption of message_3 provides confidentiality against active attackers and EDHOC message_4 relies on the use of
authenticated encryption. Hence, the message authenticating functionality of the authenticated encryption in EDHOC is critical, i.e., authenticated encryption <bcp14>MUST NOT</bcp14> be replaced by plain encryption only, even if authentication is provided at another level or through a different mechanism.</t>
        <t indent="0" pn="section-9.2-2">To reduce message overhead, EDHOC does not use explicit nonces and instead relies on the ephemeral public keys to provide randomness to each EDHOC session. A good amount of randomness is important for the key generation to provide liveness and to protect against interleaving attacks. For this reason, the ephemeral keys <bcp14>MUST NOT</bcp14> be used in more than one EDHOC message, and both parties <bcp14>SHALL</bcp14> generate fresh, random ephemeral key pairs. Note that an ephemeral key may be used to calculate several ECDH shared secrets. When static Diffie-Hellman authentication is used, the same ephemeral key is used in both ephemeral-ephemeral and ephemeral-static ECDH.</t>
        <t indent="0" pn="section-9.2-3">As discussed in <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/>, the encryption of message_2 only needs to protect against a passive attacker since active attackers can always get the Responder's identity by sending their own message_1. EDHOC uses the EDHOC_Expand function (typically HKDF-Expand) as a binary additive stream cipher that is proven secure as long as the expand function is a Pseudorandom Function (PRF). HKDF-Expand is not often used as a stream cipher as it is slow on long messages, and most applications require both confidentiality with indistinguishability under adaptive chosen ciphertext attack (IND-CCA2) as well as integrity protection. For the encryption of message_2, any speed difference is negligible, IND-CCA2 does not increase security, and integrity is provided by the inner MAC (and signature depending on method).</t>
        <t indent="0" pn="section-9.2-4">Requirements for how to securely generate, validate, and process the public keys depend on the elliptic curve. For X25519 and X448, the requirements are defined in <xref target="RFC7748" format="default" sectionFormat="of" derivedContent="RFC7748"/>. For X25519 and X448, the check for all-zero output as specified in <xref target="RFC7748" sectionFormat="of" section="6" format="default" derivedLink="https://rfc-editor.org/rfc/rfc7748#section-6" derivedContent="RFC7748"/> <bcp14>MUST</bcp14> be done. For secp256r1, secp384r1, and secp521r1, the requirements are defined in Section 5 of <xref target="SP-800-56A" format="default" sectionFormat="of" derivedContent="SP-800-56A"/>. For secp256r1, secp384r1, and secp521r1, at least partial public key validation <bcp14>MUST</bcp14> be done.</t>
        <t indent="0" pn="section-9.2-5">The same authentication credential <bcp14>MAY</bcp14> be used for both the Initiator
   and Responder roles.  As noted in <xref target="RFC9052" section="12" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-12" derivedContent="RFC9052"/>, the use of a single key for multiple algorithms is strongly discouraged unless proven secure by a dedicated cryptographic analysis.  In particular, this recommendation applies to using the same private key for static Diffie-Hellman authentication and digital signature authentication. A preliminary conjecture is that a minor change to EDHOC may be sufficient to fit the analysis of a secure shared signature and ECDH key usage in <xref target="Degabriele11" format="default" sectionFormat="of" derivedContent="Degabriele11"/> and <xref target="Thormarker21" format="default" sectionFormat="of" derivedContent="Thormarker21"/>. Note that Section 5.6.3.2 of <xref target="SP-800-56A" format="default" sectionFormat="of" derivedContent="SP-800-56A"/> allows a key agreement key pair to be used with a signature algorithm in certificate requests.</t>
        <t indent="0" pn="section-9.2-6">The property that a completed EDHOC session implies that another identity has been active is upheld as long as the Initiator does not have its own identity in the set of Responder identities it is allowed to communicate with. In trust-on-first-use (TOFU) use cases (see <xref target="tofu" format="default" sectionFormat="of" derivedContent="Appendix D.5"/>), the Initiator should verify that the Responder's identity is not equal to its own. Any future EDHOC methods using, e.g., PSKs might need to mitigate this in other ways. However, an active attacker can gain information about the set of identities an Initiator is willing to communicate with. If the Initiator is willing to communicate with all identities except its own, an attacker can determine that a guessed Initiator identity is correct. To not leak any long-term identifiers, using a freshly generated authentication key as an identity in each initial TOFU session is <bcp14>RECOMMENDED</bcp14>.</t>
        <t indent="0" pn="section-9.2-7">NIST SP 800-56A <xref target="SP-800-56A" format="default" sectionFormat="of" derivedContent="SP-800-56A"/> forbids deriving secret and non-secret randomness from the same Key Derivation Function (KDF) instance, but this decision has been criticized by Krawczyk in <xref target="HKDFpaper" format="default" sectionFormat="of" derivedContent="HKDFpaper"/> and doing so is common practice. In addition to IVs, other examples are the challenge in Extensible Authentication Protocol Tunneled Transport Layer Security (EAP-TTLS), the RAND in 3GPP Authentication and Key Agreement (AKA), and the Session-Id in EAP-TLS 1.3. Note that part of KEYSTREAM_2 is also non-secret randomness, as it is known or predictable to an attacker. The more recent NIST SP 800-108 <xref target="SP-800-108" format="default" sectionFormat="of" derivedContent="SP-800-108"/> aligns with <xref target="HKDFpaper" format="default" sectionFormat="of" derivedContent="HKDFpaper"/> and states that, for a secure KDF, the revelation of one portion of the derived keying material must not degrade the security of any other portion of that keying material.</t>
      </section>
      <section anchor="sec_algs" numbered="true" removeInRFC="false" toc="include" pn="section-9.3">
        <name slugifiedName="name-cipher-suites-and-cryptogra">Cipher Suites and Cryptographic Algorithms</name>
        <t indent="0" pn="section-9.3-1">When using a private cipher suite or registering new cipher suites, the choice of the key length used in the different algorithms needs to be harmonized so that a sufficient security level is maintained for authentication credentials, the EDHOC session, and the protection of application data. The Initiator and Responder should enforce a minimum security level.</t>
        <t indent="0" pn="section-9.3-2">The output size of the EDHOC hash algorithm <bcp14>MUST</bcp14> be at least 256 bits. In particular, the hash algorithms SHA-1 and SHA-256/64 (SHA-256 truncated to 64 bits) <bcp14>SHALL NOT</bcp14> be supported for use in EDHOC except for certificate identification with x5t and c5t. For security considerations of SHA-1, see <xref target="RFC6194" format="default" sectionFormat="of" derivedContent="RFC6194"/>. As EDHOC integrity protects all the authentication credentials, the choice of hash algorithm in x5t and c5t does not affect security and using the same hash algorithm as in the cipher suite, but with as much truncation as possible, is <bcp14>RECOMMENDED</bcp14>. That is, when the EDHOC hash algorithm is SHA-256, using SHA-256/64 in x5t and c5t is <bcp14>RECOMMENDED</bcp14>. The EDHOC MAC length <bcp14>MUST</bcp14> be at least 8 bytes and the tag length of the EDHOC AEAD algorithm <bcp14>MUST</bcp14> be at least 64 bits. Note that secp256k1 is only defined for use with ECDSA and not for ECDH. Note that some COSE algorithms are marked as not recommended in the COSE IANA registry.</t>
      </section>
      <section anchor="pqc" numbered="true" removeInRFC="false" toc="include" pn="section-9.4">
        <name slugifiedName="name-post-quantum-considerations">Post-Quantum Considerations</name>
        <t indent="0" pn="section-9.4-1">As of the publication of this specification, it is unclear when or even if a quantum computer of sufficient size and power to exploit public key cryptography will exist. Deployments that need to consider risks decades into the future should transition to Post-Quantum Cryptography (PQC) in the not-too-distant future. Many other systems should take a slower wait-and-see approach where PQC is phased in when the quantum threat is more imminent. Current PQC algorithms have limitations compared to Elliptic Curve Cryptography (ECC), and the data sizes would be problematic in many constrained IoT systems.</t>
        <t indent="0" pn="section-9.4-2">Symmetric algorithms used in EDHOC, such as SHA-256 and AES-CCM-16-64-128, are practically secure against even large quantum computers. Two of NIST's security levels for quantum-resistant public key cryptography are based on AES-128 and SHA-256. A quantum computer will likely be expensive and slow due to heavy error correction. Grover's algorithm, which is proven to be optimal, cannot effectively be parallelized. It will provide little or no advantage in attacking AES, and AES-128 will remain secure for decades to come <xref target="NISTPQC" format="default" sectionFormat="of" derivedContent="NISTPQC"/>.</t>
        <t indent="0" pn="section-9.4-3">EDHOC supports all signature algorithms defined by COSE, including PQC signature algorithms such as HSS-LMS. EDHOC is currently only specified for use with key exchange algorithms of type ECDH curves, but any Key Encapsulation Method (KEM), including PQC KEMs, can be used in method 0. While the key exchange in method 0 is specified with the terms of the Diffie-Hellman protocol, the key exchange adheres to a KEM interface: G_X is then the public key of the Initiator, G_Y is the encapsulation, and G_XY is the shared secret. Use of PQC KEMs to replace static DH authentication would likely require a specification updating EDHOC with new methods.</t>
      </section>
      <section anchor="unprot-data" numbered="true" removeInRFC="false" toc="include" pn="section-9.5">
        <name slugifiedName="name-unprotected-data-and-privac">Unprotected Data and Privacy</name>
        <t indent="0" pn="section-9.5-1">The Initiator and Responder must make sure that unprotected data and metadata do not reveal any sensitive information. This also applies for encrypted data sent to an unauthenticated party. In particular, it applies to EAD_1, ID_CRED_R, EAD_2, and error messages. Using the same EAD_1 in several EDHOC sessions allows passive eavesdroppers to correlate the different sessions. Note that even if ead_value is encrypted outside of EDHOC, the ead_labels in EAD_1 are revealed to passive attackers and the ead_labels in EAD_2 are revealed to active attackers. Another consideration is that the list of supported cipher suites may potentially be used to identify the application. The Initiator and Responder must also make sure that unauthenticated data does not trigger any harmful actions. In particular, this applies to EAD_1 and error messages.</t>
        <t indent="0" pn="section-9.5-2">An attacker observing network traffic may use connection identifiers sent in clear in EDHOC or the subsequent application protocol to correlate packets sent on different paths or at different times. The attacker may use this information for traffic flow analysis or to track an endpoint. Application protocols using connection identifiers from EDHOC <bcp14>SHOULD</bcp14> provide mechanisms to update the connection identifiers and <bcp14>MAY</bcp14> provide mechanisms to issue several simultaneously active connection identifiers. See <xref target="RFC9000" format="default" sectionFormat="of" derivedContent="RFC9000"/> for a non-constrained example of such mechanisms. Connection identifiers can, e.g., be chosen randomly among the set of unused 1-byte connection identifiers. Connection identity privacy mechanisms are only useful when there are not fixed identifiers, such as IP address or MAC address in the lower layers.</t>
      </section>
      <section anchor="internet-threat" numbered="true" removeInRFC="false" toc="include" pn="section-9.6">
        <name slugifiedName="name-updated-internet-threat-mod">Updated Internet Threat Model Considerations</name>
        <t indent="0" pn="section-9.6-1">Since the publication of <xref target="RFC3552" format="default" sectionFormat="of" derivedContent="RFC3552"/>, there has been an increased awareness of the need to protect against endpoints that are compromised or malicious or whose interests simply do not align with the interests of users <xref target="I-D.arkko-arch-internet-threat-model-guidance" format="default" sectionFormat="of" derivedContent="THREAT-MODEL-GUIDANCE"/>. <xref target="RFC7624" format="default" sectionFormat="of" derivedContent="RFC7624"/> describes an updated threat model for Internet confidentiality; see <xref target="sec-prop" format="default" sectionFormat="of" derivedContent="Section 9.1"/>. <xref target="I-D.arkko-arch-internet-threat-model-guidance" format="default" sectionFormat="of" derivedContent="THREAT-MODEL-GUIDANCE"/> further expands the threat model. Implementations and users should take these threat models into account and consider actions to reduce the risk of tracking by other endpoints. In particular, even data sent protected to the other endpoint, such as ID_CRED fields and EAD fields, can be used for tracking; see <xref target="I-D.arkko-arch-internet-threat-model-guidance" section="2.7" sectionFormat="of" format="default" derivedLink="https://datatracker.ietf.org/doc/html/draft-arkko-arch-internet-threat-model-guidance-00#section-2.7" derivedContent="THREAT-MODEL-GUIDANCE"/>.</t>
        <t indent="0" pn="section-9.6-2">The fields ID_CRED_I, ID_CRED_R, EAD_2, EAD_3, and EAD_4 have variable length, and information regarding the length may leak to an attacker. A passive attacker may, e.g., be able to differentiate endpoints using identifiers of different length. To mitigate this information leakage, an implementation may ensure that the fields have a fixed length or use padding. An implementation may, e.g., only use fixed length identifiers like 'kid' of length 1. Alternatively, padding may be used (see <xref target="padding" format="default" sectionFormat="of" derivedContent="Section 3.8.1"/>) to hide the true length of, e.g., certificates by value in 'x5chain' or 'c5c'.</t>
      </section>
      <section anchor="dos" numbered="true" removeInRFC="false" toc="include" pn="section-9.7">
        <name slugifiedName="name-denial-of-service">Denial of Service</name>
        <t indent="0" pn="section-9.7-1">EDHOC itself does not provide countermeasures against denial-of-service attacks. In particular, by sending a number of new or replayed message_1, an attacker may cause the Responder to allocate the state, perform cryptographic operations, and amplify messages. To mitigate such attacks, an implementation <bcp14>SHOULD</bcp14> make use of available lower layer mechanisms. For instance, when EDHOC is transferred as an exchange of CoAP messages, the CoAP server can use the Echo option defined in <xref target="RFC9175" format="default" sectionFormat="of" derivedContent="RFC9175"/>, which forces the CoAP client to demonstrate reachability at its apparent network address. To avoid an additional round trip, the Initiator can reduce the amplification factor by padding message_1, i.e., using EAD_1; see <xref target="padding" format="default" sectionFormat="of" derivedContent="Section 3.8.1"/>.
Note that while the Echo option mitigates some resource exhaustion aspects of
spoofing, it does not protect against a distributed denial-of-service attack made by real, potentially compromised, clients. Similarly, limiting amplification only reduces the impact, which still may be significant because of a large number of clients engaged in the attack.</t>
        <t indent="0" pn="section-9.7-2">An attacker can also send a faked message_2, message_3, message_4, or error in an attempt to trick the receiving party to send an error message and abort the EDHOC session. EDHOC implementations <bcp14>MAY</bcp14> evaluate if a received message is likely to have been forged by an attacker and ignore it without sending an error message or aborting the EDHOC session.</t>
      </section>
      <section anchor="impl-cons" numbered="true" removeInRFC="false" toc="include" pn="section-9.8">
        <name slugifiedName="name-implementation-consideratio">Implementation Considerations</name>
        <t indent="0" pn="section-9.8-1">The availability of a secure random number generator is essential for the security of EDHOC. If no true random number generator is available, a random seed <bcp14>MUST</bcp14> be provided from an external source and used with a cryptographically secure pseudorandom number generator. As each pseudorandom number must only be used once, an implementation needs to get a unique input to the pseudorandom number generator after reboot or continuously store state in nonvolatile memory. <xref target="RFC8613" sectionFormat="of" section="B.1.1" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8613#appendix-B.1.1" derivedContent="RFC8613"/> describes issues and solution approaches for writing to nonvolatile memory. Intentionally or unintentionally weak or predictable pseudorandom number generators can be abused or exploited for malicious purposes. <xref target="RFC8937" format="default" sectionFormat="of" derivedContent="RFC8937"/> describes a way for security protocol implementations to augment their (pseudo)random number generators using a long-term private key and a deterministic signature function. This improves randomness from broken or otherwise subverted random number generators. The same idea can be used with other secrets and functions, such as a Diffie-Hellman function or a symmetric secret, and a PRF like HMAC or KMAC. It is <bcp14>RECOMMENDED</bcp14> to not trust a single source of randomness and to not put unaugmented random numbers on the wire.</t>
        <t indent="0" pn="section-9.8-2">For many constrained IoT devices, it is problematic to support several crypto primitives. Existing devices can be expected to support either ECDSA or Edwards-curve Digital Signature Algorithm (EdDSA). If ECDSA is supported, "deterministic ECDSA", as specified in <xref target="RFC6979" format="default" sectionFormat="of" derivedContent="RFC6979"/>, <bcp14>MAY</bcp14> be used. Pure deterministic elliptic-curve signatures, such as deterministic ECDSA and EdDSA, have gained popularity over randomized ECDSA as their security does not depend on a source of high-quality randomness. Recent research has however found that implementations of these signature algorithms may be vulnerable to certain side-channel and fault injection attacks due to their determinism. For example, see <xref target="I-D.irtf-cfrg-det-sigs-with-noise" section="1" sectionFormat="of" format="default" derivedLink="https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-det-sigs-with-noise-02#section-1" derivedContent="HEDGED-ECC-SIGS"/> for a list of attack papers. As suggested in <xref target="RFC9053" section="2.1.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-2.1.1" derivedContent="RFC9053"/>, this can be addressed by combining randomness and determinism.</t>
        <t indent="0" pn="section-9.8-3"><xref target="I-D.ietf-lwig-curve-representations" sectionFormat="of" section="D" format="default" derivedLink="https://datatracker.ietf.org/doc/html/draft-ietf-lwig-curve-representations-23#appendix-D" derivedContent="CURVE-REPR"/> describes how Montgomery curves, such as X25519 and X448, and (twisted) Edwards curves, such as Ed25519 and Ed448, can be mapped to and from short-Weierstrass form for implementations on platforms that accelerate elliptic curve group operations in short-Weierstrass form.</t>
        <t indent="0" pn="section-9.8-4">All private keys, symmetric keys, and IVs <bcp14>MUST</bcp14> be secret. Only the Responder <bcp14>SHALL</bcp14> have access to the Responder's private authentication key, and only the Initiator <bcp14>SHALL</bcp14> have access to the Initiator's private authentication key. Implementations should provide countermeasures to side-channel attacks, such as timing attacks. Intermediate computed values, such as ephemeral ECDH keys and ECDH shared secrets, <bcp14>MUST</bcp14> be deleted after key derivation is completed.</t>
        <t indent="0" pn="section-9.8-5">The Initiator and Responder are responsible for verifying the integrity and validity of certificates. Verification of validity may require the use of a Real-Time Clock (RTC). The selection of trusted certification authorities (CAs) should be done very carefully and certificate revocation should be supported. The choice of revocation mechanism is left to the application. For example, in case of X.509 certificates, Certificate Revocation Lists <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> or the Online Certificate Status Protocol (OCSP) <xref target="RFC6960" format="default" sectionFormat="of" derivedContent="RFC6960"/> may be used.</t>
        <t indent="0" pn="section-9.8-6">Similar considerations as for certificates are needed for CWT/CCS. The endpoints are responsible for verifying the integrity and validity of CWT/CCS and to handle revocation. The application needs to determine what trust anchors are relevant and have a well-defined trust-establishment process. A self-signed certificate / CWT or CCS appearing in the protocol cannot be a trigger to modify the set of trust anchors. One common way for a new trust anchor to be added to (or removed from) a device is by means firmware upgrade. See <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/> for a longer discussion on trust and validation in constrained devices.</t>
        <t indent="0" pn="section-9.8-7">Just like for certificates, the contents of the COSE header parameters 'kcwt' and 'kccs' defined in <xref target="cwt-header-param" format="default" sectionFormat="of" derivedContent="Section 10.6"/> must be processed as untrusted inputs. Endpoints that intend to rely on the assertions made by a CWT/CCS obtained from any of these methods need to validate the contents. For 'kccs', which enables transport of raw public keys, the data structure used does not include any protection or verification data. 'kccs' may be used for unauthenticated operations, e.g., trust on first use, with the limitations and caveats entailed; see <xref target="tofu" format="default" sectionFormat="of" derivedContent="Appendix D.5"/>.</t>
        <t indent="0" pn="section-9.8-8">The Initiator and Responder are allowed to select connection identifiers C_I and C_R, respectively, for the other party to use in the ongoing EDHOC session as well as in a subsequent application protocol (e.g., OSCORE <xref target="RFC8613" format="default" sectionFormat="of" derivedContent="RFC8613"/>). The choice of the connection identifier is not security critical in EDHOC but intended to simplify the retrieval of the right security context in combination with using short identifiers. If the wrong connection identifier of the other party is used in a protocol message, it will result in the receiving party not being able to retrieve a security context (which will abort the EDHOC session) or retrieve the wrong security context (which also aborts the EDHOC session as the message cannot be verified).</t>
        <t indent="0" pn="section-9.8-9">If two nodes unintentionally initiate two simultaneous EDHOC sessions with each other, even if they only want to complete a single EDHOC session, they <bcp14>MAY</bcp14> abort the EDHOC session with the lexicographically smallest G_X. Note that in cases where several EDHOC sessions with different parameter sets (method, COSE headers, etc.) are used, an attacker can affect which parameter set will be used by blocking some of the parameter sets.</t>
        <t indent="0" pn="section-9.8-10">If supported by the device, it is <bcp14>RECOMMENDED</bcp14> that at least the long-term private keys are stored in a Trusted Execution Environment (TEE) (for example, see <xref target="RFC9397" format="default" sectionFormat="of" derivedContent="RFC9397"/>) and that sensitive operations using these keys are performed inside the TEE.  To achieve even higher security, it is <bcp14>RECOMMENDED</bcp14> that additional operations such as ephemeral key generation, all computations of shared secrets, and storage of the PRK keys can be done inside the TEE. The use of a TEE aims at preventing code within that environment to be tampered with and preventing data used by such code to be read or tampered with by code outside that environment.</t>
        <t indent="0" pn="section-9.8-11">Note that HKDF-Expand has a relatively small maximum output length of 255 ⋅ hash_length, where hash_length is the output size in bytes of the EDHOC hash algorithm of the selected cipher suite. This means that when SHA-256 is used as a hash algorithm, PLAINTEXT_2 cannot be longer than 8160 bytes. This is probably not a limitation for most intended applications, but to be able to support, for example, long certificate chains or large external authorization data, there is a backwards compatible method specified in <xref target="large-plaintext_2" format="default" sectionFormat="of" derivedContent="Appendix G"/>.</t>
        <t indent="0" pn="section-9.8-12">The sequence of transcript hashes in EDHOC (TH_2, TH_3, and TH_4) does not make use of a so-called running hash. This is a design choice, as running hashes are often not supported on constrained platforms.</t>
        <t indent="0" pn="section-9.8-13">When parsing a received EDHOC message, implementations <bcp14>MUST</bcp14> abort the EDHOC session if the message does not comply with the CDDL for that message. Implementations are not required to support non-deterministic encodings and <bcp14>MAY</bcp14> abort the EDHOC session if the received EDHOC message is not encoded using deterministic CBOR. Implementations <bcp14>MUST</bcp14> abort the EDHOC session if validation of a received public key fails or if any cryptographic field has the wrong length. It is <bcp14>RECOMMENDED</bcp14> to abort the EDHOC session if the received EDHOC message is not encoded using deterministic CBOR.</t>
      </section>
    </section>
    <section anchor="iana" numbered="true" removeInRFC="false" toc="include" pn="section-10">
      <name slugifiedName="name-iana-considerations">IANA Considerations</name>
      <t indent="0" pn="section-10-1">This section gives IANA considerations and, unless otherwise noted, conforms with <xref target="RFC8126" format="default" sectionFormat="of" derivedContent="RFC8126"/>.</t>
      <section anchor="exporter-label" numbered="true" removeInRFC="false" toc="include" pn="section-10.1">
        <name slugifiedName="name-edhoc-exporter-label-regist">EDHOC Exporter Label Registry</name>
        <t indent="0" pn="section-10.1-1">IANA has created a new registry under the new registry group "Ephemeral Diffie-Hellman Over COSE (EDHOC)" as follows:</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-10.1-2">
          <dt pn="section-10.1-2.1">Registry Name:</dt>
          <dd pn="section-10.1-2.2">EDHOC Exporter Labels</dd>
          <dt pn="section-10.1-2.3">Reference:</dt>
          <dd pn="section-10.1-2.4">RFC 9528</dd>
        </dl>
        <table anchor="tab-exporter-label" align="center" pn="table-4">
          <name slugifiedName="name-edhoc-exporter-labels">EDHOC Exporter Labels</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Label</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
              <th align="left" colspan="1" rowspan="1">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">Derived OSCORE Master Secret</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">Derived OSCORE Master Salt</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">2-22</td>
              <td align="left" colspan="1" rowspan="1">Unassigned</td>
              <td align="left" colspan="1" rowspan="1"/>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">23</td>
              <td align="left" colspan="1" rowspan="1">Reserved</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24-32767</td>
              <td align="left" colspan="1" rowspan="1">Unassigned</td>
              <td align="left" colspan="1" rowspan="1"/>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">32768-65535</td>
              <td align="left" colspan="1" rowspan="1">Reserved for Private Use</td>
              <td align="left" colspan="1" rowspan="1"/>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-10.1-4">This registry also has a "Change Controller" field. For registrations made by IETF documents, the IETF is listed.</t>
        <table align="center" pn="table-5">
          <name slugifiedName="name-registration-procedures-for">Registration Procedures for EDHOC Exporter Labels</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Range</th>
              <th align="left" colspan="1" rowspan="1">Registration Procedures</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">0-23</td>
              <td align="left" colspan="1" rowspan="1">Standards Action</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24-32767</td>
              <td align="left" colspan="1" rowspan="1">Expert Review</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">32768-65535</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="suites-registry" numbered="true" removeInRFC="false" toc="include" pn="section-10.2">
        <name slugifiedName="name-edhoc-cipher-suites-registr">EDHOC Cipher Suites Registry</name>
        <t indent="0" pn="section-10.2-1">IANA has created a new registry under the new registry group "Ephemeral Diffie-Hellman Over COSE (EDHOC)" as follows:</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-10.2-2">
          <dt pn="section-10.2-2.1">Registry Name:</dt>
          <dd pn="section-10.2-2.2">EDHOC Cipher Suites</dd>
          <dt pn="section-10.2-2.3">Reference:</dt>
          <dd pn="section-10.2-2.4">RFC 9528</dd>
        </dl>
        <t indent="0" pn="section-10.2-3">The columns of the registry are Value, Array, Description, and Reference, where Value is an integer and the other columns are text strings. The initial contents of the registry are:</t>
        <table align="center" pn="table-6">
          <name slugifiedName="name-edhoc-cipher-suites">EDHOC Cipher Suites</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Value</th>
              <th align="left" colspan="1" rowspan="1">Array</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
              <th align="left" colspan="1" rowspan="1">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">-24</td>
              <td align="left" colspan="1" rowspan="1">N/A</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-23</td>
              <td align="left" colspan="1" rowspan="1">N/A</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-22</td>
              <td align="left" colspan="1" rowspan="1">N/A</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-21</td>
              <td align="left" colspan="1" rowspan="1">N/A</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">10, -16, 8, 4, -8, 10, -16</td>
              <td align="left" colspan="1" rowspan="1">AES-CCM-16-64-128, SHA-256, 8, X25519, EdDSA, AES‑CCM‑16‑64‑128, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">30, -16, 16, 4, -8, 10, -16</td>
              <td align="left" colspan="1" rowspan="1">AES-CCM-16-128-128, SHA‑256, 16, X25519, EdDSA, AES‑CCM‑16‑64‑128, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">2</td>
              <td align="left" colspan="1" rowspan="1">10, -16, 8, 1, -7, 10, -16</td>
              <td align="left" colspan="1" rowspan="1">AES-CCM-16-64-128, SHA-256, 8, P-256, ES256, AES‑CCM‑16‑64‑128, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">3</td>
              <td align="left" colspan="1" rowspan="1">30, -16, 16, 1, -7, 10, -16</td>
              <td align="left" colspan="1" rowspan="1">AES-CCM-16-128-128, SHA‑256, 16, P-256, ES256, AES‑CCM‑16‑64‑128, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">4</td>
              <td align="left" colspan="1" rowspan="1">24, -16, 16, 4, -8, 24, -16</td>
              <td align="left" colspan="1" rowspan="1">ChaCha20/Poly1305, SHA-256, 16, X25519, EdDSA, ChaCha20/Poly1305, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">5</td>
              <td align="left" colspan="1" rowspan="1">24, -16, 16, 1, -7, 24, -16</td>
              <td align="left" colspan="1" rowspan="1">ChaCha20/Poly1305, SHA-256, 16, P-256, ES256, ChaCha20/⁠Poly1305, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">6</td>
              <td align="left" colspan="1" rowspan="1">1, -16, 16, 4, -7, 1, -16</td>
              <td align="left" colspan="1" rowspan="1">A128GCM, SHA-256, 16, X25519, ES256, A128GCM, SHA-256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">23</td>
              <td align="left" colspan="1" rowspan="1"/>
              <td align="left" colspan="1" rowspan="1">Reserved</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24</td>
              <td align="left" colspan="1" rowspan="1">3, -43, 16, 2, -35, 3, -43</td>
              <td align="left" colspan="1" rowspan="1">A256GCM, SHA-384, 16, P-384, ES384,
      A256GCM, SHA-384</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">25</td>
              <td align="left" colspan="1" rowspan="1">24, -45, 16, 5, -8, 24, -45</td>
              <td align="left" colspan="1" rowspan="1">ChaCha20/Poly1305, SHAKE256, 16, X448, EdDSA,
      ChaCha20/Poly1305, SHAKE256</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
          </tbody>
        </table>
        <table align="center" pn="table-7">
          <name slugifiedName="name-registration-procedures-for-">Registration Procedures for EDHOC Cipher Suites</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Range</th>
              <th align="left" colspan="1" rowspan="1">Registration Procedures</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">-65536 to -25</td>
              <td align="left" colspan="1" rowspan="1">Specification Required</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-24 to -21</td>
              <td align="left" colspan="1" rowspan="1">Private Use</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-20 to 23</td>
              <td align="left" colspan="1" rowspan="1">Standards Action with Expert Review</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24 to 65535</td>
              <td align="left" colspan="1" rowspan="1">Specification Required</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="method-types" numbered="true" removeInRFC="false" toc="include" pn="section-10.3">
        <name slugifiedName="name-edhoc-method-type-registry">EDHOC Method Type Registry</name>
        <t indent="0" pn="section-10.3-1">IANA has created a new registry under the new registry group "Ephemeral Diffie-Hellman Over COSE (EDHOC)" as follows:</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-10.3-2">
          <dt pn="section-10.3-2.1">Registry Name:</dt>
          <dd pn="section-10.3-2.2">EDHOC Method Types</dd>
          <dt pn="section-10.3-2.3">Reference:</dt>
          <dd pn="section-10.3-2.4">RFC 9528</dd>
        </dl>
        <t indent="0" pn="section-10.3-3">The columns of the registry are Value, Initiator Authentication Key, Responder Authentication Key, and Reference, where Value is an integer and the key columns are text strings describing the authentication keys.</t>
        <t indent="0" pn="section-10.3-4">The initial contents of the registry are shown in <xref target="tab-method-types" format="default" sectionFormat="of" derivedContent="Table 2"/>. Method 23 is Reserved.</t>
        <table align="center" pn="table-8">
          <name slugifiedName="name-registration-procedures-for-e">Registration Procedures for EDHOC Method Types</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Range</th>
              <th align="left" colspan="1" rowspan="1">Registration Procedures</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">-65536 to -25</td>
              <td align="left" colspan="1" rowspan="1">Specification Required</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-24 to 23</td>
              <td align="left" colspan="1" rowspan="1">Standards Action with Expert Review</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24 to 65535</td>
              <td align="left" colspan="1" rowspan="1">Specification Required</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="error-code-reg" numbered="true" removeInRFC="false" toc="include" pn="section-10.4">
        <name slugifiedName="name-edhoc-error-codes-registry">EDHOC Error Codes Registry</name>
        <t indent="0" pn="section-10.4-1">IANA has created a new registry under the new registry group "Ephemeral Diffie-Hellman Over COSE (EDHOC)" as follows:</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-10.4-2">
          <dt pn="section-10.4-2.1">Registry Name:</dt>
          <dd pn="section-10.4-2.2">EDHOC Error Codes</dd>
          <dt pn="section-10.4-2.3">Reference:</dt>
          <dd pn="section-10.4-2.4">RFC 9528</dd>
        </dl>
        <t indent="0" pn="section-10.4-3">The columns of the registry are ERR_CODE, ERR_INFO Type, Description, Change Controller, and Reference, where ERR_CODE is an integer, ERR_INFO is a CDDL defined type, and Description is a text string. The initial contents of the registry are shown in <xref target="tab-error-codes" format="default" sectionFormat="of" derivedContent="Table 3"/>. Error code 23 is Reserved. This registry also has a "Change Controller" field. For registrations made by IETF documents, the IETF is listed.</t>
        <table align="center" pn="table-9">
          <name slugifiedName="name-registration-procedures-for-ed">Registration Procedures for EDHOC Error Codes</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Range</th>
              <th align="left" colspan="1" rowspan="1">Registration Procedures</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">-65536 to -25</td>
              <td align="left" colspan="1" rowspan="1">Expert Review</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-24 to 23</td>
              <td align="left" colspan="1" rowspan="1">Standards Action</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24 to 65535</td>
              <td align="left" colspan="1" rowspan="1">Expert Review</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="iana-ead" numbered="true" removeInRFC="false" toc="include" pn="section-10.5">
        <name slugifiedName="name-edhoc-external-authorizatio">EDHOC External Authorization Data Registry</name>
        <t indent="0" pn="section-10.5-1">IANA has created a new registry under the new registry group "Ephemeral Diffie-Hellman Over COSE (EDHOC)" as follows:</t>
        <dl newline="false" spacing="normal" indent="3" pn="section-10.5-2">
          <dt pn="section-10.5-2.1">Registry Name:</dt>
          <dd pn="section-10.5-2.2">EDHOC External Authorization Data</dd>
          <dt pn="section-10.5-2.3">Reference:</dt>
          <dd pn="section-10.5-2.4">RFC 9528</dd>
        </dl>
        <t indent="0" pn="section-10.5-3">The columns of the registry are Name, Label, Description, and Reference, where Label is a nonnegative integer and the other columns are text strings. The initial contents of the registry are shown in <xref target="tab-ead-labels" format="default" sectionFormat="of" derivedContent="Table 10"/>. EAD label 23 is Reserved.</t>
        <table anchor="tab-ead-labels" align="center" pn="table-10">
          <name slugifiedName="name-edhoc-ead-labels">EDHOC EAD Labels</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Name</th>
              <th align="left" colspan="1" rowspan="1">Label</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
              <th align="left" colspan="1" rowspan="1">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">Padding</td>
              <td align="left" colspan="1" rowspan="1">0</td>
              <td align="left" colspan="1" rowspan="1">Randomly generated CBOR byte string</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528, <xref target="padding" format="default" sectionFormat="of" derivedContent="Section 3.8.1"/></td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1"/>
              <td align="left" colspan="1" rowspan="1">23</td>
              <td align="left" colspan="1" rowspan="1">Reserved</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
          </tbody>
        </table>
        <table align="center" pn="table-11">
          <name slugifiedName="name-registration-procedures-for-edh">Registration Procedures for EDHOC EAD Labels</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Range</th>
              <th align="left" colspan="1" rowspan="1">Registration Procedures</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">0 to 23</td>
              <td align="left" colspan="1" rowspan="1">Standards Action with Expert Review</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24 to 65535</td>
              <td align="left" colspan="1" rowspan="1">Specification Required</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cwt-header-param" numbered="true" removeInRFC="false" toc="include" pn="section-10.6">
        <name slugifiedName="name-cose-header-parameters-regi">COSE Header Parameters Registry</name>
        <t indent="0" pn="section-10.6-1">IANA has registered the following entries in the "COSE Header Parameters" registry under the registry group "CBOR Object Signing and Encryption (COSE)" (see <xref target="tab-header-params" format="default" sectionFormat="of" derivedContent="Table 12"/>). The value of the 'kcwt' header parameter is a COSE Web Token (CWT) <xref target="RFC8392" format="default" sectionFormat="of" derivedContent="RFC8392"/>, and the value of the 'kccs' header parameter is a CWT Claims Set (CCS); see <xref target="term" format="default" sectionFormat="of" derivedContent="Section 1.4"/>. The CWT/CCS must contain a COSE_Key in a 'cnf' claim <xref target="RFC8747" format="default" sectionFormat="of" derivedContent="RFC8747"/>. The Value Registry column for this item is empty and omitted from the table below.</t>
        <table anchor="tab-header-params" align="center" pn="table-12">
          <name slugifiedName="name-cose-header-parameter-label">COSE Header Parameter Labels</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Name</th>
              <th align="left" colspan="1" rowspan="1">Label</th>
              <th align="left" colspan="1" rowspan="1">Value Type</th>
              <th align="left" colspan="1" rowspan="1">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">kcwt</td>
              <td align="left" colspan="1" rowspan="1">13</td>
              <td align="left" colspan="1" rowspan="1">COSE_Messages</td>
              <td align="left" colspan="1" rowspan="1">A CBOR Web Token (CWT) containing  
	      a COSE_Key in a 'cnf' claim and    
	      possibly other claims. CWT is      
	      defined in RFC 8392. COSE_Messages 
	      is defined in RFC 9052.</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">kccs</td>
              <td align="left" colspan="1" rowspan="1">14</td>
              <td align="left" colspan="1" rowspan="1">map</td>
              <td align="left" colspan="1" rowspan="1">A CWT Claims Set (CCS) containing  
	      a COSE_Key in a 'cnf' claim and    
	      possibly other claims. CCS is     
	      defined in RFC 8392.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="well-known" numbered="true" removeInRFC="false" toc="include" pn="section-10.7">
        <name slugifiedName="name-well-known-uri-registry">Well-Known URI Registry</name>
        <t indent="0" pn="section-10.7-1">IANA has added the well-known URI "edhoc" to the "Well-Known URIs" registry.</t>
        <dl indent="3" newline="false" spacing="normal" pn="section-10.7-2">
          <dt pn="section-10.7-2.1">URI Suffix:</dt>
          <dd pn="section-10.7-2.2">edhoc</dd>
          <dt pn="section-10.7-2.3">Change Controller:</dt>
          <dd pn="section-10.7-2.4">IETF</dd>
          <dt pn="section-10.7-2.5">Reference:</dt>
          <dd pn="section-10.7-2.6">RFC 9528</dd>
          <dt pn="section-10.7-2.7">Related Information:</dt>
          <dd pn="section-10.7-2.8"> None</dd>
        </dl>
      </section>
      <section anchor="media-type" numbered="true" removeInRFC="false" toc="include" pn="section-10.8">
        <name slugifiedName="name-media-types-registry">Media Types Registry</name>
        <t indent="0" pn="section-10.8-1">IANA has added the media types "application/edhoc+cbor-seq" and "application/cid-edhoc+cbor-seq" to the "Media Types" registry.</t>
        <section anchor="applicationedhoccbor-seq-media-type-registration" numbered="true" removeInRFC="false" toc="exclude" pn="section-10.8.1">
          <name slugifiedName="name-application-edhoccbor-seq-m">application/edhoc+cbor-seq Media Type Registration</name>
          <dl indent="3" newline="false" spacing="normal" pn="section-10.8.1-1">
            <dt pn="section-10.8.1-1.1">Type name:</dt>
            <dd pn="section-10.8.1-1.2"> application</dd>
            <dt pn="section-10.8.1-1.3">Subtype name:</dt>
            <dd pn="section-10.8.1-1.4"> edhoc+cbor-seq</dd>
            <dt pn="section-10.8.1-1.5">Required parameters:</dt>
            <dd pn="section-10.8.1-1.6"> N/A</dd>
            <dt pn="section-10.8.1-1.7">Optional parameters:</dt>
            <dd pn="section-10.8.1-1.8"> N/A</dd>
            <dt pn="section-10.8.1-1.9">Encoding considerations:</dt>
            <dd pn="section-10.8.1-1.10"> binary</dd>
            <dt pn="section-10.8.1-1.11">Security considerations:</dt>
            <dd pn="section-10.8.1-1.12">See <xref target="duplication" format="default" sectionFormat="of" derivedContent="Section 7"/> of RFC 9528.</dd>
            <dt pn="section-10.8.1-1.13">Interoperability considerations:</dt>
            <dd pn="section-10.8.1-1.14"> N/A</dd>
            <dt pn="section-10.8.1-1.15">Published specification:</dt>
            <dd pn="section-10.8.1-1.16">RFC 9528</dd>
            <dt pn="section-10.8.1-1.17">Applications that use this media type:</dt>
            <dd pn="section-10.8.1-1.18"> To be identified</dd>
            <dt pn="section-10.8.1-1.19">Fragment identifier considerations:</dt>
            <dd pn="section-10.8.1-1.20"> N/A</dd>
            <dt pn="section-10.8.1-1.21">Additional information: </dt>
            <dd pn="section-10.8.1-1.22">
              <t indent="0" pn="section-10.8.1-1.22.1"><br/></t>
              <dl indent="3" newline="false" spacing="normal" pn="section-10.8.1-1.22.2">
                <dt pn="section-10.8.1-1.22.2.1">Magic number(s):</dt>
                <dd pn="section-10.8.1-1.22.2.2"> N/A</dd>
                <dt pn="section-10.8.1-1.22.2.3">File extension(s):</dt>
                <dd pn="section-10.8.1-1.22.2.4"> N/A</dd>
                <dt pn="section-10.8.1-1.22.2.5">Macintosh file type code(s):</dt>
                <dd pn="section-10.8.1-1.22.2.6"> N/A</dd>
              </dl>
            </dd>
            <dt pn="section-10.8.1-1.23">Person &amp; email address to contact for further information:</dt>
            <dd pn="section-10.8.1-1.24"> See "Authors' Addresses" section in RFC 9528.</dd>
            <dt pn="section-10.8.1-1.25">Intended usage:</dt>
            <dd pn="section-10.8.1-1.26"> COMMON</dd>
            <dt pn="section-10.8.1-1.27">Restrictions on usage:</dt>
            <dd pn="section-10.8.1-1.28"> N/A</dd>
            <dt pn="section-10.8.1-1.29">Author:</dt>
            <dd pn="section-10.8.1-1.30"> See "Authors' Addresses" section.</dd>
            <dt pn="section-10.8.1-1.31">Change Controller:</dt>
            <dd pn="section-10.8.1-1.32"> IETF</dd>
          </dl>
        </section>
        <section anchor="applicationcid-edhoccbor-seq-media-type-registration" numbered="true" removeInRFC="false" toc="exclude" pn="section-10.8.2">
          <name slugifiedName="name-application-cid-edhoccbor-s">application/cid-edhoc+cbor-seq Media Type Registration</name>
          <dl indent="3" newline="false" spacing="normal" pn="section-10.8.2-1">
            <dt pn="section-10.8.2-1.1">Type name:</dt>
            <dd pn="section-10.8.2-1.2"> application</dd>
            <dt pn="section-10.8.2-1.3">Subtype name:</dt>
            <dd pn="section-10.8.2-1.4"> cid-edhoc+cbor-seq</dd>
            <dt pn="section-10.8.2-1.5">Required parameters:</dt>
            <dd pn="section-10.8.2-1.6"> N/A</dd>
            <dt pn="section-10.8.2-1.7">Optional parameters:</dt>
            <dd pn="section-10.8.2-1.8"> N/A</dd>
            <dt pn="section-10.8.2-1.9">Encoding considerations:</dt>
            <dd pn="section-10.8.2-1.10"> binary</dd>
            <dt pn="section-10.8.2-1.11">Security considerations:</dt>
            <dd pn="section-10.8.2-1.12"> See <xref target="duplication" format="default" sectionFormat="of" derivedContent="Section 7"/> of RFC 9528.</dd>
            <dt pn="section-10.8.2-1.13">Interoperability considerations:</dt>
            <dd pn="section-10.8.2-1.14"> N/A</dd>
            <dt pn="section-10.8.2-1.15">Published specification:</dt>
            <dd pn="section-10.8.2-1.16">RFC 9528</dd>
            <dt pn="section-10.8.2-1.17">Applications that use this media type:</dt>
            <dd pn="section-10.8.2-1.18"> To be identified</dd>
            <dt pn="section-10.8.2-1.19">Fragment identifier considerations:</dt>
            <dd pn="section-10.8.2-1.20"> N/A</dd>
            <dt pn="section-10.8.2-1.21">Additional information:</dt>
            <dd pn="section-10.8.2-1.22">
              <t indent="0" pn="section-10.8.2-1.22.1"><br/></t>
              <dl indent="3" newline="false" spacing="normal" pn="section-10.8.2-1.22.2">
                <dt pn="section-10.8.2-1.22.2.1">Magic number(s):</dt>
                <dd pn="section-10.8.2-1.22.2.2"> N/A</dd>
                <dt pn="section-10.8.2-1.22.2.3">File extension(s):</dt>
                <dd pn="section-10.8.2-1.22.2.4"> N/A</dd>
                <dt pn="section-10.8.2-1.22.2.5">Macintosh file type code(s):</dt>
                <dd pn="section-10.8.2-1.22.2.6"> N/A</dd>
              </dl>
            </dd>
            <dt pn="section-10.8.2-1.23">Person &amp; email address to contact for further information:</dt>
            <dd pn="section-10.8.2-1.24"> See "Authors' Addresses" section in RFC 9528.</dd>
            <dt pn="section-10.8.2-1.25">Intended usage:</dt>
            <dd pn="section-10.8.2-1.26"> COMMON</dd>
            <dt pn="section-10.8.2-1.27">Restrictions on usage:</dt>
            <dd pn="section-10.8.2-1.28"> N/A</dd>
            <dt pn="section-10.8.2-1.29">Author:</dt>
            <dd pn="section-10.8.2-1.30"> See "Authors' Addresses" section.</dd>
            <dt pn="section-10.8.2-1.31">Change Controller:</dt>
            <dd pn="section-10.8.2-1.32"> IETF</dd>
          </dl>
        </section>
      </section>
      <section anchor="content-format" numbered="true" removeInRFC="false" toc="include" pn="section-10.9">
        <name slugifiedName="name-coap-content-formats-regist">CoAP Content-Formats Registry</name>
        <t indent="0" pn="section-10.9-1">IANA has added the media types "application/edhoc+cbor-seq" and "application/cid-edhoc+cbor-seq" to the "CoAP Content-Formats" registry under the registry group "Constrained RESTful Environments (CoRE) Parameters".</t>
        <table anchor="tab-format-ids" align="center" pn="table-13">
          <name slugifiedName="name-coap-content-format-ids">CoAP Content-Format IDs</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Content Type</th>
              <th align="left" colspan="1" rowspan="1">Content Coding</th>
              <th align="left" colspan="1" rowspan="1">ID</th>
              <th align="left" colspan="1" rowspan="1">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">application/edhoc+cbor-seq</td>
              <td align="left" colspan="1" rowspan="1">-</td>
              <td align="left" colspan="1" rowspan="1">64</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">application/cid-edhoc+cbor-seq</td>
              <td align="left" colspan="1" rowspan="1">-</td>
              <td align="left" colspan="1" rowspan="1">65</td>
              <td align="left" colspan="1" rowspan="1">RFC 9528</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="rt" numbered="true" removeInRFC="false" toc="include" pn="section-10.10">
        <name slugifiedName="name-resource-type-rt-link-targe">Resource Type (rt=) Link Target Attribute Values Registry</name>
        <t indent="0" pn="section-10.10-1">IANA has added the resource type "core.edhoc" to the "Resource Type (rt=) Link Target Attribute Values" registry under the registry group "Constrained RESTful Environments (CoRE) Parameters".</t>
        <dl indent="3" newline="false" spacing="normal" pn="section-10.10-2">
          <dt pn="section-10.10-2.1">Value:</dt>
          <dd pn="section-10.10-2.2">core.edhoc</dd>
          <dt pn="section-10.10-2.3">Description:</dt>
          <dd pn="section-10.10-2.4">EDHOC resource</dd>
          <dt pn="section-10.10-2.5">Reference:</dt>
          <dd pn="section-10.10-2.6">RFC 9528</dd>
        </dl>
      </section>
      <section anchor="expert-review-instructions" numbered="true" removeInRFC="false" toc="include" pn="section-10.11">
        <name slugifiedName="name-expert-review-instructions">Expert Review Instructions</name>
        <t indent="0" pn="section-10.11-1">The IANA registries established in this document are defined as "Expert Review",  "Specification Required", or "Standards Action with Expert Review". This section gives some general guidelines for what the experts should be looking for, but they are being designated as experts for a reason so they should be given substantial latitude.</t>
        <t indent="0" pn="section-10.11-2">Expert reviewers should take into consideration the following points:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-10.11-3">
          <li pn="section-10.11-3.1">The clarity and correctness of registrations. Experts are expected to check the clarity of purpose and use of the requested entries. Expert needs to make sure the values of algorithms are taken from the right registry when that is required. Experts should consider requesting an opinion on the correctness of registered parameters from relevant IETF working groups. Encodings that do not meet these objectives of clarity and completeness should not be registered.</li>
          <li pn="section-10.11-3.2">The expected usage of fields when approving code point assignment. The length of the encoded value should be weighed against how many code points of that length are left, the size of device it will be used on, and the number of code points left that encode to that size.</li>
          <li pn="section-10.11-3.3">It is recommended to have a specification even if the registration procedure is "Expert Review". When specifications are not provided for a request where Expert Review is the assignment policy, the description provided needs to have sufficient information to verify the code points as above.</li>
        </ul>
      </section>
    </section>
  </middle>
  <back>
    <displayreference target="I-D.ietf-rats-eat" to="EAT"/>
    <displayreference target="I-D.ietf-lake-reqs" to="LAKE-REQS"/>
    <displayreference target="I-D.ietf-core-oscore-edhoc" to="EDHOC-CoAP-OSCORE"/>
    <displayreference target="I-D.ietf-cose-cbor-encoded-cert" to="C509-CERTS"/>
    <displayreference target="I-D.ietf-core-oscore-key-update" to="KUDOS"/>
    <displayreference target="I-D.ietf-lwig-curve-representations" to="CURVE-REPR"/>
    <displayreference target="I-D.ietf-iotops-security-protocol-comparison" to="CoAP-SEC-PROT"/>
    <displayreference target="I-D.irtf-cfrg-det-sigs-with-noise" to="HEDGED-ECC-SIGS"/>
    <displayreference target="I-D.ietf-lake-authz" to="LAKE-AUTHZ"/>
    <displayreference target="I-D.arkko-arch-internet-threat-model-guidance" to="THREAT-MODEL-GUIDANCE"/>
    <references pn="section-11">
      <name slugifiedName="name-references">References</name>
      <references pn="section-11.1">
        <name slugifiedName="name-normative-references">Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" quoteTitle="true" derivedAnchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t indent="0">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC3279" target="https://www.rfc-editor.org/info/rfc3279" quoteTitle="true" derivedAnchor="RFC3279">
          <front>
            <title>Algorithms and Identifiers for the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="L. Bassham" initials="L." surname="Bassham"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <date month="April" year="2002"/>
            <abstract>
              <t indent="0">This document specifies algorithm identifiers and ASN.1 encoding formats for digital signatures and subject public keys used in the Internet X.509 Public Key Infrastructure (PKI). Digital signatures are used to sign certificates and certificate revocation list (CRLs). Certificates include the public key of the named subject. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="3279"/>
          <seriesInfo name="DOI" value="10.17487/RFC3279"/>
        </reference>
        <reference anchor="RFC3552" target="https://www.rfc-editor.org/info/rfc3552" quoteTitle="true" derivedAnchor="RFC3552">
          <front>
            <title>Guidelines for Writing RFC Text on Security Considerations</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <author fullname="B. Korver" initials="B." surname="Korver"/>
            <date month="July" year="2003"/>
            <abstract>
              <t indent="0">All RFCs are required to have a Security Considerations section. Historically, such sections have been relatively weak. This document provides guidelines to RFC authors on how to write a good Security Considerations section. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="72"/>
          <seriesInfo name="RFC" value="3552"/>
          <seriesInfo name="DOI" value="10.17487/RFC3552"/>
        </reference>
        <reference anchor="RFC5116" target="https://www.rfc-editor.org/info/rfc5116" quoteTitle="true" derivedAnchor="RFC5116">
          <front>
            <title>An Interface and Algorithms for Authenticated Encryption</title>
            <author fullname="D. McGrew" initials="D." surname="McGrew"/>
            <date month="January" year="2008"/>
            <abstract>
              <t indent="0">This document defines algorithms for Authenticated Encryption with Associated Data (AEAD), and defines a uniform interface and a registry for such algorithms. The interface and registry can be used as an application-independent set of cryptoalgorithm suites. This approach provides advantages in efficiency and security, and promotes the reuse of crypto implementations. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5116"/>
          <seriesInfo name="DOI" value="10.17487/RFC5116"/>
        </reference>
        <reference anchor="RFC5869" target="https://www.rfc-editor.org/info/rfc5869" quoteTitle="true" derivedAnchor="RFC5869">
          <front>
            <title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
            <author fullname="H. Krawczyk" initials="H." surname="Krawczyk"/>
            <author fullname="P. Eronen" initials="P." surname="Eronen"/>
            <date month="May" year="2010"/>
            <abstract>
              <t indent="0">This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications. The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5869"/>
          <seriesInfo name="DOI" value="10.17487/RFC5869"/>
        </reference>
        <reference anchor="RFC6090" target="https://www.rfc-editor.org/info/rfc6090" quoteTitle="true" derivedAnchor="RFC6090">
          <front>
            <title>Fundamental Elliptic Curve Cryptography Algorithms</title>
            <author fullname="D. McGrew" initials="D." surname="McGrew"/>
            <author fullname="K. Igoe" initials="K." surname="Igoe"/>
            <author fullname="M. Salter" initials="M." surname="Salter"/>
            <date month="February" year="2011"/>
            <abstract>
              <t indent="0">This note describes the fundamental algorithms of Elliptic Curve Cryptography (ECC) as they were defined in some seminal references from 1994 and earlier. These descriptions may be useful for implementing the fundamental algorithms without using any of the specialized methods that were developed in following years. Only elliptic curves defined over fields of characteristic greater than three are in scope; these curves are those used in Suite B. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6090"/>
          <seriesInfo name="DOI" value="10.17487/RFC6090"/>
        </reference>
        <reference anchor="RFC6960" target="https://www.rfc-editor.org/info/rfc6960" quoteTitle="true" derivedAnchor="RFC6960">
          <front>
            <title>X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP</title>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="M. Myers" initials="M." surname="Myers"/>
            <author fullname="R. Ankney" initials="R." surname="Ankney"/>
            <author fullname="A. Malpani" initials="A." surname="Malpani"/>
            <author fullname="S. Galperin" initials="S." surname="Galperin"/>
            <author fullname="C. Adams" initials="C." surname="Adams"/>
            <date month="June" year="2013"/>
            <abstract>
              <t indent="0">This document specifies a protocol useful in determining the current status of a digital certificate without requiring Certificate Revocation Lists (CRLs). Additional mechanisms addressing PKIX operational requirements are specified in separate documents. This document obsoletes RFCs 2560 and 6277. It also updates RFC 5912.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6960"/>
          <seriesInfo name="DOI" value="10.17487/RFC6960"/>
        </reference>
        <reference anchor="RFC6979" target="https://www.rfc-editor.org/info/rfc6979" quoteTitle="true" derivedAnchor="RFC6979">
          <front>
            <title>Deterministic Usage of the Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA)</title>
            <author fullname="T. Pornin" initials="T." surname="Pornin"/>
            <date month="August" year="2013"/>
            <abstract>
              <t indent="0">This document defines a deterministic digital signature generation procedure. Such signatures are compatible with standard Digital Signature Algorithm (DSA) and Elliptic Curve Digital Signature Algorithm (ECDSA) digital signatures and can be processed with unmodified verifiers, which need not be aware of the procedure described therein. Deterministic signatures retain the cryptographic security features associated with digital signatures but can be more easily implemented in various environments, since they do not need access to a source of high-quality randomness.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6979"/>
          <seriesInfo name="DOI" value="10.17487/RFC6979"/>
        </reference>
        <reference anchor="RFC7252" target="https://www.rfc-editor.org/info/rfc7252" quoteTitle="true" derivedAnchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t indent="0">The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t indent="0">CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7748" target="https://www.rfc-editor.org/info/rfc7748" quoteTitle="true" derivedAnchor="RFC7748">
          <front>
            <title>Elliptic Curves for Security</title>
            <author fullname="A. Langley" initials="A." surname="Langley"/>
            <author fullname="M. Hamburg" initials="M." surname="Hamburg"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <date month="January" year="2016"/>
            <abstract>
              <t indent="0">This memo specifies two elliptic curves over prime fields that offer a high level of practical security in cryptographic applications, including Transport Layer Security (TLS). These curves are intended to operate at the ~128-bit and ~224-bit security level, respectively, and are generated deterministically based on a list of required properties.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7748"/>
          <seriesInfo name="DOI" value="10.17487/RFC7748"/>
        </reference>
        <reference anchor="RFC7959" target="https://www.rfc-editor.org/info/rfc7959" quoteTitle="true" derivedAnchor="RFC7959">
          <front>
            <title>Block-Wise Transfers in the Constrained Application Protocol (CoAP)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="Z. Shelby" initials="Z." role="editor" surname="Shelby"/>
            <date month="August" year="2016"/>
            <abstract>
              <t indent="0">The Constrained Application Protocol (CoAP) is a RESTful transfer protocol for constrained nodes and networks. Basic CoAP messages work well for small payloads from sensors and actuators; however, applications will need to transfer larger payloads occasionally -- for instance, for firmware updates. In contrast to HTTP, where TCP does the grunt work of segmenting and resequencing, CoAP is based on datagram transports such as UDP or Datagram Transport Layer Security (DTLS). These transports only offer fragmentation, which is even more problematic in constrained nodes and networks, limiting the maximum size of resource representations that can practically be transferred.</t>
              <t indent="0">Instead of relying on IP fragmentation, this specification extends basic CoAP with a pair of "Block" options for transferring multiple blocks of information from a resource representation in multiple request-response pairs. In many important cases, the Block options enable a server to be truly stateless: the server can handle each block transfer separately, with no need for a connection setup or other server-side memory of previous block transfers. Essentially, the Block options provide a minimal way to transfer larger representations in a block-wise fashion.</t>
              <t indent="0">A CoAP implementation that does not support these options generally is limited in the size of the representations that can be exchanged, so there is an expectation that the Block options will be widely used in CoAP implementations. Therefore, this specification updates RFC 7252.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7959"/>
          <seriesInfo name="DOI" value="10.17487/RFC7959"/>
        </reference>
        <reference anchor="RFC8126" target="https://www.rfc-editor.org/info/rfc8126" quoteTitle="true" derivedAnchor="RFC8126">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <author fullname="T. Narten" initials="T." surname="Narten"/>
            <date month="June" year="2017"/>
            <abstract>
              <t indent="0">Many protocols make use of points of extensibility that use constants to identify various protocol parameters. To ensure that the values in these fields do not have conflicting uses and to promote interoperability, their allocations are often coordinated by a central record keeper. For IETF protocols, that role is filled by the Internet Assigned Numbers Authority (IANA).</t>
              <t indent="0">To make assignments in a given registry prudently, guidance describing the conditions under which new values should be assigned, as well as when and how modifications to existing values can be made, is needed. This document defines a framework for the documentation of these guidelines by specification authors, in order to assure that the provided guidance for the IANA Considerations is clear and addresses the various issues that are likely in the operation of a registry.</t>
              <t indent="0">This is the third edition of this document; it obsoletes RFC 5226.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="26"/>
          <seriesInfo name="RFC" value="8126"/>
          <seriesInfo name="DOI" value="10.17487/RFC8126"/>
        </reference>
        <reference anchor="RFC8174" target="https://www.rfc-editor.org/info/rfc8174" quoteTitle="true" derivedAnchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t indent="0">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
        <reference anchor="RFC8392" target="https://www.rfc-editor.org/info/rfc8392" quoteTitle="true" derivedAnchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t indent="0">CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8410" target="https://www.rfc-editor.org/info/rfc8410" quoteTitle="true" derivedAnchor="RFC8410">
          <front>
            <title>Algorithm Identifiers for Ed25519, Ed448, X25519, and X448 for Use in the Internet X.509 Public Key Infrastructure</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document specifies algorithm identifiers and ASN.1 encoding formats for elliptic curve constructs using the curve25519 and curve448 curves. The signature algorithms covered are Ed25519 and Ed448. The key agreement algorithms covered are X25519 and X448. The encoding for public key, private key, and Edwards-curve Digital Signature Algorithm (EdDSA) structures is provided.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8410"/>
          <seriesInfo name="DOI" value="10.17487/RFC8410"/>
        </reference>
        <reference anchor="RFC8610" target="https://www.rfc-editor.org/info/rfc8610" quoteTitle="true" derivedAnchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t indent="0">This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8613" target="https://www.rfc-editor.org/info/rfc8613" quoteTitle="true" derivedAnchor="RFC8613">
          <front>
            <title>Object Security for Constrained RESTful Environments (OSCORE)</title>
            <author fullname="G. Selander" initials="G." surname="Selander"/>
            <author fullname="J. Mattsson" initials="J." surname="Mattsson"/>
            <author fullname="F. Palombini" initials="F." surname="Palombini"/>
            <author fullname="L. Seitz" initials="L." surname="Seitz"/>
            <date month="July" year="2019"/>
            <abstract>
              <t indent="0">This document defines Object Security for Constrained RESTful Environments (OSCORE), a method for application-layer protection of the Constrained Application Protocol (CoAP), using CBOR Object Signing and Encryption (COSE). OSCORE provides end-to-end protection between endpoints communicating using CoAP or CoAP-mappable HTTP. OSCORE is designed for constrained nodes and networks supporting a range of proxy operations, including translation between different transport protocols.</t>
              <t indent="0">Although an optional functionality of CoAP, OSCORE alters CoAP options processing and IANA registration. Therefore, this document updates RFC 7252.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8613"/>
          <seriesInfo name="DOI" value="10.17487/RFC8613"/>
        </reference>
        <reference anchor="RFC8724" target="https://www.rfc-editor.org/info/rfc8724" quoteTitle="true" derivedAnchor="RFC8724">
          <front>
            <title>SCHC: Generic Framework for Static Context Header Compression and Fragmentation</title>
            <author fullname="A. Minaburo" initials="A." surname="Minaburo"/>
            <author fullname="L. Toutain" initials="L." surname="Toutain"/>
            <author fullname="C. Gomez" initials="C." surname="Gomez"/>
            <author fullname="D. Barthel" initials="D." surname="Barthel"/>
            <author fullname="JC. Zuniga" initials="JC." surname="Zuniga"/>
            <date month="April" year="2020"/>
            <abstract>
              <t indent="0">This document defines the Static Context Header Compression and fragmentation (SCHC) framework, which provides both a header compression mechanism and an optional fragmentation mechanism. SCHC has been designed with Low-Power Wide Area Networks (LPWANs) in mind.</t>
              <t indent="0">SCHC compression is based on a common static context stored both in the LPWAN device and in the network infrastructure side. This document defines a generic header compression mechanism and its application to compress IPv6/UDP headers.</t>
              <t indent="0">This document also specifies an optional fragmentation and reassembly mechanism. It can be used to support the IPv6 MTU requirement over the LPWAN technologies. Fragmentation is needed for IPv6 datagrams that, after SCHC compression or when such compression was not possible, still exceed the Layer 2 maximum payload size.</t>
              <t indent="0">The SCHC header compression and fragmentation mechanisms are independent of the specific LPWAN technology over which they are used. This document defines generic functionalities and offers flexibility with regard to parameter settings and mechanism choices. This document standardizes the exchange over the LPWAN between two SCHC entities. Settings and choices specific to a technology or a product are expected to be grouped into profiles, which are specified in other documents. Data models for the context and profiles are out of scope.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8724"/>
          <seriesInfo name="DOI" value="10.17487/RFC8724"/>
        </reference>
        <reference anchor="RFC8742" target="https://www.rfc-editor.org/info/rfc8742" quoteTitle="true" derivedAnchor="RFC8742">
          <front>
            <title>Concise Binary Object Representation (CBOR) Sequences</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="February" year="2020"/>
            <abstract>
              <t indent="0">This document describes the Concise Binary Object Representation (CBOR) Sequence format and associated media type "application/cbor-seq". A CBOR Sequence consists of any number of encoded CBOR data items, simply concatenated in sequence.</t>
              <t indent="0">Structured syntax suffixes for media types allow other media types to build on them and make it explicit that they are built on an existing media type as their foundation. This specification defines and registers "+cbor-seq" as a structured syntax suffix for CBOR Sequences.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8742"/>
          <seriesInfo name="DOI" value="10.17487/RFC8742"/>
        </reference>
        <reference anchor="RFC8747" target="https://www.rfc-editor.org/info/rfc8747" quoteTitle="true" derivedAnchor="RFC8747">
          <front>
            <title>Proof-of-Possession Key Semantics for CBOR Web Tokens (CWTs)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="L. Seitz" initials="L." surname="Seitz"/>
            <author fullname="G. Selander" initials="G." surname="Selander"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="March" year="2020"/>
            <abstract>
              <t indent="0">This specification describes how to declare in a CBOR Web Token (CWT) (which is defined by RFC 8392) that the presenter of the CWT possesses a particular proof-of-possession key. Being able to prove possession of a key is also sometimes described as being the holder-of-key. This specification provides equivalent functionality to "Proof-of-Possession Key Semantics for JSON Web Tokens (JWTs)" (RFC 7800) but using Concise Binary Object Representation (CBOR) and CWTs rather than JavaScript Object Notation (JSON) and JSON Web Tokens (JWTs).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8747"/>
          <seriesInfo name="DOI" value="10.17487/RFC8747"/>
        </reference>
        <reference anchor="RFC8949" target="https://www.rfc-editor.org/info/rfc8949" quoteTitle="true" derivedAnchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t indent="0">The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t indent="0">This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC9052" target="https://www.rfc-editor.org/info/rfc9052" quoteTitle="true" derivedAnchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t indent="0">Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t indent="0">This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9053" target="https://www.rfc-editor.org/info/rfc9053" quoteTitle="true" derivedAnchor="RFC9053">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t indent="0">Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
              <t indent="0">This document, along with RFC 9052, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9053"/>
          <seriesInfo name="DOI" value="10.17487/RFC9053"/>
        </reference>
        <reference anchor="RFC9175" target="https://www.rfc-editor.org/info/rfc9175" quoteTitle="true" derivedAnchor="RFC9175">
          <front>
            <title>Constrained Application Protocol (CoAP): Echo, Request-Tag, and Token Processing</title>
            <author fullname="C. Amsüss" initials="C." surname="Amsüss"/>
            <author fullname="J. Preuß Mattsson" initials="J." surname="Preuß Mattsson"/>
            <author fullname="G. Selander" initials="G." surname="Selander"/>
            <date month="February" year="2022"/>
            <abstract>
              <t indent="0">This document specifies enhancements to the Constrained Application Protocol (CoAP) that mitigate security issues in particular use cases. The Echo option enables a CoAP server to verify the freshness of a request or to force a client to demonstrate reachability at its claimed network address. The Request-Tag option allows the CoAP server to match block-wise message fragments belonging to the same request. This document updates RFC 7252 with respect to the following: processing requirements for client Tokens, forbidding non-secure reuse of Tokens to ensure response-to-request binding when CoAP is used with a security protocol, and amplification mitigation (where the use of the Echo option is now recommended).</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9175"/>
          <seriesInfo name="DOI" value="10.17487/RFC9175"/>
        </reference>
        <reference anchor="RFC9360" target="https://www.rfc-editor.org/info/rfc9360" quoteTitle="true" derivedAnchor="RFC9360">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="February" year="2023"/>
            <abstract>
              <t indent="0">The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9360"/>
          <seriesInfo name="DOI" value="10.17487/RFC9360"/>
        </reference>
      </references>
      <references pn="section-11.2">
        <name slugifiedName="name-informative-references">Informative References</name>
        <reference anchor="Bruni18" target="https://www.springerprofessional.de/en/formal-verification-of-ephemeral-diffie-hellman-over-cose-edhoc/16284348" quoteTitle="true" derivedAnchor="Bruni18">
          <front>
            <title>Formal Verification of Ephemeral Diffie-Hellman Over COSE (EDHOC)</title>
            <author initials="A." surname="Bruni">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Sahl Jørgensen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="T." surname="Grønbech Petersen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="C." surname="Schürmann">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="November"/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-cose-cbor-encoded-cert" target="https://datatracker.ietf.org/doc/html/draft-ietf-cose-cbor-encoded-cert-09" quoteTitle="true" derivedAnchor="C509-CERTS">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author initials="J." surname="Preuß Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="G." surname="Selander" fullname="Göran Selander">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="S." surname="Raza" fullname="Shahid Raza">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <author initials="J." surname="Höglund" fullname="Joel Höglund">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <author initials="M." surname="Furuhed" fullname="Martin Furuhed">
              <organization showOnFrontPage="true">Nexus Group</organization>
            </author>
            <date month="March" day="4" year="2024"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-09"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="CborMe" target="https://cbor.me/" quoteTitle="true" derivedAnchor="CborMe">
          <front>
            <title>CBOR Playground</title>
            <author initials="C." surname="Bormann">
              <organization showOnFrontPage="true"/>
            </author>
          </front>
        </reference>
        <reference anchor="CNSA" target="https://en.wikipedia.org/w/index.php?title=Commercial_National_Security_Algorithm_Suite&amp;oldid=1181333611" quoteTitle="true" derivedAnchor="CNSA">
          <front>
            <title>Commercial National Security Algorithm Suite</title>
            <author>
              <organization showOnFrontPage="true">Wikipedia</organization>
            </author>
            <date year="2023" month="October"/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-iotops-security-protocol-comparison" target="https://datatracker.ietf.org/doc/html/draft-ietf-iotops-security-protocol-comparison-04" quoteTitle="true" derivedAnchor="CoAP-SEC-PROT">
          <front>
            <title>Comparison of CoAP Security Protocols</title>
            <author initials="J. P." surname="Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="F." surname="Palombini" fullname="Francesca Palombini">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="M." surname="Vučinić" fullname="Mališa Vučinić">
              <organization showOnFrontPage="true">INRIA</organization>
            </author>
            <date month="March" day="4" year="2024"/>
            <abstract>
              <t indent="0">   This document analyzes and compares the sizes of key exchange flights
   and the per-packet message size overheads when using different
   security protocols to secure CoAP.  Small message sizes are very
   important for reducing energy consumption, latency, and time to
   completion in constrained radio network such as Low-Power Wide Area
   Networks (LPWANs).  The analyzed security protocols are DTLS 1.2,
   DTLS 1.3, TLS 1.2, TLS 1.3, cTLS, EDHOC, OSCORE, and Group OSCORE.
   The DTLS and TLS record layers are analyzed with and without 6LoWPAN-
   GHC compression.  DTLS is analyzed with and without Connection ID.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-iotops-security-protocol-comparison-04"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="CottierPointcheval22" target="https://arxiv.org/abs/2209.03599" quoteTitle="true" derivedAnchor="CottierPointcheval22">
          <front>
            <title>Security Analysis of the EDHOC protocol</title>
            <author initials="B." surname="Cottier">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="D." surname="Pointcheval">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="September"/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-lwig-curve-representations" target="https://datatracker.ietf.org/doc/html/draft-ietf-lwig-curve-representations-23" quoteTitle="true" derivedAnchor="CURVE-REPR">
          <front>
            <title>Alternative Elliptic Curve Representations</title>
            <author initials="R." surname="Struik" fullname="Rene Struik">
              <organization showOnFrontPage="true">Struik Security Consultancy</organization>
            </author>
            <date month="January" day="21" year="2022"/>
            <abstract>
              <t indent="0">   This document specifies how to represent Montgomery curves and
   (twisted) Edwards curves as curves in short-Weierstrass form and
   illustrates how this can be used to carry out elliptic curve
   computations leveraging existing implementations and specifications
   of, e.g., ECDSA and ECDH using NIST prime curves.  We also provide
   extensive background material that may be useful for implementers of
   elliptic curve cryptography.


              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-lwig-curve-representations-23"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="Degabriele11" target="https://eprint.iacr.org/2011/615" quoteTitle="true" derivedAnchor="Degabriele11">
          <front>
            <title>On the Joint Security of Encryption and Signature in EMV</title>
            <author initials="J." surname="Degabriele">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Lehmann">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="K." surname="Paterson">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="N." surname="Smart">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Strefler">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2011" month="December"/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-rats-eat" target="https://datatracker.ietf.org/doc/html/draft-ietf-rats-eat-25" quoteTitle="true" derivedAnchor="EAT">
          <front>
            <title>The Entity Attestation Token (EAT)</title>
            <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
              <organization showOnFrontPage="true">Security Theory LLC</organization>
            </author>
            <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
         </author>
            <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
              <organization showOnFrontPage="true">Qualcomm Technologies Inc.</organization>
            </author>
            <author initials="C." surname="Wallace" fullname="Carl Wallace">
              <organization showOnFrontPage="true">Red Hound Software, Inc.</organization>
            </author>
            <date month="January" day="15" year="2024"/>
            <abstract>
              <t indent="0">   An Entity Attestation Token (EAT) provides an attested claims set
   that describes state and characteristics of an entity, a device like
   a smartphone, IoT device, network equipment or such.  This claims set
   is used by a relying party, server or service to determine the type
   and degree of trust placed in the entity.

   An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with
   attestation-oriented claims.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-25"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="I-D.ietf-core-oscore-edhoc" target="https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-edhoc-10" quoteTitle="true" derivedAnchor="EDHOC-CoAP-OSCORE">
          <front>
            <title>Using Ephemeral Diffie-Hellman Over COSE (EDHOC) with the Constrained Application Protocol (CoAP) and Object Security for Constrained RESTful Environments (OSCORE)</title>
            <author initials="F." surname="Palombini" fullname="Francesca Palombini">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="M." surname="Tiloca" fullname="Marco Tiloca">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <author initials="R." surname="Höglund" fullname="Rikard Höglund">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <author initials="S." surname="Hristozov" fullname="Stefan Hristozov">
              <organization showOnFrontPage="true">Fraunhofer AISEC</organization>
            </author>
            <author initials="G." surname="Selander" fullname="Göran Selander">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <date month="November" day="29" year="2023"/>
            <abstract>
              <t indent="0">   The lightweight authenticated key exchange protocol Ephemeral Diffie-
   Hellman Over COSE (EDHOC) can be run over the Constrained Application
   Protocol (CoAP) and used by two peers to establish a Security Context
   for the security protocol Object Security for Constrained RESTful
   Environments (OSCORE).  This document details this use of the EDHOC
   protocol, by specifying a number of additional and optional
   mechanisms.  These especially include an optimization approach for
   combining the execution of EDHOC with the first OSCORE transaction.
   This combination reduces the number of round trips required to set up
   an OSCORE Security Context and to complete an OSCORE transaction
   using that Security Context.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-core-oscore-edhoc-10"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="GuentherIlunga22" target="https://eprint.iacr.org/2022/1705" quoteTitle="true" derivedAnchor="GuentherIlunga22">
          <front>
            <title>Careful with MAc-then-SIGn: A Computational Analysis of the EDHOC Lightweight Authenticated Key Exchange Protocol</title>
            <author initials="F." surname="Günther">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Mukendi">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="December"/>
          </front>
        </reference>
        <reference anchor="I-D.irtf-cfrg-det-sigs-with-noise" target="https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-det-sigs-with-noise-02" quoteTitle="true" derivedAnchor="HEDGED-ECC-SIGS">
          <front>
            <title>Hedged ECDSA and EdDSA Signatures</title>
            <author initials="J." surname="Preuß Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="E." surname="Thormarker" fullname="Erik Thormarker">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="S." surname="Ruohomaa" fullname="Sini Ruohomaa">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <date month="March" day="1" year="2024"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-det-sigs-with-noise-02"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="HKDFpaper" target="https://eprint.iacr.org/2010/264.pdf" quoteTitle="true" derivedAnchor="HKDFpaper">
          <front>
            <title>Cryptographic Extraction and Key Derivation: The HKDF Scheme</title>
            <author initials="H." surname="Krawczyk">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2010" month="May"/>
          </front>
        </reference>
        <reference anchor="IEEE.802.15.4-2015" target="https://ieeexplore.ieee.org/document/7460875" quoteTitle="true" derivedAnchor="IEEE.802.15.4-2015">
          <front>
            <title>IEEE Standard for Low-Rate Wireless Networks</title>
            <author>
              <organization showOnFrontPage="true">IEEE</organization>
            </author>
            <date year="2016" month="April"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/IEEESTD.2016.7460875"/>
        </reference>
        <reference anchor="Jacomme23" target="https://hal.inria.fr/hal-03810102/" quoteTitle="true" derivedAnchor="Jacomme23">
          <front>
            <title>A comprehensive, formal and automated analysis of the EDHOC protocol</title>
            <author initials="C." surname="Jacomme">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="E." surname="Klein">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S." surname="Kremer">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="M." surname="Racouchot">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="October"/>
          </front>
        </reference>
        <reference anchor="I-D.ietf-core-oscore-key-update" target="https://datatracker.ietf.org/doc/html/draft-ietf-core-oscore-key-update-07" quoteTitle="true" derivedAnchor="KUDOS">
          <front>
            <title>Key Update for OSCORE (KUDOS)</title>
            <author initials="R." surname="Höglund" fullname="Rikard Höglund">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <author initials="M." surname="Tiloca" fullname="Marco Tiloca">
              <organization showOnFrontPage="true">RISE AB</organization>
            </author>
            <date month="March" day="4" year="2024"/>
            <abstract>
              <t indent="0">   This document defines Key Update for OSCORE (KUDOS), a lightweight
   procedure that two CoAP endpoints can use to update their keying
   material by establishing a new OSCORE Security Context.  Accordingly,
   it updates the use of the OSCORE flag bits in the CoAP OSCORE Option
   as well as the protection of CoAP response messages with OSCORE, and
   it deprecates the key update procedure specified in Appendix B.2 of
   RFC 8613.  Thus, this document updates RFC 8613.  Also, this document
   defines a procedure that two endpoints can use to update their OSCORE
   identifiers, run either stand-alone or during a KUDOS execution.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-core-oscore-key-update-07"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="I-D.ietf-lake-authz" target="https://datatracker.ietf.org/doc/html/draft-ietf-lake-authz-01" quoteTitle="true" derivedAnchor="LAKE-AUTHZ">
          <front>
            <title>Lightweight Authorization using Ephemeral Diffie-Hellman Over COSE</title>
            <author initials="G." surname="Selander" fullname="Göran Selander">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="J. P." surname="Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="M." surname="Vučinić" fullname="Mališa Vučinić">
              <organization showOnFrontPage="true">INRIA</organization>
            </author>
            <author initials="G." surname="Fedrecheski" fullname="Geovane Fedrecheski">
              <organization showOnFrontPage="true">INRIA</organization>
            </author>
            <author initials="M." surname="Richardson" fullname="Michael Richardson">
              <organization showOnFrontPage="true">Sandelman Software Works</organization>
            </author>
            <date month="March" day="4" year="2024"/>
            <abstract>
              <t indent="0">   This document describes a procedure for authorizing enrollment of new
   devices using the lightweight authenticated key exchange protocol
   Ephemeral Diffie-Hellman Over COSE (EDHOC).  The procedure is
   applicable to zero-touch onboarding of new devices to a constrained
   network leveraging trust anchors installed at manufacture time.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-lake-authz-01"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="I-D.ietf-lake-reqs" target="https://datatracker.ietf.org/doc/html/draft-ietf-lake-reqs-04" quoteTitle="true" derivedAnchor="LAKE-REQS">
          <front>
            <title>Requirements for a Lightweight AKE for OSCORE</title>
            <author initials="M." surname="Vučinić" fullname="Mališa Vučinić">
              <organization showOnFrontPage="true">Inria</organization>
            </author>
            <author initials="G." surname="Selander" fullname="Göran Selander">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="J." surname="Preuß Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson AB</organization>
            </author>
            <author initials="D." surname="Garcia-Carillo" fullname="Dan Garcia-Carillo">
              <organization showOnFrontPage="true">Odin Solutions S.L.</organization>
            </author>
            <date month="June" day="8" year="2020"/>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-lake-reqs-04"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
        <reference anchor="NISTPQC" target="https://csrc.nist.gov/Projects/post-quantum-cryptography/faqs" quoteTitle="true" derivedAnchor="NISTPQC">
          <front>
            <title>Post-Quantum Cryptography FAQs</title>
            <author>
              <organization showOnFrontPage="true">National Institute Standards and Technology (NIST)</organization>
            </author>
          </front>
        </reference>
        <reference anchor="Noise" target="https://noiseprotocol.org/noise.html" quoteTitle="true" derivedAnchor="Noise">
          <front>
            <title>The Noise Protocol Framework</title>
            <author initials="T." surname="Perrin">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="July"/>
          </front>
          <refcontent>Revision 34</refcontent>
        </reference>
        <reference anchor="Norrman20" target="https://arxiv.org/abs/2007.11427" quoteTitle="true" derivedAnchor="Norrman20">
          <front>
            <title>Formal Analysis of EDHOC Key Establishment for Constrained IoT Devices</title>
            <author initials="K." surname="Norrman">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="V." surname="Sundararajan">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Bruni">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2020" month="September"/>
          </front>
        </reference>
        <reference anchor="RFC2986" target="https://www.rfc-editor.org/info/rfc2986" quoteTitle="true" derivedAnchor="RFC2986">
          <front>
            <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
            <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
            <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
            <date month="November" year="2000"/>
            <abstract>
              <t indent="0">This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2986"/>
          <seriesInfo name="DOI" value="10.17487/RFC2986"/>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" quoteTitle="true" derivedAnchor="RFC5280">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <author fullname="D. Cooper" initials="D." surname="Cooper"/>
            <author fullname="S. Santesson" initials="S." surname="Santesson"/>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
            <author fullname="R. Housley" initials="R." surname="Housley"/>
            <author fullname="W. Polk" initials="W." surname="Polk"/>
            <date month="May" year="2008"/>
            <abstract>
              <t indent="0">This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="5280"/>
          <seriesInfo name="DOI" value="10.17487/RFC5280"/>
        </reference>
        <reference anchor="RFC6194" target="https://www.rfc-editor.org/info/rfc6194" quoteTitle="true" derivedAnchor="RFC6194">
          <front>
            <title>Security Considerations for the SHA-0 and SHA-1 Message-Digest Algorithms</title>
            <author fullname="T. Polk" initials="T." surname="Polk"/>
            <author fullname="L. Chen" initials="L." surname="Chen"/>
            <author fullname="S. Turner" initials="S." surname="Turner"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="March" year="2011"/>
            <abstract>
              <t indent="0">This document includes security considerations for the SHA-0 and SHA-1 message digest algorithm. This document is not an Internet Standards Track specification; it is published for informational purposes.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="6194"/>
          <seriesInfo name="DOI" value="10.17487/RFC6194"/>
        </reference>
        <reference anchor="RFC7228" target="https://www.rfc-editor.org/info/rfc7228" quoteTitle="true" derivedAnchor="RFC7228">
          <front>
            <title>Terminology for Constrained-Node Networks</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="M. Ersue" initials="M." surname="Ersue"/>
            <author fullname="A. Keranen" initials="A." surname="Keranen"/>
            <date month="May" year="2014"/>
            <abstract>
              <t indent="0">The Internet Protocol Suite is increasingly used on small devices with severe constraints on power, memory, and processing resources, creating constrained-node networks. This document provides a number of basic terms that have been useful in the standardization work for constrained-node networks.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7228"/>
          <seriesInfo name="DOI" value="10.17487/RFC7228"/>
        </reference>
        <reference anchor="RFC7258" target="https://www.rfc-editor.org/info/rfc7258" quoteTitle="true" derivedAnchor="RFC7258">
          <front>
            <title>Pervasive Monitoring Is an Attack</title>
            <author fullname="S. Farrell" initials="S." surname="Farrell"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2014"/>
            <abstract>
              <t indent="0">Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="188"/>
          <seriesInfo name="RFC" value="7258"/>
          <seriesInfo name="DOI" value="10.17487/RFC7258"/>
        </reference>
        <reference anchor="RFC7296" target="https://www.rfc-editor.org/info/rfc7296" quoteTitle="true" derivedAnchor="RFC7296">
          <front>
            <title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
            <author fullname="C. Kaufman" initials="C." surname="Kaufman"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <author fullname="Y. Nir" initials="Y." surname="Nir"/>
            <author fullname="P. Eronen" initials="P." surname="Eronen"/>
            <author fullname="T. Kivinen" initials="T." surname="Kivinen"/>
            <date month="October" year="2014"/>
            <abstract>
              <t indent="0">This document describes version 2 of the Internet Key Exchange (IKE) protocol. IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs). This document obsoletes RFC 5996, and includes all of the errata for it. It advances IKEv2 to be an Internet Standard.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="79"/>
          <seriesInfo name="RFC" value="7296"/>
          <seriesInfo name="DOI" value="10.17487/RFC7296"/>
        </reference>
        <reference anchor="RFC7624" target="https://www.rfc-editor.org/info/rfc7624" quoteTitle="true" derivedAnchor="RFC7624">
          <front>
            <title>Confidentiality in the Face of Pervasive Surveillance: A Threat Model and Problem Statement</title>
            <author fullname="R. Barnes" initials="R." surname="Barnes"/>
            <author fullname="B. Schneier" initials="B." surname="Schneier"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="T. Hardie" initials="T." surname="Hardie"/>
            <author fullname="B. Trammell" initials="B." surname="Trammell"/>
            <author fullname="C. Huitema" initials="C." surname="Huitema"/>
            <author fullname="D. Borkmann" initials="D." surname="Borkmann"/>
            <date month="August" year="2015"/>
            <abstract>
              <t indent="0">Since the initial revelations of pervasive surveillance in 2013, several classes of attacks on Internet communications have been discovered. In this document, we develop a threat model that describes these attacks on Internet confidentiality. We assume an attacker that is interested in undetected, indiscriminate eavesdropping. The threat model is based on published, verified attacks.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7624"/>
          <seriesInfo name="DOI" value="10.17487/RFC7624"/>
        </reference>
        <reference anchor="RFC8366" target="https://www.rfc-editor.org/info/rfc8366" quoteTitle="true" derivedAnchor="RFC8366">
          <front>
            <title>A Voucher Artifact for Bootstrapping Protocols</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
            <author fullname="T. Eckert" initials="T." surname="Eckert"/>
            <date month="May" year="2018"/>
            <abstract>
              <t indent="0">This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
              <t indent="0">This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
              <t indent="0">This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8366"/>
          <seriesInfo name="DOI" value="10.17487/RFC8366"/>
        </reference>
        <reference anchor="RFC8376" target="https://www.rfc-editor.org/info/rfc8376" quoteTitle="true" derivedAnchor="RFC8376">
          <front>
            <title>Low-Power Wide Area Network (LPWAN) Overview</title>
            <author fullname="S. Farrell" initials="S." role="editor" surname="Farrell"/>
            <date month="May" year="2018"/>
            <abstract>
              <t indent="0">Low-Power Wide Area Networks (LPWANs) are wireless technologies with characteristics such as large coverage areas, low bandwidth, possibly very small packet and application-layer data sizes, and long battery life operation. This memo is an informational overview of the set of LPWAN technologies being considered in the IETF and of the gaps that exist between the needs of those technologies and the goal of running IP in LPWANs.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8376"/>
          <seriesInfo name="DOI" value="10.17487/RFC8376"/>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" quoteTitle="true" derivedAnchor="RFC8446">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <date month="August" year="2018"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Transport Layer Security (TLS) protocol. TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961. This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8446"/>
          <seriesInfo name="DOI" value="10.17487/RFC8446"/>
        </reference>
        <reference anchor="RFC8937" target="https://www.rfc-editor.org/info/rfc8937" quoteTitle="true" derivedAnchor="RFC8937">
          <front>
            <title>Randomness Improvements for Security Protocols</title>
            <author fullname="C. Cremers" initials="C." surname="Cremers"/>
            <author fullname="L. Garratt" initials="L." surname="Garratt"/>
            <author fullname="S. Smyshlyaev" initials="S." surname="Smyshlyaev"/>
            <author fullname="N. Sullivan" initials="N." surname="Sullivan"/>
            <author fullname="C. Wood" initials="C." surname="Wood"/>
            <date month="October" year="2020"/>
            <abstract>
              <t indent="0">Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols. Weak or predictable "cryptographically secure" pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t>
              <t indent="0">This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8937"/>
          <seriesInfo name="DOI" value="10.17487/RFC8937"/>
        </reference>
        <reference anchor="RFC9000" target="https://www.rfc-editor.org/info/rfc9000" quoteTitle="true" derivedAnchor="RFC9000">
          <front>
            <title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>
            <author fullname="J. Iyengar" initials="J." role="editor" surname="Iyengar"/>
            <author fullname="M. Thomson" initials="M." role="editor" surname="Thomson"/>
            <date month="May" year="2021"/>
            <abstract>
              <t indent="0">This document defines the core of the QUIC transport protocol. QUIC provides applications with flow-controlled streams for structured communication, low-latency connection establishment, and network path migration. QUIC includes security measures that ensure confidentiality, integrity, and availability in a range of deployment circumstances. Accompanying documents describe the integration of TLS for key negotiation, loss detection, and an exemplary congestion control algorithm.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9000"/>
          <seriesInfo name="DOI" value="10.17487/RFC9000"/>
        </reference>
        <reference anchor="RFC9147" target="https://www.rfc-editor.org/info/rfc9147" quoteTitle="true" derivedAnchor="RFC9147">
          <front>
            <title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>
            <author fullname="E. Rescorla" initials="E." surname="Rescorla"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="N. Modadugu" initials="N." surname="Modadugu"/>
            <date month="April" year="2022"/>
            <abstract>
              <t indent="0">This document specifies version 1.3 of the Datagram Transport Layer Security (DTLS) protocol. DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t indent="0">The DTLS 1.3 protocol is based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees with the exception of order protection / non-replayability. Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t>
              <t indent="0">This document obsoletes RFC 6347.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9147"/>
          <seriesInfo name="DOI" value="10.17487/RFC9147"/>
        </reference>
        <reference anchor="RFC9176" target="https://www.rfc-editor.org/info/rfc9176" quoteTitle="true" derivedAnchor="RFC9176">
          <front>
            <title>Constrained RESTful Environments (CoRE) Resource Directory</title>
            <author fullname="C. Amsüss" initials="C." role="editor" surname="Amsüss"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="M. Koster" initials="M." surname="Koster"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. van der Stok" initials="P." surname="van der Stok"/>
            <date month="April" year="2022"/>
            <abstract>
              <t indent="0">In many Internet of Things (IoT) applications, direct discovery of resources is not practical due to sleeping nodes or networks where multicast traffic is inefficient. These problems can be solved by employing an entity called a Resource Directory (RD), which contains information about resources held on other servers, allowing lookups to be performed for those resources. The input to an RD is composed of links, and the output is composed of links constructed from the information stored in the RD. This document specifies the web interfaces that an RD supports for web servers to discover the RD and to register, maintain, look up, and remove information on resources. Furthermore, new target attributes useful in conjunction with an RD are defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9176"/>
          <seriesInfo name="DOI" value="10.17487/RFC9176"/>
        </reference>
        <reference anchor="RFC9397" target="https://www.rfc-editor.org/info/rfc9397" quoteTitle="true" derivedAnchor="RFC9397">
          <front>
            <title>Trusted Execution Environment Provisioning (TEEP) Architecture</title>
            <author fullname="M. Pei" initials="M." surname="Pei"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="D. Wheeler" initials="D." surname="Wheeler"/>
            <date month="July" year="2023"/>
            <abstract>
              <t indent="0">A Trusted Execution Environment (TEE) is an environment that enforces the following: any code within the environment cannot be tampered with, and any data used by such code cannot be read or tampered with by any code outside the environment. This architecture document discusses the motivation for designing and standardizing a protocol for managing the lifecycle of Trusted Applications running inside such a TEE.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9397"/>
          <seriesInfo name="DOI" value="10.17487/RFC9397"/>
        </reference>
        <reference anchor="RFC9529" target="https://www.rfc-editor.org/info/rfc9529" quoteTitle="true" derivedAnchor="RFC9529">
          <front>
            <title>Traces of Ephemeral Diffie-Hellman Over COSE (EDHOC)</title>
            <author initials="G." surname="Selander" fullname="Göran Selander">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="J." surname="Preuß Mattsson" fullname="John Preuß Mattsson">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="M." surname="Serafin" fullname="Marek Serafin">
              <organization showOnFrontPage="true">ASSA ABLOY</organization>
            </author>
            <author initials="M." surname="Tiloca" fullname="Marco Tiloca">
              <organization showOnFrontPage="true">RISE</organization>
            </author>
            <author initials="M." surname="Vučinić" fullname="Mališa Vučinić">
              <organization showOnFrontPage="true">Inria</organization>
            </author>
            <date month="March" year="2024"/>
          </front>
          <seriesInfo name="RFC" value="9529"/>
          <seriesInfo name="DOI" value="10.17487/RFC9529"/>
        </reference>
        <reference anchor="SECG" target="https://www.secg.org/sec1-v2.pdf" quoteTitle="true" derivedAnchor="SECG">
          <front>
            <title>SEC 1: Elliptic Curve Cryptography</title>
            <author>
              <organization showOnFrontPage="true">Certicom Research</organization>
            </author>
            <date year="2009" month="May"/>
          </front>
          <refcontent>Standards for Efficient Cryptography</refcontent>
        </reference>
        <reference anchor="SIGMA" target="https://www.iacr.org/cryptodb/archive/2003/CRYPTO/1495/1495.pdf" quoteTitle="true" derivedAnchor="SIGMA">
          <front>
            <title>SIGMA: the 'SIGn-and-MAc' Approach to Authenticated Diffie-Hellman and Its Use in the IKE-Protocols</title>
            <author initials="H." surname="Krawczyk">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2003" month="June"/>
          </front>
        </reference>
        <reference anchor="SP-800-108" target="https://doi.org/10.6028/NIST.SP.800-108r1-upd1" quoteTitle="true" derivedAnchor="SP-800-108">
          <front>
            <title>Recommendation for Key Derivation Using Pseudorandom Functions</title>
            <author initials="L." surname="Chen">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2022" month="August"/>
          </front>
          <seriesInfo name="NIST" value="Special Publication 800-108 Revision 1"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-108r1-upd1"/>
        </reference>
        <reference anchor="SP-800-56A" quoteTitle="true" target="https://doi.org/10.6028/NIST.SP.800-56Ar3" derivedAnchor="SP-800-56A">
          <front>
            <title>Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography</title>
            <author initials="E." surname="Barker">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="L." surname="Chen">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Roginsky">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="A." surname="Vassilev">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R." surname="Davis">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2018" month="April"/>
          </front>
          <seriesInfo name="NIST" value="Special Publication 800-56A Revision 3"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-56Ar3"/>
        </reference>
        <reference anchor="SP800-185" target="https://doi.org/10.6028/NIST.SP.800-185" quoteTitle="true" derivedAnchor="SP800-185">
          <front>
            <title>SHA-3 Derived Functions cSHAKE, KMAC, TupleHash and ParallelHash</title>
            <author initials="J" surname="Kelsey">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="S" surname="Chang">
              <organization showOnFrontPage="true"/>
            </author>
            <author initials="R" surname="Perlner">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2016" month="December"/>
          </front>
          <seriesInfo name="NIST" value="Special Publication 800-185"/>
          <seriesInfo name="DOI" value="10.6028/NIST.SP.800-185"/>
        </reference>
        <reference anchor="Thormarker21" target="https://eprint.iacr.org/2021/509.pdf" quoteTitle="true" derivedAnchor="Thormarker21">
          <front>
            <title>On using the same key pair for Ed25519 and an X25519 based KEM</title>
            <author initials="E." surname="Thormarker">
              <organization showOnFrontPage="true"/>
            </author>
            <date year="2021" month="April"/>
          </front>
        </reference>
        <reference anchor="I-D.arkko-arch-internet-threat-model-guidance" target="https://datatracker.ietf.org/doc/html/draft-arkko-arch-internet-threat-model-guidance-00" quoteTitle="true" derivedAnchor="THREAT-MODEL-GUIDANCE">
          <front>
            <title>Internet Threat Model Guidance</title>
            <author initials="J." surname="Arkko" fullname="Jari Arkko">
              <organization showOnFrontPage="true">Ericsson</organization>
            </author>
            <author initials="S." surname="Farrell" fullname="Stephen Farrell">
              <organization showOnFrontPage="true">Trinity College Dublin</organization>
            </author>
            <date month="July" day="12" year="2021"/>
            <abstract>
              <t indent="0">   Communications security has been at the center of many security
   improvements in the Internet.  The goal has been to ensure that
   communications are protected against outside observers and attackers.

   This memo suggests that the existing RFC 3552 threat model, while
   important and still valid, is no longer alone sufficient to cater for
   the pressing security and privacy issues seen on the Internet today.
   For instance, it is often also necessary to protect against endpoints
   that are compromised, malicious, or whose interests simply do not
   align with the interests of users.  While such protection is
   difficult, there are some measures that can be taken and we argue
   that investigation of these issues is warranted.

   It is particularly important to ensure that as we continue to develop
   Internet technology, non-communications security related threats, and
   privacy issues, are properly understood.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-arkko-arch-internet-threat-model-guidance-00"/>
          <refcontent>Work in Progress</refcontent>
        </reference>
      </references>
    </references>
    <section anchor="transfer" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a">
      <name slugifiedName="name-use-with-oscore-and-transfe">Use with OSCORE and Transfer over CoAP</name>
      <t indent="0" pn="section-appendix.a-1">This appendix describes how to derive an OSCORE security context when EDHOC is used to key OSCORE and how to transfer EDHOC messages over CoAP. The use of CoAP or OSCORE with EDHOC is optional, but if you are using CoAP or OSCORE, then certain normative requirements apply as detailed in the  subsections.</t>
      <section anchor="oscore-ctx-derivation" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.1">
        <name slugifiedName="name-deriving-the-oscore-securit">Deriving the OSCORE Security Context</name>
        <t indent="0" pn="section-appendix.a.1-1">This section specifies how to use EDHOC output to derive the OSCORE security context.</t>
        <t indent="0" pn="section-appendix.a.1-2">After successful processing of EDHOC message_3, the Client and Server derive Security Context parameters for OSCORE as follows (see <xref target="RFC8613" section="3.2" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8613#section-3.2" derivedContent="RFC8613"/>):</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.1-3">
          <li pn="section-appendix.a.1-3.1">
            <t indent="0" pn="section-appendix.a.1-3.1.1">The Master Secret and Master Salt <bcp14>SHALL</bcp14> be derived by using the EDHOC_Exporter interface (see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>):
            </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.1-3.1.2">
              <li pn="section-appendix.a.1-3.1.2.1">The EDHOC Exporter Labels for deriving the OSCORE Master Secret and OSCORE Master Salt are the uints 0 and 1, respectively.</li>
              <li pn="section-appendix.a.1-3.1.2.2">The context parameter is h'' (0x40), the empty CBOR byte string.</li>
              <li pn="section-appendix.a.1-3.1.2.3">By default, oscore_key_length is the key length (in bytes) of the application AEAD Algorithm of the selected cipher suite for the EDHOC session. Also by default, oscore_salt_length has value 8. The Initiator and Responder <bcp14>MAY</bcp14> agree out-of-band on a longer oscore_key_length than the default and on shorter or
longer than the default oscore_salt_length.</li>
            </ul>
          </li>
        </ul>
        <artwork align="left" pn="section-appendix.a.1-4">
   Master Secret = EDHOC_Exporter( 0, h'', oscore_key_length )
   Master Salt   = EDHOC_Exporter( 1, h'', oscore_salt_length )
</artwork>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.1-5">
          <li pn="section-appendix.a.1-5.1">The AEAD Algorithm <bcp14>SHALL</bcp14> be the application AEAD algorithm of the selected cipher suite for the EDHOC session.</li>
          <li pn="section-appendix.a.1-5.2">The HKDF Algorithm <bcp14>SHALL</bcp14> be the one based on the application hash algorithm of the selected cipher suite for the EDHOC session. For example, if SHA-256 is the application hash algorithm of the selected cipher suite, HKDF SHA-256 is used as the HKDF Algorithm in the OSCORE Security Context.</li>
          <li pn="section-appendix.a.1-5.3">The relationship between identifiers in OSCORE and EDHOC is specified in <xref target="ci-oscore" format="default" sectionFormat="of" derivedContent="Section 3.3.3"/>. The OSCORE Sender ID and Recipient ID <bcp14>SHALL</bcp14> be determined by EDHOC connection identifiers C_R and C_I for the EDHOC session as shown in <xref target="tab-edhoc-oscore-id-mapping" format="default" sectionFormat="of" derivedContent="Table 14"/>.</li>
        </ul>
        <table anchor="tab-edhoc-oscore-id-mapping" align="center" pn="table-14">
          <name slugifiedName="name-usage-of-connection-identif">Usage of Connection Identifiers in OSCORE</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1"/>
              <th align="left" colspan="1" rowspan="1">OSCORE Sender ID</th>
              <th align="left" colspan="1" rowspan="1">OSCORE Recipient ID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">EDHOC Initiator</td>
              <td align="center" colspan="1" rowspan="1">C_R</td>
              <td align="center" colspan="1" rowspan="1">C_I</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">EDHOC Responder</td>
              <td align="center" colspan="1" rowspan="1">C_I</td>
              <td align="center" colspan="1" rowspan="1">C_R</td>
            </tr>
          </tbody>
        </table>
        <t indent="0" pn="section-appendix.a.1-7">The Client and Server <bcp14>SHALL</bcp14> use the parameters above to establish an OSCORE Security Context, as per <xref target="RFC8613" section="3.2.1" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc8613#section-3.2.1" derivedContent="RFC8613"/>.</t>
        <t indent="0" pn="section-appendix.a.1-8">From then on, the Client and Server retrieve the OSCORE protocol state using the Recipient ID and optionally other transport information such as the 5-tuple.</t>
      </section>
      <section anchor="coap" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.a.2">
        <name slugifiedName="name-transferring-edhoc-over-coa">Transferring EDHOC over CoAP</name>
        <t indent="0" pn="section-appendix.a.2-1">This section specifies how EDHOC can be transferred as an exchange of CoAP <xref target="RFC7252" format="default" sectionFormat="of" derivedContent="RFC7252"/> messages. CoAP provides a reliable transport that can preserve packet ordering, provides flow and congestion control, and handles message duplication. CoAP can also perform fragmentation and mitigate certain denial-of-service attacks. The underlying CoAP transport should be used in reliable mode, in particular, when fragmentation is used, to avoid, e.g., situations with hanging endpoints waiting for each other.</t>
        <t indent="0" pn="section-appendix.a.2-2">EDHOC may run with the Initiator either being a CoAP client or CoAP server. We denote the former by the "forward message flow" (see <xref target="forward" format="default" sectionFormat="of" derivedContent="Appendix A.2.1"/>) and the latter by the "reverse message flow" (see <xref target="reverse" format="default" sectionFormat="of" derivedContent="Appendix A.2.2"/>). By default, we assume the forward message flow, but the roles <bcp14>SHOULD</bcp14> be chosen to protect the most sensitive identity; see <xref target="security" format="default" sectionFormat="of" derivedContent="Section 9"/>.</t>
        <t indent="0" pn="section-appendix.a.2-3">According to this specification, EDHOC is transferred in POST requests to the Uri-Path: "/.well-known/edhoc" (see <xref target="well-known" format="default" sectionFormat="of" derivedContent="Section 10.7"/>) and 2.04 (Changed) responses. An application may define its own path that can be discovered, e.g., using a resource directory <xref target="RFC9176" format="default" sectionFormat="of" derivedContent="RFC9176"/>. Client applications can use the resource type "core.edhoc" to discover a server's EDHOC resource, i.e., where to send a request for executing the EDHOC protocol; see <xref target="rt" format="default" sectionFormat="of" derivedContent="Section 10.10"/>. An alternative transfer of the forward message flow is specified in <xref target="I-D.ietf-core-oscore-edhoc" format="default" sectionFormat="of" derivedContent="EDHOC-CoAP-OSCORE"/>.</t>
        <t indent="0" pn="section-appendix.a.2-4">In order for the server to correlate a message received from a client to a message previously sent in the same EDHOC session over CoAP, messages sent by the client <bcp14>SHALL</bcp14> be prepended with the CBOR serialization of the connection identifier that the server has selected; see <xref target="ci-edhoc" format="default" sectionFormat="of" derivedContent="Section 3.4.1"/>. This applies both to the forward and the reverse message flows. To indicate a new EDHOC session in the forward message flow, message_1 <bcp14>SHALL</bcp14> be prepended with the CBOR simple value <tt>true</tt> (0xf5). Even if CoAP is carried over a reliable transport protocol, such as TCP, the prepending of identifiers specified here <bcp14>SHALL</bcp14> be practiced to enable interoperability independent of how CoAP is transported.</t>
        <t indent="0" pn="section-appendix.a.2-5">The prepended identifiers are encoded in CBOR and thus self-delimiting. The representation of identifiers described in <xref target="bstr-repr" format="default" sectionFormat="of" derivedContent="Section 3.3.2"/> <bcp14>SHALL</bcp14> be used. They are sent in front of the actual EDHOC message to keep track of messages in an EDHOC session, and only the part of the body following the identifier is used for EDHOC processing. In particular, the connection identifiers within the EDHOC messages are not impacted by the prepended identifiers.</t>
        <t indent="0" pn="section-appendix.a.2-6">An EDHOC message has media type "application/edhoc+cbor-seq", whereas an EDHOC message prepended by a connection identifier has media type "application/cid-edhoc+cbor-seq"; see <xref target="content-format" format="default" sectionFormat="of" derivedContent="Section 10.9"/>.</t>
        <t indent="0" pn="section-appendix.a.2-7">To mitigate certain denial-of-service attacks, the CoAP server <bcp14>MAY</bcp14> respond to the first POST request with a 4.01 (Unauthorized) containing an Echo option <xref target="RFC9175" format="default" sectionFormat="of" derivedContent="RFC9175"/>. This forces the Initiator to demonstrate reachability at its apparent network address. If message fragmentation is needed, the EDHOC messages may be fragmented using the CoAP Block-Wise Transfer mechanism <xref target="RFC7959" format="default" sectionFormat="of" derivedContent="RFC7959"/>.</t>
        <t indent="0" pn="section-appendix.a.2-8">EDHOC error messages need to be transported in response to a message that failed (see <xref target="error" format="default" sectionFormat="of" derivedContent="Section 6"/>). EDHOC error messages transported with CoAP are carried in the payload.</t>
        <t indent="0" pn="section-appendix.a.2-9">Note that the transport over CoAP can serve as a blueprint for other client-server protocols:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.2-10">
          <li pn="section-appendix.a.2-10.1">The client prepends the connection identifier selected by the server  (or, for message_1, the CBOR simple value <tt>true</tt>) to any request message it sends.</li>
          <li pn="section-appendix.a.2-10.2">The server does not send any such indicator, as responses are matched to request by the client-server protocol design.</li>
        </ul>
        <section anchor="forward" numbered="true" removeInRFC="false" toc="exclude" pn="section-appendix.a.2.1">
          <name slugifiedName="name-the-forward-message-flow">The Forward Message Flow</name>
          <t indent="0" pn="section-appendix.a.2.1-1">In the forward message flow, the CoAP client is the Initiator and the CoAP server is the Responder. This flow protects the client identity against active attackers and the server identity against passive attackers.</t>
          <t indent="0" pn="section-appendix.a.2.1-2">In the forward message flow, the CoAP Token enables correlation on the Initiator (client) side, and the prepended C_R enables correlation on the Responder (server) side.</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.2.1-3">
            <li pn="section-appendix.a.2.1-3.1">EDHOC message_1 is sent in the payload of a POST request from the client to the server's resource for EDHOC, prepended with the identifier <tt>true</tt> (0xf5), indicating a new EDHOC session.</li>
            <li pn="section-appendix.a.2.1-3.2">EDHOC message_2 or the EDHOC error message is sent from the server to the client in the payload of the response, in the former case with response code 2.04 (Changed) and in the latter with response code as specified in <xref target="edhoc-oscore-over-coap" format="default" sectionFormat="of" derivedContent="Appendix A.2.3"/>.</li>
            <li pn="section-appendix.a.2.1-3.3">EDHOC message_3 or the EDHOC error message is sent from the client to the server's resource in the payload of a POST request, prepended with connection identifier C_R.</li>
            <li pn="section-appendix.a.2.1-3.4">If EDHOC message_4 is used, or in case of an error message, it is sent from the server to the client in the payload of the response, with response codes analogously to message_2. In case of an error message sent in response to message_4, it is sent analogously to the error message sent in response to message_2.</li>
          </ul>
          <t indent="0" pn="section-appendix.a.2.1-4">An example of a completed EDHOC session over CoAP in the forward message flow is shown in <xref target="fig-coap1" format="default" sectionFormat="of" derivedContent="Figure 10"/>.</t>
          <figure anchor="fig-coap1" align="left" suppress-title="false" pn="figure-10">
            <name slugifiedName="name-example-of-the-forward-mess">Example of the Forward Message Flow</name>
            <artset pn="section-appendix.a.2.1-5.1">
              <artwork type="svg" align="center" pn="section-appendix.a.2.1-5.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 496 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                  <path d="M 24,48 L 24,336" fill="none" stroke="black"/>
                  <path d="M 112,48 L 112,336" fill="none" stroke="black"/>
                  <path d="M 24,64 L 104,64" fill="none" stroke="black"/>
                  <path d="M 32,144 L 112,144" fill="none" stroke="black"/>
                  <path d="M 24,208 L 104,208" fill="none" stroke="black"/>
                  <path d="M 32,288 L 112,288" fill="none" stroke="black"/>
                  <polygon class="arrowhead" points="112,208 100,202.4 100,213.6" fill="black" transform="rotate(0,104,208)"/>
                  <polygon class="arrowhead" points="112,64 100,58.4 100,69.6" fill="black" transform="rotate(0,104,64)"/>
                  <polygon class="arrowhead" points="40,288 28,282.4 28,293.6" fill="black" transform="rotate(180,32,288)"/>
                  <polygon class="arrowhead" points="40,144 28,138.4 28,149.6" fill="black" transform="rotate(180,32,144)"/>
                  <g class="text">
                    <text x="28" y="36">Client</text>
                    <text x="108" y="36">Server</text>
                    <text x="152" y="68">Header:</text>
                    <text x="204" y="68">POST</text>
                    <text x="272" y="68">(Code=0.02)</text>
                    <text x="68" y="84">POST</text>
                    <text x="160" y="84">Uri-Path:</text>
                    <text x="284" y="84">"/.well-known/edhoc"</text>
                    <text x="184" y="100">Content-Format:</text>
                    <text x="372" y="100">application/cid-edhoc+cbor-seq</text>
                    <text x="156" y="116">Payload:</text>
                    <text x="216" y="116">true,</text>
                    <text x="264" y="116">EDHOC</text>
                    <text x="328" y="116">message_1</text>
                    <text x="152" y="148">Header:</text>
                    <text x="204" y="148">2.04</text>
                    <text x="256" y="148">Changed</text>
                    <text x="68" y="164">2.04</text>
                    <text x="184" y="164">Content-Format:</text>
                    <text x="356" y="164">application/edhoc+cbor-seq</text>
                    <text x="156" y="180">Payload:</text>
                    <text x="216" y="180">EDHOC</text>
                    <text x="280" y="180">message_2</text>
                    <text x="152" y="212">Header:</text>
                    <text x="204" y="212">POST</text>
                    <text x="272" y="212">(Code=0.02)</text>
                    <text x="68" y="228">POST</text>
                    <text x="160" y="228">Uri-Path:</text>
                    <text x="284" y="228">"/.well-known/edhoc"</text>
                    <text x="184" y="244">Content-Format:</text>
                    <text x="372" y="244">application/cid-edhoc+cbor-seq</text>
                    <text x="156" y="260">Payload:</text>
                    <text x="212" y="260">C_R,</text>
                    <text x="256" y="260">EDHOC</text>
                    <text x="320" y="260">message_3</text>
                    <text x="152" y="292">Header:</text>
                    <text x="204" y="292">2.04</text>
                    <text x="256" y="292">Changed</text>
                    <text x="68" y="308">2.04</text>
                    <text x="184" y="308">Content-Format:</text>
                    <text x="356" y="308">application/edhoc+cbor-seq</text>
                    <text x="156" y="324">Payload:</text>
                    <text x="216" y="324">EDHOC</text>
                    <text x="280" y="324">message_4</text>
                  </g>
                </svg>
              </artwork>
              <artwork type="ascii-art" align="center" pn="section-appendix.a.2.1-5.1.2">
Client    Server
  |          |
  +---------&gt;| Header: POST (Code=0.02)
  |   POST   | Uri-Path: "/.well-known/edhoc"
  |          | Content-Format: application/cid-edhoc+cbor-seq
  |          | Payload: true, EDHOC message_1
  |          |
  |&lt;---------+ Header: 2.04 Changed
  |   2.04   | Content-Format: application/edhoc+cbor-seq
  |          | Payload: EDHOC message_2
  |          |
  +---------&gt;| Header: POST (Code=0.02)
  |   POST   | Uri-Path: "/.well-known/edhoc"
  |          | Content-Format: application/cid-edhoc+cbor-seq
  |          | Payload: C_R, EDHOC message_3
  |          |
  |&lt;---------+ Header: 2.04 Changed
  |   2.04   | Content-Format: application/edhoc+cbor-seq
  |          | Payload: EDHOC message_4
  |          |
</artwork>
            </artset>
          </figure>
          <t indent="0" pn="section-appendix.a.2.1-6">The forward message flow of EDHOC can be combined with an OSCORE exchange in a total of two round trips; see <xref target="I-D.ietf-core-oscore-edhoc" format="default" sectionFormat="of" derivedContent="EDHOC-CoAP-OSCORE"/>.</t>
        </section>
        <section anchor="reverse" numbered="true" removeInRFC="false" toc="exclude" pn="section-appendix.a.2.2">
          <name slugifiedName="name-the-reverse-message-flow">The Reverse Message Flow</name>
          <t indent="0" pn="section-appendix.a.2.2-1">In the reverse message flow, the CoAP client is the Responder and the CoAP server is the Initiator. This flow protects the server identity against active attackers and the client identity against passive attackers.</t>
          <t indent="0" pn="section-appendix.a.2.2-2">In the reverse message flow, the CoAP Token enables correlation on the Responder (client) side, and the prepended C_I enables correlation on the Initiator (server) side.</t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.a.2.2-3">
            <li pn="section-appendix.a.2.2-3.1">To trigger a new EDHOC session, the client makes an empty POST request to the server's resource for EDHOC.</li>
            <li pn="section-appendix.a.2.2-3.2">EDHOC message_1 is sent from the server to the client in the payload of the response with response code 2.04 (Changed).</li>
            <li pn="section-appendix.a.2.2-3.3">EDHOC message_2 or the EDHOC error message is sent from the client to the server's resource in the payload of a POST request, prepended with connection identifier C_I.</li>
            <li pn="section-appendix.a.2.2-3.4">EDHOC message_3 or the EDHOC error message is sent from the server to the client in the payload of the response, in the former case with response code 2.04 (Changed) and in the latter with response code as specified in <xref target="edhoc-oscore-over-coap" format="default" sectionFormat="of" derivedContent="Appendix A.2.3"/>.</li>
            <li pn="section-appendix.a.2.2-3.5">If EDHOC message_4 is used, or in case of an error message, it is sent from the client to the server's resource in the payload of a POST request, prepended with connection identifier C_I. In case of an error message sent in response to message_4, it is sent analogously to an error message sent in response to message_2.</li>
          </ul>
          <t indent="0" pn="section-appendix.a.2.2-4">An example of a completed EDHOC session over CoAP in the reverse message flow is shown in <xref target="fig-coap2" format="default" sectionFormat="of" derivedContent="Figure 11"/>.</t>
          <figure anchor="fig-coap2" align="left" suppress-title="false" pn="figure-11">
            <name slugifiedName="name-example-of-the-reverse-mess">Example of the Reverse Message Flow</name>
            <artset pn="section-appendix.a.2.2-5.1">
              <artwork type="svg" align="center" pn="section-appendix.a.2.2-5.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                  <path d="M 24,48 L 24,304" fill="none" stroke="black"/>
                  <path d="M 112,48 L 112,304" fill="none" stroke="black"/>
                  <path d="M 24,64 L 104,64" fill="none" stroke="black"/>
                  <path d="M 32,112 L 112,112" fill="none" stroke="black"/>
                  <path d="M 24,176 L 104,176" fill="none" stroke="black"/>
                  <path d="M 32,256 L 112,256" fill="none" stroke="black"/>
                  <polygon class="arrowhead" points="112,176 100,170.4 100,181.6" fill="black" transform="rotate(0,104,176)"/>
                  <polygon class="arrowhead" points="112,64 100,58.4 100,69.6" fill="black" transform="rotate(0,104,64)"/>
                  <polygon class="arrowhead" points="40,256 28,250.4 28,261.6" fill="black" transform="rotate(180,32,256)"/>
                  <polygon class="arrowhead" points="40,112 28,106.4 28,117.6" fill="black" transform="rotate(180,32,112)"/>
                  <g class="text">
                    <text x="28" y="36">Client</text>
                    <text x="108" y="36">Server</text>
                    <text x="152" y="68">Header:</text>
                    <text x="204" y="68">POST</text>
                    <text x="272" y="68">(Code=0.02)</text>
                    <text x="68" y="84">POST</text>
                    <text x="160" y="84">Uri-Path:</text>
                    <text x="284" y="84">"/.well-known/edhoc"</text>
                    <text x="152" y="116">Header:</text>
                    <text x="204" y="116">2.04</text>
                    <text x="256" y="116">Changed</text>
                    <text x="68" y="132">2.04</text>
                    <text x="184" y="132">Content-Format:</text>
                    <text x="356" y="132">application/edhoc+cbor-seq</text>
                    <text x="156" y="148">Payload:</text>
                    <text x="216" y="148">EDHOC</text>
                    <text x="280" y="148">message_1</text>
                    <text x="152" y="180">Header:</text>
                    <text x="204" y="180">POST</text>
                    <text x="272" y="180">(Code=0.02)</text>
                    <text x="68" y="196">POST</text>
                    <text x="160" y="196">Uri-Path:</text>
                    <text x="284" y="196">"/.well-known/edhoc"</text>
                    <text x="184" y="212">Content-Format:</text>
                    <text x="372" y="212">application/cid-edhoc+cbor-seq</text>
                    <text x="156" y="228">Payload:</text>
                    <text x="212" y="228">C_I,</text>
                    <text x="256" y="228">EDHOC</text>
                    <text x="320" y="228">message_2</text>
                    <text x="152" y="260">Header:</text>
                    <text x="204" y="260">2.04</text>
                    <text x="256" y="260">Changed</text>
                    <text x="68" y="276">2.04</text>
                    <text x="184" y="276">Content-Format:</text>
                    <text x="356" y="276">application/edhoc+cbor-seq</text>
                    <text x="156" y="292">Payload:</text>
                    <text x="216" y="292">EDHOC</text>
                    <text x="280" y="292">message_3</text>
                  </g>
                </svg>
              </artwork>
              <artwork type="ascii-art" align="center" pn="section-appendix.a.2.2-5.1.2">
Client    Server
  |          |
  +---------&gt;| Header: POST (Code=0.02)
  |   POST   | Uri-Path: "/.well-known/edhoc"
  |          |
  |&lt;---------+ Header: 2.04 Changed
  |   2.04   | Content-Format: application/edhoc+cbor-seq
  |          | Payload: EDHOC message_1
  |          |
  +---------&gt;| Header: POST (Code=0.02)
  |   POST   | Uri-Path: "/.well-known/edhoc"
  |          | Content-Format: application/cid-edhoc+cbor-seq
  |          | Payload: C_I, EDHOC message_2
  |          |
  |&lt;---------+ Header: 2.04 Changed
  |   2.04   | Content-Format: application/edhoc+cbor-seq
  |          | Payload: EDHOC message_3
  |          |
</artwork>
            </artset>
          </figure>
        </section>
        <section anchor="edhoc-oscore-over-coap" numbered="true" removeInRFC="false" toc="exclude" pn="section-appendix.a.2.3">
          <name slugifiedName="name-errors-in-edhoc-over-coap">Errors in EDHOC over CoAP</name>
          <t indent="0" pn="section-appendix.a.2.3-1">When using EDHOC over CoAP, EDHOC error messages sent as CoAP responses <bcp14>MUST</bcp14> be sent in the payload of error responses, i.e., they <bcp14>MUST</bcp14> specify a CoAP error response code. In particular, it is <bcp14>RECOMMENDED</bcp14> that such error responses have response code either 4.00 (Bad Request) in case of client error (e.g., due to a malformed EDHOC message) or 5.00 (Internal Server Error) in case of server error (e.g., due to failure in deriving EDHOC keying material). The Content-Format of the error response <bcp14>MUST</bcp14> be set to "application/edhoc+cbor-seq"; see <xref target="content-format" format="default" sectionFormat="of" derivedContent="Section 10.9"/>.</t>
        </section>
      </section>
    </section>
    <section anchor="comrep" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.b">
      <name slugifiedName="name-compact-representation">Compact Representation</name>
      <t indent="0" pn="section-appendix.b-1">This section defines a format for compact representation based on the Elliptic-Curve-Point-to-Octet-String Conversion defined in Section 2.3.3 of <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/>.</t>
      <t indent="0" pn="section-appendix.b-2">As described in <xref target="RFC6090" section="4.2" sectionFormat="of" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6090#section-4.2" derivedContent="RFC6090"/>, the x-coordinate of an elliptic curve public key is a suitable representative for the entire point whenever scalar multiplication is used as a one-way function. One example is ECDH with compact output, where only the x-coordinate of the computed value is used as the shared secret.</t>
      <t indent="0" pn="section-appendix.b-3">In EDHOC, compact representation is used for the ephemeral public keys (G_X and G_Y); see <xref target="cose_key" format="default" sectionFormat="of" derivedContent="Section 3.7"/>. Using the notation from <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/>, the output is an octet string of length ceil( (log2 q) / 8 ), where ceil(x) is the smallest integer not less than x. See <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/> for a definition of q, M, X, xp, and ~yp. The steps in Section 2.3.3 of <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/> are replaced with the following steps:</t>
      <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-appendix.b-4"><li pn="section-appendix.b-4.1" derivedCounter="1.">Convert the field element xp to an octet string X of length ceil( (log2 q) / 8 ) octets using the conversion routine specified in Section 2.3.5 of <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/>.</li>
        <li pn="section-appendix.b-4.2" derivedCounter="2.">Output M = X.</li>
      </ol>
      <t indent="0" pn="section-appendix.b-5">The encoding of the point at infinity is not supported.</t>
      <t indent="0" pn="section-appendix.b-6">Compact representation does not change any requirements on validation; see <xref target="crypto" format="default" sectionFormat="of" derivedContent="Section 9.2"/>. Using compact representation has some security benefits. An implementation does not need to check that the point is not the point at infinity (the identity element). Similarly, as not even the sign of the y-coordinate is encoded, compact representation trivially avoids so-called "benign malleability" attacks where an attacker changes the sign; see <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/>.</t>
      <t indent="0" pn="section-appendix.b-7">The following may be needed for validation or compatibility with APIs that do not support compact representation or do not support the full <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/> format:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.b-8">
        <li pn="section-appendix.b-8.1">If a compressed y-coordinate is required, then the value ~yp set to zero can be used. In such a case, the compact representation described above can be transformed into the Standards for Efficient Cryptography Group (SECG) point-compressed format by prepending it with the single byte 0x02 (i.e., M = 0x02 || X).</li>
        <li pn="section-appendix.b-8.2">If an uncompressed y-coordinate is required, then a y-coordinate has to be calculated following Section 2.3.4 of <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/> or <xref target="RFC6090" sectionFormat="of" section="C" format="default" derivedLink="https://rfc-editor.org/rfc/rfc6090#appendix-C" derivedContent="RFC6090"/>. Any of the square roots (see <xref target="SECG" format="default" sectionFormat="of" derivedContent="SECG"/> or <xref target="RFC6090" format="default" sectionFormat="of" derivedContent="RFC6090"/>) can be used. The uncompressed SECG format is M = 0x04 || X || Y.</li>
      </ul>
      <t indent="0" pn="section-appendix.b-9">For example: The curve P-256 has the parameters (using the notation in <xref target="RFC6090" format="default" sectionFormat="of" derivedContent="RFC6090"/>):</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.b-10">
        <li pn="section-appendix.b-10.1">p = 2<sup>256</sup> - 2<sup>224</sup> + 2<sup>192</sup> + 2<sup>96</sup> - 1</li>
        <li pn="section-appendix.b-10.2">a = -3</li>
        <li pn="section-appendix.b-10.3">b = 410583637251521421293261297800472684091144410159937255
54835256314039467401291</li>
      </ul>
      <t indent="0" pn="section-appendix.b-11">Given an example x:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.b-12">
        <li pn="section-appendix.b-12.1">x = 115792089183396302095546807154740558443406795108653336
398970697772788799766525</li>
      </ul>
      <t indent="0" pn="section-appendix.b-13">We can calculate y as the square root w = (x<sup>3</sup> + a ⋅ x + b)<sup>((p + 1)/4)</sup> (mod p).</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.b-14">
        <li pn="section-appendix.b-14.1">y = 834387180070192806820075864918626005281451259964015754
16632522940595860276856</li>
      </ul>
      <t indent="0" pn="section-appendix.b-15">Note that this does not guarantee that (x, y) is on the correct elliptic curve. A full validation according to Section 5.6.2.3.3 of <xref target="SP-800-56A" format="default" sectionFormat="of" derivedContent="SP-800-56A"/> is done by also checking that 0 ≤ x &lt; p and that y<sup>2</sup> ≡ x<sup>3</sup> + a ⋅ x + b (mod p).</t>
    </section>
    <section anchor="CBORandCOSE" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c">
      <name slugifiedName="name-use-of-cbor-cddl-and-cose-i">Use of CBOR, CDDL, and COSE in EDHOC</name>
      <t indent="0" pn="section-appendix.c-1">This appendix is intended to help implementors not familiar with CBOR <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/>, CDDL <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/>, COSE <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>, and HKDF <xref target="RFC5869" format="default" sectionFormat="of" derivedContent="RFC5869"/>.</t>
      <section anchor="CBOR" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c.1">
        <name slugifiedName="name-cbor-and-cddl">CBOR and CDDL</name>
        <t indent="0" pn="section-appendix.c.1-1">The Concise Binary Object Representation (CBOR) <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/> is a data format designed for small code size and small message size. CBOR builds on the JSON data model but extends it by, e.g., encoding binary data directly without base64 conversion. In addition to the binary CBOR encoding, CBOR also has a diagnostic notation that is readable and editable by humans. The Concise Data Definition Language (CDDL) <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/> provides a way to express structures for protocol messages and APIs that use CBOR. <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/> also extends the diagnostic notation.</t>
        <t indent="0" pn="section-appendix.c.1-2">CBOR data items are encoded to or decoded from byte strings using a type-length-value encoding scheme, where the three highest order bits of the initial byte contain information about the major type. CBOR supports several types of data items, integers (int, uint), simple values, byte strings (bstr), and text strings (tstr). CBOR also supports arrays []  of data items, maps {} of pairs of data items, and sequences <xref target="RFC8742" format="default" sectionFormat="of" derivedContent="RFC8742"/> of data items. Some examples are given below.</t>
        <t indent="0" pn="section-appendix.c.1-3">The EDHOC specification sometimes use CDDL names in CBOR diagnostic notation as in, e.g., &lt;&lt; ID_CRED_R, ? EAD_2 &gt;&gt;. This means that EAD_2 is optional and that ID_CRED_R and EAD_2 should be substituted with their values before evaluation. That is, if ID_CRED_R = { 4 : h'' } and EAD_2 is omitted, then &lt;&lt; ID_CRED_R, ? EAD_2 &gt;&gt; = &lt;&lt; { 4 : h'' } &gt;&gt;, which encodes to 0x43a10440. We also make use of the occurrence symbol "*", like in, e.g.,  2* int, meaning two or more CBOR integers.</t>
        <t indent="0" pn="section-appendix.c.1-4">For a complete specification and more examples, see <xref target="RFC8949" format="default" sectionFormat="of" derivedContent="RFC8949"/> and <xref target="RFC8610" format="default" sectionFormat="of" derivedContent="RFC8610"/>. We recommend implementors get used to CBOR by using the CBOR playground <xref target="CborMe" format="default" sectionFormat="of" derivedContent="CborMe"/>.</t>
        <table anchor="tab-cbor-examples" align="center" pn="table-15">
          <name slugifiedName="name-examples-of-use-of-cbor-and">Examples of Use of CBOR and CDDL</name>
          <thead>
            <tr>
              <th align="left" colspan="1" rowspan="1">Diagnostic</th>
              <th align="left" colspan="1" rowspan="1">Encoded</th>
              <th align="left" colspan="1" rowspan="1">Type</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left" colspan="1" rowspan="1">1</td>
              <td align="left" colspan="1" rowspan="1">0x01</td>
              <td align="left" colspan="1" rowspan="1">unsigned integer</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">24</td>
              <td align="left" colspan="1" rowspan="1">0x1818</td>
              <td align="left" colspan="1" rowspan="1">unsigned integer</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-24</td>
              <td align="left" colspan="1" rowspan="1">0x37</td>
              <td align="left" colspan="1" rowspan="1">negative integer</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">-25</td>
              <td align="left" colspan="1" rowspan="1">0x3818</td>
              <td align="left" colspan="1" rowspan="1">negative integer</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">true</td>
              <td align="left" colspan="1" rowspan="1">0xf5</td>
              <td align="left" colspan="1" rowspan="1">simple value</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">h''</td>
              <td align="left" colspan="1" rowspan="1">0x40</td>
              <td align="left" colspan="1" rowspan="1">byte string</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">h'12cd'</td>
              <td align="left" colspan="1" rowspan="1">0x4212cd</td>
              <td align="left" colspan="1" rowspan="1">byte string</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">'12cd'</td>
              <td align="left" colspan="1" rowspan="1">0x4431326364</td>
              <td align="left" colspan="1" rowspan="1">byte string</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">"12cd"</td>
              <td align="left" colspan="1" rowspan="1">0x6431326364</td>
              <td align="left" colspan="1" rowspan="1">text string</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">{ 4 : h'cd' }</td>
              <td align="left" colspan="1" rowspan="1">0xa10441cd</td>
              <td align="left" colspan="1" rowspan="1">map</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">&lt;&lt; 1, 2, true &gt;&gt;</td>
              <td align="left" colspan="1" rowspan="1">0x430102f5</td>
              <td align="left" colspan="1" rowspan="1">byte string</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">[ 1, 2, true ]</td>
              <td align="left" colspan="1" rowspan="1">0x830102f5</td>
              <td align="left" colspan="1" rowspan="1">array</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1">( 1, 2, true )</td>
              <td align="left" colspan="1" rowspan="1">0x0102f5</td>
              <td align="left" colspan="1" rowspan="1">sequence</td>
            </tr>
            <tr>
              <td align="left" colspan="1" rowspan="1"> 1, 2, true</td>
              <td align="left" colspan="1" rowspan="1">0x0102f5</td>
              <td align="left" colspan="1" rowspan="1">sequence</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="CDDL" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c.2">
        <name slugifiedName="name-cddl-definitions">CDDL Definitions</name>
        <t indent="0" pn="section-appendix.c.2-1">This section compiles the CDDL definitions for ease of reference.</t>
        <sourcecode type="CDDL" markers="false" pn="section-appendix.c.2-2">
suites = [ 2* int ] / int

ead = (
  ead_label : int,
  ? ead_value : bstr,
)

EAD_1 = 1* ead
EAD_2 = 1* ead
EAD_3 = 1* ead
EAD_4 = 1* ead

message_1 = (
  METHOD : int,
  SUITES_I : suites,
  G_X : bstr,
  C_I : bstr / -24..23,
  ? EAD_1,
)

message_2 = (
  G_Y_CIPHERTEXT_2 : bstr,
)

PLAINTEXT_2 = (
  C_R,
  ID_CRED_R : map / bstr / -24..23,
  Signature_or_MAC_2 : bstr,
  ? EAD_2,
)

message_3 = (
  CIPHERTEXT_3 : bstr,
)

PLAINTEXT_3 = (
  ID_CRED_I : map / bstr / -24..23,
  Signature_or_MAC_3 : bstr,
  ? EAD_3,
)

message_4 = (
  CIPHERTEXT_4 : bstr,
)

PLAINTEXT_4 = (
  ? EAD_4,
)

error = (
  ERR_CODE : int,
  ERR_INFO : any,
)

info = (
  info_label : int,
  context : bstr,
  length : uint,
)
</sourcecode>
      </section>
      <section anchor="COSE" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.c.3">
        <name slugifiedName="name-cose">COSE</name>
        <t indent="0" pn="section-appendix.c.3-1">CBOR Object Signing and Encryption (COSE) <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/> describes how to create and process signatures, MACs, and encryptions using CBOR. COSE builds on JSON Object Signing and Encryption (JOSE) but is adapted to allow more efficient processing in constrained devices. EDHOC makes use of COSE_Key, COSE_Encrypt0, and COSE_Sign1 objects in the message processing:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-2">
          <li pn="section-appendix.c.3-2.1">ECDH ephemeral public keys of type EC2 or OKP in message_1 and message_2 consist of the COSE_Key parameter named 'x'; see Sections <xref target="RFC9053" section="7.1" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-7.1" derivedContent="RFC9053"/> and <xref target="RFC9053" section="7.2" sectionFormat="bare" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9053#section-7.2" derivedContent="RFC9053"/> of <xref target="RFC9053" format="default" sectionFormat="of" derivedContent="RFC9053"/>.</li>
          <li pn="section-appendix.c.3-2.2">
            <t indent="0" pn="section-appendix.c.3-2.2.1">The ciphertexts in message_3 and message_4 consist of a subset of the single recipient encrypted data object COSE_Encrypt0, which is described in Sections <xref target="RFC9052" sectionFormat="bare" section="5.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.2" derivedContent="RFC9052"/> and <xref target="RFC9052" sectionFormat="bare" section="5.3" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-5.3" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>. The ciphertext is computed over the plaintext and associated data, using an encryption key and an initialization vector. The associated data is an Enc_structure consisting of protected headers and externally supplied data (external_aad). COSE constructs the input to the AEAD <xref target="RFC5116" format="default" sectionFormat="of" derivedContent="RFC5116"/> for message_i (i = 3 or 4; see Sections <xref target="m3" format="counter" sectionFormat="of" derivedContent="5.4"/> and <xref target="m4" format="counter" sectionFormat="of" derivedContent="5.5"/>, respectively) as follows:  </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-2.2.2">
              <li pn="section-appendix.c.3-2.2.2.1">Secret key K = K_i</li>
              <li pn="section-appendix.c.3-2.2.2.2">Nonce N = IV_i</li>
              <li pn="section-appendix.c.3-2.2.2.3">Plaintext P for message_i</li>
              <li pn="section-appendix.c.3-2.2.2.4">Associated Data A = [ "Encrypt0", h'', TH_i ]</li>
            </ul>
          </li>
          <li pn="section-appendix.c.3-2.3">
            <t indent="0" pn="section-appendix.c.3-2.3.1">Signatures in message_2 of method 0 and 2, and in message_3 of method 0 and 1, consist of a subset of the single signer data object COSE_Sign1, which is described in Sections <xref target="RFC9052" sectionFormat="bare" section="4.2" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-4.2" derivedContent="RFC9052"/> and <xref target="RFC9052" sectionFormat="bare" section="4.4" format="default" derivedLink="https://rfc-editor.org/rfc/rfc9052#section-4.4" derivedContent="RFC9052"/> of <xref target="RFC9052" format="default" sectionFormat="of" derivedContent="RFC9052"/>. The signature is computed over a Sig_structure containing payload, protected headers and externally supplied data (external_aad) using a private signature key, and verified using the corresponding public signature key. For COSE_Sign1, the message to be signed is:  </t>
            <artwork align="left" pn="section-appendix.c.3-2.3.2">
 [ "Signature1", protected, external_aad, payload ]
</artwork>
            <t indent="0" pn="section-appendix.c.3-2.3.3">
where protected, external_aad, and payload are specified in Sections <xref target="m2" format="counter" sectionFormat="of" derivedContent="5.3"/> and <xref target="m3" format="counter" sectionFormat="of" derivedContent="5.4"/>.</t>
          </li>
        </ul>
        <t indent="0" pn="section-appendix.c.3-3">Different header parameters to identify X.509 or C509 certificates by reference are defined in <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/> and <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-4">
          <li pn="section-appendix.c.3-4.1">
            <t indent="0" pn="section-appendix.c.3-4.1.1">by a hash value with the 'x5t' or 'c5t' parameters, respectively:  </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-4.1.2">
              <li pn="section-appendix.c.3-4.1.2.1">ID_CRED_x = { 34 : COSE_CertHash }, for x = I or R and</li>
              <li pn="section-appendix.c.3-4.1.2.2">ID_CRED_x = { 22 : COSE_CertHash }, for x = I or R,</li>
            </ul>
          </li>
          <li pn="section-appendix.c.3-4.2">
            <t indent="0" pn="section-appendix.c.3-4.2.1">or by a URI with the 'x5u' or 'c5u' parameters, respectively:  </t>
            <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-4.2.2">
              <li pn="section-appendix.c.3-4.2.2.1">ID_CRED_x = { 35 : uri }, for x = I or R, and</li>
              <li pn="section-appendix.c.3-4.2.2.2">ID_CRED_x = { 23 : uri }, for x = I or R.</li>
            </ul>
          </li>
        </ul>
        <t indent="0" pn="section-appendix.c.3-5">When ID_CRED_x does not contain the actual credential, it may be very short, e.g., if the endpoints have agreed to use a key identifier parameter 'kid':</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.c.3-6">
          <li pn="section-appendix.c.3-6.1">ID_CRED_x = { 4 : kid_x }, where kid_x : kid, for x = I or R. For further optimization, see <xref target="id_cred" format="default" sectionFormat="of" derivedContent="Section 3.5.3"/>.</li>
        </ul>
        <t indent="0" pn="section-appendix.c.3-7">Note that ID_CRED_x can contain several header parameters, for example, { x5u, x5t } or { kid, kid_context }.</t>
        <t indent="0" pn="section-appendix.c.3-8">ID_CRED_x <bcp14>MAY</bcp14> also identify the credential by value. For example, a certificate chain can be transported in an ID_CRED field with COSE header parameter c5c or x5chain, as defined in <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/> and <xref target="RFC9360" format="default" sectionFormat="of" derivedContent="RFC9360"/>. Credentials of type CWT and CCS can be transported with the COSE header parameters registered in <xref target="cwt-header-param" format="default" sectionFormat="of" derivedContent="Section 10.6"/>.</t>
      </section>
    </section>
    <section anchor="auth-validation" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d">
      <name slugifiedName="name-authentication-related-veri">Authentication-Related Verifications</name>
      <t indent="0" pn="section-appendix.d-1">EDHOC performs certain authentication-related operations (see <xref target="auth-key-id" format="default" sectionFormat="of" derivedContent="Section 3.5"/>), but in general, it is necessary to make additional verifications beyond EDHOC message processing. Which verifications that are needed depend on the deployment, in particular, the trust model and the security policies, but most commonly, it can be expressed in terms of verifications of credential content.</t>
      <t indent="0" pn="section-appendix.d-2">EDHOC assumes the existence of mechanisms (certification authority or other trusted third party, pre-provisioning, etc.) for generating and distributing authentication credentials and other credentials, as well as the existence of trust anchors (CA certificates, trusted public keys, etc.). For example, a public key certificate or CWT may rely on a trusted third party whose public key is pre-provisioned, whereas a CCS or a self-signed certificate / CWT may be used when trust in the public key can be achieved by other means, or in the case of trust on first use, see <xref target="tofu" format="default" sectionFormat="of" derivedContent="Appendix D.5"/>.</t>
      <t indent="0" pn="section-appendix.d-3">In this section, we provide some examples of such verifications. These verifications are the responsibility of the application but may be implemented as part of an EDHOC library.</t>
      <section anchor="validating-auth-credential" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.1">
        <name slugifiedName="name-validating-the-authenticati">Validating the Authentication Credential</name>
        <t indent="0" pn="section-appendix.d.1-1">In addition to the authentication key, the authentication credential may contain other parameters that need to be verified. For example:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.d.1-2">
          <li pn="section-appendix.d.1-2.1">In X.509 and C509 certificates, signature keys typically have key usage "digitalSignature", and Diffie-Hellman public keys typically have key usage "keyAgreement" <xref target="RFC3279" format="default" sectionFormat="of" derivedContent="RFC3279"/> <xref target="RFC8410" format="default" sectionFormat="of" derivedContent="RFC8410"/>.</li>
          <li pn="section-appendix.d.1-2.2">In X.509 and C509 certificates, validity is expressed using Not After and Not Before. In CWT and CCS, the "exp" and "nbf" claims have similar meanings.</li>
        </ul>
      </section>
      <section anchor="identities" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.2">
        <name slugifiedName="name-identities">Identities</name>
        <t indent="0" pn="section-appendix.d.2-1">The application must decide on allowing a connection or not, depending on the intended endpoint, and in particular whether it is a specific identity or in a set of identities. To prevent misbinding attacks, the identity of the endpoint is included in a MAC verified through the protocol. More details and examples are provided in this section.</t>
        <t indent="0" pn="section-appendix.d.2-2">Policies for what connections to allow are typically set based on the identity of the other endpoint, and endpoints typically only allow connections from a specific identity or a small restricted set of identities. For example, in the case of a device connecting to a network, the network may only allow connections from devices that authenticate with certificates having a particular range of serial numbers and signed by a particular CA. Conversely, a device may only be allowed to connect to a network that authenticates with a particular public key.</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.d.2-3">
          <li pn="section-appendix.d.2-3.1">When a Public Key Infrastructure (PKI) is used with certificates, the identity is the subject whose unique name, e.g., a domain name, a Network Access Identifier (NAI), or an Extended Unique Identifier (EUI), is included in the endpoint's certificate.</li>
          <li pn="section-appendix.d.2-3.2">Similarly, when a PKI is used with CWTs, the identity is the subject identified by the relevant claim(s), such as 'sub' (subject).</li>
          <li pn="section-appendix.d.2-3.3">When PKI is not used (e.g., CCS, self-signed certificate / CWT), the identity is typically directly associated with the authentication key of the other party. For example, if identities can be expressed in the form of unique subject names assigned to public keys, then a binding to identity is achieved by including both the public key and associated subject name in the authentication credential. CRED_I or CRED_R may be a self-signed certificate / CWT or CCS containing the authentication key and the subject name; see <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>. Thus, each endpoint needs to know the specific authentication key / unique associated subject name or set of public authentication keys / unique associated subject names, which it is allowed to communicate with.</li>
        </ul>
        <t indent="0" pn="section-appendix.d.2-4">To prevent misbinding attacks in systems where an attacker can register public keys without proving knowledge of the private key, SIGMA <xref target="SIGMA" format="default" sectionFormat="of" derivedContent="SIGMA"/> enforces a MAC to be calculated over the "identity". EDHOC follows SIGMA by calculating a MAC over the whole authentication credential, which in case of an X.509 or C509 certificate, includes the "subject" and "subjectAltName" fields and, in the case of CWT or CCS, includes the "sub" claim.</t>
        <t indent="0" pn="section-appendix.d.2-5">(While the SIGMA paper only focuses on the identity, the same principle is true for other information such as policies associated with the public key.)</t>
      </section>
      <section anchor="cert-path" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.3">
        <name slugifiedName="name-certification-path-and-trus">Certification Path and Trust Anchors</name>
        <t indent="0" pn="section-appendix.d.3-1">When a Public Key Infrastructure (PKI) is used with certificates, the trust anchor is a certification authority (CA) certificate. Each party needs at least one CA public key certificate or just the CA public key. The certification path contains proof that the subject of the certificate owns the public key in the certificate. Only validated public key certificates are to be accepted.</t>
        <t indent="0" pn="section-appendix.d.3-2">Similarly, when a PKI is used with CWTs, each party needs to have at least one trusted third-party public key as a trust anchor to verify the end entity CWTs. The trusted third-party public key can, e.g., be stored in a self-signed CWT or in a CCS.</t>
        <t indent="0" pn="section-appendix.d.3-3">The signature of the authentication credential needs to be verified with the public key of the issuer. X.509 and C509 certificates includes the "Issuer" field. In CWT and CCS, the "iss" claim has a similar meaning. The public key is either a trust anchor or the public key in another valid and trusted credential in a certification path from the trust anchor to the authentication credential.</t>
        <t indent="0" pn="section-appendix.d.3-4">Similar verifications as made with the authentication credential (see <xref target="validating-auth-credential" format="default" sectionFormat="of" derivedContent="Appendix D.1"/>) are also needed for the other credentials in the certification path.</t>
        <t indent="0" pn="section-appendix.d.3-5">When PKI is not used (CCS and self-signed certificate / CWT), the trust anchor is the authentication key of the other party; in which case, there is no certification path.</t>
      </section>
      <section anchor="revocation" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.4">
        <name slugifiedName="name-revocation-status">Revocation Status</name>
        <t indent="0" pn="section-appendix.d.4-1">The application may need to verify that the credentials are not revoked; see <xref target="impl-cons" format="default" sectionFormat="of" derivedContent="Section 9.8"/>. Some use cases may be served by short-lived credentials, for example, where the validity of the credential is on par with the interval between revocation checks. But, in general, credential lifetime and revocation checking are complementary measures to control credential status. Revocation information may be transported as External Authorization Data (EAD); see <xref target="ead-appendix" format="default" sectionFormat="of" derivedContent="Appendix E"/>.</t>
      </section>
      <section anchor="tofu" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.d.5">
        <name slugifiedName="name-unauthenticated-operation">Unauthenticated Operation</name>
        <t indent="0" pn="section-appendix.d.5-1">EDHOC might be used without authentication by allowing the Initiator or Responder to communicate with any identity except its own. Note that EDHOC without mutual authentication is vulnerable to active on-path attacks and therefore unsafe for general use. However, it is possible to later establish a trust relationship with an unknown or not-yet-trusted endpoint. Some examples are listed below:</t>
        <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.d.5-2">
          <li pn="section-appendix.d.5-2.1">The EDHOC authentication credential can be verified out-of-band at a later stage.</li>
          <li pn="section-appendix.d.5-2.2">The EDHOC session key can be bound to an identity out-of-band at a later stage.</li>
          <li pn="section-appendix.d.5-2.3">Trust on first use (TOFU) can be used to verify that several EDHOC connections are made to the same identity. TOFU combined with proximity is a common IoT deployment model that provides good security if done correctly. Note that secure proximity based on short range wireless technology requires very low signal strength or very low latency.</li>
        </ul>
      </section>
    </section>
    <section anchor="ead-appendix" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.e">
      <name slugifiedName="name-use-of-external-authorizati">Use of External Authorization Data</name>
      <t indent="0" pn="section-appendix.e-1">In order to reduce the number of messages and round trips, or to simplify processing, external security applications may be integrated into EDHOC by transporting related external authorization data (EAD) in the messages.</t>
      <t indent="0" pn="section-appendix.e-2">The EAD format is specified in <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>. This section contains examples and further details of how EAD may be used with an appropriate accompanying specification.</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.e-3">
        <li pn="section-appendix.e-3.1">One example is third-party-assisted authorization, requested with EAD_1, and an authorization artifact ("voucher", cf. <xref target="RFC8366" format="default" sectionFormat="of" derivedContent="RFC8366"/>) returned in EAD_2; see <xref target="I-D.ietf-lake-authz" format="default" sectionFormat="of" derivedContent="LAKE-AUTHZ"/>.</li>
        <li pn="section-appendix.e-3.2">Another example is remote attestation, requested in EAD_2, and an Entity Attestation Token (EAT) <xref target="I-D.ietf-rats-eat" format="default" sectionFormat="of" derivedContent="EAT"/> returned in EAD_3.</li>
        <li pn="section-appendix.e-3.3">A third example is certificate enrollment, where a Certificate Signing Request (CSR) <xref target="RFC2986" format="default" sectionFormat="of" derivedContent="RFC2986"/> is included in EAD_3, and the issued public key certificate (X.509 <xref target="RFC5280" format="default" sectionFormat="of" derivedContent="RFC5280"/> and C509 <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>) or a reference thereof is returned in EAD_4.</li>
      </ul>
      <t indent="0" pn="section-appendix.e-4">External authorization data should be considered unprotected by EDHOC, and the protection of EAD is the responsibility of the security application (third-party authorization, remote attestation, certificate enrollment, etc.). The security properties of the EAD fields (after EDHOC processing) are discussed in <xref target="sec-prop" format="default" sectionFormat="of" derivedContent="Section 9.1"/>.</t>
      <t indent="0" pn="section-appendix.e-5">The content of the EAD field may be used in the EDHOC processing of the message in which they are contained. For example, authentication-related information, like assertions and revocation information, transported in EAD fields may provide input about trust anchors or validity of credentials relevant to the authentication processing. The EAD fields (like ID_CRED fields) are therefore made available to the application before the message is verified; see details of message processing in <xref target="asym" format="default" sectionFormat="of" derivedContent="Section 5"/>. In the first example above, a voucher in EAD_2 made available to the application can enable the Initiator to verify the identity or the public key of the Responder before verifying the signature. An application allowing EAD fields containing authentication information thus may need to handle authentication-related verifications associated with EAD processing.</t>
      <t indent="0" pn="section-appendix.e-6">Conversely, the security application may need to wait for EDHOC message verification to complete. In the third example above, the validation of a CSR carried in EAD_3 is not started by the Responder before EDHOC has successfully verified message_3 and proven the possession of the private key of the Initiator.</t>
      <t indent="0" pn="section-appendix.e-7">The security application may reuse EDHOC protocol fields that therefore need to be available to the application. For example, the security application may use the same crypto algorithms as in the EDHOC session and therefore needs access to the selected cipher suite (or the whole SUITES_I). The application may use the ephemeral public keys G_X and G_Y as ephemeral keys or as nonces; see <xref target="I-D.ietf-lake-authz" format="default" sectionFormat="of" derivedContent="LAKE-AUTHZ"/>.</t>
      <t indent="0" pn="section-appendix.e-8">The processing of the EAD item (ead_label, ? ead_value) by the security application needs to be described in the specification where the ead_label is registered (see <xref target="iana-ead" format="default" sectionFormat="of" derivedContent="Section 10.5"/>), including the optional ead_value for each message and actions in case of errors. An application may support multiple security applications that make use of EAD, which may result in multiple EAD items in one EAD field; see <xref target="AD" format="default" sectionFormat="of" derivedContent="Section 3.8"/>. Any dependencies on security applications with previously registered EAD items need to be documented, and the processing needs to consider their simultaneous use.</t>
      <t indent="0" pn="section-appendix.e-9">Since data carried in EAD may not be protected, or processed by the application before the EDHOC message is verified, special considerations need to be made such that it does not violate security and privacy requirements of the service that uses this data; see <xref target="unprot-data" format="default" sectionFormat="of" derivedContent="Section 9.5"/>. The content in an EAD item may impact the security properties provided by EDHOC. Security applications making use of the EAD items must perform the necessary security analysis.</t>
    </section>
    <section anchor="appl-temp" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.f">
      <name slugifiedName="name-application-profile-example">Application Profile Example</name>
      <t indent="0" pn="section-appendix.f-1">This appendix contains a rudimentary example of an application profile; see <xref target="applicability" format="default" sectionFormat="of" derivedContent="Section 3.9"/>.</t>
      <t indent="0" pn="section-appendix.f-2">For use of EDHOC with application X, the following assumptions are made:</t>
      <ol spacing="normal" type="1" indent="adaptive" start="1" pn="section-appendix.f-3"><li pn="section-appendix.f-3.1" derivedCounter="1.">Transfer in CoAP as specified in <xref target="coap" format="default" sectionFormat="of" derivedContent="Appendix A.2"/> with requests expected by the CoAP server (= Responder) at /app1-edh, no Content-Format needed.</li>
        <li pn="section-appendix.f-3.2" derivedCounter="2.">METHOD = 1 (I uses signature key; R uses static DH key.)</li>
        <li pn="section-appendix.f-3.3" derivedCounter="3.">
          <t indent="0" pn="section-appendix.f-3.3.1">CRED_I is an IEEE 802.1AR Initial Device Identifier (IDevID) encoded as a C509 certificate of type 0 <xref target="I-D.ietf-cose-cbor-encoded-cert" format="default" sectionFormat="of" derivedContent="C509-CERTS"/>.
          </t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.f-3.3.2">
            <li pn="section-appendix.f-3.3.2.1">R acquires CRED_I out-of-band, indicated in EAD_1.</li>
            <li pn="section-appendix.f-3.3.2.2">ID_CRED_I = {4: h''} is a 'kid' with the value of the empty CBOR byte string.</li>
          </ul>
        </li>
        <li pn="section-appendix.f-3.4" derivedCounter="4.">
          <t indent="0" pn="section-appendix.f-3.4.1">CRED_R is a CCS of type OKP as specified in <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>.
          </t>
          <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.f-3.4.2">
            <li pn="section-appendix.f-3.4.2.1">The CBOR map has parameters 1 (kty), -1 (crv), and -2 (x-coordinate).</li>
            <li pn="section-appendix.f-3.4.2.2">ID_CRED_R is {14 : CCS}.</li>
          </ul>
        </li>
        <li pn="section-appendix.f-3.5" derivedCounter="5.">External authorization data is defined and processed as specified in <xref target="I-D.ietf-lake-authz" format="default" sectionFormat="of" derivedContent="LAKE-AUTHZ"/>.</li>
        <li pn="section-appendix.f-3.6" derivedCounter="6.">EUI-64 is used as the identity of the endpoint (see an example in <xref target="auth-cred" format="default" sectionFormat="of" derivedContent="Section 3.5.2"/>).</li>
        <li pn="section-appendix.f-3.7" derivedCounter="7.">No use of message_4. The application sends protected messages from R to I.</li>
      </ol>
    </section>
    <section anchor="large-plaintext_2" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.g">
      <name slugifiedName="name-long-plaintext_2">Long PLAINTEXT_2</name>
      <t indent="0" pn="section-appendix.g-1">By the definition of encryption of PLAINTEXT_2 with KEYSTREAM_2, it is limited to lengths of PLAINTEXT_2 not exceeding the output of EDHOC_KDF; see <xref target="expand" format="default" sectionFormat="of" derivedContent="Section 4.1.2"/>. If the EDHOC hash algorithm is SHA-2, then HKDF-Expand is used, which limits the length of the EDHOC_KDF output to 255 ⋅ hash_length, where hash_length is the length of the output of the EDHOC hash algorithm given by the cipher suite. For example, with SHA-256 as the EDHOC hash algorithm, the length of the hash output is 32 bytes and the maximum length of PLAINTEXT_2 is 255 ⋅ 32 = 8160 bytes.</t>
      <t indent="0" pn="section-appendix.g-2">While PLAINTEXT_2 is expected to be much shorter than 8 kB for the intended use cases, it seems nevertheless prudent to specify a solution for the event that this should turn out to be a limitation.</t>
      <t indent="0" pn="section-appendix.g-3">A potential work-around is to use a cipher suite with a different hash function. In particular, the use of KMAC removes all practical limitations in this respect.</t>
      <t indent="0" pn="section-appendix.g-4">This section specifies a solution that works with any hash function by making use of multiple invocations of HKDF-Expand and negative values of info_label.</t>
      <t indent="0" pn="section-appendix.g-5">Consider the PLAINTEXT_2 partitioned in parts P(i) of length equal to M = 255 ⋅ hash_length, except possibly the last part P(last), which has 0 &lt; length ≤ M.</t>
      <artwork align="left" pn="section-appendix.g-6">
PLAINTEXT_2 = P(0) | P(1) | ... | P(last)
</artwork>
      <t indent="0" pn="section-appendix.g-7">where "|" indicates concatenation.</t>
      <t indent="0" pn="section-appendix.g-8">The object is to define a matching KEYSTREAM_2 of the same length and perform the encryption in the same way as defined in <xref target="asym-msg2-proc" format="default" sectionFormat="of" derivedContent="Section 5.3.2"/>:</t>
      <artwork align="left" pn="section-appendix.g-9">
CIPHERTEXT_2 = PLAINTEXT_2 XOR KEYSTREAM_2
</artwork>
      <t indent="0" pn="section-appendix.g-10">Define the keystream as:</t>
      <artwork align="left" pn="section-appendix.g-11">
KEYSTREAM_2 = OKM(0) | OKM(1)  | ... | OKM(last)
</artwork>
      <t indent="0" pn="section-appendix.g-12">where:</t>
      <artwork align="left" pn="section-appendix.g-13">
OKM(i) = EDHOC_KDF( PRK_2e, -i, TH_2, length(P(i)) )
</artwork>
      <t indent="0" pn="section-appendix.g-14">Note that if length(PLAINTEXT_2) ≤ M, then P(0) = PLAINTEXT_2 and the definition of KEYSTREAM_2 = OKM(0) coincides with <xref target="fig-edhoc-kdf" format="default" sectionFormat="of" derivedContent="Figure 6"/>.</t>
      <t indent="0" pn="section-appendix.g-15">This describes the processing of the Responder when sending message_2. The Initiator makes the same calculations when receiving message_2 but interchanging PLAINTEXT_2 and CIPHERTEXT_2.</t>
      <t indent="0" pn="section-appendix.g-16">An application profile may specify if it supports or does not support the method described in this appendix.</t>
    </section>
    <section anchor="keyupdate" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.h">
      <name slugifiedName="name-edhoc_keyupdate">EDHOC_KeyUpdate</name>
      <t indent="0" pn="section-appendix.h-1">To provide forward secrecy in an even more efficient way than re-running EDHOC, this section specifies the optional function EDHOC_KeyUpdate in terms of EDHOC_KDF and PRK_out.</t>
      <t indent="0" pn="section-appendix.h-2">When EDHOC_KeyUpdate is called, a new PRK_out is calculated as the output of the EDHOC_Expand function with the old PRK_out as input. The change of PRK_out causes a change to PRK_exporter, which enables the derivation of new application keys superseding the old ones, using EDHOC_Exporter; see <xref target="exporter" format="default" sectionFormat="of" derivedContent="Section 4.2.1"/>. The process is illustrated by the following pseudocode.</t>
      <artwork align="left" pn="section-appendix.h-3">
EDHOC_KeyUpdate( context ):
   new PRK_out = EDHOC_KDF( old PRK_out, 11, context, hash_length )
   new PRK_exporter = EDHOC_KDF( new PRK_out, 10, h'', hash_length )
</artwork>
      <t indent="0" pn="section-appendix.h-4">where hash_length denotes the output size in bytes of the EDHOC hash algorithm of the selected cipher suite.</t>
      <t indent="0" pn="section-appendix.h-5">   The EDHOC_KeyUpdate takes a context as input to enable binding of
   the updated PRK_out to some event that triggered the key update.  The
   Initiator and Responder need to agree on the context, which can,
   e.g., be a counter, a pseudorandom number, or a hash.  To provide
   forward secrecy, the old PRK_out and keys derived from it (old
   PRK_exporter and old application keys) must be deleted as soon as
   they are not needed.  When to delete the old keys and how to verify
   that they are not needed is up to the application. Note that the
   security properties depend on the type of context and the number
   of KeyUpdate iterations.</t>
      <t indent="0" pn="section-appendix.h-6">An application using EDHOC_KeyUpdate needs to store PRK_out. Compromise of PRK_out leads to compromise of all keying material derived with the EDHOC_Exporter since the last invocation of the EDHOC_KeyUpdate function.</t>
      <t indent="0" pn="section-appendix.h-7">While this key update method provides forward secrecy, it does not give as strong security properties as re-running EDHOC. EDHOC_KeyUpdate can be used to meet cryptographic limits and provide partial protection against key leakage, but it provides significantly weaker security properties than re-running EDHOC with ephemeral Diffie-Hellman. Even with frequent use of EDHOC_KeyUpdate, compromise of one session key compromises all future session keys, and an attacker therefore only needs to perform static key exfiltration <xref target="RFC7624" format="default" sectionFormat="of" derivedContent="RFC7624"/>, which is less complicated and has a lower risk profile than the dynamic case; see <xref target="sec-prop" format="default" sectionFormat="of" derivedContent="Section 9.1"/>.</t>
      <t indent="0" pn="section-appendix.h-8">A similar method to do a key update for OSCORE is KUDOS; see <xref target="I-D.ietf-core-oscore-key-update" format="default" sectionFormat="of" derivedContent="KUDOS"/>.</t>
    </section>
    <section anchor="example-protocol-state-machine" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.i">
      <name slugifiedName="name-example-protocol-state-mach">Example Protocol State Machine</name>
      <t indent="0" pn="section-appendix.i-1">This appendix describes an example protocol state machine for the Initiator and Responder. States are denoted in all capitals, and parentheses denote actions taken only in some circumstances.</t>
      <t indent="0" pn="section-appendix.i-2">Note that this state machine is just an example, and that details of processing are omitted. For example:</t>
      <ul spacing="normal" bare="false" empty="false" indent="3" pn="section-appendix.i-3">
        <li pn="section-appendix.i-3.1">when error messages are being sent (with one exception);</li>
        <li pn="section-appendix.i-3.2">how credentials and EAD are processed by EDHOC and the application in the RCVD state; and</li>
        <li pn="section-appendix.i-3.3">what verifications are made, which includes not only MACs and signatures.</li>
      </ul>
      <section anchor="initiator-state-machine" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.i.1">
        <name slugifiedName="name-initiator-state-machine">Initiator State Machine</name>
        <t indent="0" pn="section-appendix.i.1-1">The Initiator sends message_1, triggering the state machine to transition from START to WAIT_M2, and waits for message_2.</t>
        <t indent="0" pn="section-appendix.i.1-2">If the incoming message is an error message, then the Initiator transitions from WAIT_M2 to ABORTED. In case of error code 2 (Wrong Selected Cipher Suite), the Initiator remembers the supported cipher suites for this particular Responder and transitions from ABORTED to START. The message_1 that the Initiator subsequently sends takes into account the cipher suites supported by the Responder.</t>
        <t indent="0" pn="section-appendix.i.1-3">Upon receiving a non-error message, the Initiator transitions from WAIT_M2 to RCVD_M2 and processes the message. If a processing error occurs on message_2, then the Initiator transitions from RCVD_M2 to ABORTED. In case of successful processing of message_2, the Initiator transitions from RCVD_M2 to VRFD_M2.</t>
        <t indent="0" pn="section-appendix.i.1-4">The Initiator prepares and processes message_3 for sending. If any processing error is encountered, the Initiator transitions from VRFD_M2 to ABORTED. If message_3 is successfully sent, the Initiator transitions from VRFD_M2 to COMPLETED.</t>
        <t indent="0" pn="section-appendix.i.1-5">If the application profile includes message_4, then the Initiator waits for message_4. If the incoming message is an error message, then the Initiator transitions from COMPLETED to ABORTED. Upon receiving a non-error message, the Initiator transitions from COMPLETED (="WAIT_M4") to RCVD_M4 and processes the message. If a processing error occurs on message_4, then the Initiator transitions from RCVD_M4 to ABORTED. In case of successful processing of message_4, the Initiator transitions from RCVD_M4 to PERSISTED (="VRFD_M4").</t>
        <t indent="0" pn="section-appendix.i.1-6">If the application profile does not include message_4, then the Initiator waits for an incoming application message. If the decryption and verification of the application message is successful, then the Initiator transitions from COMPLETED to PERSISTED.</t>
        <figure align="left" suppress-title="false" pn="figure-12">
          <name slugifiedName="name-initiator-state-machine-2">Initiator State Machine</name>
          <artset pn="section-appendix.i.1-7.1">
            <artwork type="svg" align="center" pn="section-appendix.i.1-7.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 536 528" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                <path d="M 40,32 L 40,48" fill="none" stroke="black"/>
                <path d="M 40,128 L 40,432" fill="none" stroke="black"/>
                <path d="M 232,48 L 232,96" fill="none" stroke="black"/>
                <path d="M 232,128 L 232,176" fill="none" stroke="black"/>
                <path d="M 232,208 L 232,256" fill="none" stroke="black"/>
                <path d="M 232,288 L 232,336" fill="none" stroke="black"/>
                <path d="M 232,368 L 232,416" fill="none" stroke="black"/>
                <path d="M 232,448 L 232,496" fill="none" stroke="black"/>
                <path d="M 424,352 L 424,512" fill="none" stroke="black"/>
                <path d="M 72,112 L 200,112" fill="none" stroke="black"/>
                <path d="M 40,192 L 200,192" fill="none" stroke="black"/>
                <path d="M 40,272 L 200,272" fill="none" stroke="black"/>
                <path d="M 40,352 L 200,352" fill="none" stroke="black"/>
                <path d="M 296,352 L 424,352" fill="none" stroke="black"/>
                <path d="M 40,432 L 192,432" fill="none" stroke="black"/>
                <path d="M 296,512 L 424,512" fill="none" stroke="black"/>
                <polygon class="arrowhead" points="304,512 292,506.4 292,517.6" fill="black" transform="rotate(180,296,512)"/>
                <polygon class="arrowhead" points="240,496 228,490.4 228,501.6" fill="black" transform="rotate(90,232,496)"/>
                <polygon class="arrowhead" points="240,416 228,410.4 228,421.6" fill="black" transform="rotate(90,232,416)"/>
                <polygon class="arrowhead" points="240,336 228,330.4 228,341.6" fill="black" transform="rotate(90,232,336)"/>
                <polygon class="arrowhead" points="240,256 228,250.4 228,261.6" fill="black" transform="rotate(90,232,256)"/>
                <polygon class="arrowhead" points="240,176 228,170.4 228,181.6" fill="black" transform="rotate(90,232,176)"/>
                <polygon class="arrowhead" points="240,96 228,90.4 228,101.6" fill="black" transform="rotate(90,232,96)"/>
                <polygon class="arrowhead" points="80,112 68,106.4 68,117.6" fill="black" transform="rotate(180,72,112)"/>
                <polygon class="arrowhead" points="48,360 36,354.4 36,365.6" fill="black" transform="rotate(270,40,360)"/>
                <polygon class="arrowhead" points="48,280 36,274.4 36,285.6" fill="black" transform="rotate(270,40,280)"/>
                <polygon class="arrowhead" points="48,200 36,194.4 36,205.6" fill="black" transform="rotate(270,40,200)"/>
                <polygon class="arrowhead" points="48,128 36,122.4 36,133.6" fill="black" transform="rotate(270,40,128)"/>
                <g class="text">
                  <text x="48" y="36">-</text>
                  <text x="64" y="36">-</text>
                  <text x="80" y="36">-</text>
                  <text x="96" y="36">-</text>
                  <text x="112" y="36">-</text>
                  <text x="128" y="36">-</text>
                  <text x="144" y="36">-</text>
                  <text x="160" y="36">-</text>
                  <text x="176" y="36">-</text>
                  <text x="196" y="36">-&gt;</text>
                  <text x="232" y="36">START</text>
                  <text x="260" y="68">Send</text>
                  <text x="320" y="68">message_1</text>
                  <text x="40" y="84">|</text>
                  <text x="112" y="100">Receive</text>
                  <text x="168" y="100">error</text>
                  <text x="32" y="116">ABORTED</text>
                  <text x="240" y="116">WAIT_M2</text>
                  <text x="272" y="148">Receive</text>
                  <text x="344" y="148">message_2</text>
                  <text x="116" y="180">Processing</text>
                  <text x="184" y="180">error</text>
                  <text x="240" y="196">RCVD_M2</text>
                  <text x="268" y="228">Verify</text>
                  <text x="336" y="228">message_2</text>
                  <text x="116" y="260">Processing</text>
                  <text x="184" y="260">error</text>
                  <text x="240" y="276">VRFD_M2</text>
                  <text x="260" y="308">Send</text>
                  <text x="320" y="308">message_3</text>
                  <text x="108" y="340">(Receive</text>
                  <text x="172" y="340">error)</text>
                  <text x="248" y="356">COMPLETED</text>
                  <text x="276" y="388">(Receive</text>
                  <text x="356" y="388">message_4)</text>
                  <text x="112" y="420">(Processing</text>
                  <text x="188" y="420">error)</text>
                  <text x="464" y="420">(Verify</text>
                  <text x="240" y="436">(RCVD_M4)</text>
                  <text x="488" y="436">application</text>
                  <text x="476" y="452">message)</text>
                  <text x="272" y="468">(Verify</text>
                  <text x="348" y="468">message_4)</text>
                  <text x="248" y="516">PERSISTED</text>
                </g>
              </svg>
            </artwork>
            <artwork type="ascii-art" align="center" pn="section-appendix.i.1-7.1.2">
    +- - - - - - - - - -&gt; START
    |                       |
                            | Send message_1
    |                       |
          Receive error     v
ABORTED &lt;---------------- WAIT_M2
    ^                       |
    |                       | Receive message_2
    |                       |
    |    Processing error   v
    +-------------------- RCVD_M2
    ^                       |
    |                       | Verify message_2
    |                       |
    |    Processing error   v
    +-------------------- VRFD_M2
    ^                       |
    |                       | Send message_3
    |                       |
    |    (Receive error)    v
    +-------------------- COMPLETED ----------------+
    ^                       |                       |
    |                       | (Receive message_4)   |
    |                       |                       |
    |   (Processing error)  v                       | (Verify
    +------------------- (RCVD_M4)                  |  application
                            |                       |  message)
                            | (Verify message_4)    |
                            |                       |
                            v                       |
                          PERSISTED &lt;---------------+
</artwork>
          </artset>
        </figure>
      </section>
      <section anchor="responder-state-machine" numbered="true" removeInRFC="false" toc="include" pn="section-appendix.i.2">
        <name slugifiedName="name-responder-state-machine">Responder State Machine</name>
        <t indent="0" pn="section-appendix.i.2-1">Upon receiving message_1, the Responder transitions from START to RCVD_M1.</t>
        <t indent="0" pn="section-appendix.i.2-2">If a processing error occurs on message_1, the Responder transitions from RCVD_M1 to ABORTED. This includes sending an error message with error code 2 (Wrong Selected Cipher Suite) if the selected cipher suite in message_1 is not supported. In case of successful processing of message_1, the Responder transitions from RCVD_M1 to VRFD_M1.</t>
        <t indent="0" pn="section-appendix.i.2-3">The Responder prepares and processes message_2 for sending. If any processing error is encountered, the Responder transitions from VRFD_M1 to ABORTED. If message_2 is successfully sent, the Initiator transitions from VRFD_M2 to WAIT_M3 and waits for message_3.</t>
        <t indent="0" pn="section-appendix.i.2-4">If the incoming message is an error message, then the Responder transitions from WAIT_M3 to ABORTED.</t>
        <t indent="0" pn="section-appendix.i.2-5">Upon receiving message_3, the Responder transitions from WAIT_M3 to RCVD_M3. If a processing error occurs on message_3, the Responder transitions from RCVD_M3 to ABORTED. In case of successful processing of message_3, the Responder transitions from RCVD_M3 to COMPLETED (="VRFD_M3").</t>
        <t indent="0" pn="section-appendix.i.2-6">If the application profile includes message_4, the Responder prepares and processes message_4 for sending. If any processing error is encountered, the Responder transitions from COMPLETED to ABORTED.</t>
        <t indent="0" pn="section-appendix.i.2-7">If message_4 is successfully sent, or if the application profile does not include message_4, the Responder transitions from COMPLETED to PERSISTED.</t>
        <figure align="left" suppress-title="false" pn="figure-13">
          <name slugifiedName="name-responder-state-machine-2">Responder State Machine</name>
          <artset pn="section-appendix.i.2-8.1">
            <artwork type="svg" align="center" pn="section-appendix.i.2-8.1.1"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" viewBox="0 0 384 528" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
                <path d="M 40,128 L 40,432" fill="none" stroke="black"/>
                <path d="M 232,48 L 232,96" fill="none" stroke="black"/>
                <path d="M 232,128 L 232,176" fill="none" stroke="black"/>
                <path d="M 232,208 L 232,256" fill="none" stroke="black"/>
                <path d="M 232,288 L 232,336" fill="none" stroke="black"/>
                <path d="M 232,368 L 232,416" fill="none" stroke="black"/>
                <path d="M 232,448 L 232,496" fill="none" stroke="black"/>
                <path d="M 72,112 L 200,112" fill="none" stroke="black"/>
                <path d="M 40,192 L 200,192" fill="none" stroke="black"/>
                <path d="M 40,272 L 200,272" fill="none" stroke="black"/>
                <path d="M 40,352 L 200,352" fill="none" stroke="black"/>
                <path d="M 40,432 L 192,432" fill="none" stroke="black"/>
                <polygon class="arrowhead" points="240,496 228,490.4 228,501.6" fill="black" transform="rotate(90,232,496)"/>
                <polygon class="arrowhead" points="240,416 228,410.4 228,421.6" fill="black" transform="rotate(90,232,416)"/>
                <polygon class="arrowhead" points="240,336 228,330.4 228,341.6" fill="black" transform="rotate(90,232,336)"/>
                <polygon class="arrowhead" points="240,256 228,250.4 228,261.6" fill="black" transform="rotate(90,232,256)"/>
                <polygon class="arrowhead" points="240,176 228,170.4 228,181.6" fill="black" transform="rotate(90,232,176)"/>
                <polygon class="arrowhead" points="240,96 228,90.4 228,101.6" fill="black" transform="rotate(90,232,96)"/>
                <polygon class="arrowhead" points="80,112 68,106.4 68,117.6" fill="black" transform="rotate(180,72,112)"/>
                <polygon class="arrowhead" points="48,360 36,354.4 36,365.6" fill="black" transform="rotate(270,40,360)"/>
                <polygon class="arrowhead" points="48,280 36,274.4 36,285.6" fill="black" transform="rotate(270,40,280)"/>
                <polygon class="arrowhead" points="48,200 36,194.4 36,205.6" fill="black" transform="rotate(270,40,200)"/>
                <polygon class="arrowhead" points="48,128 36,122.4 36,133.6" fill="black" transform="rotate(270,40,128)"/>
                <g class="text">
                  <text x="232" y="36">START</text>
                  <text x="272" y="68">Receive</text>
                  <text x="344" y="68">message_1</text>
                  <text x="116" y="100">Processing</text>
                  <text x="184" y="100">error</text>
                  <text x="32" y="116">ABORTED</text>
                  <text x="240" y="116">RCVD_M1</text>
                  <text x="268" y="148">Verify</text>
                  <text x="336" y="148">message_1</text>
                  <text x="116" y="180">Processing</text>
                  <text x="184" y="180">error</text>
                  <text x="240" y="196">VRFD_M1</text>
                  <text x="260" y="228">Send</text>
                  <text x="320" y="228">message_2</text>
                  <text x="112" y="260">Receive</text>
                  <text x="168" y="260">error</text>
                  <text x="240" y="276">WAIT_M3</text>
                  <text x="272" y="308">Receive</text>
                  <text x="344" y="308">message_3</text>
                  <text x="116" y="340">Processing</text>
                  <text x="184" y="340">error</text>
                  <text x="240" y="356">RCVD_M3</text>
                  <text x="268" y="388">Verify</text>
                  <text x="336" y="388">message_3</text>
                  <text x="112" y="420">(Processing</text>
                  <text x="188" y="420">error)</text>
                  <text x="240" y="436">COMPLETED</text>
                  <text x="264" y="468">(Send</text>
                  <text x="332" y="468">message_4)</text>
                  <text x="240" y="516">PERSISTED</text>
                </g>
              </svg>
            </artwork>
            <artwork type="ascii-art" align="center" pn="section-appendix.i.2-8.1.2">
                          START
                            |
                            | Receive message_1
                            |
         Processing error   v
ABORTED &lt;---------------- RCVD_M1
    ^                       |
    |                       | Verify message_1
    |                       |
    |    Processing error   v
    +-------------------- VRFD_M1
    ^                       |
    |                       | Send message_2
    |                       |
    |     Receive error     v
    +-------------------- WAIT_M3
    ^                       |
    |                       | Receive message_3
    |                       |
    |    Processing error   v
    +-------------------- RCVD_M3
    ^                       |
    |                       | Verify message_3
    |                       |
    |   (Processing error)  v
    +------------------- COMPLETED
                            |
                            | (Send message_4)
                            |
                            v
                         PERSISTED
</artwork>
          </artset>
        </figure>
      </section>
    </section>
    <section numbered="false" anchor="acknowledgments" removeInRFC="false" toc="include" pn="section-appendix.j">
      <name slugifiedName="name-acknowledgments">Acknowledgments</name>
      <t indent="0" pn="section-appendix.j-1">The authors want to thank
<contact fullname="Christian Amsüss"/>,
<contact fullname="Karthikeyan Bhargavan"/>,
<contact fullname="Carsten Bormann"/>,
<contact fullname="Alessandro Bruni"/>,
<contact fullname="Timothy Claeys"/>,
<contact fullname="Baptiste Cottier"/>,
<contact fullname="Roman Danyliw"/>,
<contact fullname="Martin Disch"/>,
<contact fullname="Martin Duke"/>,
<contact fullname="Donald Eastlake 3rd"/>,
<contact fullname="Lars Eggert"/>,
<contact fullname="Stephen Farrell"/>,
<contact fullname="Loïc Ferreira"/>,
<contact fullname="Theis Grønbech Petersen"/>,
<contact fullname="Felix Günther"/>,
<contact fullname="Dan Harkins"/>,
<contact fullname="Klaus Hartke"/>,
<contact fullname="Russ Housley"/>,
<contact fullname="Stefan Hristozov"/>,
<contact fullname="Marc Ilunga"/>,
<contact fullname="Charlie Jacomme"/>,
<contact fullname="Elise Klein"/>,
<contact fullname="Erik Kline"/>,
<contact fullname="Steve Kremer"/>,
<contact fullname="Alexandros Krontiris"/>,
<contact fullname="Ilari Liusvaara"/>,
<contact fullname="Rafa Marín-López"/>,
<contact fullname="Kathleen Moriarty"/>,
<contact fullname="David Navarro"/>,
<contact fullname="Karl Norrman"/>,
<contact fullname="Salvador Pérez"/>,
<contact fullname="Radia Perlman"/>,
<contact fullname="David Pointcheval"/>,
<contact fullname="Maïwenn Racouchot"/>,
<contact fullname="Eric Rescorla"/>,
<contact fullname="Michael Richardson"/>,
<contact fullname="Thorvald Sahl Jørgensen"/>,
<contact fullname="Zaheduzzaman Sarker"/>,
<contact fullname="Jim Schaad"/>,
<contact fullname="Michael Scharf"/>,
<contact fullname="Carsten Schürmann"/>,
<contact fullname="John Scudder"/>,
<contact fullname="Ludwig Seitz"/>,
<contact fullname="Brian Sipos"/>,
<contact fullname="Stanislav Smyshlyaev"/>,
<contact fullname="Valery Smyslov"/>,
<contact fullname="Peter van der Stok"/>,
<contact fullname="Rene Struik"/>,
<contact fullname="Vaishnavi Sundararajan"/>,
<contact fullname="Erik Thormarker"/>,
<contact fullname="Marco Tiloca"/>,
<contact fullname="Sean Turner"/>,
<contact fullname="Michel Veillette"/>,
<contact fullname="Mališa Vučinić"/>,
<contact fullname="Paul Wouters"/>,
and
<contact fullname="Lei Yan"/>
      for reviewing and commenting on intermediate draft versions of this document.</t>
      <t indent="0" pn="section-appendix.j-2">We are especially indebted to the late <contact fullname="Jim Schaad"/> for his continuous review and implementation of draft versions of this document, as well as his work on other technologies such as COSE and OSCORE without which EDHOC would not have been.</t>
      <t indent="0" pn="section-appendix.j-3">Work on this document has in part been supported by the H2020 project SIFIS-Home (grant agreement 952652).</t>
    </section>
    <section anchor="authors-addresses" numbered="false" removeInRFC="false" toc="include" pn="section-appendix.k">
      <name slugifiedName="name-authors-addresses">Authors' Addresses</name>
      <author initials="G." surname="Selander" fullname="Göran Selander">
        <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
        <address>
          <postal>
            <code>164 80</code>
            <city>Stockholm</city>
            <country>Sweden</country>
          </postal>
          <email>goran.selander@ericsson.com</email>
        </address>
      </author>
      <author initials="J" surname="Preuß Mattsson" fullname="John Preuß Mattsson">
        <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
        <address>
          <postal>
            <code>164 80</code>
            <city>Stockholm</city>
            <country>Sweden</country>
          </postal>
          <email>john.mattsson@ericsson.com</email>
        </address>
      </author>
      <author initials="F." surname="Palombini" fullname="Francesca Palombini">
        <organization abbrev="Ericsson" showOnFrontPage="true">Ericsson AB</organization>
        <address>
          <postal>
            <code>164 80</code>
            <city>Stockholm</city>
            <country>Sweden</country>
          </postal>
          <email>francesca.palombini@ericsson.com</email>
        </address>
      </author>
    </section>
  </back>
</rfc>
